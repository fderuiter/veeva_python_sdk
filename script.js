/*
 * Veeva Vault API v25.1
 * The latest GA version of the Vault REST API.
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://github.com/OpenAPITools/openapi-generator
 *
 * Generator version: 7.14.0
 */


import http from "k6/http";
import { group, check, sleep } from "k6";

const BASE_URL = "{{vaultDNS}}/api/{version}";
// Sleep duration between successive requests.
// You might want to edit the value of this variable or remove calls to the sleep function on the script.
const SLEEP_DURATION = 0.1;
// Global variables should be initialized.
let authorization = "TODO_EDIT_THE_AUTHORIZATION";
let contentMD5 = "TODO_EDIT_THE_CONTENT-MD5";
let xVaultAPIClientID = "TODO_EDIT_THE_X-VAULTAPI-CLIENTID";
let xVaultAPIDescribeQuery = "TODO_EDIT_THE_X-VAULTAPI-DESCRIBEQUERY";
let xVaultAPINoTriggers = "TODO_EDIT_THE_X-VAULTAPI-NOTRIGGERS";
let range = "TODO_EDIT_THE_RANGE";
let xVaultAPIFilePartNumber = "TODO_EDIT_THE_X-VAULTAPI-FILEPARTNUMBER";
let contentType = "TODO_EDIT_THE_CONTENT-TYPE";
let contentType = "TODO_EDIT_THE_CONTENT TYPE";
let xVaultAPIMigrationMode = "TODO_EDIT_THE_X-VAULTAPI-MIGRATIONMODE";
let accept = "TODO_EDIT_THE_ACCEPT";

export default function() {
    group("/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}", () => {
        let objectRecordId = 'TODO_EDIT_THE_OBJECT_RECORD_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let objectName = 'TODO_EDIT_THE_OBJECT_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec
        let attachmentId = 'TODO_EDIT_THE_ATTACHMENT_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/vobjects/${object_name}/${object_record_id}/attachments/${attachment_id}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: 
        {
            let url = BASE_URL + `/vobjects/${object_name}/${object_record_id}/attachments/${attachment_id}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.put(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 3: 
        {
            let url = BASE_URL + `/vobjects/${object_name}/${object_record_id}/attachments/${attachment_id}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            // this is a DELETE method request - if params are also set, empty body must be passed
            let request = http.del(url, {} , params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/binders/{binder_id}/documents/{section_id}", () => {
        let binderId = 'TODO_EDIT_THE_BINDER_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let sectionId = 'TODO_EDIT_THE_SECTION_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/binders/${binder_id}/documents/${section_id}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Content-Type": `${contentType}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.put(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: 
        {
            let url = BASE_URL + `/objects/binders/${binder_id}/documents/${section_id}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            // this is a DELETE method request - if params are also set, empty body must be passed
            let request = http.del(url, {} , params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/file", () => {
        let docId = 'TODO_EDIT_THE_DOC_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let majorVersion = 'TODO_EDIT_THE_MAJOR_VERSION'; // specify value as there is no example value for this parameter in OpenAPI spec
        let minorVersion = 'TODO_EDIT_THE_MINOR_VERSION'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/documents/${doc_id}/versions/${major_version}/${minor_version}/file`;
            let params = {
                headers: {
                    "Accept": `${accept}`, "Authorization": `${authorization}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/binders/{binder_id}/sections/{node_id}/binding_rule", () => {
        let binderId = 'TODO_EDIT_THE_BINDER_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let nodeId = 'TODO_EDIT_THE_NODE_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/binders/${binder_id}/sections/${node_id}/binding_rule`;
            let params = {
                headers: {
                    "Content-Type": `${contentType}`, "Accept": `${accept}`, "Authorization": `${authorization}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.put(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/documents/batch/actions/reclassify", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/documents/batch/actions/reclassify`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Content-Type": `${contentType}`, "Accept": `${accept}`, "X-VaultAPI-MigrationMode": `${xVaultAPIMigrationMode}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.put(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/metadata/audittrail/{audit_trail_type}", () => {
        let auditTrailType = 'TODO_EDIT_THE_AUDIT_TRAIL_TYPE'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/metadata/audittrail/${audit_trail_type}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/uicode/distributions/{distribution_name}/code", () => {
        let distributionName = 'TODO_EDIT_THE_DISTRIBUTION_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/uicode/distributions/${distribution_name}/code`;
            let params = {
                headers: {
                    "Accept": `${accept}`, "Authorization": `${authorization}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/configuration/{component_type}", () => {
        let componentType = 'TODO_EDIT_THE_COMPONENT_TYPE'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/configuration/${component_type}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/documents/roles/batch", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/documents/roles/batch`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: 
        {
            let url = BASE_URL + `/objects/documents/roles/batch`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Content-Type": `${contentType}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            // this is a DELETE method request - if params are also set, empty body must be passed
            let request = http.del(url, {} , params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/vobjects/{object_name}/{object_record_id}/actions", () => {
        let objectRecordId = 'TODO_EDIT_THE_OBJECT_RECORD_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let loc = 'true'; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let objectName = 'TODO_EDIT_THE_OBJECT_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/vobjects/${object_name}/${object_record_id}/actions?loc=${loc}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/query/components", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/query/components`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/metadata/objects/documents/types", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/metadata/objects/documents/types`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/file", () => {
        let docId = 'TODO_EDIT_THE_DOC_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let majorVersion = 'TODO_EDIT_THE_MAJOR_VERSION'; // specify value as there is no example value for this parameter in OpenAPI spec
        let minorVersion = 'TODO_EDIT_THE_MINOR_VERSION'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/documents/${doc_id}/versions/${major_version}/${minor_version}/annotations/file`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: 
        {
            let url = BASE_URL + `/objects/documents/${doc_id}/versions/${major_version}/${minor_version}/annotations/file`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/export-video-annotations", () => {
        let docId = 'TODO_EDIT_THE_DOC_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let majorVersion = 'TODO_EDIT_THE_MAJOR_VERSION'; // specify value as there is no example value for this parameter in OpenAPI spec
        let minorVersion = 'TODO_EDIT_THE_MINOR_VERSION'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/documents/${doc_id}/versions/${major_version}/${minor_version}/export-video-annotations`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/objectworkflows/tasks/{task_id}/actions/{task_action}", () => {
        let taskAction = 'TODO_EDIT_THE_TASK_ACTION'; // specify value as there is no example value for this parameter in OpenAPI spec
        let loc = 'TODO_EDIT_THE_LOC'; // specify value as there is no example value for this parameter in OpenAPI spec
        let taskId = 'TODO_EDIT_THE_TASK_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/objectworkflows/tasks/${task_id}/actions/${task_action}?loc=${loc}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/users/", () => {
        let vaults = 'all'; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let excludeAppLicensing = 'TODO_EDIT_THE_EXCLUDE_APP_LICENSING'; // specify value as there is no example value for this parameter in OpenAPI spec
        let excludeVaultMembership = 'TODO_EDIT_THE_EXCLUDE_VAULT_MEMBERSHIP'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/users/?vaults=${vaults}&exclude_vault_membership=${exclude_vault_membership}&exclude_app_licensing=${exclude_app_licensing}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/binders/{binder_id}/sections", () => {
        let binderId = 'TODO_EDIT_THE_BINDER_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/binders/${binder_id}/sections`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/metadata/objects/binders/templates", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/metadata/objects/binders/templates`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/code/{class_name}/disable", () => {
        let className = 'TODO_EDIT_THE_CLASS_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/code/${class_name}/disable`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.put(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/objectworkflows/actions", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/objectworkflows/actions`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/metadata/objects/documents/events/{event_type}/types/{event_subtype}", () => {
        let eventSubtype = 'TODO_EDIT_THE_EVENT_SUBTYPE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let eventType = 'TODO_EDIT_THE_EVENT_TYPE'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/metadata/objects/documents/events/${event_type}/types/${event_subtype}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/services/jobs/{job_id}/summary", () => {
        let jobId = 'TODO_EDIT_THE_JOB_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/services/jobs/${job_id}/summary`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/scim/v2/Schemas", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/scim/v2/Schemas`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/messages/{message_type}/actions/import", () => {
        let messageType = 'TODO_EDIT_THE_MESSAGE_TYPE'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/messages/${message_type}/actions/import`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/auth/discovery", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/auth/discovery`;
            let params = {
                headers: {
                    "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/documents/{doc_id}/version/{major_version}/{minor_version}/attachments", () => {
        let docId = 'TODO_EDIT_THE_DOC_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let majorVersion = 'TODO_EDIT_THE_MAJOR_VERSION'; // specify value as there is no example value for this parameter in OpenAPI spec
        let minorVersion = 'TODO_EDIT_THE_MINOR_VERSION'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/documents/${doc_id}/version/${major_version}/${minor_version}/attachments`;
            let params = {
                headers: {
                    "Accept": `${accept}`, "Authorization": `${authorization}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/vobjects/{object_name}", () => {
        let objectName = 'TODO_EDIT_THE_OBJECT_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/vobjects/${object_name}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Content-Type": `${contentType}`, "Accept": `${accept}`, "X-VaultAPI-MigrationMode": `${xVaultAPIMigrationMode}`, "X-VaultAPI-NoTriggers": `${xVaultAPINoTriggers}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.put(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: 
        {
            let url = BASE_URL + `/vobjects/${object_name}?idParam=${idParam}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Content-Type": `${contentType}`, "Accept": `${accept}`, "X-VaultAPI-MigrationMode": `${xVaultAPIMigrationMode}`, "X-VaultAPI-NoTriggers": `${xVaultAPINoTriggers}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 3: 
        {
            let url = BASE_URL + `/vobjects/${object_name}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Content-Type": `${contentType}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            // this is a DELETE method request - if params are also set, empty body must be passed
            let request = http.del(url, {} , params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/attachments/{attachment_id}/versions/{attachment_version}/file", () => {
        let docId = 'TODO_EDIT_THE_DOC_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let attachmentId = 'TODO_EDIT_THE_ATTACHMENT_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let majorVersion = 'TODO_EDIT_THE_MAJOR_VERSION'; // specify value as there is no example value for this parameter in OpenAPI spec
        let minorVersion = 'TODO_EDIT_THE_MINOR_VERSION'; // specify value as there is no example value for this parameter in OpenAPI spec
        let attachmentVersion = 'TODO_EDIT_THE_ATTACHMENT_VERSION'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/documents/${doc_id}/versions/${major_version}/${minor_version}/attachments/${attachment_id}/versions/${attachment_version}/file`;
            let params = {
                headers: {
                    "Accept": `${accept}`, "Authorization": `${authorization}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}/entry_requirements", () => {
        let nameV = 'TODO_EDIT_THE_NAME__V'; // specify value as there is no example value for this parameter in OpenAPI spec
        let id = 'TODO_EDIT_THE_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let majorVersion = 'TODO_EDIT_THE_MAJOR_VERSION'; // specify value as there is no example value for this parameter in OpenAPI spec
        let minorVersion = 'TODO_EDIT_THE_MINOR_VERSION'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/documents/${id}/versions/${major_version}/${minor_version}/lifecycle_actions/${name__v}/entry_requirements`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships", () => {
        let docId = 'TODO_EDIT_THE_DOC_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let majorVersion = 'TODO_EDIT_THE_MAJOR_VERSION'; // specify value as there is no example value for this parameter in OpenAPI spec
        let minorVersion = 'TODO_EDIT_THE_MINOR_VERSION'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/documents/${doc_id}/versions/${major_version}/${minor_version}/relationships`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: 
        {
            let url = BASE_URL + `/objects/documents/${doc_id}/versions/${major_version}/${minor_version}/relationships`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/services/file_staging/items/{item}", () => {
        let item = 'TODO_EDIT_THE_ITEM'; // specify value as there is no example value for this parameter in OpenAPI spec
        let formatResult = 'TODO_EDIT_THE_FORMAT_RESULT'; // specify value as there is no example value for this parameter in OpenAPI spec
        let limit = 'TODO_EDIT_THE_LIMIT'; // specify value as there is no example value for this parameter in OpenAPI spec
        let recursive = 'TODO_EDIT_THE_RECURSIVE'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/services/file_staging/items/${item}?recursive=${recursive}&limit=${limit}&format_result=${format_result}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: 
        {
            let url = BASE_URL + `/services/file_staging/items/${item}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.put(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 3: 
        {
            let url = BASE_URL + `/services/file_staging/items/${item}?recursive=${recursive}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            // this is a DELETE method request - if params are also set, empty body must be passed
            let request = http.del(url, {} , params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/object/workflow/actions/replaceworkflowowner", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/object/workflow/actions/replaceworkflowowner`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/api/mdl/components/{component_type_and_record_name}/files", () => {
        let componentTypeAndRecordName = 'TODO_EDIT_THE_COMPONENT_TYPE_AND_RECORD_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/api/mdl/components/${component_type_and_record_name}/files`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/services/queues/{queue_name}/actions/reset", () => {
        let queueName = 'TODO_EDIT_THE_QUEUE_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/services/queues/${queue_name}/actions/reset`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.put(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/binders/lifecycle_actions/{user_action_name}", () => {
        let userActionName = 'TODO_EDIT_THE_USER_ACTION_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/binders/lifecycle_actions/${user_action_name}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Content-Type": `${contentType}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.put(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/documents/tokens", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/documents/tokens`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Content-Type": `${contentType}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/vobject/vault_package__v/{package_id}/actions/deploy", () => {
        let packageId = 'TODO_EDIT_THE_PACKAGE_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/vobject/vault_package__v/${package_id}/actions/deploy`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Content-Type": `${contentType}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/logs/code/runtime", () => {
        let date = 'YYYY-MM-DD'; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let logFormat = 'TODO_EDIT_THE_LOG_FORMAT'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/logs/code/runtime?date=${date}&log_format=${log_format}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/metadata/objects/documents/annotations/types/{annotation_type}", () => {
        let annotationType = 'TODO_EDIT_THE_ANNOTATION_TYPE'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/metadata/objects/documents/annotations/types/${annotation_type}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/documents/annotations/replies/batch", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/documents/annotations/replies/batch`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Content-Type": `${contentType}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/services/loader/{job_id}/tasks/{task_id}/successlog", () => {
        let jobId = 'TODO_EDIT_THE_JOB_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let taskId = 'TODO_EDIT_THE_TASK_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/services/loader/${job_id}/tasks/${task_id}/successlog`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/documents/actions/{workflow_name}", () => {
        let loc = 'true'; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let workflowName = 'TODO_EDIT_THE_WORKFLOW_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/documents/actions/${workflow_name}?loc=${loc}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: 
        {
            let url = BASE_URL + `/objects/documents/actions/${workflow_name}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/metadata/objects/documents/templates", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/metadata/objects/documents/templates`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/documents/relationships/batch", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/documents/relationships/batch`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: 
        {
            let url = BASE_URL + `/objects/documents/relationships/batch`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            // this is a DELETE method request - if params are also set, empty body must be passed
            let request = http.del(url, {} , params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/documents/{doc_id}/attachments/file", () => {
        let docId = 'TODO_EDIT_THE_DOC_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/documents/${doc_id}/attachments/file`;
            let params = {
                headers: {
                    "Accept": `${accept}`, "Authorization": `${authorization}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/services/file_staging/upload", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/services/file_staging/upload`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/documents/lifecycle_actions/{user_action_name}", () => {
        let userActionName = 'TODO_EDIT_THE_USER_ACTION_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/documents/lifecycle_actions/${user_action_name}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Content-Type": `${contentType}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.put(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/sandbox/snapshot/{api_name}/actions/upgrade", () => {
        let apiName = 'TODO_EDIT_THE_API_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/sandbox/snapshot/${api_name}/actions/upgrade`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/users/{user_id}", () => {
        let domain = 'true'; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let userId = 'TODO_EDIT_THE_USER_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/users/${user_id}?domain=${domain}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            // this is a DELETE method request - if params are also set, empty body must be passed
            let request = http.del(url, {} , params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/vobjects/{object_name}/{object_record_id}/actions/cascadedelete", () => {
        let objectRecordId = 'TODO_EDIT_THE_OBJECT_RECORD_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let objectName = 'TODO_EDIT_THE_OBJECT_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/vobjects/${object_name}/${object_record_id}/actions/cascadedelete`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/services/loader/{job_id}/tasks/{task_id}/failurelog", () => {
        let jobId = 'TODO_EDIT_THE_JOB_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let taskId = 'TODO_EDIT_THE_TASK_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/services/loader/${job_id}/tasks/${task_id}/failurelog`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/users/me/permissions", () => {
        let filter = 'TODO_EDIT_THE_FILTER'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/users/me/permissions?filter=${filter}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/configuration/{object_name_and_object_type}", () => {
        let loc = 'TODO_EDIT_THE_LOC'; // specify value as there is no example value for this parameter in OpenAPI spec
        let objectNameAndObjectType = 'TODO_EDIT_THE_OBJECT_NAME_AND_OBJECT_TYPE'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/configuration/${object_name_and_object_type}?loc=${loc}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/metadata/objects/documents/lock", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/metadata/objects/documents/lock`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/documents/{doc_id}/versions", () => {
        let docId = 'TODO_EDIT_THE_DOC_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/documents/${doc_id}/versions`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/metadata/objects/groups", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/metadata/objects/groups`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/domains", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/domains`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/code", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/code`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.put(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/metadata/vobjects/{object_name}/fields/{object_field_name}", () => {
        let loc = 'true'; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let objectFieldName = 'TODO_EDIT_THE_OBJECT_FIELD_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec
        let objectName = 'TODO_EDIT_THE_OBJECT_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/metadata/vobjects/${object_name}/fields/${object_field_name}?loc=${loc}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/logs/code/debug/{id}/actions/reset", () => {
        let id = 'TODO_EDIT_THE_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/logs/code/debug/${id}/actions/reset`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: 
        {
            let url = BASE_URL + `/logs/code/debug/${id}/actions/reset`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            // this is a DELETE method request - if params are also set, empty body must be passed
            let request = http.del(url, {} , params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}/file", () => {
        let objectRecordId = 'TODO_EDIT_THE_OBJECT_RECORD_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let objectName = 'TODO_EDIT_THE_OBJECT_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec
        let attachmentId = 'TODO_EDIT_THE_ATTACHMENT_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let attachmentVersion = 'TODO_EDIT_THE_ATTACHMENT_VERSION'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/vobjects/${object_name}/${object_record_id}/attachments/${attachment_id}/versions/${attachment_version}/file`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/services/directdata/files/{name}", () => {
        let name = 'TODO_EDIT_THE_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/services/directdata/files/${name}`;
            let params = {
                headers: {
                    "Accept": `${accept}`, "Authorization": `${authorization}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/deletions/documents", () => {
        let endDate = 'TODO_EDIT_THE_END_DATE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let startDate = 'TODO_EDIT_THE_START_DATE'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/deletions/documents?start_date=${start_date}&end_date=${end_date}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Content-Type": `${contentType}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/objectworkflows/actions/{workflow_name}", () => {
        let workflowName = 'TODO_EDIT_THE_WORKFLOW_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/objectworkflows/actions/${workflow_name}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: 
        {
            let url = BASE_URL + `/objects/objectworkflows/actions/${workflow_name}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Content-Type": `${contentType}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/documents/{doc_id}/versions/{major_version}/{minor_version}", () => {
        let docId = 'TODO_EDIT_THE_DOC_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let majorVersion = 'TODO_EDIT_THE_MAJOR_VERSION'; // specify value as there is no example value for this parameter in OpenAPI spec
        let minorVersion = 'TODO_EDIT_THE_MINOR_VERSION'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/documents/${doc_id}/versions/${major_version}/${minor_version}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: 
        {
            let url = BASE_URL + `/objects/documents/${doc_id}/versions/${major_version}/${minor_version}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Content-Type": `${contentType}`, "Accept": `${accept}`, "X-VaultAPI-MigrationMode": `${xVaultAPIMigrationMode}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.put(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 3: 
        {
            let url = BASE_URL + `/objects/documents/${doc_id}/versions/${major_version}/${minor_version}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            // this is a DELETE method request - if params are also set, empty body must be passed
            let request = http.del(url, {} , params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/scim/v2/Schemas/{id}", () => {
        let id = 'TODO_EDIT_THE_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/scim/v2/Schemas/${id}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/uicode/distributions/{distribution_name}", () => {
        let distributionName = 'TODO_EDIT_THE_DISTRIBUTION_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/uicode/distributions/${distribution_name}`;
            let params = {
                headers: {
                    "Accept": `${accept}`, "Authorization": `${authorization}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: 
        {
            let url = BASE_URL + `/uicode/distributions/${distribution_name}`;
            let params = {
                headers: {
                    "Accept": `${accept}`, "Authorization": `${authorization}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            // this is a DELETE method request - if params are also set, empty body must be passed
            let request = http.del(url, {} , params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/vobjects/{object_name}/attachments/batch", () => {
        let objectName = 'TODO_EDIT_THE_OBJECT_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/vobjects/${object_name}/attachments/batch`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.put(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: 
        {
            let url = BASE_URL + `/vobjects/${object_name}/attachments/batch`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 3: 
        {
            let url = BASE_URL + `/vobjects/${object_name}/attachments/batch?idParam=${idParam}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            // this is a DELETE method request - if params are also set, empty body must be passed
            let request = http.del(url, {} , params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/documents/{doc_id}/annotations/file", () => {
        let docId = 'TODO_EDIT_THE_DOC_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/documents/${doc_id}/annotations/file`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: 
        {
            let url = BASE_URL + `/objects/documents/${doc_id}/annotations/file`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions", () => {
        let id = 'TODO_EDIT_THE_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let majorVersion = 'TODO_EDIT_THE_MAJOR_VERSION'; // specify value as there is no example value for this parameter in OpenAPI spec
        let minorVersion = 'TODO_EDIT_THE_MINOR_VERSION'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/binders/${id}/versions/${major_version}/${minor_version}/lifecycle_actions`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/documents", () => {
        let search = '{keyword}'; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let scope = 'contents'; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let limit = 'TODO_EDIT_THE_LIMIT'; // specify value as there is no example value for this parameter in OpenAPI spec
        let start = 'TODO_EDIT_THE_START'; // specify value as there is no example value for this parameter in OpenAPI spec
        let versionscope = 'all'; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let sort = 'TODO_EDIT_THE_SORT'; // specify value as there is no example value for this parameter in OpenAPI spec
        let namedFilter = 'My Documents'; // extracted from 'example' field defined at the parameter level of OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/documents?named_filter=${named_filter}&scope=${scope}&versionscope=${versionscope}&search=${search}&limit=${limit}&sort=${sort}&start=${start}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: 
        {
            let url = BASE_URL + `/objects/documents`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-MigrationMode": `${xVaultAPIMigrationMode}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/code/profiler", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/code/profiler`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: 
        {
            let url = BASE_URL + `/code/profiler`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Content-Type": `${contentType}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}", () => {
        let docId = 'TODO_EDIT_THE_DOC_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let majorVersion = 'TODO_EDIT_THE_MAJOR_VERSION'; // specify value as there is no example value for this parameter in OpenAPI spec
        let minorVersion = 'TODO_EDIT_THE_MINOR_VERSION'; // specify value as there is no example value for this parameter in OpenAPI spec
        let relationshipId = 'TODO_EDIT_THE_RELATIONSHIP_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/documents/${doc_id}/versions/${major_version}/${minor_version}/relationships/${relationship_id}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: 
        {
            let url = BASE_URL + `/objects/documents/${doc_id}/versions/${major_version}/${minor_version}/relationships/${relationship_id}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            // this is a DELETE method request - if params are also set, empty body must be passed
            let request = http.del(url, {} , params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/services/vobject/vault_package__v/{package_id}/actions/validate", () => {
        let packageId = 'TODO_EDIT_THE_PACKAGE_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/services/vobject/vault_package__v/${package_id}/actions/validate`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/code/profiler/{session_name}/actions/end", () => {
        let sessionName = 'TODO_EDIT_THE_SESSION_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/code/profiler/${session_name}/actions/end`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/vobjects/merges/{job_id}/status", () => {
        let jobId = 'TODO_EDIT_THE_JOB_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/vobjects/merges/${job_id}/status`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/objectworkflows/tasks/{task_id}/actions/complete", () => {
        let taskId = 'TODO_EDIT_THE_TASK_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/objectworkflows/tasks/${task_id}/actions/complete`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/api/mdl/execute", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/api/mdl/execute`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/documents/lifecycle_actions", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/documents/lifecycle_actions`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/vault/actions/configreport", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/vault/actions/configreport`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/documents/actions", () => {
        let loc = 'true'; // extracted from 'example' field defined at the parameter level of OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/documents/actions?loc=${loc}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/api/mdl/files", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/api/mdl/files`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/binders/actions/export/{job_id}/results", () => {
        let jobId = 'TODO_EDIT_THE_JOB_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/binders/actions/export/${job_id}/results`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/metadata/objects/users", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/metadata/objects/users`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/vobjects/{object_name}/{object_record_id}/attachments", () => {
        let objectRecordId = 'TODO_EDIT_THE_OBJECT_RECORD_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let objectName = 'TODO_EDIT_THE_OBJECT_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/vobjects/${object_name}/${object_record_id}/attachments`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: 
        {
            let url = BASE_URL + `/vobjects/${object_name}/${object_record_id}/attachments`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/object/workflow/actions/cancelworkflows", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/object/workflow/actions/cancelworkflows`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/delegation/login", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/delegation/login`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/documents/batch/actions/fileextract", () => {
        let renditions = 'false'; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let source = 'true'; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let allversions = 'true'; // extracted from 'example' field defined at the parameter level of OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/documents/batch/actions/fileextract?source=${source}&renditions=${renditions}&allversions=${allversions}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Content-Type": `${contentType}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/auth", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/auth`;
            let params = {
                headers: {
                    "Content-Type": `${contentType}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/documents/attachments/batch", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/documents/attachments/batch`;
            let params = {
                headers: {
                    "Accept": `${accept}`, "Authorization": `${authorization}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.put(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: 
        {
            let url = BASE_URL + `/objects/documents/attachments/batch`;
            let params = {
                headers: {
                    "Accept": `${accept}`, "Authorization": `${authorization}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 3: 
        {
            let url = BASE_URL + `/objects/documents/attachments/batch`;
            let params = {
                headers: {
                    "Accept": `${accept}`, "Authorization": `${authorization}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            // this is a DELETE method request - if params are also set, empty body must be passed
            let request = http.del(url, {} , params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}/entry_requirements", () => {
        let nameV = 'TODO_EDIT_THE_NAME__V'; // specify value as there is no example value for this parameter in OpenAPI spec
        let id = 'TODO_EDIT_THE_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let majorVersion = 'TODO_EDIT_THE_MAJOR_VERSION'; // specify value as there is no example value for this parameter in OpenAPI spec
        let minorVersion = 'TODO_EDIT_THE_MINOR_VERSION'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/binders/${id}/versions/${major_version}/${minor_version}/lifecycle_actions/${name__v}/entry_requirements`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/sandbox/actions/buildproduction", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/sandbox/actions/buildproduction`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/services/file_staging/upload/", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/services/file_staging/upload/`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/objectworkflows/tasks/{task_id}/actions/mdwaccept", () => {
        let taskId = 'TODO_EDIT_THE_TASK_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/objectworkflows/tasks/${task_id}/actions/mdwaccept`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/picklists", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/picklists`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/binders/templates/{template_name}/bindernodes", () => {
        let templateName = 'TODO_EDIT_THE_TEMPLATE_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/binders/templates/${template_name}/bindernodes`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: 
        {
            let url = BASE_URL + `/objects/binders/templates/${template_name}/bindernodes`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.put(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 3: 
        {
            let url = BASE_URL + `/objects/binders/templates/${template_name}/bindernodes`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/vobjects/{object_name}/{object_record_id}/actions/deepcopy", () => {
        let objectRecordId = 'TODO_EDIT_THE_OBJECT_RECORD_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let objectName = 'TODO_EDIT_THE_OBJECT_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/vobjects/${object_name}/${object_record_id}/actions/deepcopy`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/sandbox", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/sandbox`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: 
        {
            let url = BASE_URL + `/objects/sandbox`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/vobjects/edl_item__v/actions/createplaceholder", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/vobjects/edl_item__v/actions/createplaceholder`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Content-Type": `${contentType}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/sandbox/actions/recheckusage", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/sandbox/actions/recheckusage`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/services/jobs/{job_id}", () => {
        let jobId = 'TODO_EDIT_THE_JOB_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/services/jobs/${job_id}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/documents/versions/batch/actions/fileextract", () => {
        let renditions = 'false'; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let source = 'true'; // extracted from 'example' field defined at the parameter level of OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/documents/versions/batch/actions/fileextract?source=${source}&renditions=${renditions}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Content-Type": `${contentType}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/binders/{binder_id}/actions/export", () => {
        let binderId = 'TODO_EDIT_THE_BINDER_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let attachments = 'all'; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let renditiontype = 'viewable_rendition__v'; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let docversion = 'major'; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let docfield = 'false'; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let source = 'true'; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let export = 'name__v,title__v,document_number__v'; // extracted from 'example' field defined at the parameter level of OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/binders/${binder_id}/actions/export?source=${source}&renditiontype=${renditiontype}&docversion=${docversion}&attachments=${attachments}&export=${export}&docfield=${docfield}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/scim/v2/Me", () => {
        let attributes = 'TODO_EDIT_THE_ATTRIBUTES'; // specify value as there is no example value for this parameter in OpenAPI spec
        let excludedAttributes = 'TODO_EDIT_THE_EXCLUDEDATTRIBUTES'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/scim/v2/Me?attributes=${attributes}&excludedAttributes=${excludedAttributes}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: 
        {
            let url = BASE_URL + `/scim/v2/Me?attributes=${attributes}&excludedAttributes=${excludedAttributes}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.put(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/scim/v2/{type}/{id}", () => {
        let attributes = 'TODO_EDIT_THE_ATTRIBUTES'; // specify value as there is no example value for this parameter in OpenAPI spec
        let id = 'TODO_EDIT_THE_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let type = 'TODO_EDIT_THE_TYPE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let excludedAttributes = 'TODO_EDIT_THE_EXCLUDEDATTRIBUTES'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/scim/v2/${type}/${id}?attributes=${attributes}&excludedAttributes=${excludedAttributes}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/services/loader/load", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/services/loader/load`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Content-Type": `${contentType}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/services/jobs/{job_id}/tasks", () => {
        let jobId = 'TODO_EDIT_THE_JOB_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/services/jobs/${job_id}/tasks`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/scim/v2/Users/{id}", () => {
        let filter = 'TODO_EDIT_THE_FILTER'; // specify value as there is no example value for this parameter in OpenAPI spec
        let attributes = 'TODO_EDIT_THE_ATTRIBUTES'; // specify value as there is no example value for this parameter in OpenAPI spec
        let id = 'TODO_EDIT_THE_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let excludedAttributes = 'TODO_EDIT_THE_EXCLUDEDATTRIBUTES'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/scim/v2/Users/${id}?filter=${filter}&attributes=${attributes}&excludedAttributes=${excludedAttributes}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: 
        {
            let url = BASE_URL + `/scim/v2/Users/${id}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.put(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/logs/code/debug/{id}", () => {
        let id = 'TODO_EDIT_THE_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/logs/code/debug/${id}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/sandbox/snapshot/{api_name}", () => {
        let apiName = 'TODO_EDIT_THE_API_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/sandbox/snapshot/${api_name}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            // this is a DELETE method request - if params are also set, empty body must be passed
            let request = http.del(url, {} , params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/api/mdl/components/{component_type_and_record_name}", () => {
        let componentTypeAndRecordName = 'TODO_EDIT_THE_COMPONENT_TYPE_AND_RECORD_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/api/mdl/components/${component_type_and_record_name}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/documents/{doc_id}/{major_version}/{minor_version}/attachments/file", () => {
        let docId = 'TODO_EDIT_THE_DOC_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let majorVersion = 'TODO_EDIT_THE_MAJOR_VERSION'; // specify value as there is no example value for this parameter in OpenAPI spec
        let minorVersion = 'TODO_EDIT_THE_MINOR_VERSION'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/documents/${doc_id}/${major_version}/${minor_version}/attachments/file`;
            let params = {
                headers: {
                    "Accept": `${accept}`, "Authorization": `${authorization}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/code/profiler/{session_name}/results", () => {
        let sessionName = 'TODO_EDIT_THE_SESSION_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/code/profiler/${session_name}/results`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/metadata/objects/documents/annotations/placemarks/types/{placemark_type}", () => {
        let placemarkType = 'TODO_EDIT_THE_PLACEMARK_TYPE'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/metadata/objects/documents/annotations/placemarks/types/${placemark_type}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/sandbox/snapshot/{api_name}/actions/update", () => {
        let apiName = 'TODO_EDIT_THE_API_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/sandbox/snapshot/${api_name}/actions/update`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships", () => {
        let binderId = 'TODO_EDIT_THE_BINDER_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let majorVersion = 'TODO_EDIT_THE_MAJOR_VERSION'; // specify value as there is no example value for this parameter in OpenAPI spec
        let minorVersion = 'TODO_EDIT_THE_MINOR_VERSION'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/binders/${binder_id}/versions/${major_version}/${minor_version}/relationships`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Content-Type": `${contentType}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/vobjects/merges/{job_id}/results", () => {
        let jobId = 'TODO_EDIT_THE_JOB_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/vobjects/merges/${job_id}/results`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/services/queues/{queue_name}/actions/disable_delivery", () => {
        let queueName = 'TODO_EDIT_THE_QUEUE_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/services/queues/${queue_name}/actions/disable_delivery`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.put(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/documents/renditions/batch", () => {
        let largeSizeAsset = 'TODO_EDIT_THE_LARGESIZEASSET'; // specify value as there is no example value for this parameter in OpenAPI spec
        let idParam = 'TODO_EDIT_THE_IDPARAM'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/documents/renditions/batch?idParam=${idParam}&largeSizeAsset=${largeSizeAsset}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-MigrationMode": `${xVaultAPIMigrationMode}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: 
        {
            let url = BASE_URL + `/objects/documents/renditions/batch`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            // this is a DELETE method request - if params are also set, empty body must be passed
            let request = http.del(url, {} , params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations", () => {
        let offset = 'TODO_EDIT_THE_OFFSET'; // specify value as there is no example value for this parameter in OpenAPI spec
        let docId = 'TODO_EDIT_THE_DOC_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let limit = 'TODO_EDIT_THE_LIMIT'; // specify value as there is no example value for this parameter in OpenAPI spec
        let majorVersion = 'TODO_EDIT_THE_MAJOR_VERSION'; // specify value as there is no example value for this parameter in OpenAPI spec
        let minorVersion = 'TODO_EDIT_THE_MINOR_VERSION'; // specify value as there is no example value for this parameter in OpenAPI spec
        let paginationId = 'TODO_EDIT_THE_PAGINATION_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let annotationTypes = 'TODO_EDIT_THE_ANNOTATION_TYPES'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/documents/${doc_id}/versions/${major_version}/${minor_version}/annotations?limit=${limit}&offset=${offset}&annotation_types=${annotation_types}&pagination_id=${pagination_id}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/api/", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/api/`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/sections/{section_id}", () => {
        let binderId = 'TODO_EDIT_THE_BINDER_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let sectionId = 'TODO_EDIT_THE_SECTION_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let majorVersion = 'TODO_EDIT_THE_MAJOR_VERSION'; // specify value as there is no example value for this parameter in OpenAPI spec
        let minorVersion = 'TODO_EDIT_THE_MINOR_VERSION'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/binders/${binder_id}/versions/${major_version}/${minor_version}/sections/${section_id}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/binders/{id}/roles/{role_name}", () => {
        let roleName = 'TODO_EDIT_THE_ROLE_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec
        let id = 'TODO_EDIT_THE_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/binders/${id}/roles/${role_name}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/scim/v2/Users", () => {
        let filter = 'TODO_EDIT_THE_FILTER'; // specify value as there is no example value for this parameter in OpenAPI spec
        let startIndex = 'TODO_EDIT_THE_STARTINDEX'; // specify value as there is no example value for this parameter in OpenAPI spec
        let sortOrder = 'TODO_EDIT_THE_SORTORDER'; // specify value as there is no example value for this parameter in OpenAPI spec
        let count = 'TODO_EDIT_THE_COUNT'; // specify value as there is no example value for this parameter in OpenAPI spec
        let attributes = 'TODO_EDIT_THE_ATTRIBUTES'; // specify value as there is no example value for this parameter in OpenAPI spec
        let sortBy = 'TODO_EDIT_THE_SORTBY'; // specify value as there is no example value for this parameter in OpenAPI spec
        let excludedAttributes = 'TODO_EDIT_THE_EXCLUDEDATTRIBUTES'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/scim/v2/Users?filter=${filter}&attributes=${attributes}&excludedAttributes=${excludedAttributes}&sortBy=${sortBy}&sortOrder=${sortOrder}&count=${count}&startIndex=${startIndex}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: 
        {
            let url = BASE_URL + `/scim/v2/Users`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/documents/{doc_id}/events", () => {
        let docId = 'TODO_EDIT_THE_DOC_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/documents/${doc_id}/events`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/metadata/objects/binders/templates/bindernodes", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/metadata/objects/binders/templates/bindernodes`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/binders/{binder_id}/documents", () => {
        let binderId = 'TODO_EDIT_THE_BINDER_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/binders/${binder_id}/documents`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Content-Type": `${contentType}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}", () => {
        let nameV = 'TODO_EDIT_THE_NAME__V'; // specify value as there is no example value for this parameter in OpenAPI spec
        let id = 'TODO_EDIT_THE_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let majorVersion = 'TODO_EDIT_THE_MAJOR_VERSION'; // specify value as there is no example value for this parameter in OpenAPI spec
        let minorVersion = 'TODO_EDIT_THE_MINOR_VERSION'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/binders/${id}/versions/${major_version}/${minor_version}/lifecycle_actions/${name__v}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Content-Type": `${contentType}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.put(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/users/{id}/permissions", () => {
        let filter = 'TODO_EDIT_THE_FILTER'; // specify value as there is no example value for this parameter in OpenAPI spec
        let id = 'TODO_EDIT_THE_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/users/${id}/permissions?filter=${filter}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/documents/{doc_id}/attachments/{attachment_id}", () => {
        let docId = 'TODO_EDIT_THE_DOC_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let attachmentId = 'TODO_EDIT_THE_ATTACHMENT_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/documents/${doc_id}/attachments/${attachment_id}`;
            let params = {
                headers: {
                    "Accept": `${accept}`, "Authorization": `${authorization}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: 
        {
            let url = BASE_URL + `/objects/documents/${doc_id}/attachments/${attachment_id}`;
            let params = {
                headers: {
                    "Accept": `${accept}`, "Authorization": `${authorization}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.put(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 3: 
        {
            let url = BASE_URL + `/objects/documents/${doc_id}/attachments/${attachment_id}`;
            let params = {
                headers: {
                    "Accept": `${accept}`, "Authorization": `${authorization}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            // this is a DELETE method request - if params are also set, empty body must be passed
            let request = http.del(url, {} , params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/users/me/password", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/users/me/password`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Content-Type": `${contentType}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/documents/{doc_id}", () => {
        let docId = 'TODO_EDIT_THE_DOC_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/documents/${doc_id}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: 
        {
            let url = BASE_URL + `/objects/documents/${doc_id}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Content-Type": `${contentType}`, "Accept": `${accept}`, "X-VaultAPI-MigrationMode": `${xVaultAPIMigrationMode}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.put(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 3: 
        {
            let url = BASE_URL + `/objects/documents/${doc_id}?suppressRendition=${suppressRendition}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Content-Type": `${contentType}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 4: 
        {
            let url = BASE_URL + `/objects/documents/${doc_id}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            // this is a DELETE method request - if params are also set, empty body must be passed
            let request = http.del(url, {} , params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/documents/batch/actions/rerender", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/documents/batch/actions/rerender`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/metadata/objects/documents/properties/find_common", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/metadata/objects/documents/properties/find_common`;
            let params = {
                headers: {
                    "Content-Type": `${contentType}`, "Accept": `${accept}`, "Authorization": `${authorization}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/sandbox/entitlements/set", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/sandbox/entitlements/set`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/documents/{id}/roles", () => {
        let id = 'TODO_EDIT_THE_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/documents/${id}/roles`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: 
        {
            let url = BASE_URL + `/objects/documents/${id}/roles`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/sandbox/snapshot", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/sandbox/snapshot`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: 
        {
            let url = BASE_URL + `/objects/sandbox/snapshot`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/metadata/audittrail", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/metadata/audittrail`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/configuration/Objecttype", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/configuration/Objecttype`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/sandbox/{vault_id}", () => {
        let vaultId = 'TODO_EDIT_THE_VAULT_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/sandbox/${vault_id}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/securitypolicies/{security_policy_name}", () => {
        let securityPolicyName = 'TODO_EDIT_THE_SECURITY_POLICY_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/securitypolicies/${security_policy_name}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/objectworkflows/tasks/{task_id}/actions/mdwcomplete", () => {
        let taskId = 'TODO_EDIT_THE_TASK_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/objectworkflows/tasks/${task_id}/actions/mdwcomplete`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/services/configuration_mode/actions/disable", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/services/configuration_mode/actions/disable`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/auth/oauth/session/{oath_oidc_profile_id}", () => {
        let oathOidcProfileId = '{{oath_oidc_profile_id}}'; // extracted from 'example' field defined at the parameter level of OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/auth/oauth/session/${oath_oidc_profile_id}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/licenses", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/licenses`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/metadata/vobjects", () => {
        let loc = 'true'; // extracted from 'example' field defined at the parameter level of OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/metadata/vobjects?loc=${loc}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/documents/{id}/roles/{role_name}", () => {
        let roleName = 'TODO_EDIT_THE_ROLE_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec
        let id = 'TODO_EDIT_THE_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/documents/${id}/roles/${role_name}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/actions/export", () => {
        let binderId = 'TODO_EDIT_THE_BINDER_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let attachments = 'all'; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let renditiontype = 'viewable_rendition__v'; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let docversion = 'major'; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let docfield = 'false'; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let source = 'true'; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let majorVersion = 'TODO_EDIT_THE_MAJOR_VERSION'; // specify value as there is no example value for this parameter in OpenAPI spec
        let minorVersion = 'TODO_EDIT_THE_MINOR_VERSION'; // specify value as there is no example value for this parameter in OpenAPI spec
        let export = 'name__v,title__v,document_number__v'; // extracted from 'example' field defined at the parameter level of OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/binders/${binder_id}/versions/${major_version}/${minor_version}/actions/export?source=${source}&renditiontype=${renditiontype}&docversion=${docversion}&attachments=${attachments}&export=${export}&docfield=${docfield}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/metadata/objects/documents/events", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/metadata/objects/documents/events`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/sandbox/{name}", () => {
        let name = 'TODO_EDIT_THE_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/sandbox/${name}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            // this is a DELETE method request - if params are also set, empty body must be passed
            let request = http.del(url, {} , params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/vobjects/{object_name}/{object_record_id}/attachment_fields/file", () => {
        let objectRecordId = 'TODO_EDIT_THE_OBJECT_RECORD_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let objectName = 'TODO_EDIT_THE_OBJECT_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/vobjects/${object_name}/${object_record_id}/attachment_fields/file`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/objectworkflows/tasks/{task_id}/actions/undoaccept", () => {
        let taskId = 'TODO_EDIT_THE_TASK_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/objectworkflows/tasks/${task_id}/actions/undoaccept`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/securitypolicies", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/securitypolicies`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/documents/{doc_id}/audittrail", () => {
        let formatResult = 'TODO_EDIT_THE_FORMAT_RESULT'; // specify value as there is no example value for this parameter in OpenAPI spec
        let offset = 'TODO_EDIT_THE_OFFSET'; // specify value as there is no example value for this parameter in OpenAPI spec
        let endDate = 'TODO_EDIT_THE_END_DATE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let docId = 'TODO_EDIT_THE_DOC_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let limit = 'TODO_EDIT_THE_LIMIT'; // specify value as there is no example value for this parameter in OpenAPI spec
        let startDate = 'TODO_EDIT_THE_START_DATE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let events = 'TODO_EDIT_THE_EVENTS'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/documents/${doc_id}/audittrail?start_date=${start_date}&end_date=${end_date}&format_result=${format_result}&limit=${limit}&offset=${offset}&events=${events}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/services/loader/{job_id}/tasks/{task_id}/results", () => {
        let jobId = 'TODO_EDIT_THE_JOB_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let taskId = 'TODO_EDIT_THE_TASK_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/services/loader/${job_id}/tasks/${task_id}/results`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/vobjects/{object_name}/{object_record_id}/attachments/file", () => {
        let objectRecordId = 'TODO_EDIT_THE_OBJECT_RECORD_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let objectName = 'TODO_EDIT_THE_OBJECT_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/vobjects/${object_name}/${object_record_id}/attachments/file`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/metadata/query/documents/relationships/document_signature__sysr", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/metadata/query/documents/relationships/document_signature__sysr`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/objectworkflows/tasks/{task_id}/actions/accept", () => {
        let taskId = 'TODO_EDIT_THE_TASK_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/objectworkflows/tasks/${task_id}/actions/accept`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/binders/{binder_id}/actions", () => {
        let binderId = 'TODO_EDIT_THE_BINDER_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/binders/${binder_id}/actions`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Content-Type": `${contentType}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/vobjects/cascadedelete/results/{object_name}/{job_status}/{job_id}", () => {
        let jobId = 'TODO_EDIT_THE_JOB_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let jobStatus = 'TODO_EDIT_THE_JOB_STATUS'; // specify value as there is no example value for this parameter in OpenAPI spec
        let objectName = 'TODO_EDIT_THE_OBJECT_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/vobjects/cascadedelete/results/${object_name}/${job_status}/${job_id}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/services/loader/{job_id}/tasks/{task_id}/results/renditions", () => {
        let jobId = 'TODO_EDIT_THE_JOB_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let taskId = 'TODO_EDIT_THE_TASK_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/services/loader/${job_id}/tasks/${task_id}/results/renditions`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/documents/{doc_id}/attachments", () => {
        let docId = 'TODO_EDIT_THE_DOC_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/documents/${doc_id}/attachments`;
            let params = {
                headers: {
                    "Accept": `${accept}`, "Authorization": `${authorization}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: 
        {
            let url = BASE_URL + `/objects/documents/${doc_id}/attachments`;
            let params = {
                headers: {
                    "Accept": `${accept}`, "Authorization": `${authorization}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/objectworkflows/tasks/{task_id}/actions", () => {
        let taskId = 'TODO_EDIT_THE_TASK_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/objectworkflows/tasks/${task_id}/actions`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/sandbox/{vault_id}/actions/refresh", () => {
        let vaultId = 'TODO_EDIT_THE_VAULT_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/sandbox/${vault_id}/actions/refresh`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/services/jobs/start_now/{job_id}", () => {
        let jobId = 'TODO_EDIT_THE_JOB_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/services/jobs/start_now/${job_id}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}", () => {
        let renditionType = 'TODO_EDIT_THE_RENDITION_TYPE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let docId = 'TODO_EDIT_THE_DOC_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let majorVersion = 'TODO_EDIT_THE_MAJOR_VERSION'; // specify value as there is no example value for this parameter in OpenAPI spec
        let minorVersion = 'TODO_EDIT_THE_MINOR_VERSION'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/documents/${doc_id}/versions/${major_version}/${minor_version}/renditions/${rendition_type}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: 
        {
            let url = BASE_URL + `/objects/documents/${doc_id}/versions/${major_version}/${minor_version}/renditions/${rendition_type}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.put(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 3: 
        {
            let url = BASE_URL + `/objects/documents/${doc_id}/versions/${major_version}/${minor_version}/renditions/${rendition_type}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 4: 
        {
            let url = BASE_URL + `/objects/documents/${doc_id}/versions/${major_version}/${minor_version}/renditions/${rendition_type}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            // this is a DELETE method request - if params are also set, empty body must be passed
            let request = http.del(url, {} , params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/objectworkflows/{workflow_id}", () => {
        let loc = 'true'; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let workflowId = 'TODO_EDIT_THE_WORKFLOW_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/objectworkflows/${workflow_id}?loc=${loc}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/vault/actions/compare", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/vault/actions/compare`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/edl_matched_documents/batch/actions/remove", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/edl_matched_documents/batch/actions/remove`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Content-Type": `${contentType}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/binders/{binder_id}/roles/{role_name_and_user_or_group}/{id}", () => {
        let binderId = 'TODO_EDIT_THE_BINDER_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let roleNameAndUserOrGroup = 'TODO_EDIT_THE_ROLE_NAME_AND_USER_OR_GROUP'; // specify value as there is no example value for this parameter in OpenAPI spec
        let id = 'TODO_EDIT_THE_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/binders/${binder_id}/roles/${role_name_and_user_or_group}/${id}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            // this is a DELETE method request - if params are also set, empty body must be passed
            let request = http.del(url, {} , params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/picklists/{picklist_name}", () => {
        let picklistName = 'TODO_EDIT_THE_PICKLIST_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/picklists/${picklist_name}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: 
        {
            let url = BASE_URL + `/objects/picklists/${picklist_name}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.put(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 3: 
        {
            let url = BASE_URL + `/objects/picklists/${picklist_name}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/binders/{binder_id}/documents/{node_id}/binding_rule", () => {
        let binderId = 'TODO_EDIT_THE_BINDER_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let nodeId = 'TODO_EDIT_THE_NODE_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/binders/${binder_id}/documents/${node_id}/binding_rule`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Content-Type": `${contentType}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.put(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/objectworkflows/tasks/{task_id}/actions/mdwreassign", () => {
        let taskId = 'TODO_EDIT_THE_TASK_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/objectworkflows/tasks/${task_id}/actions/mdwreassign`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/objectworkflows/tasks/{task_id}/actions/mdwmanagecontent", () => {
        let taskId = 'TODO_EDIT_THE_TASK_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/objectworkflows/tasks/${task_id}/actions/mdwmanagecontent`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/documents/{doc_id}/attachments/{attachment_id}/file", () => {
        let docId = 'TODO_EDIT_THE_DOC_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let attachmentId = 'TODO_EDIT_THE_ATTACHMENT_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/documents/${doc_id}/attachments/${attachment_id}/file`;
            let params = {
                headers: {
                    "Accept": `${accept}`, "Authorization": `${authorization}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/session", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/session`;
            let params = {
                headers: {
                    "Accept": `${accept}`, "Authorization": `${authorization}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            // this is a DELETE method request - if params are also set, empty body must be passed
            let request = http.del(url, {} , params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/vobjects/{object_name}/{object_record_id}/attachment_fields/{attachment_field_name}/file", () => {
        let objectRecordId = 'TODO_EDIT_THE_OBJECT_RECORD_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let objectName = 'TODO_EDIT_THE_OBJECT_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec
        let attachmentFieldName = 'TODO_EDIT_THE_ATTACHMENT_FIELD_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/vobjects/${object_name}/${object_record_id}/attachment_fields/${attachment_field_name}/file`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: 
        {
            let url = BASE_URL + `/vobjects/${object_name}/${object_record_id}/attachment_fields/${attachment_field_name}/file`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/vobjects/{object_name}/{object_record_id}/audittrail", () => {
        let objectRecordId = 'TODO_EDIT_THE_OBJECT_RECORD_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let formatResult = 'TODO_EDIT_THE_FORMAT_RESULT'; // specify value as there is no example value for this parameter in OpenAPI spec
        let offset = 'TODO_EDIT_THE_OFFSET'; // specify value as there is no example value for this parameter in OpenAPI spec
        let endDate = 'TODO_EDIT_THE_END_DATE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let limit = 'TODO_EDIT_THE_LIMIT'; // specify value as there is no example value for this parameter in OpenAPI spec
        let objectName = 'TODO_EDIT_THE_OBJECT_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec
        let startDate = 'TODO_EDIT_THE_START_DATE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let events = 'TODO_EDIT_THE_EVENTS'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/vobjects/${object_name}/${object_record_id}/audittrail?start_date=${start_date}&end_date=${end_date}&format_result=${format_result}&limit=${limit}&offset=${offset}&events=${events}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/documents/batch/lock", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/documents/batch/lock`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            // this is a DELETE method request - if params are also set, empty body must be passed
            let request = http.del(url, {} , params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/api/mdl/execute_async", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/api/mdl/execute_async`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/domain", () => {
        let includeApplication = 'true'; // extracted from 'example' field defined at the parameter level of OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/domain?include_application=${include_application}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}", () => {
        let nameV = 'TODO_EDIT_THE_NAME__V'; // specify value as there is no example value for this parameter in OpenAPI spec
        let id = 'TODO_EDIT_THE_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let majorVersion = 'TODO_EDIT_THE_MAJOR_VERSION'; // specify value as there is no example value for this parameter in OpenAPI spec
        let minorVersion = 'TODO_EDIT_THE_MINOR_VERSION'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/documents/${id}/versions/${major_version}/${minor_version}/lifecycle_actions/${name__v}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Content-Type": `${contentType}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.put(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/groups/{group_id}", () => {
        let groupId = 'TODO_EDIT_THE_GROUP_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let includeImplied = 'true'; // extracted from 'example' field defined at the parameter level of OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/groups/${group_id}?includeImplied=${includeImplied}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: 
        {
            let url = BASE_URL + `/objects/groups/${group_id}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.put(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 3: 
        {
            let url = BASE_URL + `/objects/groups/${group_id}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            // this is a DELETE method request - if params are also set, empty body must be passed
            let request = http.del(url, {} , params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/metadata/objects/documents/types/{type}", () => {
        let type = 'TODO_EDIT_THE_TYPE'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/metadata/objects/documents/types/${type}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/metadata/objects/documents/types/{type}/subtypes/{subtype}/classifications/{classification}", () => {
        let subtype = 'TODO_EDIT_THE_SUBTYPE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let type = 'TODO_EDIT_THE_TYPE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let classification = 'TODO_EDIT_THE_CLASSIFICATION'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/metadata/objects/documents/types/${type}/subtypes/${subtype}/classifications/${classification}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/documents/templates/{template_name}", () => {
        let templateName = 'TODO_EDIT_THE_TEMPLATE_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/documents/templates/${template_name}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: 
        {
            let url = BASE_URL + `/objects/documents/templates/${template_name}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.put(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 3: 
        {
            let url = BASE_URL + `/objects/documents/templates/${template_name}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            // this is a DELETE method request - if params are also set, empty body must be passed
            let request = http.del(url, {} , params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/groups/auto", () => {
        let offset = 'TODO_EDIT_THE_OFFSET'; // specify value as there is no example value for this parameter in OpenAPI spec
        let limit = 'TODO_EDIT_THE_LIMIT'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/groups/auto?limit=${limit}&offset=${offset}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/scim/v2/ResourceTypes/{type}", () => {
        let type = 'TODO_EDIT_THE_TYPE'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/scim/v2/ResourceTypes/${type}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/binders/{binder_id}/sections/{node_id}", () => {
        let binderId = 'TODO_EDIT_THE_BINDER_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let nodeId = 'TODO_EDIT_THE_NODE_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/binders/${binder_id}/sections/${node_id}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.put(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/notifications/histories", () => {
        let formatResult = 'csv'; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let offset = 'TODO_EDIT_THE_OFFSET'; // specify value as there is no example value for this parameter in OpenAPI spec
        let endDate = 'YYYY-MM-DD'; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let limit = 'TODO_EDIT_THE_LIMIT'; // specify value as there is no example value for this parameter in OpenAPI spec
        let startDate = 'YYYY-MM-DD'; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let allDates = 'true'; // extracted from 'example' field defined at the parameter level of OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/notifications/histories?start_date=${start_date}&end_date=${end_date}&all_dates=${all_dates}&format_result=${format_result}&limit=${limit}&offset=${offset}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/binders/{binder_id}/versions", () => {
        let binderId = 'TODO_EDIT_THE_BINDER_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/binders/${binder_id}/versions`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/query/{next_page}", () => {
        let nextPage = 'TODO_EDIT_THE_NEXT_PAGE'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/query/${next_page}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-DescribeQuery": `${xVaultAPIDescribeQuery}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/logs/api_usage", () => {
        let date = 'TODO_EDIT_THE_DATE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let logFormat = 'TODO_EDIT_THE_LOG_FORMAT'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/logs/api_usage?date=${date}&log_format=${log_format}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}/file", () => {
        let docId = 'TODO_EDIT_THE_DOC_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let attachmentId = 'TODO_EDIT_THE_ATTACHMENT_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let attachmentVersion = 'TODO_EDIT_THE_ATTACHMENT_VERSION'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/documents/${doc_id}/attachments/${attachment_id}/versions/${attachment_version}/file`;
            let params = {
                headers: {
                    "Accept": `${accept}`, "Authorization": `${authorization}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}", () => {
        let binderId = 'TODO_EDIT_THE_BINDER_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let majorVersion = 'TODO_EDIT_THE_MAJOR_VERSION'; // specify value as there is no example value for this parameter in OpenAPI spec
        let minorVersion = 'TODO_EDIT_THE_MINOR_VERSION'; // specify value as there is no example value for this parameter in OpenAPI spec
        let relationshipId = 'TODO_EDIT_THE_RELATIONSHIP_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/binders/${binder_id}/versions/${major_version}/${minor_version}/relationships/${relationship_id}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: 
        {
            let url = BASE_URL + `/objects/binders/${binder_id}/versions/${major_version}/${minor_version}/relationships/${relationship_id}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            // this is a DELETE method request - if params are also set, empty body must be passed
            let request = http.del(url, {} , params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions", () => {
        let docId = 'TODO_EDIT_THE_DOC_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let majorVersion = 'TODO_EDIT_THE_MAJOR_VERSION'; // specify value as there is no example value for this parameter in OpenAPI spec
        let minorVersion = 'TODO_EDIT_THE_MINOR_VERSION'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/documents/${doc_id}/versions/${major_version}/${minor_version}/renditions`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/doc-export-annotations-to-csv", () => {
        let docId = 'TODO_EDIT_THE_DOC_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let majorVersion = 'TODO_EDIT_THE_MAJOR_VERSION'; // specify value as there is no example value for this parameter in OpenAPI spec
        let minorVersion = 'TODO_EDIT_THE_MINOR_VERSION'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/documents/${doc_id}/versions/${major_version}/${minor_version}/doc-export-annotations-to-csv`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/documents/batch/actions/fileextract/{job_id}/results", () => {
        let jobId = 'TODO_EDIT_THE_JOB_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/documents/batch/actions/fileextract/${job_id}/results`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/scim/v2/ResourceTypes", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/scim/v2/ResourceTypes`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/metadata/vobjects/{object_name}/page_layouts/{layout_name}", () => {
        let objectName = 'TODO_EDIT_THE_OBJECT_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec
        let layoutName = 'TODO_EDIT_THE_LAYOUT_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/metadata/vobjects/${object_name}/page_layouts/${layout_name}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/documents/{doc_id}/renditions/{rendition_type}", () => {
        let renditionType = 'TODO_EDIT_THE_RENDITION_TYPE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let docId = 'TODO_EDIT_THE_DOC_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let steadyState = 'TODO_EDIT_THE_STEADYSTATE'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/documents/${doc_id}/renditions/${rendition_type}?steadyState=${steadyState}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: 
        {
            let url = BASE_URL + `/objects/documents/${doc_id}/renditions/${rendition_type}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.put(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 3: 
        {
            let url = BASE_URL + `/objects/documents/${doc_id}/renditions/${rendition_type}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 4: 
        {
            let url = BASE_URL + `/objects/documents/${doc_id}/renditions/${rendition_type}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            // this is a DELETE method request - if params are also set, empty body must be passed
            let request = http.del(url, {} , params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/binders/{binder_id}/versions/{major_version}/{minor_version}", () => {
        let binderId = 'TODO_EDIT_THE_BINDER_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let majorVersion = 'TODO_EDIT_THE_MAJOR_VERSION'; // specify value as there is no example value for this parameter in OpenAPI spec
        let minorVersion = 'TODO_EDIT_THE_MINOR_VERSION'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/binders/${binder_id}/versions/${major_version}/${minor_version}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: 
        {
            let url = BASE_URL + `/objects/binders/${binder_id}/versions/${major_version}/${minor_version}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Content-Type": `${contentType}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.put(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 3: 
        {
            let url = BASE_URL + `/objects/binders/${binder_id}/versions/${major_version}/${minor_version}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            // this is a DELETE method request - if params are also set, empty body must be passed
            let request = http.del(url, {} , params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/services/file_staging/items/content/{item}", () => {
        let item = 'TODO_EDIT_THE_ITEM'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/services/file_staging/items/content/${item}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Range": `${range}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/code/{class_name}/enable", () => {
        let className = 'TODO_EDIT_THE_CLASS_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/code/${class_name}/enable`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.put(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/documents/annotations/batch", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/documents/annotations/batch`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Content-Type": `${contentType}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.put(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: 
        {
            let url = BASE_URL + `/objects/documents/annotations/batch`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Content-Type": `${contentType}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 3: 
        {
            let url = BASE_URL + `/objects/documents/annotations/batch`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            // this is a DELETE method request - if params are also set, empty body must be passed
            let request = http.del(url, {} , params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/documents/versions/batch", () => {
        let idParam = 'external_id__v'; // extracted from 'example' field defined at the parameter level of OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/documents/versions/batch?idParam=${idParam}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-MigrationMode": `${xVaultAPIMigrationMode}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: 
        {
            let url = BASE_URL + `/objects/documents/versions/batch?idParam=${idParam}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Content-Type": `${contentType}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            // this is a DELETE method request - if params are also set, empty body must be passed
            let request = http.del(url, {} , params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/{annotation_id}", () => {
        let docId = 'TODO_EDIT_THE_DOC_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let annotationId = 'TODO_EDIT_THE_ANNOTATION_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let majorVersion = 'TODO_EDIT_THE_MAJOR_VERSION'; // specify value as there is no example value for this parameter in OpenAPI spec
        let minorVersion = 'TODO_EDIT_THE_MINOR_VERSION'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/documents/${doc_id}/versions/${major_version}/${minor_version}/annotations/${annotation_id}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/documents/templates", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/documents/templates`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: 
        {
            let url = BASE_URL + `/objects/documents/templates`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.put(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 3: 
        {
            let url = BASE_URL + `/objects/documents/templates`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Content-Type": `${contentType}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/query", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/query`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-DescribeQuery": `${xVaultAPIDescribeQuery}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/binders/templates", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/binders/templates`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: 
        {
            let url = BASE_URL + `/objects/binders/templates`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.put(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 3: 
        {
            let url = BASE_URL + `/objects/binders/templates`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}", () => {
        let docId = 'TODO_EDIT_THE_DOC_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let attachmentId = 'TODO_EDIT_THE_ATTACHMENT_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let attachmentVersion = 'TODO_EDIT_THE_ATTACHMENT_VERSION'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/documents/${doc_id}/attachments/${attachment_id}/versions/${attachment_version}`;
            let params = {
                headers: {
                    "Accept": `${accept}`, "Authorization": `${authorization}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: 
        {
            let url = BASE_URL + `/objects/documents/${doc_id}/attachments/${attachment_id}/versions/${attachment_version}?restore=${restore}`;
            let params = {
                headers: {
                    "Accept": `${accept}`, "Authorization": `${authorization}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 3: 
        {
            let url = BASE_URL + `/objects/documents/${doc_id}/attachments/${attachment_id}/versions/${attachment_version}`;
            let params = {
                headers: {
                    "Accept": `${accept}`, "Authorization": `${authorization}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            // this is a DELETE method request - if params are also set, empty body must be passed
            let request = http.del(url, {} , params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/sandbox/actions/promoteproduction", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/sandbox/actions/promoteproduction`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/picklists/{picklist_name}/{picklist_value_name}", () => {
        let picklistName = 'TODO_EDIT_THE_PICKLIST_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec
        let picklistValueName = 'TODO_EDIT_THE_PICKLIST_VALUE_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/picklists/${picklist_name}/${picklist_value_name}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.put(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: 
        {
            let url = BASE_URL + `/objects/picklists/${picklist_name}/${picklist_value_name}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            // this is a DELETE method request - if params are also set, empty body must be passed
            let request = http.del(url, {} , params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/services/file_staging/upload/{upload_session_id}", () => {
        let uploadSessionId = 'TODO_EDIT_THE_UPLOAD_SESSION_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/services/file_staging/upload/${upload_session_id}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: 
        {
            let url = BASE_URL + `/services/file_staging/upload/${upload_session_id}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-FilePartNumber": `${xVaultAPIFilePartNumber}`, "Content-MD5": `${contentMD5}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.put(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 3: 
        {
            let url = BASE_URL + `/services/file_staging/upload/${upload_session_id}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 4: 
        {
            let url = BASE_URL + `/services/file_staging/upload/${upload_session_id}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            // this is a DELETE method request - if params are also set, empty body must be passed
            let request = http.del(url, {} , params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/services/directdata/files", () => {
        let startTime = '2023-12-07T00:00Z'; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let stopTime = '2023-12-08T00:00Z'; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let extractType = 'incremental_directdata'; // extracted from 'example' field defined at the parameter level of OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/services/directdata/files?extract_type=${extract_type}&start_time=${start_time}&stop_time=${stop_time}`;
            let params = {
                headers: {
                    "Accept": `${accept}`, "Authorization": `${authorization}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/vobjects/merges/{job_id}/log", () => {
        let jobId = 'TODO_EDIT_THE_JOB_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/vobjects/merges/${job_id}/log`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/binders/lifecycle_actions", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/binders/lifecycle_actions`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}", () => {
        let objectRecordId = 'TODO_EDIT_THE_OBJECT_RECORD_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let objectName = 'TODO_EDIT_THE_OBJECT_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec
        let attachmentId = 'TODO_EDIT_THE_ATTACHMENT_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let attachmentVersion = 'TODO_EDIT_THE_ATTACHMENT_VERSION'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/vobjects/${object_name}/${object_record_id}/attachments/${attachment_id}/versions/${attachment_version}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: 
        {
            let url = BASE_URL + `/vobjects/${object_name}/${object_record_id}/attachments/${attachment_id}/versions/${attachment_version}?restore=${restore}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 3: 
        {
            let url = BASE_URL + `/vobjects/${object_name}/${object_record_id}/attachments/${attachment_id}/versions/${attachment_version}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            // this is a DELETE method request - if params are also set, empty body must be passed
            let request = http.del(url, {} , params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/keep-alive", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/keep-alive`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/vobjects/{object_name}/{object_record_id}", () => {
        let objectRecordId = 'TODO_EDIT_THE_OBJECT_RECORD_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let objectName = 'TODO_EDIT_THE_OBJECT_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/vobjects/${object_name}/${object_record_id}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/groups", () => {
        let includeImplied = 'TODO_EDIT_THE_INCLUDEIMPLIED'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/groups?includeImplied=${includeImplied}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: 
        {
            let url = BASE_URL + `/objects/groups`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/services/loader/extract", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/services/loader/extract`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/services/queues/{queue_name}", () => {
        let queueName = 'TODO_EDIT_THE_QUEUE_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/services/queues/${queue_name}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/services/configuration_mode/actions/enable", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/services/configuration_mode/actions/enable`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/services/queues", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/services/queues`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/binders/{binder_id}/sections/{section_id}", () => {
        let binderId = 'TODO_EDIT_THE_BINDER_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let sectionId = 'TODO_EDIT_THE_SECTION_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/binders/${binder_id}/sections/${section_id}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: 
        {
            let url = BASE_URL + `/objects/binders/${binder_id}/sections/${section_id}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            // this is a DELETE method request - if params are also set, empty body must be passed
            let request = http.del(url, {} , params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/documents/{doc_id}/renditions", () => {
        let docId = 'TODO_EDIT_THE_DOC_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/documents/${doc_id}/renditions`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/metadata/vobjects/{object_name}", () => {
        let loc = 'true'; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let objectName = 'TODO_EDIT_THE_OBJECT_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/metadata/vobjects/${object_name}?loc=${loc}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/documents/{doc_id}/file", () => {
        let lockDocument = 'false'; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let docId = 'TODO_EDIT_THE_DOC_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/documents/${doc_id}/file?lockDocument=${lockDocument}`;
            let params = {
                headers: {
                    "Accept": `${accept}`, "Authorization": `${authorization}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/users/{id}", () => {
        let excludeAppLicensing = 'TODO_EDIT_THE_EXCLUDE_APP_LICENSING'; // specify value as there is no example value for this parameter in OpenAPI spec
        let id = 'TODO_EDIT_THE_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let excludeVaultMembership = 'TODO_EDIT_THE_EXCLUDE_VAULT_MEMBERSHIP'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/users/${id}?exclude_vault_membership=${exclude_vault_membership}&exclude_app_licensing=${exclude_app_licensing}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: 
        {
            let url = BASE_URL + `/objects/users/${id}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.put(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/composites/trees/edl_hierarchy__v/{parent_node_id}/children", () => {
        let parentNodeId = 'TODO_EDIT_THE_PARENT_NODE_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/composites/trees/edl_hierarchy__v/${parent_node_id}/children`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Content-Type": `${contentType}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: 
        {
            let url = BASE_URL + `/composites/trees/edl_hierarchy__v/${parent_node_id}/children`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Content-Type": `${contentType}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.put(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/services/package", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/services/package`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Content-Type": `${contentType}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.put(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: 
        {
            let url = BASE_URL + `/services/package`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/scim/v2/{type}", () => {
        let filter = 'TODO_EDIT_THE_FILTER'; // specify value as there is no example value for this parameter in OpenAPI spec
        let startIndex = 'TODO_EDIT_THE_STARTINDEX'; // specify value as there is no example value for this parameter in OpenAPI spec
        let sortOrder = 'TODO_EDIT_THE_SORTORDER'; // specify value as there is no example value for this parameter in OpenAPI spec
        let attributes = 'TODO_EDIT_THE_ATTRIBUTES'; // specify value as there is no example value for this parameter in OpenAPI spec
        let sortBy = 'TODO_EDIT_THE_SORTBY'; // specify value as there is no example value for this parameter in OpenAPI spec
        let type = 'TODO_EDIT_THE_TYPE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let excludedAttributes = 'TODO_EDIT_THE_EXCLUDEDATTRIBUTES'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/scim/v2/${type}?filter=${filter}&attributes=${attributes}&excludedAttributes=${excludedAttributes}&sortBy=${sortBy}&sortOrder=${sortOrder}&startIndex=${startIndex}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/composites/trees/{edl_hierarchy_or_template}/actions/listnodes", () => {
        let edlHierarchyOrTemplate = 'TODO_EDIT_THE_EDL_HIERARCHY_OR_TEMPLATE'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/composites/trees/${edl_hierarchy_or_template}/actions/listnodes`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Content-Type": `${contentType}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/binders", () => {
        let async = 'true'; // extracted from 'example' field defined at the parameter level of OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/binders?async=${async}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Content-Type": `${contentType}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/metadata/objects/securitypolicies", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/metadata/objects/securitypolicies`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/vobjects/{object_name}/actions/{action_name}", () => {
        let objectName = 'TODO_EDIT_THE_OBJECT_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec
        let actionName = 'TODO_EDIT_THE_ACTION_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/vobjects/${object_name}/actions/${action_name}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Content-Type": `${contentType}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/metadata/components/{component_type}", () => {
        let componentType = 'TODO_EDIT_THE_COMPONENT_TYPE'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/metadata/components/${component_type}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/users", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/users`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Content-Type": `${contentType}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.put(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: 
        {
            let url = BASE_URL + `/objects/users`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/query/{previous_page}", () => {
        let previousPage = 'TODO_EDIT_THE_PREVIOUS_PAGE'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/query/${previous_page}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-DescribeQuery": `${xVaultAPIDescribeQuery}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/documents/{doc_id}/anchors", () => {
        let docId = 'TODO_EDIT_THE_DOC_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/documents/${doc_id}/anchors`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/objectworkflows/tasks/{task_id}/actions/updateduedate", () => {
        let taskId = 'TODO_EDIT_THE_TASK_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/objectworkflows/tasks/${task_id}/actions/updateduedate`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/api/mdl/execute_async/{job_id}/results", () => {
        let jobId = 'TODO_EDIT_THE_JOB_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/api/mdl/execute_async/${job_id}/results`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/services/package/actions/validate", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/services/package/actions/validate`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/{annotation_id}/replies", () => {
        let docId = 'TODO_EDIT_THE_DOC_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let annotationId = 'TODO_EDIT_THE_ANNOTATION_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let majorVersion = 'TODO_EDIT_THE_MAJOR_VERSION'; // specify value as there is no example value for this parameter in OpenAPI spec
        let minorVersion = 'TODO_EDIT_THE_MINOR_VERSION'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/documents/${doc_id}/versions/${major_version}/${minor_version}/annotations/${annotation_id}/replies`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/limits", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/limits`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/objectworkflows", () => {
        let loc = 'TODO_EDIT_THE_LOC'; // specify value as there is no example value for this parameter in OpenAPI spec
        let recordIdV = 'TODO_EDIT_THE_RECORD_ID__V'; // specify value as there is no example value for this parameter in OpenAPI spec
        let objectV = 'TODO_EDIT_THE_OBJECT__V'; // specify value as there is no example value for this parameter in OpenAPI spec
        let offset = 'TODO_EDIT_THE_OFFSET'; // specify value as there is no example value for this parameter in OpenAPI spec
        let statusV = 'TODO_EDIT_THE_STATUS__V'; // specify value as there is no example value for this parameter in OpenAPI spec
        let pageSize = 'TODO_EDIT_THE_PAGE_SIZE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let participant = 'TODO_EDIT_THE_PARTICIPANT'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/objectworkflows?object__v=${object__v}&record_id__v=${record_id__v}&participant=${participant}&status__v=${status__v}&offset=${offset}&page_size=${page_size}&loc=${loc}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/scim/v2/ServiceProviderConfig", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/scim/v2/ServiceProviderConfig`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/objectworkflows/tasks/{task_id}/actions/reassign", () => {
        let taskId = 'TODO_EDIT_THE_TASK_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/objectworkflows/tasks/${task_id}/actions/reassign`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/uicode/distributions", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/uicode/distributions`;
            let params = {
                headers: {
                    "Accept": `${accept}`, "Authorization": `${authorization}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: 
        {
            let url = BASE_URL + `/uicode/distributions`;
            let params = {
                headers: {
                    "Accept": `${accept}`, "Authorization": `${authorization}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/binders/{binder_id}/binding_rule", () => {
        let binderId = 'TODO_EDIT_THE_BINDER_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/binders/${binder_id}/binding_rule`;
            let params = {
                headers: {
                    "Content-Type": `${contentType}`, "Accept": `${accept}`, "Authorization": `${authorization}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.put(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/vobjects/{object_name}/actions/changetype", () => {
        let objectName = 'TODO_EDIT_THE_OBJECT_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/vobjects/${object_name}/actions/changetype`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Content-Type": `${contentType}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/code/profiler/{session_name}", () => {
        let sessionName = 'TODO_EDIT_THE_SESSION_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/code/profiler/${session_name}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: 
        {
            let url = BASE_URL + `/code/profiler/${session_name}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            // this is a DELETE method request - if params are also set, empty body must be passed
            let request = http.del(url, {} , params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/services/jobs/histories", () => {
        let offset = 'TODO_EDIT_THE_OFFSET'; // specify value as there is no example value for this parameter in OpenAPI spec
        let endDate = 'TODO_EDIT_THE_END_DATE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let limit = 'TODO_EDIT_THE_LIMIT'; // specify value as there is no example value for this parameter in OpenAPI spec
        let startDate = 'TODO_EDIT_THE_START_DATE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let status = 'TODO_EDIT_THE_STATUS'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/services/jobs/histories?start_date=${start_date}&end_date=${end_date}&status=${status}&limit=${limit}&offset=${offset}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/code/{class_name}", () => {
        let className = 'TODO_EDIT_THE_CLASS_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/code/${class_name}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: 
        {
            let url = BASE_URL + `/code/${class_name}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            // this is a DELETE method request - if params are also set, empty body must be passed
            let request = http.del(url, {} , params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/objectworkflows/{workflow_id}/actions/{workflow_action}", () => {
        let workflowAction = 'TODO_EDIT_THE_WORKFLOW_ACTION'; // specify value as there is no example value for this parameter in OpenAPI spec
        let workflowId = 'TODO_EDIT_THE_WORKFLOW_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/objectworkflows/${workflow_id}/actions/${workflow_action}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: 
        {
            let url = BASE_URL + `/objects/objectworkflows/${workflow_id}/actions/${workflow_action}?documents__sys=${documents__sys}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Content-Type": `${contentType}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/sandbox/batch/changesize", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/sandbox/batch/changesize`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/services/file_staging/items", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/services/file_staging/items`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-MD5": `${contentMD5}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/vobjects/{object_name}/actions/updatecorporatecurrency", () => {
        let objectName = 'TODO_EDIT_THE_OBJECT_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/vobjects/${object_name}/actions/updatecorporatecurrency`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.put(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/vobjects/{object_name}/actions/recalculaterollups", () => {
        let objectName = 'TODO_EDIT_THE_OBJECT_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/vobjects/${object_name}/actions/recalculaterollups`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: 
        {
            let url = BASE_URL + `/vobjects/${object_name}/actions/recalculaterollups`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/metadata/components", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/metadata/components`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions", () => {
        let objectRecordId = 'TODO_EDIT_THE_OBJECT_RECORD_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let objectName = 'TODO_EDIT_THE_OBJECT_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec
        let attachmentId = 'TODO_EDIT_THE_ATTACHMENT_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/vobjects/${object_name}/${object_record_id}/attachments/${attachment_id}/versions`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/edl_matched_documents/batch/actions/add", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/edl_matched_documents/batch/actions/add`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Content-Type": `${contentType}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/binders/{binder_id}", () => {
        let binderId = 'TODO_EDIT_THE_BINDER_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let depth = 'TODO_EDIT_THE_DEPTH'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/binders/${binder_id}?depth=${depth}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: 
        {
            let url = BASE_URL + `/objects/binders/${binder_id}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Content-Type": `${contentType}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.put(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 3: 
        {
            let url = BASE_URL + `/objects/binders/${binder_id}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 4: 
        {
            let url = BASE_URL + `/objects/binders/${binder_id}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            // this is a DELETE method request - if params are also set, empty body must be passed
            let request = http.del(url, {} , params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/vobjects/{object_name}/{id}/roles/{role_name}", () => {
        let roleName = 'TODO_EDIT_THE_ROLE_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec
        let objectName = 'TODO_EDIT_THE_OBJECT_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec
        let id = 'TODO_EDIT_THE_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/vobjects/${object_name}/${id}/roles/${role_name}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/services/jobs/monitors", () => {
        let offset = 'TODO_EDIT_THE_OFFSET'; // specify value as there is no example value for this parameter in OpenAPI spec
        let endDate = 'TODO_EDIT_THE_END_DATE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let limit = 'TODO_EDIT_THE_LIMIT'; // specify value as there is no example value for this parameter in OpenAPI spec
        let startDate = 'TODO_EDIT_THE_START_DATE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let status = 'TODO_EDIT_THE_STATUS'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/services/jobs/monitors?start_date=${start_date}&end_date=${end_date}&status=${status}&limit=${limit}&offset=${offset}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/metadata/objects/documents/types/{type}/relationships", () => {
        let type = 'TODO_EDIT_THE_TYPE'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/metadata/objects/documents/types/${type}/relationships`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/events", () => {
        let docId = 'TODO_EDIT_THE_DOC_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let majorVersion = 'TODO_EDIT_THE_MAJOR_VERSION'; // specify value as there is no example value for this parameter in OpenAPI spec
        let minorVersion = 'TODO_EDIT_THE_MINOR_VERSION'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/documents/${doc_id}/versions/${major_version}/${minor_version}/events`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/documents/{doc_id}/lock", () => {
        let docId = 'TODO_EDIT_THE_DOC_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/documents/${doc_id}/lock`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: 
        {
            let url = BASE_URL + `/objects/documents/${doc_id}/lock`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 3: 
        {
            let url = BASE_URL + `/objects/documents/${doc_id}/lock`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            // this is a DELETE method request - if params are also set, empty body must be passed
            let request = http.del(url, {} , params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions", () => {
        let id = 'TODO_EDIT_THE_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let majorVersion = 'TODO_EDIT_THE_MAJOR_VERSION'; // specify value as there is no example value for this parameter in OpenAPI spec
        let minorVersion = 'TODO_EDIT_THE_MINOR_VERSION'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/documents/${id}/versions/${major_version}/${minor_version}/lifecycle_actions`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/object/workflow/actions", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/object/workflow/actions`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/messages/{message_type}/language/{lang}/actions/export", () => {
        let messageType = 'TODO_EDIT_THE_MESSAGE_TYPE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let lang = 'TODO_EDIT_THE_LANG'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/messages/${message_type}/language/${lang}/actions/export`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/metadata/objects/documents/annotations/references/types/{reference_type}", () => {
        let referenceType = 'TODO_EDIT_THE_REFERENCE_TYPE'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/metadata/objects/documents/annotations/references/types/${reference_type}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/services/queues/{queue_name}/actions/enable_delivery", () => {
        let queueName = 'TODO_EDIT_THE_QUEUE_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/services/queues/${queue_name}/actions/enable_delivery`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.put(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/objectworkflows/tasks/{task_id}/actions/cancel", () => {
        let taskId = 'TODO_EDIT_THE_TASK_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/objectworkflows/tasks/${task_id}/actions/cancel`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/audittrail/{audit_trail_type}", () => {
        let formatResult = 'TODO_EDIT_THE_FORMAT_RESULT'; // specify value as there is no example value for this parameter in OpenAPI spec
        let offset = 'TODO_EDIT_THE_OFFSET'; // specify value as there is no example value for this parameter in OpenAPI spec
        let endDate = 'TODO_EDIT_THE_END_DATE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let auditTrailType = 'TODO_EDIT_THE_AUDIT_TRAIL_TYPE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let objects = 'TODO_EDIT_THE_OBJECTS'; // specify value as there is no example value for this parameter in OpenAPI spec
        let limit = 'TODO_EDIT_THE_LIMIT'; // specify value as there is no example value for this parameter in OpenAPI spec
        let startDate = 'TODO_EDIT_THE_START_DATE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let allDates = 'TODO_EDIT_THE_ALL_DATES'; // specify value as there is no example value for this parameter in OpenAPI spec
        let events = 'TODO_EDIT_THE_EVENTS'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/audittrail/${audit_trail_type}?start_date=${start_date}&end_date=${end_date}&all_dates=${all_dates}&format_result=${format_result}&limit=${limit}&offset=${offset}&objects=${objects}&events=${events}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/documents/actions/{lifecycle_and_state_and_action}/{job_id}/results", () => {
        let jobId = 'TODO_EDIT_THE_JOB_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let lifecycleAndStateAndAction = 'TODO_EDIT_THE_LIFECYCLE_AND_STATE_AND_ACTION'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/documents/actions/${lifecycle_and_state_and_action}/${job_id}/results`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/logs/code/debug", () => {
        let includeInactive = 'true'; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let userId = 'TODO_EDIT_THE_USER_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/logs/code/debug?user_id=${user_id}&include_inactive=${include_inactive}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: 
        {
            let url = BASE_URL + `/logs/code/debug`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/metadata/query/archived_documents/relationships/document_signature__sysr", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/metadata/query/archived_documents/relationships/document_signature__sysr`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/users/me", () => {
        let excludeAppLicensing = 'TODO_EDIT_THE_EXCLUDE_APP_LICENSING'; // specify value as there is no example value for this parameter in OpenAPI spec
        let excludeVaultMembership = 'TODO_EDIT_THE_EXCLUDE_VAULT_MEMBERSHIP'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/users/me?exclude_vault_membership=${exclude_vault_membership}&exclude_app_licensing=${exclude_app_licensing}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: 
        {
            let url = BASE_URL + `/objects/users/me`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.put(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/configuration/{component_type_and_record_name}", () => {
        let loc = 'TODO_EDIT_THE_LOC'; // specify value as there is no example value for this parameter in OpenAPI spec
        let componentTypeAndRecordName = 'TODO_EDIT_THE_COMPONENT_TYPE_AND_RECORD_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/configuration/${component_type_and_record_name}?loc=${loc}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/metadata/vobjects/{object_name}/actions/canceldeployment", () => {
        let objectName = 'TODO_EDIT_THE_OBJECT_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/metadata/vobjects/${object_name}/actions/canceldeployment`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/vobjects/{object_name}/{object_record_id}/actions/{action_name}", () => {
        let objectRecordId = 'TODO_EDIT_THE_OBJECT_RECORD_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let objectName = 'TODO_EDIT_THE_OBJECT_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec
        let actionName = 'TODO_EDIT_THE_ACTION_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/vobjects/${object_name}/${object_record_id}/actions/${action_name}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: 
        {
            let url = BASE_URL + `/vobjects/${object_name}/${object_record_id}/actions/${action_name}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Content-Type": `${contentType}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/object/workflow/actions/reassigntasks", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/object/workflow/actions/reassigntasks`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/object/workflow/actions/{action}", () => {
        let action = 'TODO_EDIT_THE_ACTION'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/object/workflow/actions/${action}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: 
        {
            let url = BASE_URL + `/object/workflow/actions/${action}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/objectworkflows/{workflow_id}/actions", () => {
        let loc = 'TODO_EDIT_THE_LOC'; // specify value as there is no example value for this parameter in OpenAPI spec
        let workflowId = 'TODO_EDIT_THE_WORKFLOW_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/objectworkflows/${workflow_id}/actions?loc=${loc}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/configuration/role_assignment_rule", () => {
        let countryV = 'TODO_EDIT_THE_COUNTRY__V'; // specify value as there is no example value for this parameter in OpenAPI spec
        let roleV = 'TODO_EDIT_THE_ROLE__V'; // specify value as there is no example value for this parameter in OpenAPI spec
        let studyV = 'TODO_EDIT_THE_STUDY__V'; // specify value as there is no example value for this parameter in OpenAPI spec
        let productV = 'TODO_EDIT_THE_PRODUCT__V'; // specify value as there is no example value for this parameter in OpenAPI spec
        let lifecycleV = 'TODO_EDIT_THE_LIFECYCLE__V'; // specify value as there is no example value for this parameter in OpenAPI spec
        let studyCountryV = 'TODO_EDIT_THE_STUDY_COUNTRY__V'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/configuration/role_assignment_rule?lifecycle__v=${lifecycle__v}&role__v=${role__v}&product__v=${product__v}&country__v=${country__v}&study__v=${study__v}&study_country__v=${study_country__v}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: 
        {
            let url = BASE_URL + `/configuration/role_assignment_rule`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.put(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 3: 
        {
            let url = BASE_URL + `/configuration/role_assignment_rule`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 4: 
        {
            let url = BASE_URL + `/configuration/role_assignment_rule`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            // this is a DELETE method request - if params are also set, empty body must be passed
            let request = http.del(url, {} , params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/objectworkflows/tasks", () => {
        let loc = 'TODO_EDIT_THE_LOC'; // specify value as there is no example value for this parameter in OpenAPI spec
        let recordIdV = 'TODO_EDIT_THE_RECORD_ID__V'; // specify value as there is no example value for this parameter in OpenAPI spec
        let objectV = 'TODO_EDIT_THE_OBJECT__V'; // specify value as there is no example value for this parameter in OpenAPI spec
        let offset = 'TODO_EDIT_THE_OFFSET'; // specify value as there is no example value for this parameter in OpenAPI spec
        let statusV = 'TODO_EDIT_THE_STATUS__V'; // specify value as there is no example value for this parameter in OpenAPI spec
        let pageSize = 'TODO_EDIT_THE_PAGE_SIZE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let assigneeV = 'TODO_EDIT_THE_ASSIGNEE__V'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/objectworkflows/tasks?object__v=${object__v}&record_id__v=${record_id__v}&assignee__v=${assignee__v}&status__v=${status__v}&offset=${offset}&page_size=${page_size}&loc=${loc}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/logs/code/debug/{id}/files", () => {
        let id = 'TODO_EDIT_THE_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/logs/code/debug/${id}/files`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/delegation/vaults", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/delegation/vaults`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/deletions/vobjects/{object_name}", () => {
        let objectName = 'TODO_EDIT_THE_OBJECT_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/deletions/vobjects/${object_name}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/documents/batch", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/documents/batch`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-MigrationMode": `${xVaultAPIMigrationMode}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.put(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: 
        {
            let url = BASE_URL + `/objects/documents/batch`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-MigrationMode": `${xVaultAPIMigrationMode}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 3: 
        {
            let url = BASE_URL + `/objects/documents/batch?idParam=${idParam}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            // this is a DELETE method request - if params are also set, empty body must be passed
            let request = http.del(url, {} , params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/metadata/objects/documents/properties", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/metadata/objects/documents/properties`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/vobjects/deepcopy/results/{object_name}/{job_status}/{job_id}", () => {
        let jobId = 'TODO_EDIT_THE_JOB_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let jobStatus = 'TODO_EDIT_THE_JOB_STATUS'; // specify value as there is no example value for this parameter in OpenAPI spec
        let objectName = 'TODO_EDIT_THE_OBJECT_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/vobjects/deepcopy/results/${object_name}/${job_status}/${job_id}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/binders/templates/{template_name}", () => {
        let templateName = 'TODO_EDIT_THE_TEMPLATE_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/binders/templates/${template_name}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: 
        {
            let url = BASE_URL + `/objects/binders/templates/${template_name}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            // this is a DELETE method request - if params are also set, empty body must be passed
            let request = http.del(url, {} , params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/binders/{id}/roles", () => {
        let id = 'TODO_EDIT_THE_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/binders/${id}/roles`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: 
        {
            let url = BASE_URL + `/objects/binders/${id}/roles`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/vobjects/{object_name}/actions/merge", () => {
        let objectName = 'TODO_EDIT_THE_OBJECT_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/vobjects/${object_name}/actions/merge`;
            let params = {
                headers: {
                    "Content-Type": "application/json", "Authorization": `${authorization}`, "Content-Type": `${contentType}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/users/{user_id}/vault_membership/{vault_id}", () => {
        let vaultId = 'TODO_EDIT_THE_VAULT_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let userId = 'TODO_EDIT_THE_USER_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/users/${user_id}/vault_membership/${vault_id}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Content-Type": `${contentType}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.put(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/metadata/vobjects/{object_name}/page_layouts", () => {
        let objectName = 'TODO_EDIT_THE_OBJECT_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/metadata/vobjects/${object_name}/page_layouts`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/services/certificate/{cert_id}", () => {
        let certId = 'TODO_EDIT_THE_CERT_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/services/certificate/${cert_id}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/objectworkflows/tasks/{task_id}", () => {
        let loc = 'true'; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let taskId = 'TODO_EDIT_THE_TASK_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/objectworkflows/tasks/${task_id}?loc=${loc}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/services/file_staging/upload/{upload_session_id}/parts", () => {
        let uploadSessionId = 'TODO_EDIT_THE_UPLOAD_SESSION_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let limit = 'TODO_EDIT_THE_LIMIT'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/services/file_staging/upload/${upload_session_id}/parts?limit=${limit}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/metadata/objects/documents/types/{type}/subtypes/{subtype}", () => {
        let subtype = 'TODO_EDIT_THE_SUBTYPE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let type = 'TODO_EDIT_THE_TYPE'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/metadata/objects/documents/types/${type}/subtypes/${subtype}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/thumbnail", () => {
        let docId = 'TODO_EDIT_THE_DOC_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let majorVersion = 'TODO_EDIT_THE_MAJOR_VERSION'; // specify value as there is no example value for this parameter in OpenAPI spec
        let minorVersion = 'TODO_EDIT_THE_MINOR_VERSION'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/documents/${doc_id}/versions/${major_version}/${minor_version}/thumbnail`;
            let params = {
                headers: {
                    "Accept": `${accept}`, "Authorization": `${authorization}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/documents/{doc_id}/roles/{role_name_and_user_or_group}/{id}", () => {
        let docId = 'TODO_EDIT_THE_DOC_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let roleNameAndUserOrGroup = 'TODO_EDIT_THE_ROLE_NAME_AND_USER_OR_GROUP'; // specify value as there is no example value for this parameter in OpenAPI spec
        let id = 'TODO_EDIT_THE_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/documents/${doc_id}/roles/${role_name_and_user_or_group}/${id}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            // this is a DELETE method request - if params are also set, empty body must be passed
            let request = http.del(url, {} , params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/attachments/{attachment_id}/versions/{attachment_version}", () => {
        let docId = 'TODO_EDIT_THE_DOC_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let attachmentId = 'TODO_EDIT_THE_ATTACHMENT_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let majorVersion = 'TODO_EDIT_THE_MAJOR_VERSION'; // specify value as there is no example value for this parameter in OpenAPI spec
        let minorVersion = 'TODO_EDIT_THE_MINOR_VERSION'; // specify value as there is no example value for this parameter in OpenAPI spec
        let attachmentVersion = 'TODO_EDIT_THE_ATTACHMENT_VERSION'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/documents/${doc_id}/versions/${major_version}/${minor_version}/attachments/${attachment_id}/versions/${attachment_version}`;
            let params = {
                headers: {
                    "Accept": `${accept}`, "Authorization": `${authorization}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/composites/trees/{edl_hierarchy_or_template}", () => {
        let edlHierarchyOrTemplate = 'TODO_EDIT_THE_EDL_HIERARCHY_OR_TEMPLATE'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/composites/trees/${edl_hierarchy_or_template}`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Content-Type": `${contentType}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/vobject/vault_package__v/{package_id}/actions/deploy/results", () => {
        let packageId = 'TODO_EDIT_THE_PACKAGE_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/vobject/vault_package__v/${package_id}/actions/deploy/results`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/object/workflow/actions/canceltasks", () => {

        // Request No. 1: 
        {
            let url = BASE_URL + `/object/workflow/actions/canceltasks`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/documents/{doc_id}/attachments/{attachment_id}/versions", () => {
        let docId = 'TODO_EDIT_THE_DOC_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let attachmentId = 'TODO_EDIT_THE_ATTACHMENT_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/documents/${doc_id}/attachments/${attachment_id}/versions`;
            let params = {
                headers: {
                    "Accept": `${accept}`, "Authorization": `${authorization}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/objects/documents/templates/{template_name}/file", () => {
        let templateName = 'TODO_EDIT_THE_TEMPLATE_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/objects/documents/templates/${template_name}/file`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/vobjects/{object_name}/roles", () => {
        let objectName = 'TODO_EDIT_THE_OBJECT_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/vobjects/${object_name}/roles`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: 
        {
            let url = BASE_URL + `/vobjects/${object_name}/roles`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "Content-Type": `${contentType}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            // this is a DELETE method request - if params are also set, empty body must be passed
            let request = http.del(url, {} , params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/services/jobs/{job_id}/errors", () => {
        let jobId = 'TODO_EDIT_THE_JOB_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/services/jobs/${job_id}/errors`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/vobjects/outbound_package__v/{package_id}/dependencies", () => {
        let packageId = 'TODO_EDIT_THE_PACKAGE_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: 
        {
            let url = BASE_URL + `/vobjects/outbound_package__v/${package_id}/dependencies`;
            let params = {
                headers: {
                    "Authorization": `${authorization}`, "Accept": `${accept}`, "X-VaultAPI-ClientID": `${xVaultAPIClientID}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

}
