=begin comment

Veeva Vault API v25.1

The latest GA version of the Vault REST API.

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::DefaultApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# api_get
#
# Retrieve API Versions
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'api_get' } = {
        summary => 'Retrieve API Versions',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub api_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# api_mdl_components_component_type_and_record_name_files_get
#
# Retrieve Content File
#
# @param string $component_type_and_record_name The component type of the record followed by the name of the record from which to retrieve the content file. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Formattedoutput.my_formatted_output__c&#x60;. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'component_type_and_record_name' => {
        data_type => 'string',
        description => 'The component type of the record followed by the name of the record from which to retrieve the content file. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Formattedoutput.my_formatted_output__c&#x60;.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'api_mdl_components_component_type_and_record_name_files_get' } = {
        summary => 'Retrieve Content File',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub api_mdl_components_component_type_and_record_name_files_get {
    my ($self, %args) = @_;

    # verify the required parameter 'component_type_and_record_name' is set
    unless (exists $args{'component_type_and_record_name'}) {
      croak("Missing the required parameter 'component_type_and_record_name' when calling api_mdl_components_component_type_and_record_name_files_get");
    }

    # parse inputs
    my $_resource_path = '/api/mdl/components/{component_type_and_record_name}/files';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'component_type_and_record_name'}) {
        my $_base_variable = "{" . "component_type_and_record_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'component_type_and_record_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# api_mdl_components_component_type_and_record_name_get
#
# Retrieve Component Record (MDL)
#
# @param string $component_type_and_record_name The component type name (&#x60;Picklist&#x60;, &#x60;Docfield&#x60;, &#x60;Doctype&#x60;, etc.) followed by the name of the record from which to retrieve metadata. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Picklist.color__c&#x60;. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'component_type_and_record_name' => {
        data_type => 'string',
        description => 'The component type name (&#x60;Picklist&#x60;, &#x60;Docfield&#x60;, &#x60;Doctype&#x60;, etc.) followed by the name of the record from which to retrieve metadata. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Picklist.color__c&#x60;. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'api_mdl_components_component_type_and_record_name_get' } = {
        summary => 'Retrieve Component Record (MDL)',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub api_mdl_components_component_type_and_record_name_get {
    my ($self, %args) = @_;

    # verify the required parameter 'component_type_and_record_name' is set
    unless (exists $args{'component_type_and_record_name'}) {
      croak("Missing the required parameter 'component_type_and_record_name' when calling api_mdl_components_component_type_and_record_name_get");
    }

    # parse inputs
    my $_resource_path = '/api/mdl/components/{component_type_and_record_name}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'component_type_and_record_name'}) {
        my $_base_variable = "{" . "component_type_and_record_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'component_type_and_record_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# api_mdl_execute_async_job_id_results_get
#
# Retrieve Asynchronous MDL Script Results
#
# @param string $job_id  (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'job_id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'api_mdl_execute_async_job_id_results_get' } = {
        summary => 'Retrieve Asynchronous MDL Script Results',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub api_mdl_execute_async_job_id_results_get {
    my ($self, %args) = @_;

    # verify the required parameter 'job_id' is set
    unless (exists $args{'job_id'}) {
      croak("Missing the required parameter 'job_id' when calling api_mdl_execute_async_job_id_results_get");
    }

    # parse inputs
    my $_resource_path = '/api/mdl/execute_async/{job_id}/results';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'job_id'}) {
        my $_base_variable = "{" . "job_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'job_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# api_mdl_execute_async_post
#
# Execute MDL Script Asynchronously
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'api_mdl_execute_async_post' } = {
        summary => 'Execute MDL Script Asynchronously',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub api_mdl_execute_async_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/mdl/execute_async';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# api_mdl_execute_post
#
# Execute MDL Script
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'api_mdl_execute_post' } = {
        summary => 'Execute MDL Script',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub api_mdl_execute_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/mdl/execute';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# api_mdl_files_post
#
# Upload Content File
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'api_mdl_files_post' } = {
        summary => 'Upload Content File',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub api_mdl_files_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/mdl/files';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# audittrail_audit_trail_type_get
#
# Retrieve Audit Details
#
# @param string $audit_trail_type The name of the specified audit type (document_audit_trail, object_audit_trail, etc). Use the Retrieve Audit Types API to retrieve types available in your Vault. Requests for login_audit_trail only accept one request per user at a time. (required)
# @param string $start_date Specify a start date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days. (optional)
# @param string $end_date Specify an end date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days. (optional)
# @param string $all_dates Set to true to request audit information for all dates. You must leave start_date and end_date blank when requesting an export of a full audit trail. (optional)
# @param string $format_result To request a downloadable CSV file of your audit details, use csv. The response contains a jobId to retrieve the job status, which contains a link to download the CSV file. If omitted, the API returns a JSON response and does not start a job. If all_dates is true, this parameter is required. (optional)
# @param string $limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200. (optional)
# @param string $offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0. (optional)
# @param string $objects This is an optional parameter when specifying object_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more object names to retrieve their audit details. For example, objects&#x3D;product__v,country__v. If omitted, defaults to all objects. (optional)
# @param string $events This is an optional parameter when specifying object_audit_trail or document_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more audit events to retrieve their audit details. For example, events&#x3D;Edit,Delete,TaskAssignment. If omitted, defaults to all audit events. See Vault Help for full lists of object audit events and document audit events. (optional)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'audit_trail_type' => {
        data_type => 'string',
        description => 'The name of the specified audit type (document_audit_trail, object_audit_trail, etc). Use the Retrieve Audit Types API to retrieve types available in your Vault. Requests for login_audit_trail only accept one request per user at a time.',
        required => '1',
    },
    'start_date' => {
        data_type => 'string',
        description => 'Specify a start date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days.',
        required => '0',
    },
    'end_date' => {
        data_type => 'string',
        description => 'Specify an end date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days.',
        required => '0',
    },
    'all_dates' => {
        data_type => 'string',
        description => 'Set to true to request audit information for all dates. You must leave start_date and end_date blank when requesting an export of a full audit trail.',
        required => '0',
    },
    'format_result' => {
        data_type => 'string',
        description => 'To request a downloadable CSV file of your audit details, use csv. The response contains a jobId to retrieve the job status, which contains a link to download the CSV file. If omitted, the API returns a JSON response and does not start a job. If all_dates is true, this parameter is required.',
        required => '0',
    },
    'limit' => {
        data_type => 'string',
        description => 'Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.',
        required => '0',
    },
    'offset' => {
        data_type => 'string',
        description => 'Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0.',
        required => '0',
    },
    'objects' => {
        data_type => 'string',
        description => 'This is an optional parameter when specifying object_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more object names to retrieve their audit details. For example, objects&#x3D;product__v,country__v. If omitted, defaults to all objects.',
        required => '0',
    },
    'events' => {
        data_type => 'string',
        description => 'This is an optional parameter when specifying object_audit_trail or document_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more audit events to retrieve their audit details. For example, events&#x3D;Edit,Delete,TaskAssignment. If omitted, defaults to all audit events. See Vault Help for full lists of object audit events and document audit events.',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'audittrail_audit_trail_type_get' } = {
        summary => 'Retrieve Audit Details',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub audittrail_audit_trail_type_get {
    my ($self, %args) = @_;

    # verify the required parameter 'audit_trail_type' is set
    unless (exists $args{'audit_trail_type'}) {
      croak("Missing the required parameter 'audit_trail_type' when calling audittrail_audit_trail_type_get");
    }

    # parse inputs
    my $_resource_path = '/audittrail/{audit_trail_type}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'start_date'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'end_date'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'all_dates'}) {
        $query_params->{'all_dates'} = $self->{api_client}->to_query_value($args{'all_dates'});
    }

    # query params
    if ( exists $args{'format_result'}) {
        $query_params->{'format_result'} = $self->{api_client}->to_query_value($args{'format_result'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }

    # query params
    if ( exists $args{'objects'}) {
        $query_params->{'objects'} = $self->{api_client}->to_query_value($args{'objects'});
    }

    # query params
    if ( exists $args{'events'}) {
        $query_params->{'events'} = $self->{api_client}->to_query_value($args{'events'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'audit_trail_type'}) {
        my $_base_variable = "{" . "audit_trail_type" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'audit_trail_type'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# auth_discovery_post
#
# Authentication Type Discovery
#
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'auth_discovery_post' } = {
        summary => 'Authentication Type Discovery',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub auth_discovery_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/auth/discovery';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# auth_oauth_session_oath_oidc_profile_id_post
#
# OAuth 2.0 / OpenID Connect
#
# @param string $oath_oidc_profile_id  (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'oath_oidc_profile_id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'auth_oauth_session_oath_oidc_profile_id_post' } = {
        summary => 'OAuth 2.0 / OpenID Connect',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub auth_oauth_session_oath_oidc_profile_id_post {
    my ($self, %args) = @_;

    # verify the required parameter 'oath_oidc_profile_id' is set
    unless (exists $args{'oath_oidc_profile_id'}) {
      croak("Missing the required parameter 'oath_oidc_profile_id' when calling auth_oauth_session_oath_oidc_profile_id_post");
    }

    # parse inputs
    my $_resource_path = '/auth/oauth/session/{oath_oidc_profile_id}';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'oath_oidc_profile_id'}) {
        my $_base_variable = "{" . "oath_oidc_profile_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'oath_oidc_profile_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# auth_post
#
# User Name and Password
#
# @param string $content_type  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'auth_post' } = {
        summary => 'User Name and Password',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub auth_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/auth';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# code_class_name_delete
#
# Delete Single Source Code File
#
# @param string $class_name The fully qualified class name of your file. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'class_name' => {
        data_type => 'string',
        description => 'The fully qualified class name of your file.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'code_class_name_delete' } = {
        summary => 'Delete Single Source Code File',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub code_class_name_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'class_name' is set
    unless (exists $args{'class_name'}) {
      croak("Missing the required parameter 'class_name' when calling code_class_name_delete");
    }

    # parse inputs
    my $_resource_path = '/code/{class_name}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'class_name'}) {
        my $_base_variable = "{" . "class_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'class_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# code_class_name_disable_put
#
# Disable Vault Extension
#
# @param string $class_name The fully qualified class name of your file. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'class_name' => {
        data_type => 'string',
        description => 'The fully qualified class name of your file.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'code_class_name_disable_put' } = {
        summary => 'Disable Vault Extension',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub code_class_name_disable_put {
    my ($self, %args) = @_;

    # verify the required parameter 'class_name' is set
    unless (exists $args{'class_name'}) {
      croak("Missing the required parameter 'class_name' when calling code_class_name_disable_put");
    }

    # parse inputs
    my $_resource_path = '/code/{class_name}/disable';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'class_name'}) {
        my $_base_variable = "{" . "class_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'class_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# code_class_name_enable_put
#
# Enable Vault Extension
#
# @param string $class_name The fully qualified class name of your file. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'class_name' => {
        data_type => 'string',
        description => 'The fully qualified class name of your file.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'code_class_name_enable_put' } = {
        summary => 'Enable Vault Extension',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub code_class_name_enable_put {
    my ($self, %args) = @_;

    # verify the required parameter 'class_name' is set
    unless (exists $args{'class_name'}) {
      croak("Missing the required parameter 'class_name' when calling code_class_name_enable_put");
    }

    # parse inputs
    my $_resource_path = '/code/{class_name}/enable';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'class_name'}) {
        my $_base_variable = "{" . "class_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'class_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# code_class_name_get
#
# Retrieve Single Source Code File
#
# @param string $class_name The fully qualified class name of your file. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'class_name' => {
        data_type => 'string',
        description => 'The fully qualified class name of your file.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'code_class_name_get' } = {
        summary => 'Retrieve Single Source Code File',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub code_class_name_get {
    my ($self, %args) = @_;

    # verify the required parameter 'class_name' is set
    unless (exists $args{'class_name'}) {
      croak("Missing the required parameter 'class_name' when calling code_class_name_get");
    }

    # parse inputs
    my $_resource_path = '/code/{class_name}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'class_name'}) {
        my $_base_variable = "{" . "class_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'class_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# code_profiler_get
#
# Retrieve All Profiling Sessions
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'code_profiler_get' } = {
        summary => 'Retrieve All Profiling Sessions',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub code_profiler_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/code/profiler';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# code_profiler_post
#
# Create Profiling Session
#
# @param string $authorization  (optional)
# @param string $content_type  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'code_profiler_post' } = {
        summary => 'Create Profiling Session',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub code_profiler_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/code/profiler';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# code_profiler_session_name_actions_end_post
#
# End Profiling Session
#
# @param string $session_name The name of the session, for example,  baseline__c. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'session_name' => {
        data_type => 'string',
        description => 'The name of the session, for example,  baseline__c.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'code_profiler_session_name_actions_end_post' } = {
        summary => 'End Profiling Session',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub code_profiler_session_name_actions_end_post {
    my ($self, %args) = @_;

    # verify the required parameter 'session_name' is set
    unless (exists $args{'session_name'}) {
      croak("Missing the required parameter 'session_name' when calling code_profiler_session_name_actions_end_post");
    }

    # parse inputs
    my $_resource_path = '/code/profiler/{session_name}/actions/end';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'session_name'}) {
        my $_base_variable = "{" . "session_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'session_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# code_profiler_session_name_delete
#
# Delete Profiling Session
#
# @param string $session_name The name of the session, for example,  baseline__c. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'session_name' => {
        data_type => 'string',
        description => 'The name of the session, for example,  baseline__c.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'code_profiler_session_name_delete' } = {
        summary => 'Delete Profiling Session',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub code_profiler_session_name_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'session_name' is set
    unless (exists $args{'session_name'}) {
      croak("Missing the required parameter 'session_name' when calling code_profiler_session_name_delete");
    }

    # parse inputs
    my $_resource_path = '/code/profiler/{session_name}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'session_name'}) {
        my $_base_variable = "{" . "session_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'session_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# code_profiler_session_name_get
#
# Retrieve Profiling Session
#
# @param string $session_name The name of the session, for example,  baseline__c. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'session_name' => {
        data_type => 'string',
        description => 'The name of the session, for example,  baseline__c.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'code_profiler_session_name_get' } = {
        summary => 'Retrieve Profiling Session',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub code_profiler_session_name_get {
    my ($self, %args) = @_;

    # verify the required parameter 'session_name' is set
    unless (exists $args{'session_name'}) {
      croak("Missing the required parameter 'session_name' when calling code_profiler_session_name_get");
    }

    # parse inputs
    my $_resource_path = '/code/profiler/{session_name}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'session_name'}) {
        my $_base_variable = "{" . "session_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'session_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# code_profiler_session_name_results_get
#
# Download Profiling Session Results
#
# @param string $session_name The name of the session, for example,  baseline__c. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'session_name' => {
        data_type => 'string',
        description => 'The name of the session, for example,  baseline__c.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'code_profiler_session_name_results_get' } = {
        summary => 'Download Profiling Session Results',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub code_profiler_session_name_results_get {
    my ($self, %args) = @_;

    # verify the required parameter 'session_name' is set
    unless (exists $args{'session_name'}) {
      croak("Missing the required parameter 'session_name' when calling code_profiler_session_name_results_get");
    }

    # parse inputs
    my $_resource_path = '/code/profiler/{session_name}/results';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'session_name'}) {
        my $_base_variable = "{" . "session_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'session_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# code_put
#
# Add or Replace Single Source Code File
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'code_put' } = {
        summary => 'Add or Replace Single Source Code File',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub code_put {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/code';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# composites_trees_edl_hierarchy_or_template_actions_listnodes_post
#
# Retrieve Specific Root Nodes
#
# @param string $edl_hierarchy_or_template Choose to retrieve either edl_hierarchy__v or edl_template__v (required)
# @param string $authorization  (optional)
# @param string $content_type  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'edl_hierarchy_or_template' => {
        data_type => 'string',
        description => 'Choose to retrieve either edl_hierarchy__v or edl_template__v',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'composites_trees_edl_hierarchy_or_template_actions_listnodes_post' } = {
        summary => 'Retrieve Specific Root Nodes',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub composites_trees_edl_hierarchy_or_template_actions_listnodes_post {
    my ($self, %args) = @_;

    # verify the required parameter 'edl_hierarchy_or_template' is set
    unless (exists $args{'edl_hierarchy_or_template'}) {
      croak("Missing the required parameter 'edl_hierarchy_or_template' when calling composites_trees_edl_hierarchy_or_template_actions_listnodes_post");
    }

    # parse inputs
    my $_resource_path = '/composites/trees/{edl_hierarchy_or_template}/actions/listnodes';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'edl_hierarchy_or_template'}) {
        my $_base_variable = "{" . "edl_hierarchy_or_template" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'edl_hierarchy_or_template'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# composites_trees_edl_hierarchy_or_template_get
#
# Retrieve All Root Nodes
#
# @param string $edl_hierarchy_or_template  (required)
# @param string $authorization  (optional)
# @param string $content_type  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'edl_hierarchy_or_template' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'composites_trees_edl_hierarchy_or_template_get' } = {
        summary => 'Retrieve All Root Nodes',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub composites_trees_edl_hierarchy_or_template_get {
    my ($self, %args) = @_;

    # verify the required parameter 'edl_hierarchy_or_template' is set
    unless (exists $args{'edl_hierarchy_or_template'}) {
      croak("Missing the required parameter 'edl_hierarchy_or_template' when calling composites_trees_edl_hierarchy_or_template_get");
    }

    # parse inputs
    my $_resource_path = '/composites/trees/{edl_hierarchy_or_template}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'edl_hierarchy_or_template'}) {
        my $_base_variable = "{" . "edl_hierarchy_or_template" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'edl_hierarchy_or_template'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# composites_trees_edl_hierarchy_v_parent_node_id_children_get
#
# Retrieve a Node's Children
#
# @param string $parent_node_id The ID of a parent node in the hierarchy. (required)
# @param string $authorization  (optional)
# @param string $content_type  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'parent_node_id' => {
        data_type => 'string',
        description => 'The ID of a parent node in the hierarchy.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'composites_trees_edl_hierarchy_v_parent_node_id_children_get' } = {
        summary => 'Retrieve a Node&#39;s Children',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub composites_trees_edl_hierarchy_v_parent_node_id_children_get {
    my ($self, %args) = @_;

    # verify the required parameter 'parent_node_id' is set
    unless (exists $args{'parent_node_id'}) {
      croak("Missing the required parameter 'parent_node_id' when calling composites_trees_edl_hierarchy_v_parent_node_id_children_get");
    }

    # parse inputs
    my $_resource_path = '/composites/trees/edl_hierarchy__v/{parent_node_id}/children';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'parent_node_id'}) {
        my $_base_variable = "{" . "parent_node_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'parent_node_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# composites_trees_edl_hierarchy_v_parent_node_id_children_put
#
# Update Node Order
#
# @param string $parent_node_id The ID of a parent node in the hierarchy. (required)
# @param string $authorization  (optional)
# @param string $content_type  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'parent_node_id' => {
        data_type => 'string',
        description => 'The ID of a parent node in the hierarchy.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'composites_trees_edl_hierarchy_v_parent_node_id_children_put' } = {
        summary => 'Update Node Order',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub composites_trees_edl_hierarchy_v_parent_node_id_children_put {
    my ($self, %args) = @_;

    # verify the required parameter 'parent_node_id' is set
    unless (exists $args{'parent_node_id'}) {
      croak("Missing the required parameter 'parent_node_id' when calling composites_trees_edl_hierarchy_v_parent_node_id_children_put");
    }

    # parse inputs
    my $_resource_path = '/composites/trees/edl_hierarchy__v/{parent_node_id}/children';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'parent_node_id'}) {
        my $_base_variable = "{" . "parent_node_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'parent_node_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# configuration_component_type_and_record_name_get
#
# Retrieve Component Record (XML/JSON)
#
# @param string $component_type_and_record_name The component type name (&#x60;Picklist&#x60;, &#x60;Docfield&#x60;, &#x60;Doctype&#x60;, etc.) followed by the name of the record from which to retrieve metadata. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Picklist.color__c&#x60;. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint. (required)
# @param string $loc When localized (translated) strings are available, retrieve them by setting loc to true. (optional)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'component_type_and_record_name' => {
        data_type => 'string',
        description => 'The component type name (&#x60;Picklist&#x60;, &#x60;Docfield&#x60;, &#x60;Doctype&#x60;, etc.) followed by the name of the record from which to retrieve metadata. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Picklist.color__c&#x60;. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint.',
        required => '1',
    },
    'loc' => {
        data_type => 'string',
        description => 'When localized (translated) strings are available, retrieve them by setting loc to true.',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'configuration_component_type_and_record_name_get' } = {
        summary => 'Retrieve Component Record (XML/JSON)',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub configuration_component_type_and_record_name_get {
    my ($self, %args) = @_;

    # verify the required parameter 'component_type_and_record_name' is set
    unless (exists $args{'component_type_and_record_name'}) {
      croak("Missing the required parameter 'component_type_and_record_name' when calling configuration_component_type_and_record_name_get");
    }

    # parse inputs
    my $_resource_path = '/configuration/{component_type_and_record_name}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'loc'}) {
        $query_params->{'loc'} = $self->{api_client}->to_query_value($args{'loc'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'component_type_and_record_name'}) {
        my $_base_variable = "{" . "component_type_and_record_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'component_type_and_record_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# configuration_component_type_get
#
# Retrieve Component Record Collection
#
# @param string $component_type  (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'component_type' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'configuration_component_type_get' } = {
        summary => 'Retrieve Component Record Collection',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub configuration_component_type_get {
    my ($self, %args) = @_;

    # verify the required parameter 'component_type' is set
    unless (exists $args{'component_type'}) {
      croak("Missing the required parameter 'component_type' when calling configuration_component_type_get");
    }

    # parse inputs
    my $_resource_path = '/configuration/{component_type}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'component_type'}) {
        my $_base_variable = "{" . "component_type" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'component_type'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# configuration_object_name_and_object_type_get
#
# Retrieve Details from a Specific Object
#
# @param string $object_name_and_object_type The object name followed by the object type in the format &#x60;Objecttype.{object_name}.{object_type}&#x60;. For example, &#x60;Objecttype.product__v.base__v&#x60;. (required)
# @param string $loc When localized (translated) strings are available, retrieve them by setting loc to true. (optional)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'object_name_and_object_type' => {
        data_type => 'string',
        description => 'The object name followed by the object type in the format &#x60;Objecttype.{object_name}.{object_type}&#x60;. For example, &#x60;Objecttype.product__v.base__v&#x60;.',
        required => '1',
    },
    'loc' => {
        data_type => 'string',
        description => 'When localized (translated) strings are available, retrieve them by setting loc to true.',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'configuration_object_name_and_object_type_get' } = {
        summary => 'Retrieve Details from a Specific Object',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub configuration_object_name_and_object_type_get {
    my ($self, %args) = @_;

    # verify the required parameter 'object_name_and_object_type' is set
    unless (exists $args{'object_name_and_object_type'}) {
      croak("Missing the required parameter 'object_name_and_object_type' when calling configuration_object_name_and_object_type_get");
    }

    # parse inputs
    my $_resource_path = '/configuration/{object_name_and_object_type}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'loc'}) {
        $query_params->{'loc'} = $self->{api_client}->to_query_value($args{'loc'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'object_name_and_object_type'}) {
        my $_base_variable = "{" . "object_name_and_object_type" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'object_name_and_object_type'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# configuration_objecttype_get
#
# Retrieve Details from All Object Types
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'configuration_objecttype_get' } = {
        summary => 'Retrieve Details from All Object Types',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub configuration_objecttype_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/configuration/Objecttype';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# configuration_role_assignment_rule_delete
#
# Delete Lifecycle Role Assignment Override Rules
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'configuration_role_assignment_rule_delete' } = {
        summary => 'Delete Lifecycle Role Assignment Override Rules',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub configuration_role_assignment_rule_delete {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/configuration/role_assignment_rule';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# configuration_role_assignment_rule_get
#
# Retrieve Lifecycle Role Assignment Rules (Default & Override)
#
# @param string $lifecycle__v Include the name of the lifecycle from which to retrieve information. For example: lifecycle_v&#x3D;general_lifecycle__c (optional)
# @param string $role__v Include the name of the role from which to retrieve information. For example: role__v&#x3D;editor__c (optional)
# @param string $product__v Include the ID/name of a specific product to see product-based override rules to default users/allowed users for the lifecycle role. For example: product__v&#x3D;0PR0011001 or product__v.name__v&#x3D;CholeCap (optional)
# @param string $country__v Include the ID/name of a specific country to see country-based override rules to default users/allowed users for the lifecycle role. For example: country__v&#x3D;0CR0022002 or country__v.name__v&#x3D;United States (optional)
# @param string $study__v In eTMF Vaults only. Include the ID/name of a specific study to see study-based override rules to default users/allowed users for the lifecycle role. For example: study__v&#x3D;0ST0021J01 or study__v.name__v&#x3D;CholeCap Study (optional)
# @param string $study_country__v In eTMF Vaults only. Include the ID/name of a specific study country to see study country-based override rules to default users/allowed users for the lifecycle role. For example: study_country__v&#x3D;0SC0001001 or study_country__v.name__v&#x3D;Germany (optional)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'lifecycle__v' => {
        data_type => 'string',
        description => 'Include the name of the lifecycle from which to retrieve information. For example: lifecycle_v&#x3D;general_lifecycle__c',
        required => '0',
    },
    'role__v' => {
        data_type => 'string',
        description => 'Include the name of the role from which to retrieve information. For example: role__v&#x3D;editor__c',
        required => '0',
    },
    'product__v' => {
        data_type => 'string',
        description => 'Include the ID/name of a specific product to see product-based override rules to default users/allowed users for the lifecycle role. For example: product__v&#x3D;0PR0011001 or product__v.name__v&#x3D;CholeCap',
        required => '0',
    },
    'country__v' => {
        data_type => 'string',
        description => 'Include the ID/name of a specific country to see country-based override rules to default users/allowed users for the lifecycle role. For example: country__v&#x3D;0CR0022002 or country__v.name__v&#x3D;United States',
        required => '0',
    },
    'study__v' => {
        data_type => 'string',
        description => 'In eTMF Vaults only. Include the ID/name of a specific study to see study-based override rules to default users/allowed users for the lifecycle role. For example: study__v&#x3D;0ST0021J01 or study__v.name__v&#x3D;CholeCap Study',
        required => '0',
    },
    'study_country__v' => {
        data_type => 'string',
        description => 'In eTMF Vaults only. Include the ID/name of a specific study country to see study country-based override rules to default users/allowed users for the lifecycle role. For example: study_country__v&#x3D;0SC0001001 or study_country__v.name__v&#x3D;Germany',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'configuration_role_assignment_rule_get' } = {
        summary => 'Retrieve Lifecycle Role Assignment Rules (Default &amp; Override)',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub configuration_role_assignment_rule_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/configuration/role_assignment_rule';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'lifecycle__v'}) {
        $query_params->{'lifecycle__v'} = $self->{api_client}->to_query_value($args{'lifecycle__v'});
    }

    # query params
    if ( exists $args{'role__v'}) {
        $query_params->{'role__v'} = $self->{api_client}->to_query_value($args{'role__v'});
    }

    # query params
    if ( exists $args{'product__v'}) {
        $query_params->{'product__v'} = $self->{api_client}->to_query_value($args{'product__v'});
    }

    # query params
    if ( exists $args{'country__v'}) {
        $query_params->{'country__v'} = $self->{api_client}->to_query_value($args{'country__v'});
    }

    # query params
    if ( exists $args{'study__v'}) {
        $query_params->{'study__v'} = $self->{api_client}->to_query_value($args{'study__v'});
    }

    # query params
    if ( exists $args{'study_country__v'}) {
        $query_params->{'study_country__v'} = $self->{api_client}->to_query_value($args{'study_country__v'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# configuration_role_assignment_rule_post
#
# Create Lifecycle Role Assignment Override Rules
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'configuration_role_assignment_rule_post' } = {
        summary => 'Create Lifecycle Role Assignment Override Rules',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub configuration_role_assignment_rule_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/configuration/role_assignment_rule';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# configuration_role_assignment_rule_put
#
# Update Lifecycle Role Assignment Rules (Default & Override)
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'configuration_role_assignment_rule_put' } = {
        summary => 'Update Lifecycle Role Assignment Rules (Default &amp; Override)',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub configuration_role_assignment_rule_put {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/configuration/role_assignment_rule';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delegation_login_post
#
# Initiate Delegated Session
#
# @param string $authorization The sessionId of the currently authenticated user who will initiate the delegated session. Cannot be a delegated_sessionid. (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => 'The sessionId of the currently authenticated user who will initiate the delegated session. Cannot be a delegated_sessionid.',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'delegation_login_post' } = {
        summary => 'Initiate Delegated Session',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delegation_login_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/delegation/login';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delegation_vaults_get
#
# Retrieve Delegations
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'delegation_vaults_get' } = {
        summary => 'Retrieve Delegations',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delegation_vaults_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/delegation/vaults';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# keep_alive_post
#
# Session Keep Alive
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'keep_alive_post' } = {
        summary => 'Session Keep Alive',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub keep_alive_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/keep-alive';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# limits_get
#
# Retrieve Limits on Objects
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'limits_get' } = {
        summary => 'Retrieve Limits on Objects',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub limits_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/limits';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# logs_api_usage_get
#
# Download Daily API Usage
#
# @param string $date The day to retrieve the API Usage log. Date is in UTC and follows the format YYYY-MM-DD. Date cannot be more than 30 days in the past. (optional)
# @param string $log_format Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP.  (optional)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'date' => {
        data_type => 'string',
        description => 'The day to retrieve the API Usage log. Date is in UTC and follows the format YYYY-MM-DD. Date cannot be more than 30 days in the past.',
        required => '0',
    },
    'log_format' => {
        data_type => 'string',
        description => 'Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP. ',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'logs_api_usage_get' } = {
        summary => 'Download Daily API Usage',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub logs_api_usage_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/logs/api_usage';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'date'}) {
        $query_params->{'date'} = $self->{api_client}->to_query_value($args{'date'});
    }

    # query params
    if ( exists $args{'log_format'}) {
        $query_params->{'log_format'} = $self->{api_client}->to_query_value($args{'log_format'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# logs_code_debug_get
#
# Retrieve All Debug Logs
#
# @param string $user_id Filter results to retrieve the debug log for this user ID only. If omitted, this request retrieves debug logs for all users in the Vault. (optional)
# @param boolean $include_inactive Set to &#x60;true&#x60; to include debug log sessions with a status of &#x60;inactive__sys&#x60; in the response. If omitted, defaults to &#x60;false&#x60; and inactive sessions are not included in the response. (optional)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'user_id' => {
        data_type => 'string',
        description => 'Filter results to retrieve the debug log for this user ID only. If omitted, this request retrieves debug logs for all users in the Vault.',
        required => '0',
    },
    'include_inactive' => {
        data_type => 'boolean',
        description => 'Set to &#x60;true&#x60; to include debug log sessions with a status of &#x60;inactive__sys&#x60; in the response. If omitted, defaults to &#x60;false&#x60; and inactive sessions are not included in the response.',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'logs_code_debug_get' } = {
        summary => 'Retrieve All Debug Logs',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub logs_code_debug_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/logs/code/debug';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'user_id'}) {
        $query_params->{'user_id'} = $self->{api_client}->to_query_value($args{'user_id'});
    }

    # query params
    if ( exists $args{'include_inactive'}) {
        $query_params->{'include_inactive'} = $self->{api_client}->to_query_value($args{'include_inactive'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# logs_code_debug_id_actions_reset_delete
#
# Delete Debug Log
#
# @param string $id The ID of the debug log to delete. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The ID of the debug log to delete.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'logs_code_debug_id_actions_reset_delete' } = {
        summary => 'Delete Debug Log',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub logs_code_debug_id_actions_reset_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling logs_code_debug_id_actions_reset_delete");
    }

    # parse inputs
    my $_resource_path = '/logs/code/debug/{id}/actions/reset';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# logs_code_debug_id_actions_reset_post
#
# Reset Debug Log
#
# @param string $id The ID of the debug log to delete. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The ID of the debug log to delete.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'logs_code_debug_id_actions_reset_post' } = {
        summary => 'Reset Debug Log',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub logs_code_debug_id_actions_reset_post {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling logs_code_debug_id_actions_reset_post");
    }

    # parse inputs
    my $_resource_path = '/logs/code/debug/{id}/actions/reset';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# logs_code_debug_id_files_get
#
# Download Debug Log Files
#
# @param string $id The ID of the debug log to download. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The ID of the debug log to download.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'logs_code_debug_id_files_get' } = {
        summary => 'Download Debug Log Files',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub logs_code_debug_id_files_get {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling logs_code_debug_id_files_get");
    }

    # parse inputs
    my $_resource_path = '/logs/code/debug/{id}/files';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# logs_code_debug_id_get
#
# Retrieve Single Debug Log
#
# @param string $id The ID of the debug log to retrieve. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The ID of the debug log to retrieve.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'logs_code_debug_id_get' } = {
        summary => 'Retrieve Single Debug Log',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub logs_code_debug_id_get {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling logs_code_debug_id_get");
    }

    # parse inputs
    my $_resource_path = '/logs/code/debug/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# logs_code_debug_post
#
# Create Debug Log
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'logs_code_debug_post' } = {
        summary => 'Create Debug Log',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub logs_code_debug_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/logs/code/debug';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# logs_code_runtime_get
#
# Download SDK Runtime Log
#
# @param string $date  (optional)
# @param string $log_format Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP.  (optional)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'date' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'log_format' => {
        data_type => 'string',
        description => 'Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP. ',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'logs_code_runtime_get' } = {
        summary => 'Download SDK Runtime Log',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub logs_code_runtime_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/logs/code/runtime';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'date'}) {
        $query_params->{'date'} = $self->{api_client}->to_query_value($args{'date'});
    }

    # query params
    if ( exists $args{'log_format'}) {
        $query_params->{'log_format'} = $self->{api_client}->to_query_value($args{'log_format'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# messages_message_type_actions_import_post
#
# Import Bulk Translation File
#
# @param string $message_type The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'message_type' => {
        data_type => 'string',
        description => 'The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'messages_message_type_actions_import_post' } = {
        summary => 'Import Bulk Translation File',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub messages_message_type_actions_import_post {
    my ($self, %args) = @_;

    # verify the required parameter 'message_type' is set
    unless (exists $args{'message_type'}) {
      croak("Missing the required parameter 'message_type' when calling messages_message_type_actions_import_post");
    }

    # parse inputs
    my $_resource_path = '/messages/{message_type}/actions/import';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'message_type'}) {
        my $_base_variable = "{" . "message_type" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'message_type'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# messages_message_type_language_lang_actions_export_post
#
# Export Bulk Translation File
#
# @param string $message_type The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys. (required)
# @param string $lang A valid language code value, for example, en. Retrieve available values from the Admin Key (admin_key__sys) field on the Language (language__sys) object. Active and Inactive languages are both valid.  (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'message_type' => {
        data_type => 'string',
        description => 'The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys.',
        required => '1',
    },
    'lang' => {
        data_type => 'string',
        description => 'A valid language code value, for example, en. Retrieve available values from the Admin Key (admin_key__sys) field on the Language (language__sys) object. Active and Inactive languages are both valid. ',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'messages_message_type_language_lang_actions_export_post' } = {
        summary => 'Export Bulk Translation File',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub messages_message_type_language_lang_actions_export_post {
    my ($self, %args) = @_;

    # verify the required parameter 'message_type' is set
    unless (exists $args{'message_type'}) {
      croak("Missing the required parameter 'message_type' when calling messages_message_type_language_lang_actions_export_post");
    }

    # verify the required parameter 'lang' is set
    unless (exists $args{'lang'}) {
      croak("Missing the required parameter 'lang' when calling messages_message_type_language_lang_actions_export_post");
    }

    # parse inputs
    my $_resource_path = '/messages/{message_type}/language/{lang}/actions/export';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'message_type'}) {
        my $_base_variable = "{" . "message_type" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'message_type'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'lang'}) {
        my $_base_variable = "{" . "lang" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'lang'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# metadata_audittrail_audit_trail_type_get
#
# Retrieve Audit Metadata
#
# @param string $audit_trail_type The name of the specified audit type (document_audit_trail, object_audit_trail, etc). (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'audit_trail_type' => {
        data_type => 'string',
        description => 'The name of the specified audit type (document_audit_trail, object_audit_trail, etc).',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'metadata_audittrail_audit_trail_type_get' } = {
        summary => 'Retrieve Audit Metadata',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub metadata_audittrail_audit_trail_type_get {
    my ($self, %args) = @_;

    # verify the required parameter 'audit_trail_type' is set
    unless (exists $args{'audit_trail_type'}) {
      croak("Missing the required parameter 'audit_trail_type' when calling metadata_audittrail_audit_trail_type_get");
    }

    # parse inputs
    my $_resource_path = '/metadata/audittrail/{audit_trail_type}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'audit_trail_type'}) {
        my $_base_variable = "{" . "audit_trail_type" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'audit_trail_type'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# metadata_audittrail_get
#
# Retrieve Audit Types
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'metadata_audittrail_get' } = {
        summary => 'Retrieve Audit Types',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub metadata_audittrail_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/metadata/audittrail';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# metadata_components_component_type_get
#
# Retrieve Component Type Metadata
#
# @param string $component_type The component type name (Picklist, Docfield, Doctype, etc.). (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'component_type' => {
        data_type => 'string',
        description => 'The component type name (Picklist, Docfield, Doctype, etc.).',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'metadata_components_component_type_get' } = {
        summary => 'Retrieve Component Type Metadata',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub metadata_components_component_type_get {
    my ($self, %args) = @_;

    # verify the required parameter 'component_type' is set
    unless (exists $args{'component_type'}) {
      croak("Missing the required parameter 'component_type' when calling metadata_components_component_type_get");
    }

    # parse inputs
    my $_resource_path = '/metadata/components/{component_type}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'component_type'}) {
        my $_base_variable = "{" . "component_type" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'component_type'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# metadata_components_get
#
# Retrieve All Component Metadata
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'metadata_components_get' } = {
        summary => 'Retrieve All Component Metadata',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub metadata_components_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/metadata/components';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# metadata_objects_binders_templates_bindernodes_get
#
# Retrieve Binder Template Node Metadata
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'metadata_objects_binders_templates_bindernodes_get' } = {
        summary => 'Retrieve Binder Template Node Metadata',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub metadata_objects_binders_templates_bindernodes_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/metadata/objects/binders/templates/bindernodes';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# metadata_objects_binders_templates_get
#
# Retrieve Binder Template Metadata
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'metadata_objects_binders_templates_get' } = {
        summary => 'Retrieve Binder Template Metadata',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub metadata_objects_binders_templates_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/metadata/objects/binders/templates';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# metadata_objects_documents_annotations_placemarks_types_placemark_type_get
#
# Retrieve Annotation Placemark Type Metadata
#
# @param string $placemark_type The name of the placemark type. For example, sticky__sys. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'placemark_type' => {
        data_type => 'string',
        description => 'The name of the placemark type. For example, sticky__sys.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'metadata_objects_documents_annotations_placemarks_types_placemark_type_get' } = {
        summary => 'Retrieve Annotation Placemark Type Metadata',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub metadata_objects_documents_annotations_placemarks_types_placemark_type_get {
    my ($self, %args) = @_;

    # verify the required parameter 'placemark_type' is set
    unless (exists $args{'placemark_type'}) {
      croak("Missing the required parameter 'placemark_type' when calling metadata_objects_documents_annotations_placemarks_types_placemark_type_get");
    }

    # parse inputs
    my $_resource_path = '/metadata/objects/documents/annotations/placemarks/types/{placemark_type}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'placemark_type'}) {
        my $_base_variable = "{" . "placemark_type" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'placemark_type'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# metadata_objects_documents_annotations_references_types_reference_type_get
#
# Retrieve Annotation Reference Type Metadata
#
# @param string $reference_type  (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'reference_type' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'metadata_objects_documents_annotations_references_types_reference_type_get' } = {
        summary => 'Retrieve Annotation Reference Type Metadata',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub metadata_objects_documents_annotations_references_types_reference_type_get {
    my ($self, %args) = @_;

    # verify the required parameter 'reference_type' is set
    unless (exists $args{'reference_type'}) {
      croak("Missing the required parameter 'reference_type' when calling metadata_objects_documents_annotations_references_types_reference_type_get");
    }

    # parse inputs
    my $_resource_path = '/metadata/objects/documents/annotations/references/types/{reference_type}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'reference_type'}) {
        my $_base_variable = "{" . "reference_type" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'reference_type'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# metadata_objects_documents_annotations_types_annotation_type_get
#
# Retrieve Annotation Type Metadata
#
# @param string $annotation_type The name of the annotation type. Valid annotation types include: &#x60;note__sys&#x60; &#x60;line__sys&#x60; &#x60;document_link__sys&#x60; &#x60;permalink_link__sys&#x60; &#x60;anchor__sys&#x60; &#x60;reply__sys&#x60; &#x60;external_link__sys&#x60;  The following annotation types are only valid in Medical and PromoMats Vaults:  &#x60;suggested_link__sys&#x60; &#x60;approved_link__sys&#x60; &#x60;auto_link__sys&#x60; &#x60;keyword_link__sys&#x60; (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'annotation_type' => {
        data_type => 'string',
        description => 'The name of the annotation type. Valid annotation types include: &#x60;note__sys&#x60; &#x60;line__sys&#x60; &#x60;document_link__sys&#x60; &#x60;permalink_link__sys&#x60; &#x60;anchor__sys&#x60; &#x60;reply__sys&#x60; &#x60;external_link__sys&#x60;  The following annotation types are only valid in Medical and PromoMats Vaults:  &#x60;suggested_link__sys&#x60; &#x60;approved_link__sys&#x60; &#x60;auto_link__sys&#x60; &#x60;keyword_link__sys&#x60;',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'metadata_objects_documents_annotations_types_annotation_type_get' } = {
        summary => 'Retrieve Annotation Type Metadata',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub metadata_objects_documents_annotations_types_annotation_type_get {
    my ($self, %args) = @_;

    # verify the required parameter 'annotation_type' is set
    unless (exists $args{'annotation_type'}) {
      croak("Missing the required parameter 'annotation_type' when calling metadata_objects_documents_annotations_types_annotation_type_get");
    }

    # parse inputs
    my $_resource_path = '/metadata/objects/documents/annotations/types/{annotation_type}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'annotation_type'}) {
        my $_base_variable = "{" . "annotation_type" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'annotation_type'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# metadata_objects_documents_events_event_type_types_event_subtype_get
#
# Retrieve Document Event SubType Metadata
#
# @param string $event_type The event type. For example, distribution__v. (required)
# @param string $event_subtype The event subtype. For example, approved_email__v. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'event_type' => {
        data_type => 'string',
        description => 'The event type. For example, distribution__v.',
        required => '1',
    },
    'event_subtype' => {
        data_type => 'string',
        description => 'The event subtype. For example, approved_email__v.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'metadata_objects_documents_events_event_type_types_event_subtype_get' } = {
        summary => 'Retrieve Document Event SubType Metadata',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub metadata_objects_documents_events_event_type_types_event_subtype_get {
    my ($self, %args) = @_;

    # verify the required parameter 'event_type' is set
    unless (exists $args{'event_type'}) {
      croak("Missing the required parameter 'event_type' when calling metadata_objects_documents_events_event_type_types_event_subtype_get");
    }

    # verify the required parameter 'event_subtype' is set
    unless (exists $args{'event_subtype'}) {
      croak("Missing the required parameter 'event_subtype' when calling metadata_objects_documents_events_event_type_types_event_subtype_get");
    }

    # parse inputs
    my $_resource_path = '/metadata/objects/documents/events/{event_type}/types/{event_subtype}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'event_type'}) {
        my $_base_variable = "{" . "event_type" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'event_type'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'event_subtype'}) {
        my $_base_variable = "{" . "event_subtype" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'event_subtype'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# metadata_objects_documents_events_get
#
# Retrieve Document Event Types and Subtypes
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'metadata_objects_documents_events_get' } = {
        summary => 'Retrieve Document Event Types and Subtypes',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub metadata_objects_documents_events_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/metadata/objects/documents/events';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# metadata_objects_documents_lock_get
#
# Retrieve Document Lock Metadata
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'metadata_objects_documents_lock_get' } = {
        summary => 'Retrieve Document Lock Metadata',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub metadata_objects_documents_lock_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/metadata/objects/documents/lock';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# metadata_objects_documents_properties_find_common_post
#
# Retrieve Common Document Fields
#
# @param string $content_type  (optional)
# @param string $accept  (optional)
# @param string $authorization  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'metadata_objects_documents_properties_find_common_post' } = {
        summary => 'Retrieve Common Document Fields',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub metadata_objects_documents_properties_find_common_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/metadata/objects/documents/properties/find_common';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# metadata_objects_documents_properties_get
#
# Retrieve All Document Fields
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'metadata_objects_documents_properties_get' } = {
        summary => 'Retrieve All Document Fields',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub metadata_objects_documents_properties_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/metadata/objects/documents/properties';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# metadata_objects_documents_templates_get
#
# Retrieve Document Template Metadata
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'metadata_objects_documents_templates_get' } = {
        summary => 'Retrieve Document Template Metadata',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub metadata_objects_documents_templates_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/metadata/objects/documents/templates';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# metadata_objects_documents_types_get
#
# Retrieve All Document Types
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'metadata_objects_documents_types_get' } = {
        summary => 'Retrieve All Document Types',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub metadata_objects_documents_types_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/metadata/objects/documents/types';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# metadata_objects_documents_types_type_get
#
# Retrieve Document Type
#
# @param string $type The document type. See Retrieve Document Types. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'type' => {
        data_type => 'string',
        description => 'The document type. See Retrieve Document Types.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'metadata_objects_documents_types_type_get' } = {
        summary => 'Retrieve Document Type',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub metadata_objects_documents_types_type_get {
    my ($self, %args) = @_;

    # verify the required parameter 'type' is set
    unless (exists $args{'type'}) {
      croak("Missing the required parameter 'type' when calling metadata_objects_documents_types_type_get");
    }

    # parse inputs
    my $_resource_path = '/metadata/objects/documents/types/{type}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'type'}) {
        my $_base_variable = "{" . "type" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'type'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# metadata_objects_documents_types_type_relationships_get
#
# Retrieve Document Type Relationships
#
# @param string $type The document type. See Retrieve Document Types. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'type' => {
        data_type => 'string',
        description => 'The document type. See Retrieve Document Types.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'metadata_objects_documents_types_type_relationships_get' } = {
        summary => 'Retrieve Document Type Relationships',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub metadata_objects_documents_types_type_relationships_get {
    my ($self, %args) = @_;

    # verify the required parameter 'type' is set
    unless (exists $args{'type'}) {
      croak("Missing the required parameter 'type' when calling metadata_objects_documents_types_type_relationships_get");
    }

    # parse inputs
    my $_resource_path = '/metadata/objects/documents/types/{type}/relationships';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'type'}) {
        my $_base_variable = "{" . "type" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'type'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# metadata_objects_documents_types_type_subtypes_subtype_classifications_classification_get
#
# Retrieve Document Classification
#
# @param string $type The document type. See Retrieve Document Types. (required)
# @param string $subtype The document subtype. See Retrieve Document Types. (required)
# @param string $classification The document classification. See Retrieve Document Types. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'type' => {
        data_type => 'string',
        description => 'The document type. See Retrieve Document Types.',
        required => '1',
    },
    'subtype' => {
        data_type => 'string',
        description => 'The document subtype. See Retrieve Document Types.',
        required => '1',
    },
    'classification' => {
        data_type => 'string',
        description => 'The document classification. See Retrieve Document Types.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'metadata_objects_documents_types_type_subtypes_subtype_classifications_classification_get' } = {
        summary => 'Retrieve Document Classification',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub metadata_objects_documents_types_type_subtypes_subtype_classifications_classification_get {
    my ($self, %args) = @_;

    # verify the required parameter 'type' is set
    unless (exists $args{'type'}) {
      croak("Missing the required parameter 'type' when calling metadata_objects_documents_types_type_subtypes_subtype_classifications_classification_get");
    }

    # verify the required parameter 'subtype' is set
    unless (exists $args{'subtype'}) {
      croak("Missing the required parameter 'subtype' when calling metadata_objects_documents_types_type_subtypes_subtype_classifications_classification_get");
    }

    # verify the required parameter 'classification' is set
    unless (exists $args{'classification'}) {
      croak("Missing the required parameter 'classification' when calling metadata_objects_documents_types_type_subtypes_subtype_classifications_classification_get");
    }

    # parse inputs
    my $_resource_path = '/metadata/objects/documents/types/{type}/subtypes/{subtype}/classifications/{classification}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'type'}) {
        my $_base_variable = "{" . "type" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'type'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'subtype'}) {
        my $_base_variable = "{" . "subtype" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'subtype'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'classification'}) {
        my $_base_variable = "{" . "classification" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'classification'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# metadata_objects_documents_types_type_subtypes_subtype_get
#
# Retrieve Document Subtype
#
# @param string $type The document type. See Retrieve Document Types. (required)
# @param string $subtype The document subtype. See Retrieve Document Types. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'type' => {
        data_type => 'string',
        description => 'The document type. See Retrieve Document Types.',
        required => '1',
    },
    'subtype' => {
        data_type => 'string',
        description => 'The document subtype. See Retrieve Document Types.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'metadata_objects_documents_types_type_subtypes_subtype_get' } = {
        summary => 'Retrieve Document Subtype',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub metadata_objects_documents_types_type_subtypes_subtype_get {
    my ($self, %args) = @_;

    # verify the required parameter 'type' is set
    unless (exists $args{'type'}) {
      croak("Missing the required parameter 'type' when calling metadata_objects_documents_types_type_subtypes_subtype_get");
    }

    # verify the required parameter 'subtype' is set
    unless (exists $args{'subtype'}) {
      croak("Missing the required parameter 'subtype' when calling metadata_objects_documents_types_type_subtypes_subtype_get");
    }

    # parse inputs
    my $_resource_path = '/metadata/objects/documents/types/{type}/subtypes/{subtype}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'type'}) {
        my $_base_variable = "{" . "type" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'type'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'subtype'}) {
        my $_base_variable = "{" . "subtype" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'subtype'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# metadata_objects_groups_get
#
# Retrieve Group Metadata
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'metadata_objects_groups_get' } = {
        summary => 'Retrieve Group Metadata',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub metadata_objects_groups_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/metadata/objects/groups';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# metadata_objects_securitypolicies_get
#
# Retrieve Security Policy Metadata
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'metadata_objects_securitypolicies_get' } = {
        summary => 'Retrieve Security Policy Metadata',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub metadata_objects_securitypolicies_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/metadata/objects/securitypolicies';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# metadata_objects_users_get
#
# Retrieve User Metadata
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'metadata_objects_users_get' } = {
        summary => 'Retrieve User Metadata',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub metadata_objects_users_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/metadata/objects/users';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# metadata_query_archived_documents_relationships_document_signature_sysr_get
#
# Retrieve Archived Document Signature Metadata
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'metadata_query_archived_documents_relationships_document_signature_sysr_get' } = {
        summary => 'Retrieve Archived Document Signature Metadata',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub metadata_query_archived_documents_relationships_document_signature_sysr_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/metadata/query/archived_documents/relationships/document_signature__sysr';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# metadata_query_documents_relationships_document_signature_sysr_get
#
# Retrieve Document Signature Metadata
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'metadata_query_documents_relationships_document_signature_sysr_get' } = {
        summary => 'Retrieve Document Signature Metadata',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub metadata_query_documents_relationships_document_signature_sysr_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/metadata/query/documents/relationships/document_signature__sysr';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# metadata_vobjects_get
#
# Retrieve Object Collection
#
# @param boolean $loc To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details. (optional)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'loc' => {
        data_type => 'boolean',
        description => 'To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details.',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'metadata_vobjects_get' } = {
        summary => 'Retrieve Object Collection',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub metadata_vobjects_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/metadata/vobjects';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'loc'}) {
        $query_params->{'loc'} = $self->{api_client}->to_query_value($args{'loc'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# metadata_vobjects_object_name_actions_canceldeployment_post
#
# Cancel Raw Object Deployment
#
# @param string $object_name  (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'object_name' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'metadata_vobjects_object_name_actions_canceldeployment_post' } = {
        summary => 'Cancel Raw Object Deployment',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub metadata_vobjects_object_name_actions_canceldeployment_post {
    my ($self, %args) = @_;

    # verify the required parameter 'object_name' is set
    unless (exists $args{'object_name'}) {
      croak("Missing the required parameter 'object_name' when calling metadata_vobjects_object_name_actions_canceldeployment_post");
    }

    # parse inputs
    my $_resource_path = '/metadata/vobjects/{object_name}/actions/canceldeployment';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'object_name'}) {
        my $_base_variable = "{" . "object_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'object_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# metadata_vobjects_object_name_fields_object_field_name_get
#
# Retrieve Object Field Metadata
#
# @param string $object_name The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
# @param string $object_field_name The object field name value (id, name__v, external_id__v, etc.). (required)
# @param boolean $loc To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details. (optional)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'object_name' => {
        data_type => 'string',
        description => 'The object name__v field value (product__v, country__v, custom_object__c, etc.).',
        required => '1',
    },
    'object_field_name' => {
        data_type => 'string',
        description => 'The object field name value (id, name__v, external_id__v, etc.).',
        required => '1',
    },
    'loc' => {
        data_type => 'boolean',
        description => 'To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details.',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'metadata_vobjects_object_name_fields_object_field_name_get' } = {
        summary => 'Retrieve Object Field Metadata',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub metadata_vobjects_object_name_fields_object_field_name_get {
    my ($self, %args) = @_;

    # verify the required parameter 'object_name' is set
    unless (exists $args{'object_name'}) {
      croak("Missing the required parameter 'object_name' when calling metadata_vobjects_object_name_fields_object_field_name_get");
    }

    # verify the required parameter 'object_field_name' is set
    unless (exists $args{'object_field_name'}) {
      croak("Missing the required parameter 'object_field_name' when calling metadata_vobjects_object_name_fields_object_field_name_get");
    }

    # parse inputs
    my $_resource_path = '/metadata/vobjects/{object_name}/fields/{object_field_name}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'loc'}) {
        $query_params->{'loc'} = $self->{api_client}->to_query_value($args{'loc'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'object_name'}) {
        my $_base_variable = "{" . "object_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'object_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'object_field_name'}) {
        my $_base_variable = "{" . "object_field_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'object_field_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# metadata_vobjects_object_name_get
#
# Retrieve Object Metadata
#
# @param string $object_name The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
# @param boolean $loc To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details. (optional)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'object_name' => {
        data_type => 'string',
        description => 'The object name__v field value (product__v, country__v, custom_object__c, etc.).',
        required => '1',
    },
    'loc' => {
        data_type => 'boolean',
        description => 'To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details.',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'metadata_vobjects_object_name_get' } = {
        summary => 'Retrieve Object Metadata',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub metadata_vobjects_object_name_get {
    my ($self, %args) = @_;

    # verify the required parameter 'object_name' is set
    unless (exists $args{'object_name'}) {
      croak("Missing the required parameter 'object_name' when calling metadata_vobjects_object_name_get");
    }

    # parse inputs
    my $_resource_path = '/metadata/vobjects/{object_name}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'loc'}) {
        $query_params->{'loc'} = $self->{api_client}->to_query_value($args{'loc'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'object_name'}) {
        my $_base_variable = "{" . "object_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'object_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# metadata_vobjects_object_name_page_layouts_get
#
# Retrieve Page Layouts
#
# @param string $object_name  (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'object_name' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'metadata_vobjects_object_name_page_layouts_get' } = {
        summary => 'Retrieve Page Layouts',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub metadata_vobjects_object_name_page_layouts_get {
    my ($self, %args) = @_;

    # verify the required parameter 'object_name' is set
    unless (exists $args{'object_name'}) {
      croak("Missing the required parameter 'object_name' when calling metadata_vobjects_object_name_page_layouts_get");
    }

    # parse inputs
    my $_resource_path = '/metadata/vobjects/{object_name}/page_layouts';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'object_name'}) {
        my $_base_variable = "{" . "object_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'object_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# metadata_vobjects_object_name_page_layouts_layout_name_get
#
# Retrieve Page Layout Metadata
#
# @param string $object_name The name of the object from which to retrieve page layout metadata. (required)
# @param string $layout_name The name of the page layout from which to retrieve metadata. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'object_name' => {
        data_type => 'string',
        description => 'The name of the object from which to retrieve page layout metadata.',
        required => '1',
    },
    'layout_name' => {
        data_type => 'string',
        description => 'The name of the page layout from which to retrieve metadata.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'metadata_vobjects_object_name_page_layouts_layout_name_get' } = {
        summary => 'Retrieve Page Layout Metadata',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub metadata_vobjects_object_name_page_layouts_layout_name_get {
    my ($self, %args) = @_;

    # verify the required parameter 'object_name' is set
    unless (exists $args{'object_name'}) {
      croak("Missing the required parameter 'object_name' when calling metadata_vobjects_object_name_page_layouts_layout_name_get");
    }

    # verify the required parameter 'layout_name' is set
    unless (exists $args{'layout_name'}) {
      croak("Missing the required parameter 'layout_name' when calling metadata_vobjects_object_name_page_layouts_layout_name_get");
    }

    # parse inputs
    my $_resource_path = '/metadata/vobjects/{object_name}/page_layouts/{layout_name}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'object_name'}) {
        my $_base_variable = "{" . "object_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'object_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'layout_name'}) {
        my $_base_variable = "{" . "layout_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'layout_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# notifications_histories_get
#
# Retrieve Email Notification Histories
#
# @param string $start_date Specify a start date to retrieve notification history. This date cannot be more than 2 years ago. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the start of the day. If start_date is omitted entirely, defaults to the start of the previous day. If you’ve specified a start_date, you must also specify an end_date. (optional)
# @param string $end_date Specify an end date to retrieve notification history. This date cannot be more than 30 days away from the specified start_date. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the time of the API request. If you’ve specified an end_date, you must also specify a start_date. (optional)
# @param boolean $all_dates Set to true to request notification history for all dates. This is the same as requesting a full CSV export from the Vault UI. When requesting a full notification history, you must leave start_date and end_date blank and set format_result to csv. You can request an export of notification history for all_dates once every 24 hours. (optional)
# @param string $format_result To request a downloadable CSV file of your notification history, set this parameter to csv. The response contains a jobId to retrieve the job status, which provides a link to download the CSV file. If omitted, the API returns a JSON response with notification history and does not start a job. If all_dates is true, this parameter must be csv. (optional)
# @param string $limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200. (optional)
# @param string $offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. If omitted, defaults to 0. (optional)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'start_date' => {
        data_type => 'string',
        description => 'Specify a start date to retrieve notification history. This date cannot be more than 2 years ago. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the start of the day. If start_date is omitted entirely, defaults to the start of the previous day. If you’ve specified a start_date, you must also specify an end_date.',
        required => '0',
    },
    'end_date' => {
        data_type => 'string',
        description => 'Specify an end date to retrieve notification history. This date cannot be more than 30 days away from the specified start_date. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the time of the API request. If you’ve specified an end_date, you must also specify a start_date.',
        required => '0',
    },
    'all_dates' => {
        data_type => 'boolean',
        description => 'Set to true to request notification history for all dates. This is the same as requesting a full CSV export from the Vault UI. When requesting a full notification history, you must leave start_date and end_date blank and set format_result to csv. You can request an export of notification history for all_dates once every 24 hours.',
        required => '0',
    },
    'format_result' => {
        data_type => 'string',
        description => 'To request a downloadable CSV file of your notification history, set this parameter to csv. The response contains a jobId to retrieve the job status, which provides a link to download the CSV file. If omitted, the API returns a JSON response with notification history and does not start a job. If all_dates is true, this parameter must be csv.',
        required => '0',
    },
    'limit' => {
        data_type => 'string',
        description => 'Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.',
        required => '0',
    },
    'offset' => {
        data_type => 'string',
        description => 'Paginate the results displayed per page by specifying the amount of offset from the entry returned. If omitted, defaults to 0.',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'notifications_histories_get' } = {
        summary => 'Retrieve Email Notification Histories',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub notifications_histories_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/notifications/histories';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'start_date'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'end_date'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'all_dates'}) {
        $query_params->{'all_dates'} = $self->{api_client}->to_query_value($args{'all_dates'});
    }

    # query params
    if ( exists $args{'format_result'}) {
        $query_params->{'format_result'} = $self->{api_client}->to_query_value($args{'format_result'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# object_workflow_actions_action_get
#
# Retrieve Bulk Workflow Action Details
#
# @param string $action  (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'action' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'object_workflow_actions_action_get' } = {
        summary => 'Retrieve Bulk Workflow Action Details',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub object_workflow_actions_action_get {
    my ($self, %args) = @_;

    # verify the required parameter 'action' is set
    unless (exists $args{'action'}) {
      croak("Missing the required parameter 'action' when calling object_workflow_actions_action_get");
    }

    # parse inputs
    my $_resource_path = '/object/workflow/actions/{action}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'action'}) {
        my $_base_variable = "{" . "action" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'action'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# object_workflow_actions_action_post
#
# Initiate Workflow Actions on Multiple Workflows
#
# @param string $action  (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'action' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'object_workflow_actions_action_post' } = {
        summary => 'Initiate Workflow Actions on Multiple Workflows',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub object_workflow_actions_action_post {
    my ($self, %args) = @_;

    # verify the required parameter 'action' is set
    unless (exists $args{'action'}) {
      croak("Missing the required parameter 'action' when calling object_workflow_actions_action_post");
    }

    # parse inputs
    my $_resource_path = '/object/workflow/actions/{action}';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'action'}) {
        my $_base_variable = "{" . "action" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'action'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# object_workflow_actions_canceltasks_post
#
# Cancel Workflow Tasks
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'object_workflow_actions_canceltasks_post' } = {
        summary => 'Cancel Workflow Tasks',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub object_workflow_actions_canceltasks_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/object/workflow/actions/canceltasks';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# object_workflow_actions_cancelworkflows_post
#
# Cancel Workflows
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'object_workflow_actions_cancelworkflows_post' } = {
        summary => 'Cancel Workflows',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub object_workflow_actions_cancelworkflows_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/object/workflow/actions/cancelworkflows';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# object_workflow_actions_get
#
# Retrieve Bulk Workflow Actions
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'object_workflow_actions_get' } = {
        summary => 'Retrieve Bulk Workflow Actions',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub object_workflow_actions_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/object/workflow/actions';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# object_workflow_actions_reassigntasks_post
#
# Reassign Workflow Tasks
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'object_workflow_actions_reassigntasks_post' } = {
        summary => 'Reassign Workflow Tasks',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub object_workflow_actions_reassigntasks_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/object/workflow/actions/reassigntasks';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# object_workflow_actions_replaceworkflowowner_post
#
# Replace Workflow Owner
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'object_workflow_actions_replaceworkflowowner_post' } = {
        summary => 'Replace Workflow Owner',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub object_workflow_actions_replaceworkflowowner_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/object/workflow/actions/replaceworkflowowner';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_binders_actions_export_job_id_results_get
#
# Retrieve Binder Export Results
#
# @param string $job_id The id value of the requested export job. This is returned with the export binder requests above. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'job_id' => {
        data_type => 'string',
        description => 'The id value of the requested export job. This is returned with the export binder requests above.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_binders_actions_export_job_id_results_get' } = {
        summary => 'Retrieve Binder Export Results',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_binders_actions_export_job_id_results_get {
    my ($self, %args) = @_;

    # verify the required parameter 'job_id' is set
    unless (exists $args{'job_id'}) {
      croak("Missing the required parameter 'job_id' when calling objects_binders_actions_export_job_id_results_get");
    }

    # parse inputs
    my $_resource_path = '/objects/binders/actions/export/{job_id}/results';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'job_id'}) {
        my $_base_variable = "{" . "job_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'job_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_binders_binder_id_actions_export_post
#
# Export Binder (Latest Version)
#
# @param string $binder_id The binder id field value. (required)
# @param boolean $source to include source content or not (optional)
# @param string $renditiontype to include viewable renditions (optional)
# @param string $docversion to include all major versions (optional)
# @param string $attachments to include all versions of attachments (optional)
# @param string $export configurable filename metadata (optional)
# @param boolean $docfield to exclude document metadata csv (optional)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'binder_id' => {
        data_type => 'string',
        description => 'The binder id field value.',
        required => '1',
    },
    'source' => {
        data_type => 'boolean',
        description => 'to include source content or not',
        required => '0',
    },
    'renditiontype' => {
        data_type => 'string',
        description => 'to include viewable renditions',
        required => '0',
    },
    'docversion' => {
        data_type => 'string',
        description => 'to include all major versions',
        required => '0',
    },
    'attachments' => {
        data_type => 'string',
        description => 'to include all versions of attachments',
        required => '0',
    },
    'export' => {
        data_type => 'string',
        description => 'configurable filename metadata',
        required => '0',
    },
    'docfield' => {
        data_type => 'boolean',
        description => 'to exclude document metadata csv',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_binders_binder_id_actions_export_post' } = {
        summary => 'Export Binder (Latest Version)',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_binders_binder_id_actions_export_post {
    my ($self, %args) = @_;

    # verify the required parameter 'binder_id' is set
    unless (exists $args{'binder_id'}) {
      croak("Missing the required parameter 'binder_id' when calling objects_binders_binder_id_actions_export_post");
    }

    # parse inputs
    my $_resource_path = '/objects/binders/{binder_id}/actions/export';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'source'}) {
        $query_params->{'source'} = $self->{api_client}->to_query_value($args{'source'});
    }

    # query params
    if ( exists $args{'renditiontype'}) {
        $query_params->{'renditiontype'} = $self->{api_client}->to_query_value($args{'renditiontype'});
    }

    # query params
    if ( exists $args{'docversion'}) {
        $query_params->{'docversion'} = $self->{api_client}->to_query_value($args{'docversion'});
    }

    # query params
    if ( exists $args{'attachments'}) {
        $query_params->{'attachments'} = $self->{api_client}->to_query_value($args{'attachments'});
    }

    # query params
    if ( exists $args{'export'}) {
        $query_params->{'export'} = $self->{api_client}->to_query_value($args{'export'});
    }

    # query params
    if ( exists $args{'docfield'}) {
        $query_params->{'docfield'} = $self->{api_client}->to_query_value($args{'docfield'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'binder_id'}) {
        my $_base_variable = "{" . "binder_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'binder_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_binders_binder_id_actions_post
#
# Refresh Binder Auto-Filing
#
# @param string $binder_id The binder id field value. (required)
# @param string $authorization  (optional)
# @param string $content_type  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'binder_id' => {
        data_type => 'string',
        description => 'The binder id field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_binders_binder_id_actions_post' } = {
        summary => 'Refresh Binder Auto-Filing',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_binders_binder_id_actions_post {
    my ($self, %args) = @_;

    # verify the required parameter 'binder_id' is set
    unless (exists $args{'binder_id'}) {
      croak("Missing the required parameter 'binder_id' when calling objects_binders_binder_id_actions_post");
    }

    # parse inputs
    my $_resource_path = '/objects/binders/{binder_id}/actions';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'binder_id'}) {
        my $_base_variable = "{" . "binder_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'binder_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_binders_binder_id_binding_rule_put
#
# Update Binding Rule
#
# @param string $binder_id The binder id field value. (required)
# @param string $content_type  (optional)
# @param string $accept  (optional)
# @param string $authorization  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'binder_id' => {
        data_type => 'string',
        description => 'The binder id field value.',
        required => '1',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_binders_binder_id_binding_rule_put' } = {
        summary => 'Update Binding Rule',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_binders_binder_id_binding_rule_put {
    my ($self, %args) = @_;

    # verify the required parameter 'binder_id' is set
    unless (exists $args{'binder_id'}) {
      croak("Missing the required parameter 'binder_id' when calling objects_binders_binder_id_binding_rule_put");
    }

    # parse inputs
    my $_resource_path = '/objects/binders/{binder_id}/binding_rule';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'binder_id'}) {
        my $_base_variable = "{" . "binder_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'binder_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_binders_binder_id_delete
#
# Delete Binder
#
# @param string $binder_id The binder id field value. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'binder_id' => {
        data_type => 'string',
        description => 'The binder id field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_binders_binder_id_delete' } = {
        summary => 'Delete Binder',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_binders_binder_id_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'binder_id' is set
    unless (exists $args{'binder_id'}) {
      croak("Missing the required parameter 'binder_id' when calling objects_binders_binder_id_delete");
    }

    # parse inputs
    my $_resource_path = '/objects/binders/{binder_id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'binder_id'}) {
        my $_base_variable = "{" . "binder_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'binder_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_binders_binder_id_documents_node_id_binding_rule_put
#
# Update Binder Document Binding Rule
#
# @param string $binder_id The binder id field value. (required)
# @param string $node_id The binder node id field value. (required)
# @param string $authorization  (optional)
# @param string $content_type  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'binder_id' => {
        data_type => 'string',
        description => 'The binder id field value.',
        required => '1',
    },
    'node_id' => {
        data_type => 'string',
        description => 'The binder node id field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_binders_binder_id_documents_node_id_binding_rule_put' } = {
        summary => 'Update Binder Document Binding Rule',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_binders_binder_id_documents_node_id_binding_rule_put {
    my ($self, %args) = @_;

    # verify the required parameter 'binder_id' is set
    unless (exists $args{'binder_id'}) {
      croak("Missing the required parameter 'binder_id' when calling objects_binders_binder_id_documents_node_id_binding_rule_put");
    }

    # verify the required parameter 'node_id' is set
    unless (exists $args{'node_id'}) {
      croak("Missing the required parameter 'node_id' when calling objects_binders_binder_id_documents_node_id_binding_rule_put");
    }

    # parse inputs
    my $_resource_path = '/objects/binders/{binder_id}/documents/{node_id}/binding_rule';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'binder_id'}) {
        my $_base_variable = "{" . "binder_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'binder_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'node_id'}) {
        my $_base_variable = "{" . "node_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'node_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_binders_binder_id_documents_post
#
# Add Document to Binder
#
# @param string $binder_id The binder id field value. (required)
# @param string $authorization  (optional)
# @param string $content_type  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'binder_id' => {
        data_type => 'string',
        description => 'The binder id field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_binders_binder_id_documents_post' } = {
        summary => 'Add Document to Binder',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_binders_binder_id_documents_post {
    my ($self, %args) = @_;

    # verify the required parameter 'binder_id' is set
    unless (exists $args{'binder_id'}) {
      croak("Missing the required parameter 'binder_id' when calling objects_binders_binder_id_documents_post");
    }

    # parse inputs
    my $_resource_path = '/objects/binders/{binder_id}/documents';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'binder_id'}) {
        my $_base_variable = "{" . "binder_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'binder_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_binders_binder_id_documents_section_id_delete
#
# Remove Document from Binder
#
# @param string $binder_id The binder id field value. (required)
# @param string $section_id The binder node id field value. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'binder_id' => {
        data_type => 'string',
        description => 'The binder id field value.',
        required => '1',
    },
    'section_id' => {
        data_type => 'string',
        description => 'The binder node id field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_binders_binder_id_documents_section_id_delete' } = {
        summary => 'Remove Document from Binder',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_binders_binder_id_documents_section_id_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'binder_id' is set
    unless (exists $args{'binder_id'}) {
      croak("Missing the required parameter 'binder_id' when calling objects_binders_binder_id_documents_section_id_delete");
    }

    # verify the required parameter 'section_id' is set
    unless (exists $args{'section_id'}) {
      croak("Missing the required parameter 'section_id' when calling objects_binders_binder_id_documents_section_id_delete");
    }

    # parse inputs
    my $_resource_path = '/objects/binders/{binder_id}/documents/{section_id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'binder_id'}) {
        my $_base_variable = "{" . "binder_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'binder_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'section_id'}) {
        my $_base_variable = "{" . "section_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'section_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_binders_binder_id_documents_section_id_put
#
# Move Document in Binder
#
# @param string $binder_id The binder id field value. (required)
# @param string $section_id The binder node id field value. (required)
# @param string $authorization  (optional)
# @param string $content_type  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'binder_id' => {
        data_type => 'string',
        description => 'The binder id field value.',
        required => '1',
    },
    'section_id' => {
        data_type => 'string',
        description => 'The binder node id field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_binders_binder_id_documents_section_id_put' } = {
        summary => 'Move Document in Binder',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_binders_binder_id_documents_section_id_put {
    my ($self, %args) = @_;

    # verify the required parameter 'binder_id' is set
    unless (exists $args{'binder_id'}) {
      croak("Missing the required parameter 'binder_id' when calling objects_binders_binder_id_documents_section_id_put");
    }

    # verify the required parameter 'section_id' is set
    unless (exists $args{'section_id'}) {
      croak("Missing the required parameter 'section_id' when calling objects_binders_binder_id_documents_section_id_put");
    }

    # parse inputs
    my $_resource_path = '/objects/binders/{binder_id}/documents/{section_id}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'binder_id'}) {
        my $_base_variable = "{" . "binder_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'binder_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'section_id'}) {
        my $_base_variable = "{" . "section_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'section_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_binders_binder_id_get
#
# Retrieve Binder
#
# @param string $binder_id The binder id field value. (required)
# @param string $depth To retrieve all information in all levels of the binder, set this to all. By default, only one level is returned. (optional)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'binder_id' => {
        data_type => 'string',
        description => 'The binder id field value.',
        required => '1',
    },
    'depth' => {
        data_type => 'string',
        description => 'To retrieve all information in all levels of the binder, set this to all. By default, only one level is returned.',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_binders_binder_id_get' } = {
        summary => 'Retrieve Binder',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_binders_binder_id_get {
    my ($self, %args) = @_;

    # verify the required parameter 'binder_id' is set
    unless (exists $args{'binder_id'}) {
      croak("Missing the required parameter 'binder_id' when calling objects_binders_binder_id_get");
    }

    # parse inputs
    my $_resource_path = '/objects/binders/{binder_id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'depth'}) {
        $query_params->{'depth'} = $self->{api_client}->to_query_value($args{'depth'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'binder_id'}) {
        my $_base_variable = "{" . "binder_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'binder_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_binders_binder_id_post
#
# Create Binder Version
#
# @param string $binder_id The binder id field value. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'binder_id' => {
        data_type => 'string',
        description => 'The binder id field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_binders_binder_id_post' } = {
        summary => 'Create Binder Version',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_binders_binder_id_post {
    my ($self, %args) = @_;

    # verify the required parameter 'binder_id' is set
    unless (exists $args{'binder_id'}) {
      croak("Missing the required parameter 'binder_id' when calling objects_binders_binder_id_post");
    }

    # parse inputs
    my $_resource_path = '/objects/binders/{binder_id}';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'binder_id'}) {
        my $_base_variable = "{" . "binder_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'binder_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_binders_binder_id_put
#
# Update Binder
#
# @param string $binder_id The binder id field value. (required)
# @param string $authorization  (optional)
# @param string $content_type  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'binder_id' => {
        data_type => 'string',
        description => 'The binder id field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_binders_binder_id_put' } = {
        summary => 'Update Binder',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_binders_binder_id_put {
    my ($self, %args) = @_;

    # verify the required parameter 'binder_id' is set
    unless (exists $args{'binder_id'}) {
      croak("Missing the required parameter 'binder_id' when calling objects_binders_binder_id_put");
    }

    # parse inputs
    my $_resource_path = '/objects/binders/{binder_id}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'binder_id'}) {
        my $_base_variable = "{" . "binder_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'binder_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_binders_binder_id_roles_role_name_and_user_or_group_id_delete
#
# Remove Users & Groups from Roles on a Single Binder
#
# @param string $binder_id The id value of the binder from which to remove roles. (required)
# @param string $role_name_and_user_or_group The name of the role from which to remove the user or group followed by either &#x60;user&#x60; or &#x60;group&#x60;. The format is &#x60;{role_name}.{user_or_group}&#x60;. For example, &#x60;consumer__v.user&#x60;. (required)
# @param string $id The id value of the user or group to remove from the role. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'binder_id' => {
        data_type => 'string',
        description => 'The id value of the binder from which to remove roles.',
        required => '1',
    },
    'role_name_and_user_or_group' => {
        data_type => 'string',
        description => 'The name of the role from which to remove the user or group followed by either &#x60;user&#x60; or &#x60;group&#x60;. The format is &#x60;{role_name}.{user_or_group}&#x60;. For example, &#x60;consumer__v.user&#x60;.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id value of the user or group to remove from the role.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_binders_binder_id_roles_role_name_and_user_or_group_id_delete' } = {
        summary => 'Remove Users &amp; Groups from Roles on a Single Binder',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_binders_binder_id_roles_role_name_and_user_or_group_id_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'binder_id' is set
    unless (exists $args{'binder_id'}) {
      croak("Missing the required parameter 'binder_id' when calling objects_binders_binder_id_roles_role_name_and_user_or_group_id_delete");
    }

    # verify the required parameter 'role_name_and_user_or_group' is set
    unless (exists $args{'role_name_and_user_or_group'}) {
      croak("Missing the required parameter 'role_name_and_user_or_group' when calling objects_binders_binder_id_roles_role_name_and_user_or_group_id_delete");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling objects_binders_binder_id_roles_role_name_and_user_or_group_id_delete");
    }

    # parse inputs
    my $_resource_path = '/objects/binders/{binder_id}/roles/{role_name_and_user_or_group}/{id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'binder_id'}) {
        my $_base_variable = "{" . "binder_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'binder_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'role_name_and_user_or_group'}) {
        my $_base_variable = "{" . "role_name_and_user_or_group" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'role_name_and_user_or_group'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_binders_binder_id_sections_node_id_binding_rule_put
#
# Update Binder Section Binding Rule
#
# @param string $binder_id The binder id field value. (required)
# @param string $node_id The binder node id field value. (required)
# @param string $content_type  (optional)
# @param string $accept  (optional)
# @param string $authorization  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'binder_id' => {
        data_type => 'string',
        description => 'The binder id field value.',
        required => '1',
    },
    'node_id' => {
        data_type => 'string',
        description => 'The binder node id field value.',
        required => '1',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_binders_binder_id_sections_node_id_binding_rule_put' } = {
        summary => 'Update Binder Section Binding Rule',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_binders_binder_id_sections_node_id_binding_rule_put {
    my ($self, %args) = @_;

    # verify the required parameter 'binder_id' is set
    unless (exists $args{'binder_id'}) {
      croak("Missing the required parameter 'binder_id' when calling objects_binders_binder_id_sections_node_id_binding_rule_put");
    }

    # verify the required parameter 'node_id' is set
    unless (exists $args{'node_id'}) {
      croak("Missing the required parameter 'node_id' when calling objects_binders_binder_id_sections_node_id_binding_rule_put");
    }

    # parse inputs
    my $_resource_path = '/objects/binders/{binder_id}/sections/{node_id}/binding_rule';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'binder_id'}) {
        my $_base_variable = "{" . "binder_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'binder_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'node_id'}) {
        my $_base_variable = "{" . "node_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'node_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_binders_binder_id_sections_node_id_put
#
# Update Binder Section
#
# @param string $binder_id The binder id field value. (required)
# @param string $node_id The binder node id of the section. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'binder_id' => {
        data_type => 'string',
        description => 'The binder id field value.',
        required => '1',
    },
    'node_id' => {
        data_type => 'string',
        description => 'The binder node id of the section.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_binders_binder_id_sections_node_id_put' } = {
        summary => 'Update Binder Section',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_binders_binder_id_sections_node_id_put {
    my ($self, %args) = @_;

    # verify the required parameter 'binder_id' is set
    unless (exists $args{'binder_id'}) {
      croak("Missing the required parameter 'binder_id' when calling objects_binders_binder_id_sections_node_id_put");
    }

    # verify the required parameter 'node_id' is set
    unless (exists $args{'node_id'}) {
      croak("Missing the required parameter 'node_id' when calling objects_binders_binder_id_sections_node_id_put");
    }

    # parse inputs
    my $_resource_path = '/objects/binders/{binder_id}/sections/{node_id}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'binder_id'}) {
        my $_base_variable = "{" . "binder_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'binder_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'node_id'}) {
        my $_base_variable = "{" . "node_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'node_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_binders_binder_id_sections_post
#
# Create Binder Section
#
# @param string $binder_id The binder id field value. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'binder_id' => {
        data_type => 'string',
        description => 'The binder id field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_binders_binder_id_sections_post' } = {
        summary => 'Create Binder Section',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_binders_binder_id_sections_post {
    my ($self, %args) = @_;

    # verify the required parameter 'binder_id' is set
    unless (exists $args{'binder_id'}) {
      croak("Missing the required parameter 'binder_id' when calling objects_binders_binder_id_sections_post");
    }

    # parse inputs
    my $_resource_path = '/objects/binders/{binder_id}/sections';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'binder_id'}) {
        my $_base_variable = "{" . "binder_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'binder_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_binders_binder_id_sections_section_id_delete
#
# Delete Binder Section
#
# @param string $binder_id The binder id field value. (required)
# @param string $section_id The binder node id field value. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'binder_id' => {
        data_type => 'string',
        description => 'The binder id field value.',
        required => '1',
    },
    'section_id' => {
        data_type => 'string',
        description => 'The binder node id field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_binders_binder_id_sections_section_id_delete' } = {
        summary => 'Delete Binder Section',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_binders_binder_id_sections_section_id_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'binder_id' is set
    unless (exists $args{'binder_id'}) {
      croak("Missing the required parameter 'binder_id' when calling objects_binders_binder_id_sections_section_id_delete");
    }

    # verify the required parameter 'section_id' is set
    unless (exists $args{'section_id'}) {
      croak("Missing the required parameter 'section_id' when calling objects_binders_binder_id_sections_section_id_delete");
    }

    # parse inputs
    my $_resource_path = '/objects/binders/{binder_id}/sections/{section_id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'binder_id'}) {
        my $_base_variable = "{" . "binder_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'binder_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'section_id'}) {
        my $_base_variable = "{" . "section_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'section_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_binders_binder_id_sections_section_id_get
#
# Retrieve Binder Sections
#
# @param string $binder_id The binder id field value. (required)
# @param string $section_id The binder node id field value. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'binder_id' => {
        data_type => 'string',
        description => 'The binder id field value.',
        required => '1',
    },
    'section_id' => {
        data_type => 'string',
        description => 'The binder node id field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_binders_binder_id_sections_section_id_get' } = {
        summary => 'Retrieve Binder Sections',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_binders_binder_id_sections_section_id_get {
    my ($self, %args) = @_;

    # verify the required parameter 'binder_id' is set
    unless (exists $args{'binder_id'}) {
      croak("Missing the required parameter 'binder_id' when calling objects_binders_binder_id_sections_section_id_get");
    }

    # verify the required parameter 'section_id' is set
    unless (exists $args{'section_id'}) {
      croak("Missing the required parameter 'section_id' when calling objects_binders_binder_id_sections_section_id_get");
    }

    # parse inputs
    my $_resource_path = '/objects/binders/{binder_id}/sections/{section_id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'binder_id'}) {
        my $_base_variable = "{" . "binder_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'binder_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'section_id'}) {
        my $_base_variable = "{" . "section_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'section_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_binders_binder_id_versions_get
#
# Retrieve All Binder Versions
#
# @param string $binder_id The binder id field value. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'binder_id' => {
        data_type => 'string',
        description => 'The binder id field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_binders_binder_id_versions_get' } = {
        summary => 'Retrieve All Binder Versions',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_binders_binder_id_versions_get {
    my ($self, %args) = @_;

    # verify the required parameter 'binder_id' is set
    unless (exists $args{'binder_id'}) {
      croak("Missing the required parameter 'binder_id' when calling objects_binders_binder_id_versions_get");
    }

    # parse inputs
    my $_resource_path = '/objects/binders/{binder_id}/versions';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'binder_id'}) {
        my $_base_variable = "{" . "binder_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'binder_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_binders_binder_id_versions_major_version_minor_version_actions_export_post
#
# Export Binder (Specific Version)
#
# @param string $binder_id The binder id field value. (required)
# @param string $major_version The binder major_version_number__v field value. (required)
# @param string $minor_version The binder minor_version_number__v field value. (required)
# @param boolean $source to include source content or not (optional)
# @param string $renditiontype to include viewable renditions (optional)
# @param string $docversion to include all major versions (optional)
# @param string $attachments to include all versions of attachments (optional)
# @param string $export configurable filename metadata (optional)
# @param boolean $docfield to exclude document metadata csv (optional)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'binder_id' => {
        data_type => 'string',
        description => 'The binder id field value.',
        required => '1',
    },
    'major_version' => {
        data_type => 'string',
        description => 'The binder major_version_number__v field value.',
        required => '1',
    },
    'minor_version' => {
        data_type => 'string',
        description => 'The binder minor_version_number__v field value.',
        required => '1',
    },
    'source' => {
        data_type => 'boolean',
        description => 'to include source content or not',
        required => '0',
    },
    'renditiontype' => {
        data_type => 'string',
        description => 'to include viewable renditions',
        required => '0',
    },
    'docversion' => {
        data_type => 'string',
        description => 'to include all major versions',
        required => '0',
    },
    'attachments' => {
        data_type => 'string',
        description => 'to include all versions of attachments',
        required => '0',
    },
    'export' => {
        data_type => 'string',
        description => 'configurable filename metadata',
        required => '0',
    },
    'docfield' => {
        data_type => 'boolean',
        description => 'to exclude document metadata csv',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_binders_binder_id_versions_major_version_minor_version_actions_export_post' } = {
        summary => 'Export Binder (Specific Version)',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_binders_binder_id_versions_major_version_minor_version_actions_export_post {
    my ($self, %args) = @_;

    # verify the required parameter 'binder_id' is set
    unless (exists $args{'binder_id'}) {
      croak("Missing the required parameter 'binder_id' when calling objects_binders_binder_id_versions_major_version_minor_version_actions_export_post");
    }

    # verify the required parameter 'major_version' is set
    unless (exists $args{'major_version'}) {
      croak("Missing the required parameter 'major_version' when calling objects_binders_binder_id_versions_major_version_minor_version_actions_export_post");
    }

    # verify the required parameter 'minor_version' is set
    unless (exists $args{'minor_version'}) {
      croak("Missing the required parameter 'minor_version' when calling objects_binders_binder_id_versions_major_version_minor_version_actions_export_post");
    }

    # parse inputs
    my $_resource_path = '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/actions/export';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'source'}) {
        $query_params->{'source'} = $self->{api_client}->to_query_value($args{'source'});
    }

    # query params
    if ( exists $args{'renditiontype'}) {
        $query_params->{'renditiontype'} = $self->{api_client}->to_query_value($args{'renditiontype'});
    }

    # query params
    if ( exists $args{'docversion'}) {
        $query_params->{'docversion'} = $self->{api_client}->to_query_value($args{'docversion'});
    }

    # query params
    if ( exists $args{'attachments'}) {
        $query_params->{'attachments'} = $self->{api_client}->to_query_value($args{'attachments'});
    }

    # query params
    if ( exists $args{'export'}) {
        $query_params->{'export'} = $self->{api_client}->to_query_value($args{'export'});
    }

    # query params
    if ( exists $args{'docfield'}) {
        $query_params->{'docfield'} = $self->{api_client}->to_query_value($args{'docfield'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'binder_id'}) {
        my $_base_variable = "{" . "binder_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'binder_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'major_version'}) {
        my $_base_variable = "{" . "major_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'major_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'minor_version'}) {
        my $_base_variable = "{" . "minor_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'minor_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_binders_binder_id_versions_major_version_minor_version_delete
#
# Delete Binder Version
#
# @param string $binder_id The binder id field value. (required)
# @param string $major_version The binder major_version_number__v field value. (required)
# @param string $minor_version The binder minor_version_number__v field value. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'binder_id' => {
        data_type => 'string',
        description => 'The binder id field value.',
        required => '1',
    },
    'major_version' => {
        data_type => 'string',
        description => 'The binder major_version_number__v field value.',
        required => '1',
    },
    'minor_version' => {
        data_type => 'string',
        description => 'The binder minor_version_number__v field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_binders_binder_id_versions_major_version_minor_version_delete' } = {
        summary => 'Delete Binder Version',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_binders_binder_id_versions_major_version_minor_version_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'binder_id' is set
    unless (exists $args{'binder_id'}) {
      croak("Missing the required parameter 'binder_id' when calling objects_binders_binder_id_versions_major_version_minor_version_delete");
    }

    # verify the required parameter 'major_version' is set
    unless (exists $args{'major_version'}) {
      croak("Missing the required parameter 'major_version' when calling objects_binders_binder_id_versions_major_version_minor_version_delete");
    }

    # verify the required parameter 'minor_version' is set
    unless (exists $args{'minor_version'}) {
      croak("Missing the required parameter 'minor_version' when calling objects_binders_binder_id_versions_major_version_minor_version_delete");
    }

    # parse inputs
    my $_resource_path = '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'binder_id'}) {
        my $_base_variable = "{" . "binder_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'binder_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'major_version'}) {
        my $_base_variable = "{" . "major_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'major_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'minor_version'}) {
        my $_base_variable = "{" . "minor_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'minor_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_binders_binder_id_versions_major_version_minor_version_get
#
# Retrieve Binder Version
#
# @param string $binder_id The binder id field value. (required)
# @param string $major_version The binder major_version_number__v field value. (required)
# @param string $minor_version The binder minor_version_number__v field value. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'binder_id' => {
        data_type => 'string',
        description => 'The binder id field value.',
        required => '1',
    },
    'major_version' => {
        data_type => 'string',
        description => 'The binder major_version_number__v field value.',
        required => '1',
    },
    'minor_version' => {
        data_type => 'string',
        description => 'The binder minor_version_number__v field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_binders_binder_id_versions_major_version_minor_version_get' } = {
        summary => 'Retrieve Binder Version',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_binders_binder_id_versions_major_version_minor_version_get {
    my ($self, %args) = @_;

    # verify the required parameter 'binder_id' is set
    unless (exists $args{'binder_id'}) {
      croak("Missing the required parameter 'binder_id' when calling objects_binders_binder_id_versions_major_version_minor_version_get");
    }

    # verify the required parameter 'major_version' is set
    unless (exists $args{'major_version'}) {
      croak("Missing the required parameter 'major_version' when calling objects_binders_binder_id_versions_major_version_minor_version_get");
    }

    # verify the required parameter 'minor_version' is set
    unless (exists $args{'minor_version'}) {
      croak("Missing the required parameter 'minor_version' when calling objects_binders_binder_id_versions_major_version_minor_version_get");
    }

    # parse inputs
    my $_resource_path = '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'binder_id'}) {
        my $_base_variable = "{" . "binder_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'binder_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'major_version'}) {
        my $_base_variable = "{" . "major_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'major_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'minor_version'}) {
        my $_base_variable = "{" . "minor_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'minor_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_binders_binder_id_versions_major_version_minor_version_put
#
# Update Binder Version
#
# @param string $binder_id The binder id field value. (required)
# @param string $major_version The binder major_version_number__v field value. (required)
# @param string $minor_version The binder minor_version_number__v field value. (required)
# @param string $authorization  (optional)
# @param string $content_type  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'binder_id' => {
        data_type => 'string',
        description => 'The binder id field value.',
        required => '1',
    },
    'major_version' => {
        data_type => 'string',
        description => 'The binder major_version_number__v field value.',
        required => '1',
    },
    'minor_version' => {
        data_type => 'string',
        description => 'The binder minor_version_number__v field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_binders_binder_id_versions_major_version_minor_version_put' } = {
        summary => 'Update Binder Version',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_binders_binder_id_versions_major_version_minor_version_put {
    my ($self, %args) = @_;

    # verify the required parameter 'binder_id' is set
    unless (exists $args{'binder_id'}) {
      croak("Missing the required parameter 'binder_id' when calling objects_binders_binder_id_versions_major_version_minor_version_put");
    }

    # verify the required parameter 'major_version' is set
    unless (exists $args{'major_version'}) {
      croak("Missing the required parameter 'major_version' when calling objects_binders_binder_id_versions_major_version_minor_version_put");
    }

    # verify the required parameter 'minor_version' is set
    unless (exists $args{'minor_version'}) {
      croak("Missing the required parameter 'minor_version' when calling objects_binders_binder_id_versions_major_version_minor_version_put");
    }

    # parse inputs
    my $_resource_path = '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'binder_id'}) {
        my $_base_variable = "{" . "binder_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'binder_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'major_version'}) {
        my $_base_variable = "{" . "major_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'major_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'minor_version'}) {
        my $_base_variable = "{" . "minor_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'minor_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_binders_binder_id_versions_major_version_minor_version_relationships_post
#
# Create Binder Relationship
#
# @param string $binder_id The binder id field value. (required)
# @param string $major_version The binder major_version_number__v field value. (required)
# @param string $minor_version The binder minor_version_number__v field value. (required)
# @param string $authorization  (optional)
# @param string $content_type  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'binder_id' => {
        data_type => 'string',
        description => 'The binder id field value.',
        required => '1',
    },
    'major_version' => {
        data_type => 'string',
        description => 'The binder major_version_number__v field value.',
        required => '1',
    },
    'minor_version' => {
        data_type => 'string',
        description => 'The binder minor_version_number__v field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_binders_binder_id_versions_major_version_minor_version_relationships_post' } = {
        summary => 'Create Binder Relationship',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_binders_binder_id_versions_major_version_minor_version_relationships_post {
    my ($self, %args) = @_;

    # verify the required parameter 'binder_id' is set
    unless (exists $args{'binder_id'}) {
      croak("Missing the required parameter 'binder_id' when calling objects_binders_binder_id_versions_major_version_minor_version_relationships_post");
    }

    # verify the required parameter 'major_version' is set
    unless (exists $args{'major_version'}) {
      croak("Missing the required parameter 'major_version' when calling objects_binders_binder_id_versions_major_version_minor_version_relationships_post");
    }

    # verify the required parameter 'minor_version' is set
    unless (exists $args{'minor_version'}) {
      croak("Missing the required parameter 'minor_version' when calling objects_binders_binder_id_versions_major_version_minor_version_relationships_post");
    }

    # parse inputs
    my $_resource_path = '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'binder_id'}) {
        my $_base_variable = "{" . "binder_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'binder_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'major_version'}) {
        my $_base_variable = "{" . "major_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'major_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'minor_version'}) {
        my $_base_variable = "{" . "minor_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'minor_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_delete
#
# Delete Binder Relationship
#
# @param string $binder_id The binder id field value. (required)
# @param string $major_version The binder major_version_number__v field value. (required)
# @param string $minor_version The binder minor_version_number__v field value. (required)
# @param string $relationship_id The binder relationship id field value. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'binder_id' => {
        data_type => 'string',
        description => 'The binder id field value.',
        required => '1',
    },
    'major_version' => {
        data_type => 'string',
        description => 'The binder major_version_number__v field value.',
        required => '1',
    },
    'minor_version' => {
        data_type => 'string',
        description => 'The binder minor_version_number__v field value.',
        required => '1',
    },
    'relationship_id' => {
        data_type => 'string',
        description => 'The binder relationship id field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_delete' } = {
        summary => 'Delete Binder Relationship',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'binder_id' is set
    unless (exists $args{'binder_id'}) {
      croak("Missing the required parameter 'binder_id' when calling objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_delete");
    }

    # verify the required parameter 'major_version' is set
    unless (exists $args{'major_version'}) {
      croak("Missing the required parameter 'major_version' when calling objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_delete");
    }

    # verify the required parameter 'minor_version' is set
    unless (exists $args{'minor_version'}) {
      croak("Missing the required parameter 'minor_version' when calling objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_delete");
    }

    # verify the required parameter 'relationship_id' is set
    unless (exists $args{'relationship_id'}) {
      croak("Missing the required parameter 'relationship_id' when calling objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_delete");
    }

    # parse inputs
    my $_resource_path = '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'binder_id'}) {
        my $_base_variable = "{" . "binder_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'binder_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'major_version'}) {
        my $_base_variable = "{" . "major_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'major_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'minor_version'}) {
        my $_base_variable = "{" . "minor_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'minor_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'relationship_id'}) {
        my $_base_variable = "{" . "relationship_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'relationship_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_get
#
# Retrieve Binder Relationship
#
# @param string $binder_id The binder id field value. (required)
# @param string $major_version The binder major_version_number__v field value. (required)
# @param string $minor_version The binder minor_version_number__v field value. (required)
# @param string $relationship_id The binder relationship id field value. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'binder_id' => {
        data_type => 'string',
        description => 'The binder id field value.',
        required => '1',
    },
    'major_version' => {
        data_type => 'string',
        description => 'The binder major_version_number__v field value.',
        required => '1',
    },
    'minor_version' => {
        data_type => 'string',
        description => 'The binder minor_version_number__v field value.',
        required => '1',
    },
    'relationship_id' => {
        data_type => 'string',
        description => 'The binder relationship id field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_get' } = {
        summary => 'Retrieve Binder Relationship',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_get {
    my ($self, %args) = @_;

    # verify the required parameter 'binder_id' is set
    unless (exists $args{'binder_id'}) {
      croak("Missing the required parameter 'binder_id' when calling objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_get");
    }

    # verify the required parameter 'major_version' is set
    unless (exists $args{'major_version'}) {
      croak("Missing the required parameter 'major_version' when calling objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_get");
    }

    # verify the required parameter 'minor_version' is set
    unless (exists $args{'minor_version'}) {
      croak("Missing the required parameter 'minor_version' when calling objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_get");
    }

    # verify the required parameter 'relationship_id' is set
    unless (exists $args{'relationship_id'}) {
      croak("Missing the required parameter 'relationship_id' when calling objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_get");
    }

    # parse inputs
    my $_resource_path = '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'binder_id'}) {
        my $_base_variable = "{" . "binder_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'binder_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'major_version'}) {
        my $_base_variable = "{" . "major_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'major_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'minor_version'}) {
        my $_base_variable = "{" . "minor_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'minor_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'relationship_id'}) {
        my $_base_variable = "{" . "relationship_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'relationship_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_binders_binder_id_versions_major_version_minor_version_sections_section_id_get
#
# Retrieve Binder Version Section
#
# @param string $binder_id The binder id field value. (required)
# @param string $major_version The binder major_version_number__v field value. (required)
# @param string $minor_version The binder minor_version_number__v field value. (required)
# @param string $section_id Retrieve all sections (documents and subsections) in a binder’s sub-level node. If not included, all sections from the binder’s top-level root node will be returned. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'binder_id' => {
        data_type => 'string',
        description => 'The binder id field value.',
        required => '1',
    },
    'major_version' => {
        data_type => 'string',
        description => 'The binder major_version_number__v field value.',
        required => '1',
    },
    'minor_version' => {
        data_type => 'string',
        description => 'The binder minor_version_number__v field value.',
        required => '1',
    },
    'section_id' => {
        data_type => 'string',
        description => 'Retrieve all sections (documents and subsections) in a binder’s sub-level node. If not included, all sections from the binder’s top-level root node will be returned.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_binders_binder_id_versions_major_version_minor_version_sections_section_id_get' } = {
        summary => 'Retrieve Binder Version Section',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_binders_binder_id_versions_major_version_minor_version_sections_section_id_get {
    my ($self, %args) = @_;

    # verify the required parameter 'binder_id' is set
    unless (exists $args{'binder_id'}) {
      croak("Missing the required parameter 'binder_id' when calling objects_binders_binder_id_versions_major_version_minor_version_sections_section_id_get");
    }

    # verify the required parameter 'major_version' is set
    unless (exists $args{'major_version'}) {
      croak("Missing the required parameter 'major_version' when calling objects_binders_binder_id_versions_major_version_minor_version_sections_section_id_get");
    }

    # verify the required parameter 'minor_version' is set
    unless (exists $args{'minor_version'}) {
      croak("Missing the required parameter 'minor_version' when calling objects_binders_binder_id_versions_major_version_minor_version_sections_section_id_get");
    }

    # verify the required parameter 'section_id' is set
    unless (exists $args{'section_id'}) {
      croak("Missing the required parameter 'section_id' when calling objects_binders_binder_id_versions_major_version_minor_version_sections_section_id_get");
    }

    # parse inputs
    my $_resource_path = '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/sections/{section_id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'binder_id'}) {
        my $_base_variable = "{" . "binder_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'binder_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'major_version'}) {
        my $_base_variable = "{" . "major_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'major_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'minor_version'}) {
        my $_base_variable = "{" . "minor_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'minor_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'section_id'}) {
        my $_base_variable = "{" . "section_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'section_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_binders_id_roles_get
#
# Retrieve All Binder Roles
#
# @param string $id  (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_binders_id_roles_get' } = {
        summary => 'Retrieve All Binder Roles',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_binders_id_roles_get {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling objects_binders_id_roles_get");
    }

    # parse inputs
    my $_resource_path = '/objects/binders/{id}/roles';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_binders_id_roles_post
#
# Assign Users & Groups to Roles on a Single Binder
#
# @param string $id  (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_binders_id_roles_post' } = {
        summary => 'Assign Users &amp; Groups to Roles on a Single Binder',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_binders_id_roles_post {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling objects_binders_id_roles_post");
    }

    # parse inputs
    my $_resource_path = '/objects/binders/{id}/roles';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_binders_id_roles_role_name_get
#
# Retrieve Document Role
#
# @param string $id The binder &#x60;id&#x60;. (required)
# @param string $role_name The name of the role to retrieve. For example, &#x60;owner__v&#x60;. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The binder &#x60;id&#x60;.',
        required => '1',
    },
    'role_name' => {
        data_type => 'string',
        description => 'The name of the role to retrieve. For example, &#x60;owner__v&#x60;.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_binders_id_roles_role_name_get' } = {
        summary => 'Retrieve Document Role',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_binders_id_roles_role_name_get {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling objects_binders_id_roles_role_name_get");
    }

    # verify the required parameter 'role_name' is set
    unless (exists $args{'role_name'}) {
      croak("Missing the required parameter 'role_name' when calling objects_binders_id_roles_role_name_get");
    }

    # parse inputs
    my $_resource_path = '/objects/binders/{id}/roles/{role_name}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'role_name'}) {
        my $_base_variable = "{" . "role_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'role_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_binders_id_versions_major_version_minor_version_lifecycle_actions_get
#
# Retrieve Binder User Actions
#
# @param string $id The binder id field value from which to retrieve available user actions. (required)
# @param string $major_version The major version number of the binder. (required)
# @param string $minor_version The minor version number of the binder. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The binder id field value from which to retrieve available user actions.',
        required => '1',
    },
    'major_version' => {
        data_type => 'string',
        description => 'The major version number of the binder.',
        required => '1',
    },
    'minor_version' => {
        data_type => 'string',
        description => 'The minor version number of the binder.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_binders_id_versions_major_version_minor_version_lifecycle_actions_get' } = {
        summary => 'Retrieve Binder User Actions',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_binders_id_versions_major_version_minor_version_lifecycle_actions_get {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling objects_binders_id_versions_major_version_minor_version_lifecycle_actions_get");
    }

    # verify the required parameter 'major_version' is set
    unless (exists $args{'major_version'}) {
      croak("Missing the required parameter 'major_version' when calling objects_binders_id_versions_major_version_minor_version_lifecycle_actions_get");
    }

    # verify the required parameter 'minor_version' is set
    unless (exists $args{'minor_version'}) {
      croak("Missing the required parameter 'minor_version' when calling objects_binders_id_versions_major_version_minor_version_lifecycle_actions_get");
    }

    # parse inputs
    my $_resource_path = '/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'major_version'}) {
        my $_base_variable = "{" . "major_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'major_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'minor_version'}) {
        my $_base_variable = "{" . "minor_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'minor_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get
#
# Retrieve Binder Entry Criteria
#
# @param string $id The binder id field value from which to retrieve available user actions. (required)
# @param string $major_version The major version number of the binder. (required)
# @param string $minor_version The minor version number of the binder. (required)
# @param string $name__v The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The binder id field value from which to retrieve available user actions.',
        required => '1',
    },
    'major_version' => {
        data_type => 'string',
        description => 'The major version number of the binder.',
        required => '1',
    },
    'minor_version' => {
        data_type => 'string',
        description => 'The minor version number of the binder.',
        required => '1',
    },
    'name__v' => {
        data_type => 'string',
        description => 'The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get' } = {
        summary => 'Retrieve Binder Entry Criteria',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get");
    }

    # verify the required parameter 'major_version' is set
    unless (exists $args{'major_version'}) {
      croak("Missing the required parameter 'major_version' when calling objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get");
    }

    # verify the required parameter 'minor_version' is set
    unless (exists $args{'minor_version'}) {
      croak("Missing the required parameter 'minor_version' when calling objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get");
    }

    # verify the required parameter 'name__v' is set
    unless (exists $args{'name__v'}) {
      croak("Missing the required parameter 'name__v' when calling objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get");
    }

    # parse inputs
    my $_resource_path = '/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}/entry_requirements';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'major_version'}) {
        my $_base_variable = "{" . "major_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'major_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'minor_version'}) {
        my $_base_variable = "{" . "minor_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'minor_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'name__v'}) {
        my $_base_variable = "{" . "name__v" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name__v'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_put
#
# Initiate Binder User Action
#
# @param string $id The binder id field value from which to retrieve available user actions. (required)
# @param string $major_version The major version number of the binder. (required)
# @param string $minor_version The minor version number of the binder. (required)
# @param string $name__v The action name__v field value to initiate. This is retrieved from the Retrieve User Action request. (required)
# @param string $authorization  (optional)
# @param string $content_type  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The binder id field value from which to retrieve available user actions.',
        required => '1',
    },
    'major_version' => {
        data_type => 'string',
        description => 'The major version number of the binder.',
        required => '1',
    },
    'minor_version' => {
        data_type => 'string',
        description => 'The minor version number of the binder.',
        required => '1',
    },
    'name__v' => {
        data_type => 'string',
        description => 'The action name__v field value to initiate. This is retrieved from the Retrieve User Action request.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_put' } = {
        summary => 'Initiate Binder User Action',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_put {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_put");
    }

    # verify the required parameter 'major_version' is set
    unless (exists $args{'major_version'}) {
      croak("Missing the required parameter 'major_version' when calling objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_put");
    }

    # verify the required parameter 'minor_version' is set
    unless (exists $args{'minor_version'}) {
      croak("Missing the required parameter 'minor_version' when calling objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_put");
    }

    # verify the required parameter 'name__v' is set
    unless (exists $args{'name__v'}) {
      croak("Missing the required parameter 'name__v' when calling objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_put");
    }

    # parse inputs
    my $_resource_path = '/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'major_version'}) {
        my $_base_variable = "{" . "major_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'major_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'minor_version'}) {
        my $_base_variable = "{" . "minor_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'minor_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'name__v'}) {
        my $_base_variable = "{" . "name__v" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name__v'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_binders_lifecycle_actions_post
#
# Retrieve User Actions on Multiple Binders
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_binders_lifecycle_actions_post' } = {
        summary => 'Retrieve User Actions on Multiple Binders',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_binders_lifecycle_actions_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/objects/binders/lifecycle_actions';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_binders_lifecycle_actions_user_action_name_put
#
# Initiate Bulk Binder User Actions
#
# @param string $user_action_name The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Binders endpoint. (required)
# @param string $authorization  (optional)
# @param string $content_type  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'user_action_name' => {
        data_type => 'string',
        description => 'The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Binders endpoint.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_binders_lifecycle_actions_user_action_name_put' } = {
        summary => 'Initiate Bulk Binder User Actions',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_binders_lifecycle_actions_user_action_name_put {
    my ($self, %args) = @_;

    # verify the required parameter 'user_action_name' is set
    unless (exists $args{'user_action_name'}) {
      croak("Missing the required parameter 'user_action_name' when calling objects_binders_lifecycle_actions_user_action_name_put");
    }

    # parse inputs
    my $_resource_path = '/objects/binders/lifecycle_actions/{user_action_name}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'user_action_name'}) {
        my $_base_variable = "{" . "user_action_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'user_action_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_binders_post
#
# Create Binder
#
# @param boolean $async When creating a binder, the binder metadata is indexed synchronously by default. To process the indexing asynchronously, include a query parameter async set to true (objects/binders?async&#x3D;true). This helps speed up the response time from Vault when processing large amounts of data.  (optional)
# @param string $authorization  (optional)
# @param string $content_type  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'async' => {
        data_type => 'boolean',
        description => 'When creating a binder, the binder metadata is indexed synchronously by default. To process the indexing asynchronously, include a query parameter async set to true (objects/binders?async&#x3D;true). This helps speed up the response time from Vault when processing large amounts of data. ',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_binders_post' } = {
        summary => 'Create Binder',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_binders_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/objects/binders';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'async'}) {
        $query_params->{'async'} = $self->{api_client}->to_query_value($args{'async'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_binders_templates_get
#
# Retrieve Binder Template Collection
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_binders_templates_get' } = {
        summary => 'Retrieve Binder Template Collection',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_binders_templates_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/objects/binders/templates';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_binders_templates_post
#
# Create Binder Template
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_binders_templates_post' } = {
        summary => 'Create Binder Template',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_binders_templates_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/objects/binders/templates';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_binders_templates_put
#
# Update Binder Template
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_binders_templates_put' } = {
        summary => 'Update Binder Template',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_binders_templates_put {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/objects/binders/templates';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_binders_templates_template_name_bindernodes_get
#
# Retrieve Binder Template Node Attributes
#
# @param string $template_name The binder template name__v field value. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'template_name' => {
        data_type => 'string',
        description => 'The binder template name__v field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_binders_templates_template_name_bindernodes_get' } = {
        summary => 'Retrieve Binder Template Node Attributes',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_binders_templates_template_name_bindernodes_get {
    my ($self, %args) = @_;

    # verify the required parameter 'template_name' is set
    unless (exists $args{'template_name'}) {
      croak("Missing the required parameter 'template_name' when calling objects_binders_templates_template_name_bindernodes_get");
    }

    # parse inputs
    my $_resource_path = '/objects/binders/templates/{template_name}/bindernodes';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'template_name'}) {
        my $_base_variable = "{" . "template_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'template_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_binders_templates_template_name_bindernodes_post
#
# Create Binder Template Node
#
# @param string $template_name The binder template name__v field value. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'template_name' => {
        data_type => 'string',
        description => 'The binder template name__v field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_binders_templates_template_name_bindernodes_post' } = {
        summary => 'Create Binder Template Node',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_binders_templates_template_name_bindernodes_post {
    my ($self, %args) = @_;

    # verify the required parameter 'template_name' is set
    unless (exists $args{'template_name'}) {
      croak("Missing the required parameter 'template_name' when calling objects_binders_templates_template_name_bindernodes_post");
    }

    # parse inputs
    my $_resource_path = '/objects/binders/templates/{template_name}/bindernodes';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'template_name'}) {
        my $_base_variable = "{" . "template_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'template_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_binders_templates_template_name_bindernodes_put
#
# Replace Binder Template Nodes
#
# @param string $template_name The binder template name__v field value. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'template_name' => {
        data_type => 'string',
        description => 'The binder template name__v field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_binders_templates_template_name_bindernodes_put' } = {
        summary => 'Replace Binder Template Nodes',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_binders_templates_template_name_bindernodes_put {
    my ($self, %args) = @_;

    # verify the required parameter 'template_name' is set
    unless (exists $args{'template_name'}) {
      croak("Missing the required parameter 'template_name' when calling objects_binders_templates_template_name_bindernodes_put");
    }

    # parse inputs
    my $_resource_path = '/objects/binders/templates/{template_name}/bindernodes';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'template_name'}) {
        my $_base_variable = "{" . "template_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'template_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_binders_templates_template_name_delete
#
# Delete Binder Template
#
# @param string $template_name The binder template name__v field value. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'template_name' => {
        data_type => 'string',
        description => 'The binder template name__v field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_binders_templates_template_name_delete' } = {
        summary => 'Delete Binder Template',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_binders_templates_template_name_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'template_name' is set
    unless (exists $args{'template_name'}) {
      croak("Missing the required parameter 'template_name' when calling objects_binders_templates_template_name_delete");
    }

    # parse inputs
    my $_resource_path = '/objects/binders/templates/{template_name}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'template_name'}) {
        my $_base_variable = "{" . "template_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'template_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_binders_templates_template_name_get
#
# Retrieve Binder Template Attributes
#
# @param string $template_name The binder template name__v field value. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'template_name' => {
        data_type => 'string',
        description => 'The binder template name__v field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_binders_templates_template_name_get' } = {
        summary => 'Retrieve Binder Template Attributes',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_binders_templates_template_name_get {
    my ($self, %args) = @_;

    # verify the required parameter 'template_name' is set
    unless (exists $args{'template_name'}) {
      croak("Missing the required parameter 'template_name' when calling objects_binders_templates_template_name_get");
    }

    # parse inputs
    my $_resource_path = '/objects/binders/templates/{template_name}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'template_name'}) {
        my $_base_variable = "{" . "template_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'template_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_deletions_documents_get
#
# Retrieve Deleted Document IDs
#
# @param string $start_date Specify a date (no more than 30 days past) after which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z (optional)
# @param string $end_date Specify a date (no more than 30 days past) before which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z  (optional)
# @param string $authorization  (optional)
# @param string $content_type  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'start_date' => {
        data_type => 'string',
        description => 'Specify a date (no more than 30 days past) after which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z',
        required => '0',
    },
    'end_date' => {
        data_type => 'string',
        description => 'Specify a date (no more than 30 days past) before which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z ',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_deletions_documents_get' } = {
        summary => 'Retrieve Deleted Document IDs',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_deletions_documents_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/objects/deletions/documents';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'start_date'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'end_date'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_deletions_vobjects_object_name_get
#
# Retrieve Deleted Object Record ID
#
# @param string $object_name The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'object_name' => {
        data_type => 'string',
        description => 'The object name__v field value (product__v, country__v, custom_object__c, etc.).',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_deletions_vobjects_object_name_get' } = {
        summary => 'Retrieve Deleted Object Record ID',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_deletions_vobjects_object_name_get {
    my ($self, %args) = @_;

    # verify the required parameter 'object_name' is set
    unless (exists $args{'object_name'}) {
      croak("Missing the required parameter 'object_name' when calling objects_deletions_vobjects_object_name_get");
    }

    # parse inputs
    my $_resource_path = '/objects/deletions/vobjects/{object_name}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'object_name'}) {
        my $_base_variable = "{" . "object_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'object_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_actions_get
#
# Retrieve All Document Workflows
#
# @param boolean $loc When localized (translated) strings are available, retrieve them by setting loc to true. (optional)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'loc' => {
        data_type => 'boolean',
        description => 'When localized (translated) strings are available, retrieve them by setting loc to true.',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_actions_get' } = {
        summary => 'Retrieve All Document Workflows',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_actions_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/objects/documents/actions';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'loc'}) {
        $query_params->{'loc'} = $self->{api_client}->to_query_value($args{'loc'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_actions_lifecycle_and_state_and_action_job_id_results_get
#
# Download Controlled Copy Job Results
#
# @param string $lifecycle_and_state_and_action The &#x60;name__v&#x60; values for the lifecycle, state, and action in the format &#x60;{lifecycle_name}.{state_name}.{action_name}&#x60;. To get this value, [Retrieve the Job Status](https://developer.veevavault.com/api/24.3#RetrieveJobStatus) and find the &#x60;href&#x60; under the &#x60;artifacts&#x60; link. (required)
# @param string $job_id  (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'lifecycle_and_state_and_action' => {
        data_type => 'string',
        description => 'The &#x60;name__v&#x60; values for the lifecycle, state, and action in the format &#x60;{lifecycle_name}.{state_name}.{action_name}&#x60;. To get this value, [Retrieve the Job Status](https://developer.veevavault.com/api/24.3#RetrieveJobStatus) and find the &#x60;href&#x60; under the &#x60;artifacts&#x60; link.',
        required => '1',
    },
    'job_id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_actions_lifecycle_and_state_and_action_job_id_results_get' } = {
        summary => 'Download Controlled Copy Job Results',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_actions_lifecycle_and_state_and_action_job_id_results_get {
    my ($self, %args) = @_;

    # verify the required parameter 'lifecycle_and_state_and_action' is set
    unless (exists $args{'lifecycle_and_state_and_action'}) {
      croak("Missing the required parameter 'lifecycle_and_state_and_action' when calling objects_documents_actions_lifecycle_and_state_and_action_job_id_results_get");
    }

    # verify the required parameter 'job_id' is set
    unless (exists $args{'job_id'}) {
      croak("Missing the required parameter 'job_id' when calling objects_documents_actions_lifecycle_and_state_and_action_job_id_results_get");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/actions/{lifecycle_and_state_and_action}/{job_id}/results';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'lifecycle_and_state_and_action'}) {
        my $_base_variable = "{" . "lifecycle_and_state_and_action" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'lifecycle_and_state_and_action'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'job_id'}) {
        my $_base_variable = "{" . "job_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'job_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_actions_workflow_name_get
#
# Retrieve Document Workflow Details
#
# @param string $workflow_name The document workflow name value. (required)
# @param boolean $loc When localized (translated) strings are available, retrieve them by setting loc to true. (optional)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'workflow_name' => {
        data_type => 'string',
        description => 'The document workflow name value.',
        required => '1',
    },
    'loc' => {
        data_type => 'boolean',
        description => 'When localized (translated) strings are available, retrieve them by setting loc to true.',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_actions_workflow_name_get' } = {
        summary => 'Retrieve Document Workflow Details',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_actions_workflow_name_get {
    my ($self, %args) = @_;

    # verify the required parameter 'workflow_name' is set
    unless (exists $args{'workflow_name'}) {
      croak("Missing the required parameter 'workflow_name' when calling objects_documents_actions_workflow_name_get");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/actions/{workflow_name}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'loc'}) {
        $query_params->{'loc'} = $self->{api_client}->to_query_value($args{'loc'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'workflow_name'}) {
        my $_base_variable = "{" . "workflow_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'workflow_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_actions_workflow_name_post
#
# Initiate Document Workflow
#
# @param string $workflow_name The document workflow name value. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'workflow_name' => {
        data_type => 'string',
        description => 'The document workflow name value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_actions_workflow_name_post' } = {
        summary => 'Initiate Document Workflow',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_actions_workflow_name_post {
    my ($self, %args) = @_;

    # verify the required parameter 'workflow_name' is set
    unless (exists $args{'workflow_name'}) {
      croak("Missing the required parameter 'workflow_name' when calling objects_documents_actions_workflow_name_post");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/actions/{workflow_name}';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'workflow_name'}) {
        my $_base_variable = "{" . "workflow_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'workflow_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_annotations_batch_delete
#
# Delete Annotations
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_annotations_batch_delete' } = {
        summary => 'Delete Annotations',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_annotations_batch_delete {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/objects/documents/annotations/batch';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_annotations_batch_post
#
# Create Multiple Annotations
#
# @param string $authorization  (required)
# @param string $content_type  (required)
# @param string $accept  (required)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (required)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_annotations_batch_post' } = {
        summary => 'Create Multiple Annotations',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_annotations_batch_post {
    my ($self, %args) = @_;

    # verify the required parameter 'authorization' is set
    unless (exists $args{'authorization'}) {
      croak("Missing the required parameter 'authorization' when calling objects_documents_annotations_batch_post");
    }

    # verify the required parameter 'content_type' is set
    unless (exists $args{'content_type'}) {
      croak("Missing the required parameter 'content_type' when calling objects_documents_annotations_batch_post");
    }

    # verify the required parameter 'accept' is set
    unless (exists $args{'accept'}) {
      croak("Missing the required parameter 'accept' when calling objects_documents_annotations_batch_post");
    }

    # verify the required parameter 'x_vault_api_client_id' is set
    unless (exists $args{'x_vault_api_client_id'}) {
      croak("Missing the required parameter 'x_vault_api_client_id' when calling objects_documents_annotations_batch_post");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/annotations/batch';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_annotations_batch_put
#
# Update Annotations
#
# @param string $authorization  (optional)
# @param string $content_type  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_annotations_batch_put' } = {
        summary => 'Update Annotations',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_annotations_batch_put {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/objects/documents/annotations/batch';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_annotations_replies_batch_post
#
# Add Annotation Replies
#
# @param string $authorization  (optional)
# @param string $content_type  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_annotations_replies_batch_post' } = {
        summary => 'Add Annotation Replies',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_annotations_replies_batch_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/objects/documents/annotations/replies/batch';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_attachments_batch_delete
#
# Delete Multiple Document Attachments
#
# @param string $accept  (optional)
# @param string $authorization  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_attachments_batch_delete' } = {
        summary => 'Delete Multiple Document Attachments',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_attachments_batch_delete {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/objects/documents/attachments/batch';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_attachments_batch_post
#
# Create Multiple Document Attachments
#
# @param string $accept  (optional)
# @param string $authorization  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_attachments_batch_post' } = {
        summary => 'Create Multiple Document Attachments',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_attachments_batch_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/objects/documents/attachments/batch';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_attachments_batch_put
#
# Update Multiple Document Attachment Descriptions
#
# @param string $accept  (optional)
# @param string $authorization  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_attachments_batch_put' } = {
        summary => 'Update Multiple Document Attachment Descriptions',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_attachments_batch_put {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/objects/documents/attachments/batch';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_batch_actions_fileextract_job_id_results_get
#
# Retrieve Document Export Results
#
# @param string $job_id The id value of the requested export job. This is returned with the export document requests. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'job_id' => {
        data_type => 'string',
        description => 'The id value of the requested export job. This is returned with the export document requests.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_batch_actions_fileextract_job_id_results_get' } = {
        summary => 'Retrieve Document Export Results',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_batch_actions_fileextract_job_id_results_get {
    my ($self, %args) = @_;

    # verify the required parameter 'job_id' is set
    unless (exists $args{'job_id'}) {
      croak("Missing the required parameter 'job_id' when calling objects_documents_batch_actions_fileextract_job_id_results_get");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/batch/actions/fileextract/{job_id}/results';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'job_id'}) {
        my $_base_variable = "{" . "job_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'job_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_batch_actions_fileextract_post
#
# Export Documents
#
# @param boolean $source Optional: To exclude source files, include a query parameter source&#x3D;false. If omitted, defaults to true. (optional)
# @param boolean $renditions Optional: To include renditions, include a query parameter renditions&#x3D;true. If omitted, defaults to false. (optional)
# @param boolean $allversions Optional: To include all versions or latest version, include a query parameter allversions&#x3D;true. If omitted, defaults to false. (optional)
# @param string $authorization  (optional)
# @param string $content_type  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'source' => {
        data_type => 'boolean',
        description => 'Optional: To exclude source files, include a query parameter source&#x3D;false. If omitted, defaults to true.',
        required => '0',
    },
    'renditions' => {
        data_type => 'boolean',
        description => 'Optional: To include renditions, include a query parameter renditions&#x3D;true. If omitted, defaults to false.',
        required => '0',
    },
    'allversions' => {
        data_type => 'boolean',
        description => 'Optional: To include all versions or latest version, include a query parameter allversions&#x3D;true. If omitted, defaults to false.',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_batch_actions_fileextract_post' } = {
        summary => 'Export Documents',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_batch_actions_fileextract_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/objects/documents/batch/actions/fileextract';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'source'}) {
        $query_params->{'source'} = $self->{api_client}->to_query_value($args{'source'});
    }

    # query params
    if ( exists $args{'renditions'}) {
        $query_params->{'renditions'} = $self->{api_client}->to_query_value($args{'renditions'});
    }

    # query params
    if ( exists $args{'allversions'}) {
        $query_params->{'allversions'} = $self->{api_client}->to_query_value($args{'allversions'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_batch_actions_reclassify_put
#
# Reclassify Multiple Documents
#
# @param string $authorization  (optional)
# @param string $content_type  (optional)
# @param string $accept  (optional)
# @param boolean $x_vault_api_migration_mode When set to true, Vault allows you to manually set the document number and to update documents to any lifecycle state using the status__v field. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message.  You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt; (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_migration_mode' => {
        data_type => 'boolean',
        description => 'When set to true, Vault allows you to manually set the document number and to update documents to any lifecycle state using the status__v field. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message.  You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_batch_actions_reclassify_put' } = {
        summary => 'Reclassify Multiple Documents',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_batch_actions_reclassify_put {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/objects/documents/batch/actions/reclassify';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_migration_mode'}) {
        $header_params->{'X-VaultAPI-MigrationMode'} = $self->{api_client}->to_header_value($args{'x_vault_api_migration_mode'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_batch_actions_rerender_post
#
# Update Multiple Document Renditions
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_batch_actions_rerender_post' } = {
        summary => 'Update Multiple Document Renditions',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_batch_actions_rerender_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/objects/documents/batch/actions/rerender';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_batch_delete
#
# Delete Multiple Documents
#
# @param string $id_param If you’re identifying documents in your input by their external ID (optional)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'id_param' => {
        data_type => 'string',
        description => 'If you’re identifying documents in your input by their external ID',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_batch_delete' } = {
        summary => 'Delete Multiple Documents',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_batch_delete {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/objects/documents/batch';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'id_param'}) {
        $query_params->{'idParam'} = $self->{api_client}->to_query_value($args{'id_param'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_batch_lock_delete
#
# Undo Collaborative Authoring Checkout
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_batch_lock_delete' } = {
        summary => 'Undo Collaborative Authoring Checkout',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_batch_lock_delete {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/objects/documents/batch/lock';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_batch_post
#
# Create Multiple Documents
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param boolean $x_vault_api_migration_mode When set to true, Vault allows you to create documents in any lifecycle state using the status__v field, and to manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt; (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_migration_mode' => {
        data_type => 'boolean',
        description => 'When set to true, Vault allows you to create documents in any lifecycle state using the status__v field, and to manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_batch_post' } = {
        summary => 'Create Multiple Documents',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_batch_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/objects/documents/batch';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_migration_mode'}) {
        $header_params->{'X-VaultAPI-MigrationMode'} = $self->{api_client}->to_header_value($args{'x_vault_api_migration_mode'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_batch_put
#
# Update Multiple Documents
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param boolean $x_vault_api_migration_mode When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header.Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt; (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_migration_mode' => {
        data_type => 'boolean',
        description => 'When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header.Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_batch_put' } = {
        summary => 'Update Multiple Documents',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_batch_put {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/objects/documents/batch';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_migration_mode'}) {
        $header_params->{'X-VaultAPI-MigrationMode'} = $self->{api_client}->to_header_value($args{'x_vault_api_migration_mode'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_doc_id_anchors_get
#
# Retrieve Anchor IDs
#
# @param string $doc_id The document id field value. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'doc_id' => {
        data_type => 'string',
        description => 'The document id field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_doc_id_anchors_get' } = {
        summary => 'Retrieve Anchor IDs',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_doc_id_anchors_get {
    my ($self, %args) = @_;

    # verify the required parameter 'doc_id' is set
    unless (exists $args{'doc_id'}) {
      croak("Missing the required parameter 'doc_id' when calling objects_documents_doc_id_anchors_get");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/{doc_id}/anchors';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'doc_id'}) {
        my $_base_variable = "{" . "doc_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'doc_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_doc_id_annotations_file_get
#
# Export Document Annotations to PDF
#
# @param string $doc_id The document id field value. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'doc_id' => {
        data_type => 'string',
        description => 'The document id field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_doc_id_annotations_file_get' } = {
        summary => 'Export Document Annotations to PDF',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_doc_id_annotations_file_get {
    my ($self, %args) = @_;

    # verify the required parameter 'doc_id' is set
    unless (exists $args{'doc_id'}) {
      croak("Missing the required parameter 'doc_id' when calling objects_documents_doc_id_annotations_file_get");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/{doc_id}/annotations/file';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'doc_id'}) {
        my $_base_variable = "{" . "doc_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'doc_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_doc_id_annotations_file_post
#
# Import Document Annotations from PDF
#
# @param string $doc_id The document id field value. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'doc_id' => {
        data_type => 'string',
        description => 'The document id field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_doc_id_annotations_file_post' } = {
        summary => 'Import Document Annotations from PDF',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_doc_id_annotations_file_post {
    my ($self, %args) = @_;

    # verify the required parameter 'doc_id' is set
    unless (exists $args{'doc_id'}) {
      croak("Missing the required parameter 'doc_id' when calling objects_documents_doc_id_annotations_file_post");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/{doc_id}/annotations/file';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'doc_id'}) {
        my $_base_variable = "{" . "doc_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'doc_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_doc_id_attachments_attachment_id_delete
#
# Delete Single Document Attachment
#
# @param string $doc_id The document id field value. (required)
# @param string $attachment_id The attachment id field value. (required)
# @param string $accept  (optional)
# @param string $authorization  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'doc_id' => {
        data_type => 'string',
        description => 'The document id field value.',
        required => '1',
    },
    'attachment_id' => {
        data_type => 'string',
        description => 'The attachment id field value.',
        required => '1',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_doc_id_attachments_attachment_id_delete' } = {
        summary => 'Delete Single Document Attachment',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_doc_id_attachments_attachment_id_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'doc_id' is set
    unless (exists $args{'doc_id'}) {
      croak("Missing the required parameter 'doc_id' when calling objects_documents_doc_id_attachments_attachment_id_delete");
    }

    # verify the required parameter 'attachment_id' is set
    unless (exists $args{'attachment_id'}) {
      croak("Missing the required parameter 'attachment_id' when calling objects_documents_doc_id_attachments_attachment_id_delete");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/{doc_id}/attachments/{attachment_id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'doc_id'}) {
        my $_base_variable = "{" . "doc_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'doc_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'attachment_id'}) {
        my $_base_variable = "{" . "attachment_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'attachment_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_doc_id_attachments_attachment_id_file_get
#
# Download Document Attachment
#
# @param string $doc_id The document id field value. (required)
# @param string $attachment_id The attachment id field value. (required)
# @param string $accept  (optional)
# @param string $authorization  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'doc_id' => {
        data_type => 'string',
        description => 'The document id field value.',
        required => '1',
    },
    'attachment_id' => {
        data_type => 'string',
        description => 'The attachment id field value.',
        required => '1',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_doc_id_attachments_attachment_id_file_get' } = {
        summary => 'Download Document Attachment',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_doc_id_attachments_attachment_id_file_get {
    my ($self, %args) = @_;

    # verify the required parameter 'doc_id' is set
    unless (exists $args{'doc_id'}) {
      croak("Missing the required parameter 'doc_id' when calling objects_documents_doc_id_attachments_attachment_id_file_get");
    }

    # verify the required parameter 'attachment_id' is set
    unless (exists $args{'attachment_id'}) {
      croak("Missing the required parameter 'attachment_id' when calling objects_documents_doc_id_attachments_attachment_id_file_get");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/{doc_id}/attachments/{attachment_id}/file';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'doc_id'}) {
        my $_base_variable = "{" . "doc_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'doc_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'attachment_id'}) {
        my $_base_variable = "{" . "attachment_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'attachment_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_doc_id_attachments_attachment_id_get
#
# Retrieve Document Attachment Metadata
#
# @param string $doc_id The document id field value. (required)
# @param string $attachment_id The attachment id field value. (required)
# @param string $accept  (optional)
# @param string $authorization  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'doc_id' => {
        data_type => 'string',
        description => 'The document id field value.',
        required => '1',
    },
    'attachment_id' => {
        data_type => 'string',
        description => 'The attachment id field value.',
        required => '1',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_doc_id_attachments_attachment_id_get' } = {
        summary => 'Retrieve Document Attachment Metadata',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_doc_id_attachments_attachment_id_get {
    my ($self, %args) = @_;

    # verify the required parameter 'doc_id' is set
    unless (exists $args{'doc_id'}) {
      croak("Missing the required parameter 'doc_id' when calling objects_documents_doc_id_attachments_attachment_id_get");
    }

    # verify the required parameter 'attachment_id' is set
    unless (exists $args{'attachment_id'}) {
      croak("Missing the required parameter 'attachment_id' when calling objects_documents_doc_id_attachments_attachment_id_get");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/{doc_id}/attachments/{attachment_id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'doc_id'}) {
        my $_base_variable = "{" . "doc_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'doc_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'attachment_id'}) {
        my $_base_variable = "{" . "attachment_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'attachment_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_doc_id_attachments_attachment_id_put
#
# Update Document Attachment Description
#
# @param string $doc_id The document id field value. (required)
# @param string $attachment_id The attachment id field value. (required)
# @param string $accept  (optional)
# @param string $authorization  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'doc_id' => {
        data_type => 'string',
        description => 'The document id field value.',
        required => '1',
    },
    'attachment_id' => {
        data_type => 'string',
        description => 'The attachment id field value.',
        required => '1',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_doc_id_attachments_attachment_id_put' } = {
        summary => 'Update Document Attachment Description',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_doc_id_attachments_attachment_id_put {
    my ($self, %args) = @_;

    # verify the required parameter 'doc_id' is set
    unless (exists $args{'doc_id'}) {
      croak("Missing the required parameter 'doc_id' when calling objects_documents_doc_id_attachments_attachment_id_put");
    }

    # verify the required parameter 'attachment_id' is set
    unless (exists $args{'attachment_id'}) {
      croak("Missing the required parameter 'attachment_id' when calling objects_documents_doc_id_attachments_attachment_id_put");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/{doc_id}/attachments/{attachment_id}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'doc_id'}) {
        my $_base_variable = "{" . "doc_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'doc_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'attachment_id'}) {
        my $_base_variable = "{" . "attachment_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'attachment_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_delete
#
# Delete Single Document Attachment Version
#
# @param string $doc_id The document id field value. (required)
# @param string $attachment_id The attachment id field value. (required)
# @param string $attachment_version The attachment version__v field value. (required)
# @param string $accept  (optional)
# @param string $authorization  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'doc_id' => {
        data_type => 'string',
        description => 'The document id field value.',
        required => '1',
    },
    'attachment_id' => {
        data_type => 'string',
        description => 'The attachment id field value.',
        required => '1',
    },
    'attachment_version' => {
        data_type => 'string',
        description => 'The attachment version__v field value.',
        required => '1',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_delete' } = {
        summary => 'Delete Single Document Attachment Version',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'doc_id' is set
    unless (exists $args{'doc_id'}) {
      croak("Missing the required parameter 'doc_id' when calling objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_delete");
    }

    # verify the required parameter 'attachment_id' is set
    unless (exists $args{'attachment_id'}) {
      croak("Missing the required parameter 'attachment_id' when calling objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_delete");
    }

    # verify the required parameter 'attachment_version' is set
    unless (exists $args{'attachment_version'}) {
      croak("Missing the required parameter 'attachment_version' when calling objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_delete");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'doc_id'}) {
        my $_base_variable = "{" . "doc_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'doc_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'attachment_id'}) {
        my $_base_variable = "{" . "attachment_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'attachment_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'attachment_version'}) {
        my $_base_variable = "{" . "attachment_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'attachment_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_file_get
#
# Download Document Attachment Version
#
# @param string $doc_id The document id field value. (required)
# @param string $attachment_id The attachment id field value. (required)
# @param string $attachment_version The attachment version__v field value. (required)
# @param string $accept  (optional)
# @param string $authorization  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'doc_id' => {
        data_type => 'string',
        description => 'The document id field value.',
        required => '1',
    },
    'attachment_id' => {
        data_type => 'string',
        description => 'The attachment id field value.',
        required => '1',
    },
    'attachment_version' => {
        data_type => 'string',
        description => 'The attachment version__v field value.',
        required => '1',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_file_get' } = {
        summary => 'Download Document Attachment Version',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_file_get {
    my ($self, %args) = @_;

    # verify the required parameter 'doc_id' is set
    unless (exists $args{'doc_id'}) {
      croak("Missing the required parameter 'doc_id' when calling objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_file_get");
    }

    # verify the required parameter 'attachment_id' is set
    unless (exists $args{'attachment_id'}) {
      croak("Missing the required parameter 'attachment_id' when calling objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_file_get");
    }

    # verify the required parameter 'attachment_version' is set
    unless (exists $args{'attachment_version'}) {
      croak("Missing the required parameter 'attachment_version' when calling objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_file_get");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}/file';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'doc_id'}) {
        my $_base_variable = "{" . "doc_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'doc_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'attachment_id'}) {
        my $_base_variable = "{" . "attachment_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'attachment_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'attachment_version'}) {
        my $_base_variable = "{" . "attachment_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'attachment_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_get
#
# Retrieve Document Attachment Version Metadata
#
# @param string $doc_id The document id field value. (required)
# @param string $attachment_id The attachment id field value. (required)
# @param string $attachment_version The attachment version__v field value. (required)
# @param string $accept  (optional)
# @param string $authorization  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'doc_id' => {
        data_type => 'string',
        description => 'The document id field value.',
        required => '1',
    },
    'attachment_id' => {
        data_type => 'string',
        description => 'The attachment id field value.',
        required => '1',
    },
    'attachment_version' => {
        data_type => 'string',
        description => 'The attachment version__v field value.',
        required => '1',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_get' } = {
        summary => 'Retrieve Document Attachment Version Metadata',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_get {
    my ($self, %args) = @_;

    # verify the required parameter 'doc_id' is set
    unless (exists $args{'doc_id'}) {
      croak("Missing the required parameter 'doc_id' when calling objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_get");
    }

    # verify the required parameter 'attachment_id' is set
    unless (exists $args{'attachment_id'}) {
      croak("Missing the required parameter 'attachment_id' when calling objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_get");
    }

    # verify the required parameter 'attachment_version' is set
    unless (exists $args{'attachment_version'}) {
      croak("Missing the required parameter 'attachment_version' when calling objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_get");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'doc_id'}) {
        my $_base_variable = "{" . "doc_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'doc_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'attachment_id'}) {
        my $_base_variable = "{" . "attachment_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'attachment_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'attachment_version'}) {
        my $_base_variable = "{" . "attachment_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'attachment_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_post
#
# Restore Document Attachment Version
#
# @param string $doc_id The document id field value. (required)
# @param string $attachment_id The attachment id field value. (required)
# @param string $attachment_version The attachment version__v field value. (required)
# @param boolean $restore The parameter restore must be set to true.  (optional)
# @param string $accept  (optional)
# @param string $authorization  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'doc_id' => {
        data_type => 'string',
        description => 'The document id field value.',
        required => '1',
    },
    'attachment_id' => {
        data_type => 'string',
        description => 'The attachment id field value.',
        required => '1',
    },
    'attachment_version' => {
        data_type => 'string',
        description => 'The attachment version__v field value.',
        required => '1',
    },
    'restore' => {
        data_type => 'boolean',
        description => 'The parameter restore must be set to true. ',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_post' } = {
        summary => 'Restore Document Attachment Version',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_post {
    my ($self, %args) = @_;

    # verify the required parameter 'doc_id' is set
    unless (exists $args{'doc_id'}) {
      croak("Missing the required parameter 'doc_id' when calling objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_post");
    }

    # verify the required parameter 'attachment_id' is set
    unless (exists $args{'attachment_id'}) {
      croak("Missing the required parameter 'attachment_id' when calling objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_post");
    }

    # verify the required parameter 'attachment_version' is set
    unless (exists $args{'attachment_version'}) {
      croak("Missing the required parameter 'attachment_version' when calling objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_post");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'restore'}) {
        $query_params->{'restore'} = $self->{api_client}->to_query_value($args{'restore'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'doc_id'}) {
        my $_base_variable = "{" . "doc_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'doc_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'attachment_id'}) {
        my $_base_variable = "{" . "attachment_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'attachment_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'attachment_version'}) {
        my $_base_variable = "{" . "attachment_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'attachment_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_doc_id_attachments_attachment_id_versions_get
#
# Retrieve Document Attachment Versions
#
# @param string $doc_id The document id field value. (required)
# @param string $attachment_id The attachment id field value. (required)
# @param string $accept  (optional)
# @param string $authorization  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'doc_id' => {
        data_type => 'string',
        description => 'The document id field value.',
        required => '1',
    },
    'attachment_id' => {
        data_type => 'string',
        description => 'The attachment id field value.',
        required => '1',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_doc_id_attachments_attachment_id_versions_get' } = {
        summary => 'Retrieve Document Attachment Versions',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_doc_id_attachments_attachment_id_versions_get {
    my ($self, %args) = @_;

    # verify the required parameter 'doc_id' is set
    unless (exists $args{'doc_id'}) {
      croak("Missing the required parameter 'doc_id' when calling objects_documents_doc_id_attachments_attachment_id_versions_get");
    }

    # verify the required parameter 'attachment_id' is set
    unless (exists $args{'attachment_id'}) {
      croak("Missing the required parameter 'attachment_id' when calling objects_documents_doc_id_attachments_attachment_id_versions_get");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/{doc_id}/attachments/{attachment_id}/versions';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'doc_id'}) {
        my $_base_variable = "{" . "doc_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'doc_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'attachment_id'}) {
        my $_base_variable = "{" . "attachment_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'attachment_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_doc_id_attachments_file_get
#
# Download All Document Attachments
#
# @param string $doc_id The document id field value. (required)
# @param string $accept  (optional)
# @param string $authorization  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'doc_id' => {
        data_type => 'string',
        description => 'The document id field value.',
        required => '1',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_doc_id_attachments_file_get' } = {
        summary => 'Download All Document Attachments',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_doc_id_attachments_file_get {
    my ($self, %args) = @_;

    # verify the required parameter 'doc_id' is set
    unless (exists $args{'doc_id'}) {
      croak("Missing the required parameter 'doc_id' when calling objects_documents_doc_id_attachments_file_get");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/{doc_id}/attachments/file';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'doc_id'}) {
        my $_base_variable = "{" . "doc_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'doc_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_doc_id_attachments_get
#
# Retrieve Document Attachments
#
# @param string $doc_id The document id field value. (required)
# @param string $accept  (optional)
# @param string $authorization  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'doc_id' => {
        data_type => 'string',
        description => 'The document id field value.',
        required => '1',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_doc_id_attachments_get' } = {
        summary => 'Retrieve Document Attachments',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_doc_id_attachments_get {
    my ($self, %args) = @_;

    # verify the required parameter 'doc_id' is set
    unless (exists $args{'doc_id'}) {
      croak("Missing the required parameter 'doc_id' when calling objects_documents_doc_id_attachments_get");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/{doc_id}/attachments';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'doc_id'}) {
        my $_base_variable = "{" . "doc_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'doc_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_doc_id_attachments_post
#
# Create Document Attachment
#
# @param string $doc_id The document id field value. (required)
# @param string $accept  (optional)
# @param string $authorization  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'doc_id' => {
        data_type => 'string',
        description => 'The document id field value.',
        required => '1',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_doc_id_attachments_post' } = {
        summary => 'Create Document Attachment',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_doc_id_attachments_post {
    my ($self, %args) = @_;

    # verify the required parameter 'doc_id' is set
    unless (exists $args{'doc_id'}) {
      croak("Missing the required parameter 'doc_id' when calling objects_documents_doc_id_attachments_post");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/{doc_id}/attachments';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'doc_id'}) {
        my $_base_variable = "{" . "doc_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'doc_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_doc_id_audittrail_get
#
# Retrieve Complete Audit History for a Single Document
#
# @param string $doc_id The document ID for which to retrieve audit history. (required)
# @param string $start_date Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vault’s creation date.  (optional)
# @param string $end_date Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date.  (optional)
# @param string $format_result To request a CSV file of your audit history, use csv.  (optional)
# @param string $limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200. (optional)
# @param string $offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0. (optional)
# @param string $events Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of document audit events. The values passed to this parameter are case sensitive. For example, events&#x3D;WorkflowCompletion,TaskAssignment. If omitted, defaults to all audit events. (optional)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'doc_id' => {
        data_type => 'string',
        description => 'The document ID for which to retrieve audit history.',
        required => '1',
    },
    'start_date' => {
        data_type => 'string',
        description => 'Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vault’s creation date. ',
        required => '0',
    },
    'end_date' => {
        data_type => 'string',
        description => 'Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date. ',
        required => '0',
    },
    'format_result' => {
        data_type => 'string',
        description => 'To request a CSV file of your audit history, use csv. ',
        required => '0',
    },
    'limit' => {
        data_type => 'string',
        description => 'Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.',
        required => '0',
    },
    'offset' => {
        data_type => 'string',
        description => 'Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0.',
        required => '0',
    },
    'events' => {
        data_type => 'string',
        description => 'Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of document audit events. The values passed to this parameter are case sensitive. For example, events&#x3D;WorkflowCompletion,TaskAssignment. If omitted, defaults to all audit events.',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_doc_id_audittrail_get' } = {
        summary => 'Retrieve Complete Audit History for a Single Document',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_doc_id_audittrail_get {
    my ($self, %args) = @_;

    # verify the required parameter 'doc_id' is set
    unless (exists $args{'doc_id'}) {
      croak("Missing the required parameter 'doc_id' when calling objects_documents_doc_id_audittrail_get");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/{doc_id}/audittrail';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'start_date'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'end_date'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'format_result'}) {
        $query_params->{'format_result'} = $self->{api_client}->to_query_value($args{'format_result'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }

    # query params
    if ( exists $args{'events'}) {
        $query_params->{'events'} = $self->{api_client}->to_query_value($args{'events'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'doc_id'}) {
        my $_base_variable = "{" . "doc_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'doc_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_doc_id_delete
#
# Delete Single Document
#
# @param string $doc_id The document id field value. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'doc_id' => {
        data_type => 'string',
        description => 'The document id field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_doc_id_delete' } = {
        summary => 'Delete Single Document',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_doc_id_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'doc_id' is set
    unless (exists $args{'doc_id'}) {
      croak("Missing the required parameter 'doc_id' when calling objects_documents_doc_id_delete");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/{doc_id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'doc_id'}) {
        my $_base_variable = "{" . "doc_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'doc_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_doc_id_events_get
#
# Retrieve Document Events
#
# @param string $doc_id The document id field value. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'doc_id' => {
        data_type => 'string',
        description => 'The document id field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_doc_id_events_get' } = {
        summary => 'Retrieve Document Events',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_doc_id_events_get {
    my ($self, %args) = @_;

    # verify the required parameter 'doc_id' is set
    unless (exists $args{'doc_id'}) {
      croak("Missing the required parameter 'doc_id' when calling objects_documents_doc_id_events_get");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/{doc_id}/events';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'doc_id'}) {
        my $_base_variable = "{" . "doc_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'doc_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_doc_id_file_get
#
# Download Document File
#
# @param string $doc_id The document id field value. (required)
# @param boolean $lock_document Set to true to Check Out this document before retrieval. If omitted, defaults to false. (optional)
# @param string $accept  (optional)
# @param string $authorization  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'doc_id' => {
        data_type => 'string',
        description => 'The document id field value.',
        required => '1',
    },
    'lock_document' => {
        data_type => 'boolean',
        description => 'Set to true to Check Out this document before retrieval. If omitted, defaults to false.',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_doc_id_file_get' } = {
        summary => 'Download Document File',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_doc_id_file_get {
    my ($self, %args) = @_;

    # verify the required parameter 'doc_id' is set
    unless (exists $args{'doc_id'}) {
      croak("Missing the required parameter 'doc_id' when calling objects_documents_doc_id_file_get");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/{doc_id}/file';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'lock_document'}) {
        $query_params->{'lockDocument'} = $self->{api_client}->to_query_value($args{'lock_document'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'doc_id'}) {
        my $_base_variable = "{" . "doc_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'doc_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_doc_id_get
#
# Retrieve Document
#
# @param string $doc_id The document id field value. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'doc_id' => {
        data_type => 'string',
        description => 'The document id field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_doc_id_get' } = {
        summary => 'Retrieve Document',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_doc_id_get {
    my ($self, %args) = @_;

    # verify the required parameter 'doc_id' is set
    unless (exists $args{'doc_id'}) {
      croak("Missing the required parameter 'doc_id' when calling objects_documents_doc_id_get");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/{doc_id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'doc_id'}) {
        my $_base_variable = "{" . "doc_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'doc_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_doc_id_lock_delete
#
# Delete Document Lock
#
# @param string $doc_id The document id field value. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'doc_id' => {
        data_type => 'string',
        description => 'The document id field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_doc_id_lock_delete' } = {
        summary => 'Delete Document Lock',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_doc_id_lock_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'doc_id' is set
    unless (exists $args{'doc_id'}) {
      croak("Missing the required parameter 'doc_id' when calling objects_documents_doc_id_lock_delete");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/{doc_id}/lock';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'doc_id'}) {
        my $_base_variable = "{" . "doc_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'doc_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_doc_id_lock_get
#
# Retrieve Document Lock
#
# @param string $doc_id The document id field value. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'doc_id' => {
        data_type => 'string',
        description => 'The document id field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_doc_id_lock_get' } = {
        summary => 'Retrieve Document Lock',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_doc_id_lock_get {
    my ($self, %args) = @_;

    # verify the required parameter 'doc_id' is set
    unless (exists $args{'doc_id'}) {
      croak("Missing the required parameter 'doc_id' when calling objects_documents_doc_id_lock_get");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/{doc_id}/lock';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'doc_id'}) {
        my $_base_variable = "{" . "doc_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'doc_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_doc_id_lock_post
#
# Create Document Lock
#
# @param string $doc_id The document id field value. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'doc_id' => {
        data_type => 'string',
        description => 'The document id field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_doc_id_lock_post' } = {
        summary => 'Create Document Lock',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_doc_id_lock_post {
    my ($self, %args) = @_;

    # verify the required parameter 'doc_id' is set
    unless (exists $args{'doc_id'}) {
      croak("Missing the required parameter 'doc_id' when calling objects_documents_doc_id_lock_post");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/{doc_id}/lock';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'doc_id'}) {
        my $_base_variable = "{" . "doc_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'doc_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_doc_id_major_version_minor_version_attachments_file_get
#
# Download All Document Version Attachments
#
# @param string $doc_id The document id field value. (required)
# @param string $major_version The document major_version_number__v field value. (required)
# @param string $minor_version The document minor_version_number__v field value. (required)
# @param string $accept  (optional)
# @param string $authorization  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'doc_id' => {
        data_type => 'string',
        description => 'The document id field value.',
        required => '1',
    },
    'major_version' => {
        data_type => 'string',
        description => 'The document major_version_number__v field value.',
        required => '1',
    },
    'minor_version' => {
        data_type => 'string',
        description => 'The document minor_version_number__v field value.',
        required => '1',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_doc_id_major_version_minor_version_attachments_file_get' } = {
        summary => 'Download All Document Version Attachments',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_doc_id_major_version_minor_version_attachments_file_get {
    my ($self, %args) = @_;

    # verify the required parameter 'doc_id' is set
    unless (exists $args{'doc_id'}) {
      croak("Missing the required parameter 'doc_id' when calling objects_documents_doc_id_major_version_minor_version_attachments_file_get");
    }

    # verify the required parameter 'major_version' is set
    unless (exists $args{'major_version'}) {
      croak("Missing the required parameter 'major_version' when calling objects_documents_doc_id_major_version_minor_version_attachments_file_get");
    }

    # verify the required parameter 'minor_version' is set
    unless (exists $args{'minor_version'}) {
      croak("Missing the required parameter 'minor_version' when calling objects_documents_doc_id_major_version_minor_version_attachments_file_get");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/{doc_id}/{major_version}/{minor_version}/attachments/file';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'doc_id'}) {
        my $_base_variable = "{" . "doc_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'doc_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'major_version'}) {
        my $_base_variable = "{" . "major_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'major_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'minor_version'}) {
        my $_base_variable = "{" . "minor_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'minor_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_doc_id_post
#
# Create Single Document Version
#
# @param string $doc_id The document id field value. (required)
# @param string $suppress_rendition Set to true to suppress automatic generation of the viewable rendition. If omitted, defaults to false (optional)
# @param string $authorization  (optional)
# @param string $content_type  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'doc_id' => {
        data_type => 'string',
        description => 'The document id field value.',
        required => '1',
    },
    'suppress_rendition' => {
        data_type => 'string',
        description => 'Set to true to suppress automatic generation of the viewable rendition. If omitted, defaults to false',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_doc_id_post' } = {
        summary => 'Create Single Document Version',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_doc_id_post {
    my ($self, %args) = @_;

    # verify the required parameter 'doc_id' is set
    unless (exists $args{'doc_id'}) {
      croak("Missing the required parameter 'doc_id' when calling objects_documents_doc_id_post");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/{doc_id}';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'suppress_rendition'}) {
        $query_params->{'suppressRendition'} = $self->{api_client}->to_query_value($args{'suppress_rendition'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'doc_id'}) {
        my $_base_variable = "{" . "doc_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'doc_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_doc_id_put
#
# Update Single Document
#
# @param string $doc_id The document id field value. (required)
# @param string $authorization  (optional)
# @param string $content_type  (optional)
# @param string $accept  (optional)
# @param boolean $x_vault_api_migration_mode When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt; (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'doc_id' => {
        data_type => 'string',
        description => 'The document id field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_migration_mode' => {
        data_type => 'boolean',
        description => 'When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_doc_id_put' } = {
        summary => 'Update Single Document',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_doc_id_put {
    my ($self, %args) = @_;

    # verify the required parameter 'doc_id' is set
    unless (exists $args{'doc_id'}) {
      croak("Missing the required parameter 'doc_id' when calling objects_documents_doc_id_put");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/{doc_id}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_migration_mode'}) {
        $header_params->{'X-VaultAPI-MigrationMode'} = $self->{api_client}->to_header_value($args{'x_vault_api_migration_mode'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'doc_id'}) {
        my $_base_variable = "{" . "doc_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'doc_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_doc_id_renditions_get
#
# Retrieve Document Renditions
#
# @param string $doc_id The document id field value. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'doc_id' => {
        data_type => 'string',
        description => 'The document id field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_doc_id_renditions_get' } = {
        summary => 'Retrieve Document Renditions',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_doc_id_renditions_get {
    my ($self, %args) = @_;

    # verify the required parameter 'doc_id' is set
    unless (exists $args{'doc_id'}) {
      croak("Missing the required parameter 'doc_id' when calling objects_documents_doc_id_renditions_get");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/{doc_id}/renditions';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'doc_id'}) {
        my $_base_variable = "{" . "doc_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'doc_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_doc_id_renditions_rendition_type_delete
#
# Delete Single Document Rendition
#
# @param string $doc_id The document id field value. (required)
# @param string $rendition_type The document rendition type. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'doc_id' => {
        data_type => 'string',
        description => 'The document id field value.',
        required => '1',
    },
    'rendition_type' => {
        data_type => 'string',
        description => 'The document rendition type.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_doc_id_renditions_rendition_type_delete' } = {
        summary => 'Delete Single Document Rendition',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_doc_id_renditions_rendition_type_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'doc_id' is set
    unless (exists $args{'doc_id'}) {
      croak("Missing the required parameter 'doc_id' when calling objects_documents_doc_id_renditions_rendition_type_delete");
    }

    # verify the required parameter 'rendition_type' is set
    unless (exists $args{'rendition_type'}) {
      croak("Missing the required parameter 'rendition_type' when calling objects_documents_doc_id_renditions_rendition_type_delete");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/{doc_id}/renditions/{rendition_type}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'doc_id'}) {
        my $_base_variable = "{" . "doc_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'doc_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'rendition_type'}) {
        my $_base_variable = "{" . "rendition_type" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'rendition_type'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_doc_id_renditions_rendition_type_get
#
# Download Document Rendition File
#
# @param string $doc_id The document id field value. (required)
# @param string $rendition_type The document rendition type. (required)
# @param string $steady_state Set to true to download a rendition (file) from the latest steady state version (1.0, 2.0, etc.) of a document.  (optional)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'doc_id' => {
        data_type => 'string',
        description => 'The document id field value.',
        required => '1',
    },
    'rendition_type' => {
        data_type => 'string',
        description => 'The document rendition type.',
        required => '1',
    },
    'steady_state' => {
        data_type => 'string',
        description => 'Set to true to download a rendition (file) from the latest steady state version (1.0, 2.0, etc.) of a document. ',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_doc_id_renditions_rendition_type_get' } = {
        summary => 'Download Document Rendition File',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_doc_id_renditions_rendition_type_get {
    my ($self, %args) = @_;

    # verify the required parameter 'doc_id' is set
    unless (exists $args{'doc_id'}) {
      croak("Missing the required parameter 'doc_id' when calling objects_documents_doc_id_renditions_rendition_type_get");
    }

    # verify the required parameter 'rendition_type' is set
    unless (exists $args{'rendition_type'}) {
      croak("Missing the required parameter 'rendition_type' when calling objects_documents_doc_id_renditions_rendition_type_get");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/{doc_id}/renditions/{rendition_type}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'steady_state'}) {
        $query_params->{'steadyState'} = $self->{api_client}->to_query_value($args{'steady_state'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'doc_id'}) {
        my $_base_variable = "{" . "doc_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'doc_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'rendition_type'}) {
        my $_base_variable = "{" . "rendition_type" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'rendition_type'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_doc_id_renditions_rendition_type_post
#
# Add Single Document Rendition
#
# @param string $doc_id The document id field value. (required)
# @param string $rendition_type The document rendition type. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'doc_id' => {
        data_type => 'string',
        description => 'The document id field value.',
        required => '1',
    },
    'rendition_type' => {
        data_type => 'string',
        description => 'The document rendition type.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_doc_id_renditions_rendition_type_post' } = {
        summary => 'Add Single Document Rendition',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_doc_id_renditions_rendition_type_post {
    my ($self, %args) = @_;

    # verify the required parameter 'doc_id' is set
    unless (exists $args{'doc_id'}) {
      croak("Missing the required parameter 'doc_id' when calling objects_documents_doc_id_renditions_rendition_type_post");
    }

    # verify the required parameter 'rendition_type' is set
    unless (exists $args{'rendition_type'}) {
      croak("Missing the required parameter 'rendition_type' when calling objects_documents_doc_id_renditions_rendition_type_post");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/{doc_id}/renditions/{rendition_type}';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'doc_id'}) {
        my $_base_variable = "{" . "doc_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'doc_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'rendition_type'}) {
        my $_base_variable = "{" . "rendition_type" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'rendition_type'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_doc_id_renditions_rendition_type_put
#
# Replace Document Rendition
#
# @param string $doc_id The document id field value. (required)
# @param string $rendition_type The document rendition type. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'doc_id' => {
        data_type => 'string',
        description => 'The document id field value.',
        required => '1',
    },
    'rendition_type' => {
        data_type => 'string',
        description => 'The document rendition type.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_doc_id_renditions_rendition_type_put' } = {
        summary => 'Replace Document Rendition',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_doc_id_renditions_rendition_type_put {
    my ($self, %args) = @_;

    # verify the required parameter 'doc_id' is set
    unless (exists $args{'doc_id'}) {
      croak("Missing the required parameter 'doc_id' when calling objects_documents_doc_id_renditions_rendition_type_put");
    }

    # verify the required parameter 'rendition_type' is set
    unless (exists $args{'rendition_type'}) {
      croak("Missing the required parameter 'rendition_type' when calling objects_documents_doc_id_renditions_rendition_type_put");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/{doc_id}/renditions/{rendition_type}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'doc_id'}) {
        my $_base_variable = "{" . "doc_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'doc_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'rendition_type'}) {
        my $_base_variable = "{" . "rendition_type" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'rendition_type'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_doc_id_roles_role_name_and_user_or_group_id_delete
#
# Remove Users & Groups from Roles on a Single Document
#
# @param string $doc_id The id value of the document from which to remove roles. (required)
# @param string $role_name_and_user_or_group The name of the role from which to remove the user or group followed by either &#x60;user&#x60; or &#x60;group&#x60;. The format is &#x60;{role_name}.{user_or_group}&#x60;. For example, &#x60;consumer__v.user&#x60;. (required)
# @param string $id The id value of the user or group to remove from the role. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'doc_id' => {
        data_type => 'string',
        description => 'The id value of the document from which to remove roles.',
        required => '1',
    },
    'role_name_and_user_or_group' => {
        data_type => 'string',
        description => 'The name of the role from which to remove the user or group followed by either &#x60;user&#x60; or &#x60;group&#x60;. The format is &#x60;{role_name}.{user_or_group}&#x60;. For example, &#x60;consumer__v.user&#x60;.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id value of the user or group to remove from the role.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_doc_id_roles_role_name_and_user_or_group_id_delete' } = {
        summary => 'Remove Users &amp; Groups from Roles on a Single Document',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_doc_id_roles_role_name_and_user_or_group_id_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'doc_id' is set
    unless (exists $args{'doc_id'}) {
      croak("Missing the required parameter 'doc_id' when calling objects_documents_doc_id_roles_role_name_and_user_or_group_id_delete");
    }

    # verify the required parameter 'role_name_and_user_or_group' is set
    unless (exists $args{'role_name_and_user_or_group'}) {
      croak("Missing the required parameter 'role_name_and_user_or_group' when calling objects_documents_doc_id_roles_role_name_and_user_or_group_id_delete");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling objects_documents_doc_id_roles_role_name_and_user_or_group_id_delete");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/{doc_id}/roles/{role_name_and_user_or_group}/{id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'doc_id'}) {
        my $_base_variable = "{" . "doc_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'doc_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'role_name_and_user_or_group'}) {
        my $_base_variable = "{" . "role_name_and_user_or_group" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'role_name_and_user_or_group'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_doc_id_version_major_version_minor_version_attachments_get
#
# Retrieve Document Version Attachments
#
# @param string $doc_id The document id field value. (required)
# @param string $major_version The document major_version_number__v field value. (required)
# @param string $minor_version The document minor_version_number__v field value. (required)
# @param string $accept  (optional)
# @param string $authorization  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'doc_id' => {
        data_type => 'string',
        description => 'The document id field value.',
        required => '1',
    },
    'major_version' => {
        data_type => 'string',
        description => 'The document major_version_number__v field value.',
        required => '1',
    },
    'minor_version' => {
        data_type => 'string',
        description => 'The document minor_version_number__v field value.',
        required => '1',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_doc_id_version_major_version_minor_version_attachments_get' } = {
        summary => 'Retrieve Document Version Attachments',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_doc_id_version_major_version_minor_version_attachments_get {
    my ($self, %args) = @_;

    # verify the required parameter 'doc_id' is set
    unless (exists $args{'doc_id'}) {
      croak("Missing the required parameter 'doc_id' when calling objects_documents_doc_id_version_major_version_minor_version_attachments_get");
    }

    # verify the required parameter 'major_version' is set
    unless (exists $args{'major_version'}) {
      croak("Missing the required parameter 'major_version' when calling objects_documents_doc_id_version_major_version_minor_version_attachments_get");
    }

    # verify the required parameter 'minor_version' is set
    unless (exists $args{'minor_version'}) {
      croak("Missing the required parameter 'minor_version' when calling objects_documents_doc_id_version_major_version_minor_version_attachments_get");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/{doc_id}/version/{major_version}/{minor_version}/attachments';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'doc_id'}) {
        my $_base_variable = "{" . "doc_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'doc_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'major_version'}) {
        my $_base_variable = "{" . "major_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'major_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'minor_version'}) {
        my $_base_variable = "{" . "minor_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'minor_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_doc_id_versions_get
#
# Retrieve Document Versions
#
# @param string $doc_id The document id field value. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'doc_id' => {
        data_type => 'string',
        description => 'The document id field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_doc_id_versions_get' } = {
        summary => 'Retrieve Document Versions',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_doc_id_versions_get {
    my ($self, %args) = @_;

    # verify the required parameter 'doc_id' is set
    unless (exists $args{'doc_id'}) {
      croak("Missing the required parameter 'doc_id' when calling objects_documents_doc_id_versions_get");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/{doc_id}/versions';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'doc_id'}) {
        my $_base_variable = "{" . "doc_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'doc_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_get
#
# Read Annotations by ID
#
# @param string $doc_id The document id field value. (required)
# @param string $major_version The document major_version_number__v field value. (required)
# @param string $minor_version The document minor_version_number__v field value. (required)
# @param string $annotation_id The annotation ID, which can be retrieved with Read Annotations by Document Version and Type. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'doc_id' => {
        data_type => 'string',
        description => 'The document id field value.',
        required => '1',
    },
    'major_version' => {
        data_type => 'string',
        description => 'The document major_version_number__v field value.',
        required => '1',
    },
    'minor_version' => {
        data_type => 'string',
        description => 'The document minor_version_number__v field value.',
        required => '1',
    },
    'annotation_id' => {
        data_type => 'string',
        description => 'The annotation ID, which can be retrieved with Read Annotations by Document Version and Type.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_get' } = {
        summary => 'Read Annotations by ID',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_get {
    my ($self, %args) = @_;

    # verify the required parameter 'doc_id' is set
    unless (exists $args{'doc_id'}) {
      croak("Missing the required parameter 'doc_id' when calling objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_get");
    }

    # verify the required parameter 'major_version' is set
    unless (exists $args{'major_version'}) {
      croak("Missing the required parameter 'major_version' when calling objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_get");
    }

    # verify the required parameter 'minor_version' is set
    unless (exists $args{'minor_version'}) {
      croak("Missing the required parameter 'minor_version' when calling objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_get");
    }

    # verify the required parameter 'annotation_id' is set
    unless (exists $args{'annotation_id'}) {
      croak("Missing the required parameter 'annotation_id' when calling objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_get");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/{annotation_id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'doc_id'}) {
        my $_base_variable = "{" . "doc_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'doc_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'major_version'}) {
        my $_base_variable = "{" . "major_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'major_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'minor_version'}) {
        my $_base_variable = "{" . "minor_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'minor_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'annotation_id'}) {
        my $_base_variable = "{" . "annotation_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'annotation_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_replies_get
#
# Read Replies of Parent Annotation
#
# @param string $doc_id The document id field value. (required)
# @param string $major_version The document major_version_number__v field value. (required)
# @param string $minor_version The document minor_version_number__v field value. (required)
# @param string $annotation_id The parent annotation ID, which can be retrieved with Read Annotations by Document Version and Type. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'doc_id' => {
        data_type => 'string',
        description => 'The document id field value.',
        required => '1',
    },
    'major_version' => {
        data_type => 'string',
        description => 'The document major_version_number__v field value.',
        required => '1',
    },
    'minor_version' => {
        data_type => 'string',
        description => 'The document minor_version_number__v field value.',
        required => '1',
    },
    'annotation_id' => {
        data_type => 'string',
        description => 'The parent annotation ID, which can be retrieved with Read Annotations by Document Version and Type.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_replies_get' } = {
        summary => 'Read Replies of Parent Annotation',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_replies_get {
    my ($self, %args) = @_;

    # verify the required parameter 'doc_id' is set
    unless (exists $args{'doc_id'}) {
      croak("Missing the required parameter 'doc_id' when calling objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_replies_get");
    }

    # verify the required parameter 'major_version' is set
    unless (exists $args{'major_version'}) {
      croak("Missing the required parameter 'major_version' when calling objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_replies_get");
    }

    # verify the required parameter 'minor_version' is set
    unless (exists $args{'minor_version'}) {
      croak("Missing the required parameter 'minor_version' when calling objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_replies_get");
    }

    # verify the required parameter 'annotation_id' is set
    unless (exists $args{'annotation_id'}) {
      croak("Missing the required parameter 'annotation_id' when calling objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_replies_get");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/{annotation_id}/replies';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'doc_id'}) {
        my $_base_variable = "{" . "doc_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'doc_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'major_version'}) {
        my $_base_variable = "{" . "major_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'major_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'minor_version'}) {
        my $_base_variable = "{" . "minor_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'minor_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'annotation_id'}) {
        my $_base_variable = "{" . "annotation_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'annotation_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_doc_id_versions_major_version_minor_version_annotations_file_get
#
# Export Document Version Annotations to PDF
#
# @param string $doc_id The document id field value. (required)
# @param string $major_version The document major_version_number__v field value. (required)
# @param string $minor_version The document minor_version_number__v field value. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'doc_id' => {
        data_type => 'string',
        description => 'The document id field value.',
        required => '1',
    },
    'major_version' => {
        data_type => 'string',
        description => 'The document major_version_number__v field value.',
        required => '1',
    },
    'minor_version' => {
        data_type => 'string',
        description => 'The document minor_version_number__v field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_doc_id_versions_major_version_minor_version_annotations_file_get' } = {
        summary => 'Export Document Version Annotations to PDF',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_doc_id_versions_major_version_minor_version_annotations_file_get {
    my ($self, %args) = @_;

    # verify the required parameter 'doc_id' is set
    unless (exists $args{'doc_id'}) {
      croak("Missing the required parameter 'doc_id' when calling objects_documents_doc_id_versions_major_version_minor_version_annotations_file_get");
    }

    # verify the required parameter 'major_version' is set
    unless (exists $args{'major_version'}) {
      croak("Missing the required parameter 'major_version' when calling objects_documents_doc_id_versions_major_version_minor_version_annotations_file_get");
    }

    # verify the required parameter 'minor_version' is set
    unless (exists $args{'minor_version'}) {
      croak("Missing the required parameter 'minor_version' when calling objects_documents_doc_id_versions_major_version_minor_version_annotations_file_get");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/file';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'doc_id'}) {
        my $_base_variable = "{" . "doc_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'doc_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'major_version'}) {
        my $_base_variable = "{" . "major_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'major_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'minor_version'}) {
        my $_base_variable = "{" . "minor_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'minor_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_doc_id_versions_major_version_minor_version_annotations_file_post
#
# Import Document Version Annotations from PDF
#
# @param string $doc_id The document id field value. (required)
# @param string $major_version The document major_version_number__v field value. (required)
# @param string $minor_version The document minor_version_number__v field value. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'doc_id' => {
        data_type => 'string',
        description => 'The document id field value.',
        required => '1',
    },
    'major_version' => {
        data_type => 'string',
        description => 'The document major_version_number__v field value.',
        required => '1',
    },
    'minor_version' => {
        data_type => 'string',
        description => 'The document minor_version_number__v field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_doc_id_versions_major_version_minor_version_annotations_file_post' } = {
        summary => 'Import Document Version Annotations from PDF',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_doc_id_versions_major_version_minor_version_annotations_file_post {
    my ($self, %args) = @_;

    # verify the required parameter 'doc_id' is set
    unless (exists $args{'doc_id'}) {
      croak("Missing the required parameter 'doc_id' when calling objects_documents_doc_id_versions_major_version_minor_version_annotations_file_post");
    }

    # verify the required parameter 'major_version' is set
    unless (exists $args{'major_version'}) {
      croak("Missing the required parameter 'major_version' when calling objects_documents_doc_id_versions_major_version_minor_version_annotations_file_post");
    }

    # verify the required parameter 'minor_version' is set
    unless (exists $args{'minor_version'}) {
      croak("Missing the required parameter 'minor_version' when calling objects_documents_doc_id_versions_major_version_minor_version_annotations_file_post");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/file';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'doc_id'}) {
        my $_base_variable = "{" . "doc_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'doc_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'major_version'}) {
        my $_base_variable = "{" . "major_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'major_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'minor_version'}) {
        my $_base_variable = "{" . "minor_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'minor_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_doc_id_versions_major_version_minor_version_annotations_get
#
# Read Annotations by Document Version and Type
#
# @param string $doc_id The document id field value. (required)
# @param string $major_version The document major_version_number__v field value. (required)
# @param string $minor_version The document minor_version_number__v field value. (required)
# @param string $limit Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 500. If omitted, defaults to 500. Values greater than 500 are ignored. (optional)
# @param string $offset This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to offset&#x3D;201. (optional)
# @param string $annotation_types The type(s) of annotations to retrieve. For example, note__sys,anchor__sys. If omitted, Vault returns all annotations. Valid annotation types include: &#x60;note__sys&#x60; &#x60;line__sys&#x60; &#x60;document_link__sys&#x60; &#x60;permalink_link__sys&#x60; &#x60;anchor__sys&#x60; &#x60;reply__sys&#x60; &#x60;external_link__sys&#x60;  The following annotation types are only valid in PromoMats Vaults:  &#x60;suggested_link__sys&#x60; &#x60;approved_link__sys&#x60; &#x60;auto_link__sys&#x60; &#x60;keyword_link__sys&#x60;  (optional)
# @param string $pagination_id A unique identifier used to load requests with paginated results. (optional)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'doc_id' => {
        data_type => 'string',
        description => 'The document id field value.',
        required => '1',
    },
    'major_version' => {
        data_type => 'string',
        description => 'The document major_version_number__v field value.',
        required => '1',
    },
    'minor_version' => {
        data_type => 'string',
        description => 'The document minor_version_number__v field value.',
        required => '1',
    },
    'limit' => {
        data_type => 'string',
        description => 'Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 500. If omitted, defaults to 500. Values greater than 500 are ignored.',
        required => '0',
    },
    'offset' => {
        data_type => 'string',
        description => 'This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to offset&#x3D;201.',
        required => '0',
    },
    'annotation_types' => {
        data_type => 'string',
        description => 'The type(s) of annotations to retrieve. For example, note__sys,anchor__sys. If omitted, Vault returns all annotations. Valid annotation types include: &#x60;note__sys&#x60; &#x60;line__sys&#x60; &#x60;document_link__sys&#x60; &#x60;permalink_link__sys&#x60; &#x60;anchor__sys&#x60; &#x60;reply__sys&#x60; &#x60;external_link__sys&#x60;  The following annotation types are only valid in PromoMats Vaults:  &#x60;suggested_link__sys&#x60; &#x60;approved_link__sys&#x60; &#x60;auto_link__sys&#x60; &#x60;keyword_link__sys&#x60; ',
        required => '0',
    },
    'pagination_id' => {
        data_type => 'string',
        description => 'A unique identifier used to load requests with paginated results.',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_doc_id_versions_major_version_minor_version_annotations_get' } = {
        summary => 'Read Annotations by Document Version and Type',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_doc_id_versions_major_version_minor_version_annotations_get {
    my ($self, %args) = @_;

    # verify the required parameter 'doc_id' is set
    unless (exists $args{'doc_id'}) {
      croak("Missing the required parameter 'doc_id' when calling objects_documents_doc_id_versions_major_version_minor_version_annotations_get");
    }

    # verify the required parameter 'major_version' is set
    unless (exists $args{'major_version'}) {
      croak("Missing the required parameter 'major_version' when calling objects_documents_doc_id_versions_major_version_minor_version_annotations_get");
    }

    # verify the required parameter 'minor_version' is set
    unless (exists $args{'minor_version'}) {
      croak("Missing the required parameter 'minor_version' when calling objects_documents_doc_id_versions_major_version_minor_version_annotations_get");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }

    # query params
    if ( exists $args{'annotation_types'}) {
        $query_params->{'annotation_types'} = $self->{api_client}->to_query_value($args{'annotation_types'});
    }

    # query params
    if ( exists $args{'pagination_id'}) {
        $query_params->{'pagination_id'} = $self->{api_client}->to_query_value($args{'pagination_id'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'doc_id'}) {
        my $_base_variable = "{" . "doc_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'doc_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'major_version'}) {
        my $_base_variable = "{" . "major_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'major_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'minor_version'}) {
        my $_base_variable = "{" . "minor_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'minor_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_file_get
#
# Download Document Version Attachment Version
#
# @param string $doc_id The document id field value. (required)
# @param string $major_version The document major_version_number__v field value. (required)
# @param string $minor_version The document minor_version_number__v field value. (required)
# @param string $attachment_id The id field value of the attachment. (required)
# @param string $attachment_version The version of the attachment. (required)
# @param string $accept  (optional)
# @param string $authorization  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'doc_id' => {
        data_type => 'string',
        description => 'The document id field value.',
        required => '1',
    },
    'major_version' => {
        data_type => 'string',
        description => 'The document major_version_number__v field value.',
        required => '1',
    },
    'minor_version' => {
        data_type => 'string',
        description => 'The document minor_version_number__v field value.',
        required => '1',
    },
    'attachment_id' => {
        data_type => 'string',
        description => 'The id field value of the attachment.',
        required => '1',
    },
    'attachment_version' => {
        data_type => 'string',
        description => 'The version of the attachment.',
        required => '1',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_file_get' } = {
        summary => 'Download Document Version Attachment Version',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_file_get {
    my ($self, %args) = @_;

    # verify the required parameter 'doc_id' is set
    unless (exists $args{'doc_id'}) {
      croak("Missing the required parameter 'doc_id' when calling objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_file_get");
    }

    # verify the required parameter 'major_version' is set
    unless (exists $args{'major_version'}) {
      croak("Missing the required parameter 'major_version' when calling objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_file_get");
    }

    # verify the required parameter 'minor_version' is set
    unless (exists $args{'minor_version'}) {
      croak("Missing the required parameter 'minor_version' when calling objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_file_get");
    }

    # verify the required parameter 'attachment_id' is set
    unless (exists $args{'attachment_id'}) {
      croak("Missing the required parameter 'attachment_id' when calling objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_file_get");
    }

    # verify the required parameter 'attachment_version' is set
    unless (exists $args{'attachment_version'}) {
      croak("Missing the required parameter 'attachment_version' when calling objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_file_get");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/attachments/{attachment_id}/versions/{attachment_version}/file';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'doc_id'}) {
        my $_base_variable = "{" . "doc_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'doc_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'major_version'}) {
        my $_base_variable = "{" . "major_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'major_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'minor_version'}) {
        my $_base_variable = "{" . "minor_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'minor_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'attachment_id'}) {
        my $_base_variable = "{" . "attachment_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'attachment_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'attachment_version'}) {
        my $_base_variable = "{" . "attachment_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'attachment_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_get
#
# Retrieve Document Version Attachment Versions
#
# @param string $doc_id The document id field value. (required)
# @param string $major_version The document major_version_number__v field value. (required)
# @param string $minor_version The document minor_version_number__v field value. (required)
# @param string $attachment_id The id of the document attachment to retrieve. (required)
# @param string $attachment_version Optional: The version of the attachment to retrieve. If omitted, the endpoint retrieves all versions of the specified attachment. (required)
# @param string $accept  (optional)
# @param string $authorization  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'doc_id' => {
        data_type => 'string',
        description => 'The document id field value.',
        required => '1',
    },
    'major_version' => {
        data_type => 'string',
        description => 'The document major_version_number__v field value.',
        required => '1',
    },
    'minor_version' => {
        data_type => 'string',
        description => 'The document minor_version_number__v field value.',
        required => '1',
    },
    'attachment_id' => {
        data_type => 'string',
        description => 'The id of the document attachment to retrieve.',
        required => '1',
    },
    'attachment_version' => {
        data_type => 'string',
        description => 'Optional: The version of the attachment to retrieve. If omitted, the endpoint retrieves all versions of the specified attachment.',
        required => '1',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_get' } = {
        summary => 'Retrieve Document Version Attachment Versions',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_get {
    my ($self, %args) = @_;

    # verify the required parameter 'doc_id' is set
    unless (exists $args{'doc_id'}) {
      croak("Missing the required parameter 'doc_id' when calling objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_get");
    }

    # verify the required parameter 'major_version' is set
    unless (exists $args{'major_version'}) {
      croak("Missing the required parameter 'major_version' when calling objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_get");
    }

    # verify the required parameter 'minor_version' is set
    unless (exists $args{'minor_version'}) {
      croak("Missing the required parameter 'minor_version' when calling objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_get");
    }

    # verify the required parameter 'attachment_id' is set
    unless (exists $args{'attachment_id'}) {
      croak("Missing the required parameter 'attachment_id' when calling objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_get");
    }

    # verify the required parameter 'attachment_version' is set
    unless (exists $args{'attachment_version'}) {
      croak("Missing the required parameter 'attachment_version' when calling objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_get");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/attachments/{attachment_id}/versions/{attachment_version}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'doc_id'}) {
        my $_base_variable = "{" . "doc_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'doc_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'major_version'}) {
        my $_base_variable = "{" . "major_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'major_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'minor_version'}) {
        my $_base_variable = "{" . "minor_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'minor_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'attachment_id'}) {
        my $_base_variable = "{" . "attachment_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'attachment_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'attachment_version'}) {
        my $_base_variable = "{" . "attachment_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'attachment_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_doc_id_versions_major_version_minor_version_delete
#
# Delete Single Document Version
#
# @param string $doc_id The document id field value. (required)
# @param string $major_version The document major_version_number__v field value. (required)
# @param string $minor_version The document minor_version_number__v field value. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'doc_id' => {
        data_type => 'string',
        description => 'The document id field value.',
        required => '1',
    },
    'major_version' => {
        data_type => 'string',
        description => 'The document major_version_number__v field value.',
        required => '1',
    },
    'minor_version' => {
        data_type => 'string',
        description => 'The document minor_version_number__v field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_doc_id_versions_major_version_minor_version_delete' } = {
        summary => 'Delete Single Document Version',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_doc_id_versions_major_version_minor_version_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'doc_id' is set
    unless (exists $args{'doc_id'}) {
      croak("Missing the required parameter 'doc_id' when calling objects_documents_doc_id_versions_major_version_minor_version_delete");
    }

    # verify the required parameter 'major_version' is set
    unless (exists $args{'major_version'}) {
      croak("Missing the required parameter 'major_version' when calling objects_documents_doc_id_versions_major_version_minor_version_delete");
    }

    # verify the required parameter 'minor_version' is set
    unless (exists $args{'minor_version'}) {
      croak("Missing the required parameter 'minor_version' when calling objects_documents_doc_id_versions_major_version_minor_version_delete");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'doc_id'}) {
        my $_base_variable = "{" . "doc_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'doc_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'major_version'}) {
        my $_base_variable = "{" . "major_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'major_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'minor_version'}) {
        my $_base_variable = "{" . "minor_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'minor_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_doc_id_versions_major_version_minor_version_doc_export_annotations_to_csv_get
#
# Retrieve Document Version Notes as CSV
#
# @param string $doc_id The document id field value. (required)
# @param string $major_version The document major_version_number__v field value. (required)
# @param string $minor_version The document minor_version_number__v field value. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'doc_id' => {
        data_type => 'string',
        description => 'The document id field value.',
        required => '1',
    },
    'major_version' => {
        data_type => 'string',
        description => 'The document major_version_number__v field value.',
        required => '1',
    },
    'minor_version' => {
        data_type => 'string',
        description => 'The document minor_version_number__v field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_doc_id_versions_major_version_minor_version_doc_export_annotations_to_csv_get' } = {
        summary => 'Retrieve Document Version Notes as CSV',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_doc_id_versions_major_version_minor_version_doc_export_annotations_to_csv_get {
    my ($self, %args) = @_;

    # verify the required parameter 'doc_id' is set
    unless (exists $args{'doc_id'}) {
      croak("Missing the required parameter 'doc_id' when calling objects_documents_doc_id_versions_major_version_minor_version_doc_export_annotations_to_csv_get");
    }

    # verify the required parameter 'major_version' is set
    unless (exists $args{'major_version'}) {
      croak("Missing the required parameter 'major_version' when calling objects_documents_doc_id_versions_major_version_minor_version_doc_export_annotations_to_csv_get");
    }

    # verify the required parameter 'minor_version' is set
    unless (exists $args{'minor_version'}) {
      croak("Missing the required parameter 'minor_version' when calling objects_documents_doc_id_versions_major_version_minor_version_doc_export_annotations_to_csv_get");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/doc-export-annotations-to-csv';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'doc_id'}) {
        my $_base_variable = "{" . "doc_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'doc_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'major_version'}) {
        my $_base_variable = "{" . "major_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'major_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'minor_version'}) {
        my $_base_variable = "{" . "minor_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'minor_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_doc_id_versions_major_version_minor_version_events_post
#
# Create Document Event
#
# @param string $doc_id The document id field value. (required)
# @param string $major_version The document major_version_number__v field value. (required)
# @param string $minor_version The document minor_version_number__v field value. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'doc_id' => {
        data_type => 'string',
        description => 'The document id field value.',
        required => '1',
    },
    'major_version' => {
        data_type => 'string',
        description => 'The document major_version_number__v field value.',
        required => '1',
    },
    'minor_version' => {
        data_type => 'string',
        description => 'The document minor_version_number__v field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_doc_id_versions_major_version_minor_version_events_post' } = {
        summary => 'Create Document Event',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_doc_id_versions_major_version_minor_version_events_post {
    my ($self, %args) = @_;

    # verify the required parameter 'doc_id' is set
    unless (exists $args{'doc_id'}) {
      croak("Missing the required parameter 'doc_id' when calling objects_documents_doc_id_versions_major_version_minor_version_events_post");
    }

    # verify the required parameter 'major_version' is set
    unless (exists $args{'major_version'}) {
      croak("Missing the required parameter 'major_version' when calling objects_documents_doc_id_versions_major_version_minor_version_events_post");
    }

    # verify the required parameter 'minor_version' is set
    unless (exists $args{'minor_version'}) {
      croak("Missing the required parameter 'minor_version' when calling objects_documents_doc_id_versions_major_version_minor_version_events_post");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/events';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'doc_id'}) {
        my $_base_variable = "{" . "doc_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'doc_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'major_version'}) {
        my $_base_variable = "{" . "major_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'major_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'minor_version'}) {
        my $_base_variable = "{" . "minor_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'minor_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_doc_id_versions_major_version_minor_version_export_video_annotations_get
#
# Retrieve Video Annotations
#
# @param string $doc_id The video document id field value. (required)
# @param string $major_version The video document major_version_number__v field value. (required)
# @param string $minor_version The video document minor_version_number__v field value. (required)
# @param string $authorization  (optional)
# @param string $accept This &#x60;Accept&#x60; header only changes the format of the response in the case of an error. On &#x60;SUCCESS&#x60;, the HTTP Response Header &#x60;Content-Type&#x60; is set to &#x60;text/plain;charset&#x3D;UnicodeLittle&#x60;. (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'doc_id' => {
        data_type => 'string',
        description => 'The video document id field value.',
        required => '1',
    },
    'major_version' => {
        data_type => 'string',
        description => 'The video document major_version_number__v field value.',
        required => '1',
    },
    'minor_version' => {
        data_type => 'string',
        description => 'The video document minor_version_number__v field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => 'This &#x60;Accept&#x60; header only changes the format of the response in the case of an error. On &#x60;SUCCESS&#x60;, the HTTP Response Header &#x60;Content-Type&#x60; is set to &#x60;text/plain;charset&#x3D;UnicodeLittle&#x60;.',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_doc_id_versions_major_version_minor_version_export_video_annotations_get' } = {
        summary => 'Retrieve Video Annotations',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_doc_id_versions_major_version_minor_version_export_video_annotations_get {
    my ($self, %args) = @_;

    # verify the required parameter 'doc_id' is set
    unless (exists $args{'doc_id'}) {
      croak("Missing the required parameter 'doc_id' when calling objects_documents_doc_id_versions_major_version_minor_version_export_video_annotations_get");
    }

    # verify the required parameter 'major_version' is set
    unless (exists $args{'major_version'}) {
      croak("Missing the required parameter 'major_version' when calling objects_documents_doc_id_versions_major_version_minor_version_export_video_annotations_get");
    }

    # verify the required parameter 'minor_version' is set
    unless (exists $args{'minor_version'}) {
      croak("Missing the required parameter 'minor_version' when calling objects_documents_doc_id_versions_major_version_minor_version_export_video_annotations_get");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/export-video-annotations';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'doc_id'}) {
        my $_base_variable = "{" . "doc_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'doc_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'major_version'}) {
        my $_base_variable = "{" . "major_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'major_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'minor_version'}) {
        my $_base_variable = "{" . "minor_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'minor_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_doc_id_versions_major_version_minor_version_file_get
#
# Download Document Version File
#
# @param string $doc_id The document id field value. (required)
# @param string $major_version The document major_version_number__v field value. (required)
# @param string $minor_version The document minor_version_number__v field value. (required)
# @param string $accept  (optional)
# @param string $authorization  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'doc_id' => {
        data_type => 'string',
        description => 'The document id field value.',
        required => '1',
    },
    'major_version' => {
        data_type => 'string',
        description => 'The document major_version_number__v field value.',
        required => '1',
    },
    'minor_version' => {
        data_type => 'string',
        description => 'The document minor_version_number__v field value.',
        required => '1',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_doc_id_versions_major_version_minor_version_file_get' } = {
        summary => 'Download Document Version File',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_doc_id_versions_major_version_minor_version_file_get {
    my ($self, %args) = @_;

    # verify the required parameter 'doc_id' is set
    unless (exists $args{'doc_id'}) {
      croak("Missing the required parameter 'doc_id' when calling objects_documents_doc_id_versions_major_version_minor_version_file_get");
    }

    # verify the required parameter 'major_version' is set
    unless (exists $args{'major_version'}) {
      croak("Missing the required parameter 'major_version' when calling objects_documents_doc_id_versions_major_version_minor_version_file_get");
    }

    # verify the required parameter 'minor_version' is set
    unless (exists $args{'minor_version'}) {
      croak("Missing the required parameter 'minor_version' when calling objects_documents_doc_id_versions_major_version_minor_version_file_get");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/file';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'doc_id'}) {
        my $_base_variable = "{" . "doc_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'doc_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'major_version'}) {
        my $_base_variable = "{" . "major_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'major_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'minor_version'}) {
        my $_base_variable = "{" . "minor_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'minor_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_doc_id_versions_major_version_minor_version_get
#
# Retrieve Document Version
#
# @param string $doc_id The document id field value. (required)
# @param string $major_version The document major_version_number__v field value. (required)
# @param string $minor_version The document minor_version_number__v field value. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'doc_id' => {
        data_type => 'string',
        description => 'The document id field value.',
        required => '1',
    },
    'major_version' => {
        data_type => 'string',
        description => 'The document major_version_number__v field value.',
        required => '1',
    },
    'minor_version' => {
        data_type => 'string',
        description => 'The document minor_version_number__v field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_doc_id_versions_major_version_minor_version_get' } = {
        summary => 'Retrieve Document Version',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_doc_id_versions_major_version_minor_version_get {
    my ($self, %args) = @_;

    # verify the required parameter 'doc_id' is set
    unless (exists $args{'doc_id'}) {
      croak("Missing the required parameter 'doc_id' when calling objects_documents_doc_id_versions_major_version_minor_version_get");
    }

    # verify the required parameter 'major_version' is set
    unless (exists $args{'major_version'}) {
      croak("Missing the required parameter 'major_version' when calling objects_documents_doc_id_versions_major_version_minor_version_get");
    }

    # verify the required parameter 'minor_version' is set
    unless (exists $args{'minor_version'}) {
      croak("Missing the required parameter 'minor_version' when calling objects_documents_doc_id_versions_major_version_minor_version_get");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'doc_id'}) {
        my $_base_variable = "{" . "doc_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'doc_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'major_version'}) {
        my $_base_variable = "{" . "major_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'major_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'minor_version'}) {
        my $_base_variable = "{" . "minor_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'minor_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_doc_id_versions_major_version_minor_version_put
#
# Update Document Version
#
# @param string $doc_id The document id field value. (required)
# @param string $major_version The document major_version_number__v field value. (required)
# @param string $minor_version The document minor_version_number__v field value. (required)
# @param string $authorization  (optional)
# @param string $content_type  (optional)
# @param string $accept  (optional)
# @param boolean $x_vault_api_migration_mode When set to true, Vault allows you to manually set the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt; (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'doc_id' => {
        data_type => 'string',
        description => 'The document id field value.',
        required => '1',
    },
    'major_version' => {
        data_type => 'string',
        description => 'The document major_version_number__v field value.',
        required => '1',
    },
    'minor_version' => {
        data_type => 'string',
        description => 'The document minor_version_number__v field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_migration_mode' => {
        data_type => 'boolean',
        description => 'When set to true, Vault allows you to manually set the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_doc_id_versions_major_version_minor_version_put' } = {
        summary => 'Update Document Version',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_doc_id_versions_major_version_minor_version_put {
    my ($self, %args) = @_;

    # verify the required parameter 'doc_id' is set
    unless (exists $args{'doc_id'}) {
      croak("Missing the required parameter 'doc_id' when calling objects_documents_doc_id_versions_major_version_minor_version_put");
    }

    # verify the required parameter 'major_version' is set
    unless (exists $args{'major_version'}) {
      croak("Missing the required parameter 'major_version' when calling objects_documents_doc_id_versions_major_version_minor_version_put");
    }

    # verify the required parameter 'minor_version' is set
    unless (exists $args{'minor_version'}) {
      croak("Missing the required parameter 'minor_version' when calling objects_documents_doc_id_versions_major_version_minor_version_put");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_migration_mode'}) {
        $header_params->{'X-VaultAPI-MigrationMode'} = $self->{api_client}->to_header_value($args{'x_vault_api_migration_mode'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'doc_id'}) {
        my $_base_variable = "{" . "doc_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'doc_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'major_version'}) {
        my $_base_variable = "{" . "major_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'major_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'minor_version'}) {
        my $_base_variable = "{" . "minor_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'minor_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_doc_id_versions_major_version_minor_version_relationships_get
#
# Retrieve Document Relationships
#
# @param string $doc_id The document id field value. (required)
# @param string $major_version The document major_version_number__v field value. (required)
# @param string $minor_version The document minor_version_number__v field value. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'doc_id' => {
        data_type => 'string',
        description => 'The document id field value.',
        required => '1',
    },
    'major_version' => {
        data_type => 'string',
        description => 'The document major_version_number__v field value.',
        required => '1',
    },
    'minor_version' => {
        data_type => 'string',
        description => 'The document minor_version_number__v field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_doc_id_versions_major_version_minor_version_relationships_get' } = {
        summary => 'Retrieve Document Relationships',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_doc_id_versions_major_version_minor_version_relationships_get {
    my ($self, %args) = @_;

    # verify the required parameter 'doc_id' is set
    unless (exists $args{'doc_id'}) {
      croak("Missing the required parameter 'doc_id' when calling objects_documents_doc_id_versions_major_version_minor_version_relationships_get");
    }

    # verify the required parameter 'major_version' is set
    unless (exists $args{'major_version'}) {
      croak("Missing the required parameter 'major_version' when calling objects_documents_doc_id_versions_major_version_minor_version_relationships_get");
    }

    # verify the required parameter 'minor_version' is set
    unless (exists $args{'minor_version'}) {
      croak("Missing the required parameter 'minor_version' when calling objects_documents_doc_id_versions_major_version_minor_version_relationships_get");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'doc_id'}) {
        my $_base_variable = "{" . "doc_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'doc_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'major_version'}) {
        my $_base_variable = "{" . "major_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'major_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'minor_version'}) {
        my $_base_variable = "{" . "minor_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'minor_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_doc_id_versions_major_version_minor_version_relationships_post
#
# Create Single Document Relationship
#
# @param string $doc_id The document id field value. (required)
# @param string $major_version The document major_version_number__v field value. (required)
# @param string $minor_version The document minor_version_number__v field value. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'doc_id' => {
        data_type => 'string',
        description => 'The document id field value.',
        required => '1',
    },
    'major_version' => {
        data_type => 'string',
        description => 'The document major_version_number__v field value.',
        required => '1',
    },
    'minor_version' => {
        data_type => 'string',
        description => 'The document minor_version_number__v field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_doc_id_versions_major_version_minor_version_relationships_post' } = {
        summary => 'Create Single Document Relationship',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_doc_id_versions_major_version_minor_version_relationships_post {
    my ($self, %args) = @_;

    # verify the required parameter 'doc_id' is set
    unless (exists $args{'doc_id'}) {
      croak("Missing the required parameter 'doc_id' when calling objects_documents_doc_id_versions_major_version_minor_version_relationships_post");
    }

    # verify the required parameter 'major_version' is set
    unless (exists $args{'major_version'}) {
      croak("Missing the required parameter 'major_version' when calling objects_documents_doc_id_versions_major_version_minor_version_relationships_post");
    }

    # verify the required parameter 'minor_version' is set
    unless (exists $args{'minor_version'}) {
      croak("Missing the required parameter 'minor_version' when calling objects_documents_doc_id_versions_major_version_minor_version_relationships_post");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'doc_id'}) {
        my $_base_variable = "{" . "doc_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'doc_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'major_version'}) {
        my $_base_variable = "{" . "major_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'major_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'minor_version'}) {
        my $_base_variable = "{" . "minor_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'minor_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_delete
#
# Delete Single Document Relationship
#
# @param string $doc_id The document id field value. (required)
# @param string $major_version The document major_version_number__v field value. (required)
# @param string $minor_version The document minor_version_number__v field value. (required)
# @param string $relationship_id The relationship id field value. See Retrieve Document Relationships. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'doc_id' => {
        data_type => 'string',
        description => 'The document id field value.',
        required => '1',
    },
    'major_version' => {
        data_type => 'string',
        description => 'The document major_version_number__v field value.',
        required => '1',
    },
    'minor_version' => {
        data_type => 'string',
        description => 'The document minor_version_number__v field value.',
        required => '1',
    },
    'relationship_id' => {
        data_type => 'string',
        description => 'The relationship id field value. See Retrieve Document Relationships.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_delete' } = {
        summary => 'Delete Single Document Relationship',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'doc_id' is set
    unless (exists $args{'doc_id'}) {
      croak("Missing the required parameter 'doc_id' when calling objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_delete");
    }

    # verify the required parameter 'major_version' is set
    unless (exists $args{'major_version'}) {
      croak("Missing the required parameter 'major_version' when calling objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_delete");
    }

    # verify the required parameter 'minor_version' is set
    unless (exists $args{'minor_version'}) {
      croak("Missing the required parameter 'minor_version' when calling objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_delete");
    }

    # verify the required parameter 'relationship_id' is set
    unless (exists $args{'relationship_id'}) {
      croak("Missing the required parameter 'relationship_id' when calling objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_delete");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'doc_id'}) {
        my $_base_variable = "{" . "doc_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'doc_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'major_version'}) {
        my $_base_variable = "{" . "major_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'major_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'minor_version'}) {
        my $_base_variable = "{" . "minor_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'minor_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'relationship_id'}) {
        my $_base_variable = "{" . "relationship_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'relationship_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_get
#
# Retrieve Document Relationship
#
# @param string $doc_id The document id field value. (required)
# @param string $major_version The document major_version_number__v field value. (required)
# @param string $minor_version The document minor_version_number__v field value. (required)
# @param string $relationship_id The relationship id field value. See Retrieve Document Relationships. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'doc_id' => {
        data_type => 'string',
        description => 'The document id field value.',
        required => '1',
    },
    'major_version' => {
        data_type => 'string',
        description => 'The document major_version_number__v field value.',
        required => '1',
    },
    'minor_version' => {
        data_type => 'string',
        description => 'The document minor_version_number__v field value.',
        required => '1',
    },
    'relationship_id' => {
        data_type => 'string',
        description => 'The relationship id field value. See Retrieve Document Relationships.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_get' } = {
        summary => 'Retrieve Document Relationship',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_get {
    my ($self, %args) = @_;

    # verify the required parameter 'doc_id' is set
    unless (exists $args{'doc_id'}) {
      croak("Missing the required parameter 'doc_id' when calling objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_get");
    }

    # verify the required parameter 'major_version' is set
    unless (exists $args{'major_version'}) {
      croak("Missing the required parameter 'major_version' when calling objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_get");
    }

    # verify the required parameter 'minor_version' is set
    unless (exists $args{'minor_version'}) {
      croak("Missing the required parameter 'minor_version' when calling objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_get");
    }

    # verify the required parameter 'relationship_id' is set
    unless (exists $args{'relationship_id'}) {
      croak("Missing the required parameter 'relationship_id' when calling objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_get");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'doc_id'}) {
        my $_base_variable = "{" . "doc_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'doc_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'major_version'}) {
        my $_base_variable = "{" . "major_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'major_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'minor_version'}) {
        my $_base_variable = "{" . "minor_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'minor_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'relationship_id'}) {
        my $_base_variable = "{" . "relationship_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'relationship_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_doc_id_versions_major_version_minor_version_renditions_get
#
# Retrieve Document Version Renditions
#
# @param string $doc_id The document id field value. (required)
# @param string $major_version The document major_version_number__v field value. (required)
# @param string $minor_version The document minor_version_number__v field value. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'doc_id' => {
        data_type => 'string',
        description => 'The document id field value.',
        required => '1',
    },
    'major_version' => {
        data_type => 'string',
        description => 'The document major_version_number__v field value.',
        required => '1',
    },
    'minor_version' => {
        data_type => 'string',
        description => 'The document minor_version_number__v field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_doc_id_versions_major_version_minor_version_renditions_get' } = {
        summary => 'Retrieve Document Version Renditions',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_doc_id_versions_major_version_minor_version_renditions_get {
    my ($self, %args) = @_;

    # verify the required parameter 'doc_id' is set
    unless (exists $args{'doc_id'}) {
      croak("Missing the required parameter 'doc_id' when calling objects_documents_doc_id_versions_major_version_minor_version_renditions_get");
    }

    # verify the required parameter 'major_version' is set
    unless (exists $args{'major_version'}) {
      croak("Missing the required parameter 'major_version' when calling objects_documents_doc_id_versions_major_version_minor_version_renditions_get");
    }

    # verify the required parameter 'minor_version' is set
    unless (exists $args{'minor_version'}) {
      croak("Missing the required parameter 'minor_version' when calling objects_documents_doc_id_versions_major_version_minor_version_renditions_get");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'doc_id'}) {
        my $_base_variable = "{" . "doc_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'doc_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'major_version'}) {
        my $_base_variable = "{" . "major_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'major_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'minor_version'}) {
        my $_base_variable = "{" . "minor_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'minor_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_delete
#
# Delete Document Version Rendition
#
# @param string $doc_id The document id field value. (required)
# @param string $major_version The document major_version_number__v field value. (required)
# @param string $minor_version The document minor_version_number__v field value. (required)
# @param string $rendition_type The document rendition type. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'doc_id' => {
        data_type => 'string',
        description => 'The document id field value.',
        required => '1',
    },
    'major_version' => {
        data_type => 'string',
        description => 'The document major_version_number__v field value.',
        required => '1',
    },
    'minor_version' => {
        data_type => 'string',
        description => 'The document minor_version_number__v field value.',
        required => '1',
    },
    'rendition_type' => {
        data_type => 'string',
        description => 'The document rendition type.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_delete' } = {
        summary => 'Delete Document Version Rendition',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'doc_id' is set
    unless (exists $args{'doc_id'}) {
      croak("Missing the required parameter 'doc_id' when calling objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_delete");
    }

    # verify the required parameter 'major_version' is set
    unless (exists $args{'major_version'}) {
      croak("Missing the required parameter 'major_version' when calling objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_delete");
    }

    # verify the required parameter 'minor_version' is set
    unless (exists $args{'minor_version'}) {
      croak("Missing the required parameter 'minor_version' when calling objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_delete");
    }

    # verify the required parameter 'rendition_type' is set
    unless (exists $args{'rendition_type'}) {
      croak("Missing the required parameter 'rendition_type' when calling objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_delete");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'doc_id'}) {
        my $_base_variable = "{" . "doc_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'doc_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'major_version'}) {
        my $_base_variable = "{" . "major_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'major_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'minor_version'}) {
        my $_base_variable = "{" . "minor_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'minor_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'rendition_type'}) {
        my $_base_variable = "{" . "rendition_type" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'rendition_type'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_get
#
# Download Document Version Rendition File
#
# @param string $doc_id The document id field value. (required)
# @param string $major_version The document major_version_number__v field value. (required)
# @param string $minor_version The document minor_version_number__v field value. (required)
# @param string $rendition_type The document rendition type. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'doc_id' => {
        data_type => 'string',
        description => 'The document id field value.',
        required => '1',
    },
    'major_version' => {
        data_type => 'string',
        description => 'The document major_version_number__v field value.',
        required => '1',
    },
    'minor_version' => {
        data_type => 'string',
        description => 'The document minor_version_number__v field value.',
        required => '1',
    },
    'rendition_type' => {
        data_type => 'string',
        description => 'The document rendition type.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_get' } = {
        summary => 'Download Document Version Rendition File',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_get {
    my ($self, %args) = @_;

    # verify the required parameter 'doc_id' is set
    unless (exists $args{'doc_id'}) {
      croak("Missing the required parameter 'doc_id' when calling objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_get");
    }

    # verify the required parameter 'major_version' is set
    unless (exists $args{'major_version'}) {
      croak("Missing the required parameter 'major_version' when calling objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_get");
    }

    # verify the required parameter 'minor_version' is set
    unless (exists $args{'minor_version'}) {
      croak("Missing the required parameter 'minor_version' when calling objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_get");
    }

    # verify the required parameter 'rendition_type' is set
    unless (exists $args{'rendition_type'}) {
      croak("Missing the required parameter 'rendition_type' when calling objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_get");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'doc_id'}) {
        my $_base_variable = "{" . "doc_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'doc_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'major_version'}) {
        my $_base_variable = "{" . "major_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'major_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'minor_version'}) {
        my $_base_variable = "{" . "minor_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'minor_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'rendition_type'}) {
        my $_base_variable = "{" . "rendition_type" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'rendition_type'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_post
#
# Upload Document Version Rendition
#
# @param string $doc_id The document id field value. (required)
# @param string $major_version The document major_version_number__v field value. (required)
# @param string $minor_version The document minor_version_number__v field value. (required)
# @param string $rendition_type The document rendition type. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'doc_id' => {
        data_type => 'string',
        description => 'The document id field value.',
        required => '1',
    },
    'major_version' => {
        data_type => 'string',
        description => 'The document major_version_number__v field value.',
        required => '1',
    },
    'minor_version' => {
        data_type => 'string',
        description => 'The document minor_version_number__v field value.',
        required => '1',
    },
    'rendition_type' => {
        data_type => 'string',
        description => 'The document rendition type.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_post' } = {
        summary => 'Upload Document Version Rendition',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_post {
    my ($self, %args) = @_;

    # verify the required parameter 'doc_id' is set
    unless (exists $args{'doc_id'}) {
      croak("Missing the required parameter 'doc_id' when calling objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_post");
    }

    # verify the required parameter 'major_version' is set
    unless (exists $args{'major_version'}) {
      croak("Missing the required parameter 'major_version' when calling objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_post");
    }

    # verify the required parameter 'minor_version' is set
    unless (exists $args{'minor_version'}) {
      croak("Missing the required parameter 'minor_version' when calling objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_post");
    }

    # verify the required parameter 'rendition_type' is set
    unless (exists $args{'rendition_type'}) {
      croak("Missing the required parameter 'rendition_type' when calling objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_post");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'doc_id'}) {
        my $_base_variable = "{" . "doc_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'doc_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'major_version'}) {
        my $_base_variable = "{" . "major_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'major_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'minor_version'}) {
        my $_base_variable = "{" . "minor_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'minor_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'rendition_type'}) {
        my $_base_variable = "{" . "rendition_type" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'rendition_type'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_put
#
# Replace Document Version Rendition
#
# @param string $doc_id The document id field value. (required)
# @param string $major_version The document major_version_number__v field value. (required)
# @param string $minor_version The document minor_version_number__v field value. (required)
# @param string $rendition_type The document rendition type. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'doc_id' => {
        data_type => 'string',
        description => 'The document id field value.',
        required => '1',
    },
    'major_version' => {
        data_type => 'string',
        description => 'The document major_version_number__v field value.',
        required => '1',
    },
    'minor_version' => {
        data_type => 'string',
        description => 'The document minor_version_number__v field value.',
        required => '1',
    },
    'rendition_type' => {
        data_type => 'string',
        description => 'The document rendition type.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_put' } = {
        summary => 'Replace Document Version Rendition',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_put {
    my ($self, %args) = @_;

    # verify the required parameter 'doc_id' is set
    unless (exists $args{'doc_id'}) {
      croak("Missing the required parameter 'doc_id' when calling objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_put");
    }

    # verify the required parameter 'major_version' is set
    unless (exists $args{'major_version'}) {
      croak("Missing the required parameter 'major_version' when calling objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_put");
    }

    # verify the required parameter 'minor_version' is set
    unless (exists $args{'minor_version'}) {
      croak("Missing the required parameter 'minor_version' when calling objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_put");
    }

    # verify the required parameter 'rendition_type' is set
    unless (exists $args{'rendition_type'}) {
      croak("Missing the required parameter 'rendition_type' when calling objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_put");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'doc_id'}) {
        my $_base_variable = "{" . "doc_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'doc_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'major_version'}) {
        my $_base_variable = "{" . "major_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'major_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'minor_version'}) {
        my $_base_variable = "{" . "minor_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'minor_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'rendition_type'}) {
        my $_base_variable = "{" . "rendition_type" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'rendition_type'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_doc_id_versions_major_version_minor_version_thumbnail_get
#
# Download Document Version Thumbnail File
#
# @param string $doc_id The document id field value. (required)
# @param string $major_version The document major_version_number__v field value. (required)
# @param string $minor_version The document minor_version_number__v field value. (required)
# @param string $accept  (optional)
# @param string $authorization  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'doc_id' => {
        data_type => 'string',
        description => 'The document id field value.',
        required => '1',
    },
    'major_version' => {
        data_type => 'string',
        description => 'The document major_version_number__v field value.',
        required => '1',
    },
    'minor_version' => {
        data_type => 'string',
        description => 'The document minor_version_number__v field value.',
        required => '1',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_doc_id_versions_major_version_minor_version_thumbnail_get' } = {
        summary => 'Download Document Version Thumbnail File',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_doc_id_versions_major_version_minor_version_thumbnail_get {
    my ($self, %args) = @_;

    # verify the required parameter 'doc_id' is set
    unless (exists $args{'doc_id'}) {
      croak("Missing the required parameter 'doc_id' when calling objects_documents_doc_id_versions_major_version_minor_version_thumbnail_get");
    }

    # verify the required parameter 'major_version' is set
    unless (exists $args{'major_version'}) {
      croak("Missing the required parameter 'major_version' when calling objects_documents_doc_id_versions_major_version_minor_version_thumbnail_get");
    }

    # verify the required parameter 'minor_version' is set
    unless (exists $args{'minor_version'}) {
      croak("Missing the required parameter 'minor_version' when calling objects_documents_doc_id_versions_major_version_minor_version_thumbnail_get");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/thumbnail';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'doc_id'}) {
        my $_base_variable = "{" . "doc_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'doc_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'major_version'}) {
        my $_base_variable = "{" . "major_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'major_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'minor_version'}) {
        my $_base_variable = "{" . "minor_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'minor_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_get
#
# Retrieve All Documents
#
# @param string $named_filter Retrieves only documents which you have created. (optional)
# @param string $scope Searches only within the document content. (optional)
# @param string $versionscope Retrieves all document versions, rather than only the latest version. (optional)
# @param string $search Search for documents based on a {keyword} in searchable document fields. (optional)
# @param string $limit See VQL documentation for more information. (optional)
# @param string $sort See VQL documentation for more information. (optional)
# @param string $start See VQL documentation for more information. (optional)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'named_filter' => {
        data_type => 'string',
        description => 'Retrieves only documents which you have created.',
        required => '0',
    },
    'scope' => {
        data_type => 'string',
        description => 'Searches only within the document content.',
        required => '0',
    },
    'versionscope' => {
        data_type => 'string',
        description => 'Retrieves all document versions, rather than only the latest version.',
        required => '0',
    },
    'search' => {
        data_type => 'string',
        description => 'Search for documents based on a {keyword} in searchable document fields.',
        required => '0',
    },
    'limit' => {
        data_type => 'string',
        description => 'See VQL documentation for more information.',
        required => '0',
    },
    'sort' => {
        data_type => 'string',
        description => 'See VQL documentation for more information.',
        required => '0',
    },
    'start' => {
        data_type => 'string',
        description => 'See VQL documentation for more information.',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_get' } = {
        summary => 'Retrieve All Documents',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/objects/documents';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'named_filter'}) {
        $query_params->{'named_filter'} = $self->{api_client}->to_query_value($args{'named_filter'});
    }

    # query params
    if ( exists $args{'scope'}) {
        $query_params->{'scope'} = $self->{api_client}->to_query_value($args{'scope'});
    }

    # query params
    if ( exists $args{'versionscope'}) {
        $query_params->{'versionscope'} = $self->{api_client}->to_query_value($args{'versionscope'});
    }

    # query params
    if ( exists $args{'search'}) {
        $query_params->{'search'} = $self->{api_client}->to_query_value($args{'search'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'sort'}) {
        $query_params->{'sort'} = $self->{api_client}->to_query_value($args{'sort'});
    }

    # query params
    if ( exists $args{'start'}) {
        $query_params->{'start'} = $self->{api_client}->to_query_value($args{'start'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_id_roles_get
#
# Retrieve All Document Roles
#
# @param string $id  (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_id_roles_get' } = {
        summary => 'Retrieve All Document Roles',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_id_roles_get {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling objects_documents_id_roles_get");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/{id}/roles';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_id_roles_post
#
# Assign Users & Groups to Roles on a Single Document
#
# @param string $id  (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_id_roles_post' } = {
        summary => 'Assign Users &amp; Groups to Roles on a Single Document',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_id_roles_post {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling objects_documents_id_roles_post");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/{id}/roles';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_id_roles_role_name_get
#
# Retrieve Document Role
#
# @param string $id The document &#x60;id&#x60;. (required)
# @param string $role_name The name of the role to retrieve. For example, &#x60;owner__v&#x60;. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The document &#x60;id&#x60;.',
        required => '1',
    },
    'role_name' => {
        data_type => 'string',
        description => 'The name of the role to retrieve. For example, &#x60;owner__v&#x60;.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_id_roles_role_name_get' } = {
        summary => 'Retrieve Document Role',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_id_roles_role_name_get {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling objects_documents_id_roles_role_name_get");
    }

    # verify the required parameter 'role_name' is set
    unless (exists $args{'role_name'}) {
      croak("Missing the required parameter 'role_name' when calling objects_documents_id_roles_role_name_get");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/{id}/roles/{role_name}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'role_name'}) {
        my $_base_variable = "{" . "role_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'role_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_id_versions_major_version_minor_version_lifecycle_actions_get
#
# Retrieve Document User Actions
#
# @param string $id The document id field value from which to retrieve available user actions. (required)
# @param string $major_version The major version number of the document. (required)
# @param string $minor_version The minor version number of the document. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The document id field value from which to retrieve available user actions.',
        required => '1',
    },
    'major_version' => {
        data_type => 'string',
        description => 'The major version number of the document.',
        required => '1',
    },
    'minor_version' => {
        data_type => 'string',
        description => 'The minor version number of the document.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_id_versions_major_version_minor_version_lifecycle_actions_get' } = {
        summary => 'Retrieve Document User Actions',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_id_versions_major_version_minor_version_lifecycle_actions_get {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling objects_documents_id_versions_major_version_minor_version_lifecycle_actions_get");
    }

    # verify the required parameter 'major_version' is set
    unless (exists $args{'major_version'}) {
      croak("Missing the required parameter 'major_version' when calling objects_documents_id_versions_major_version_minor_version_lifecycle_actions_get");
    }

    # verify the required parameter 'minor_version' is set
    unless (exists $args{'minor_version'}) {
      croak("Missing the required parameter 'minor_version' when calling objects_documents_id_versions_major_version_minor_version_lifecycle_actions_get");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'major_version'}) {
        my $_base_variable = "{" . "major_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'major_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'minor_version'}) {
        my $_base_variable = "{" . "minor_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'minor_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get
#
# Retrieve Document Entry Criteria
#
# @param string $id The document id field value from which to retrieve available user actions. (required)
# @param string $major_version The major version number of the document. (required)
# @param string $minor_version The minor version number of the document. (required)
# @param string $name__v The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The document id field value from which to retrieve available user actions.',
        required => '1',
    },
    'major_version' => {
        data_type => 'string',
        description => 'The major version number of the document.',
        required => '1',
    },
    'minor_version' => {
        data_type => 'string',
        description => 'The minor version number of the document.',
        required => '1',
    },
    'name__v' => {
        data_type => 'string',
        description => 'The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get' } = {
        summary => 'Retrieve Document Entry Criteria',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get");
    }

    # verify the required parameter 'major_version' is set
    unless (exists $args{'major_version'}) {
      croak("Missing the required parameter 'major_version' when calling objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get");
    }

    # verify the required parameter 'minor_version' is set
    unless (exists $args{'minor_version'}) {
      croak("Missing the required parameter 'minor_version' when calling objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get");
    }

    # verify the required parameter 'name__v' is set
    unless (exists $args{'name__v'}) {
      croak("Missing the required parameter 'name__v' when calling objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}/entry_requirements';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'major_version'}) {
        my $_base_variable = "{" . "major_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'major_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'minor_version'}) {
        my $_base_variable = "{" . "minor_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'minor_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'name__v'}) {
        my $_base_variable = "{" . "name__v" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name__v'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_put
#
# Initiate Document User Action
#
# @param string $id The document id field value from which to retrieve available user actions. (required)
# @param string $major_version The major version number of the document. (required)
# @param string $minor_version The minor version number of the document. (required)
# @param string $name__v The action name__v field value to initiate. This is retrieved from the Retrieve User Action request. (required)
# @param string $authorization  (optional)
# @param string $content_type  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The document id field value from which to retrieve available user actions.',
        required => '1',
    },
    'major_version' => {
        data_type => 'string',
        description => 'The major version number of the document.',
        required => '1',
    },
    'minor_version' => {
        data_type => 'string',
        description => 'The minor version number of the document.',
        required => '1',
    },
    'name__v' => {
        data_type => 'string',
        description => 'The action name__v field value to initiate. This is retrieved from the Retrieve User Action request.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_put' } = {
        summary => 'Initiate Document User Action',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_put {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_put");
    }

    # verify the required parameter 'major_version' is set
    unless (exists $args{'major_version'}) {
      croak("Missing the required parameter 'major_version' when calling objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_put");
    }

    # verify the required parameter 'minor_version' is set
    unless (exists $args{'minor_version'}) {
      croak("Missing the required parameter 'minor_version' when calling objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_put");
    }

    # verify the required parameter 'name__v' is set
    unless (exists $args{'name__v'}) {
      croak("Missing the required parameter 'name__v' when calling objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_put");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'major_version'}) {
        my $_base_variable = "{" . "major_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'major_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'minor_version'}) {
        my $_base_variable = "{" . "minor_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'minor_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'name__v'}) {
        my $_base_variable = "{" . "name__v" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name__v'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_lifecycle_actions_post
#
# Retrieve User Actions on Multiple Documents
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_lifecycle_actions_post' } = {
        summary => 'Retrieve User Actions on Multiple Documents',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_lifecycle_actions_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/objects/documents/lifecycle_actions';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_lifecycle_actions_user_action_name_put
#
# Initiate Bulk Document User Actions
#
# @param string $user_action_name The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Documents endpoint. (required)
# @param string $authorization  (optional)
# @param string $content_type  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'user_action_name' => {
        data_type => 'string',
        description => 'The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Documents endpoint.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_lifecycle_actions_user_action_name_put' } = {
        summary => 'Initiate Bulk Document User Actions',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_lifecycle_actions_user_action_name_put {
    my ($self, %args) = @_;

    # verify the required parameter 'user_action_name' is set
    unless (exists $args{'user_action_name'}) {
      croak("Missing the required parameter 'user_action_name' when calling objects_documents_lifecycle_actions_user_action_name_put");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/lifecycle_actions/{user_action_name}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'user_action_name'}) {
        my $_base_variable = "{" . "user_action_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'user_action_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_post
#
# Create Single Document
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param boolean $x_vault_api_migration_mode When set to true,  you can use the status__v field to create documents in any lifecycle state. Additionally, you can manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt; (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_migration_mode' => {
        data_type => 'boolean',
        description => 'When set to true,  you can use the status__v field to create documents in any lifecycle state. Additionally, you can manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_post' } = {
        summary => 'Create Single Document',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/objects/documents';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_migration_mode'}) {
        $header_params->{'X-VaultAPI-MigrationMode'} = $self->{api_client}->to_header_value($args{'x_vault_api_migration_mode'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_relationships_batch_delete
#
# Delete Multiple Document Relationships
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_relationships_batch_delete' } = {
        summary => 'Delete Multiple Document Relationships',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_relationships_batch_delete {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/objects/documents/relationships/batch';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_relationships_batch_post
#
# Create Multiple Document Relationships
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_relationships_batch_post' } = {
        summary => 'Create Multiple Document Relationships',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_relationships_batch_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/objects/documents/relationships/batch';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_renditions_batch_delete
#
# Delete Multiple Document Renditions
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_renditions_batch_delete' } = {
        summary => 'Delete Multiple Document Renditions',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_renditions_batch_delete {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/objects/documents/renditions/batch';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_renditions_batch_post
#
# Add Multiple Document Renditions
#
# @param string $id_param If you’re identifying documents in your input by their external ID (optional)
# @param string $large_size_asset If set to true, indicates that the renditions to add are of the Large Size Asset (large_size_asset__v) rendition type. Vault applies Document Migration Mode limitations to renditions created with the request, but Document Migration permission is not required and your vault need not be in Migration Mode to use the parameter. Note that the request results in an error if the CSV contains any rendition type other than large_size_asset__v. (optional)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param boolean $x_vault_api_migration_mode Must be set to true when importing any rendition type other than large_size_asset__v. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt; (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'id_param' => {
        data_type => 'string',
        description => 'If you’re identifying documents in your input by their external ID',
        required => '0',
    },
    'large_size_asset' => {
        data_type => 'string',
        description => 'If set to true, indicates that the renditions to add are of the Large Size Asset (large_size_asset__v) rendition type. Vault applies Document Migration Mode limitations to renditions created with the request, but Document Migration permission is not required and your vault need not be in Migration Mode to use the parameter. Note that the request results in an error if the CSV contains any rendition type other than large_size_asset__v.',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_migration_mode' => {
        data_type => 'boolean',
        description => 'Must be set to true when importing any rendition type other than large_size_asset__v. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_renditions_batch_post' } = {
        summary => 'Add Multiple Document Renditions',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_renditions_batch_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/objects/documents/renditions/batch';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'id_param'}) {
        $query_params->{'idParam'} = $self->{api_client}->to_query_value($args{'id_param'});
    }

    # query params
    if ( exists $args{'large_size_asset'}) {
        $query_params->{'largeSizeAsset'} = $self->{api_client}->to_query_value($args{'large_size_asset'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_migration_mode'}) {
        $header_params->{'X-VaultAPI-MigrationMode'} = $self->{api_client}->to_header_value($args{'x_vault_api_migration_mode'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_roles_batch_delete
#
# Remove Users and Groups from Roles on Multiple Documents & Binders
#
# @param string $authorization  (optional)
# @param string $content_type  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_roles_batch_delete' } = {
        summary => 'Remove Users and Groups from Roles on Multiple Documents &amp; Binders',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_roles_batch_delete {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/objects/documents/roles/batch';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_roles_batch_post
#
# Assign Users & Groups to Roles on Multiple Documents & Binders
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_roles_batch_post' } = {
        summary => 'Assign Users &amp; Groups to Roles on Multiple Documents &amp; Binders',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_roles_batch_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/objects/documents/roles/batch';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_templates_get
#
# Retrieve Document Template Collection
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_templates_get' } = {
        summary => 'Retrieve Document Template Collection',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_templates_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/objects/documents/templates';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_templates_post
#
# Create Single Document Template
#
# @param string $authorization  (optional)
# @param string $content_type  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_templates_post' } = {
        summary => 'Create Single Document Template',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_templates_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/objects/documents/templates';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_templates_put
#
# Update Multiple Document Templates
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_templates_put' } = {
        summary => 'Update Multiple Document Templates',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_templates_put {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/objects/documents/templates';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_templates_template_name_delete
#
# Delete Basic Document Template
#
# @param string $template_name The document template name__v field value. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'template_name' => {
        data_type => 'string',
        description => 'The document template name__v field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_templates_template_name_delete' } = {
        summary => 'Delete Basic Document Template',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_templates_template_name_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'template_name' is set
    unless (exists $args{'template_name'}) {
      croak("Missing the required parameter 'template_name' when calling objects_documents_templates_template_name_delete");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/templates/{template_name}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'template_name'}) {
        my $_base_variable = "{" . "template_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'template_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_templates_template_name_file_get
#
# Download Document Template File
#
# @param string $template_name The document template name__v field value. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'template_name' => {
        data_type => 'string',
        description => 'The document template name__v field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_templates_template_name_file_get' } = {
        summary => 'Download Document Template File',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_templates_template_name_file_get {
    my ($self, %args) = @_;

    # verify the required parameter 'template_name' is set
    unless (exists $args{'template_name'}) {
      croak("Missing the required parameter 'template_name' when calling objects_documents_templates_template_name_file_get");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/templates/{template_name}/file';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'template_name'}) {
        my $_base_variable = "{" . "template_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'template_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_templates_template_name_get
#
# Retrieve Document Template Attributes
#
# @param string $template_name The document template name__v field value. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'template_name' => {
        data_type => 'string',
        description => 'The document template name__v field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_templates_template_name_get' } = {
        summary => 'Retrieve Document Template Attributes',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_templates_template_name_get {
    my ($self, %args) = @_;

    # verify the required parameter 'template_name' is set
    unless (exists $args{'template_name'}) {
      croak("Missing the required parameter 'template_name' when calling objects_documents_templates_template_name_get");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/templates/{template_name}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'template_name'}) {
        my $_base_variable = "{" . "template_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'template_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_templates_template_name_put
#
# Update Single Document Template
#
# @param string $template_name The document template name__v field value. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'template_name' => {
        data_type => 'string',
        description => 'The document template name__v field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_templates_template_name_put' } = {
        summary => 'Update Single Document Template',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_templates_template_name_put {
    my ($self, %args) = @_;

    # verify the required parameter 'template_name' is set
    unless (exists $args{'template_name'}) {
      croak("Missing the required parameter 'template_name' when calling objects_documents_templates_template_name_put");
    }

    # parse inputs
    my $_resource_path = '/objects/documents/templates/{template_name}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'template_name'}) {
        my $_base_variable = "{" . "template_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'template_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_tokens_post
#
# Document Tokens
#
# @param string $authorization  (optional)
# @param string $content_type  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_tokens_post' } = {
        summary => 'Document Tokens',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_tokens_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/objects/documents/tokens';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_versions_batch_actions_fileextract_post
#
# Export Document Versions
#
# @param boolean $source Optional: To exclude source files, include a query parameter source&#x3D;false. If omitted, defaults to true. (optional)
# @param boolean $renditions Optional: To include renditions, include a query parameter renditions&#x3D;true. If omitted, defaults to false. (optional)
# @param string $authorization  (optional)
# @param string $content_type  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'source' => {
        data_type => 'boolean',
        description => 'Optional: To exclude source files, include a query parameter source&#x3D;false. If omitted, defaults to true.',
        required => '0',
    },
    'renditions' => {
        data_type => 'boolean',
        description => 'Optional: To include renditions, include a query parameter renditions&#x3D;true. If omitted, defaults to false.',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_versions_batch_actions_fileextract_post' } = {
        summary => 'Export Document Versions',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_versions_batch_actions_fileextract_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/objects/documents/versions/batch/actions/fileextract';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'source'}) {
        $query_params->{'source'} = $self->{api_client}->to_query_value($args{'source'});
    }

    # query params
    if ( exists $args{'renditions'}) {
        $query_params->{'renditions'} = $self->{api_client}->to_query_value($args{'renditions'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_versions_batch_delete
#
# Delete Multiple Document Versions
#
# @param string $id_param If you’re identifying documents in your input by their external ID (optional)
# @param string $authorization  (optional)
# @param string $content_type  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'id_param' => {
        data_type => 'string',
        description => 'If you’re identifying documents in your input by their external ID',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_versions_batch_delete' } = {
        summary => 'Delete Multiple Document Versions',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_versions_batch_delete {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/objects/documents/versions/batch';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'id_param'}) {
        $query_params->{'idParam'} = $self->{api_client}->to_query_value($args{'id_param'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_documents_versions_batch_post
#
# Create Multiple Document Versions
#
# @param string $id_param If you’re identifying documents in your input by their external ID (optional)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_migration_mode Must be set to true. Vault allows you to manually set the name and version number and to create documents in any lifecycle state using the &#x60;status__v&#x60; field, but does not allow you to change the document number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt; (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'id_param' => {
        data_type => 'string',
        description => 'If you’re identifying documents in your input by their external ID',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_migration_mode' => {
        data_type => 'string',
        description => 'Must be set to true. Vault allows you to manually set the name and version number and to create documents in any lifecycle state using the &#x60;status__v&#x60; field, but does not allow you to change the document number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_documents_versions_batch_post' } = {
        summary => 'Create Multiple Document Versions',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_documents_versions_batch_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/objects/documents/versions/batch';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'id_param'}) {
        $query_params->{'idParam'} = $self->{api_client}->to_query_value($args{'id_param'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_migration_mode'}) {
        $header_params->{'X-VaultAPI-MigrationMode'} = $self->{api_client}->to_header_value($args{'x_vault_api_migration_mode'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_domain_get
#
# Retrieve Domain Information
#
# @param boolean $include_application To include Vault application type information in the response, set include_application to true. If omitted, defaults to false and application information is not included. (optional)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'include_application' => {
        data_type => 'boolean',
        description => 'To include Vault application type information in the response, set include_application to true. If omitted, defaults to false and application information is not included.',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_domain_get' } = {
        summary => 'Retrieve Domain Information',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_domain_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/objects/domain';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'include_application'}) {
        $query_params->{'include_application'} = $self->{api_client}->to_query_value($args{'include_application'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_domains_get
#
# Retrieve Domains
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_domains_get' } = {
        summary => 'Retrieve Domains',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_domains_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/objects/domains';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_edl_matched_documents_batch_actions_add_post
#
# Add EDL Matched Documents
#
# @param string $authorization  (optional)
# @param string $content_type  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_edl_matched_documents_batch_actions_add_post' } = {
        summary => 'Add EDL Matched Documents',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_edl_matched_documents_batch_actions_add_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/objects/edl_matched_documents/batch/actions/add';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_edl_matched_documents_batch_actions_remove_post
#
# Remove EDL Matched Documents
#
# @param string $authorization  (optional)
# @param string $content_type  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_edl_matched_documents_batch_actions_remove_post' } = {
        summary => 'Remove EDL Matched Documents',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_edl_matched_documents_batch_actions_remove_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/objects/edl_matched_documents/batch/actions/remove';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_groups_auto_get
#
# Retrieve Auto Managed Groups
#
# @param string $limit Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 1000.  (optional)
# @param string $offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0. (optional)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'limit' => {
        data_type => 'string',
        description => 'Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 1000. ',
        required => '0',
    },
    'offset' => {
        data_type => 'string',
        description => 'Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0.',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_groups_auto_get' } = {
        summary => 'Retrieve Auto Managed Groups',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_groups_auto_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/objects/groups/auto';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_groups_get
#
# Retrieve All Groups
#
# @param string $include_implied When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. If omitted, the response includes only the members__v field. These users are individually added to a group by an Admin. (optional)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'include_implied' => {
        data_type => 'string',
        description => 'When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. If omitted, the response includes only the members__v field. These users are individually added to a group by an Admin.',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_groups_get' } = {
        summary => 'Retrieve All Groups',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_groups_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/objects/groups';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'include_implied'}) {
        $query_params->{'includeImplied'} = $self->{api_client}->to_query_value($args{'include_implied'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_groups_group_id_delete
#
# Delete Group
#
# @param string $group_id The group id field value. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'group_id' => {
        data_type => 'string',
        description => 'The group id field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_groups_group_id_delete' } = {
        summary => 'Delete Group',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_groups_group_id_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'group_id' is set
    unless (exists $args{'group_id'}) {
      croak("Missing the required parameter 'group_id' when calling objects_groups_group_id_delete");
    }

    # parse inputs
    my $_resource_path = '/objects/groups/{group_id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'group_id'}) {
        my $_base_variable = "{" . "group_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'group_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_groups_group_id_get
#
# Retrieve Group
#
# @param string $group_id The group id field value. (required)
# @param boolean $include_implied When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. When not used, the response includes only the members__v field. These users are individually added to a group by Admin. (optional)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'group_id' => {
        data_type => 'string',
        description => 'The group id field value.',
        required => '1',
    },
    'include_implied' => {
        data_type => 'boolean',
        description => 'When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. When not used, the response includes only the members__v field. These users are individually added to a group by Admin.',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_groups_group_id_get' } = {
        summary => 'Retrieve Group',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_groups_group_id_get {
    my ($self, %args) = @_;

    # verify the required parameter 'group_id' is set
    unless (exists $args{'group_id'}) {
      croak("Missing the required parameter 'group_id' when calling objects_groups_group_id_get");
    }

    # parse inputs
    my $_resource_path = '/objects/groups/{group_id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'include_implied'}) {
        $query_params->{'includeImplied'} = $self->{api_client}->to_query_value($args{'include_implied'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'group_id'}) {
        my $_base_variable = "{" . "group_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'group_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_groups_group_id_put
#
# Update Group
#
# @param string $group_id The group id field value. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'group_id' => {
        data_type => 'string',
        description => 'The group id field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_groups_group_id_put' } = {
        summary => 'Update Group',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_groups_group_id_put {
    my ($self, %args) = @_;

    # verify the required parameter 'group_id' is set
    unless (exists $args{'group_id'}) {
      croak("Missing the required parameter 'group_id' when calling objects_groups_group_id_put");
    }

    # parse inputs
    my $_resource_path = '/objects/groups/{group_id}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'group_id'}) {
        my $_base_variable = "{" . "group_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'group_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_groups_post
#
# Create Group 
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_groups_post' } = {
        summary => 'Create Group ',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_groups_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/objects/groups';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_licenses_get
#
# Retrieve Application License Usage
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_licenses_get' } = {
        summary => 'Retrieve Application License Usage',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_licenses_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/objects/licenses';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_objectworkflows_actions_get
#
# Retrieve All Multi-Record Workflows
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_objectworkflows_actions_get' } = {
        summary => 'Retrieve All Multi-Record Workflows',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_objectworkflows_actions_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/objects/objectworkflows/actions';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_objectworkflows_actions_workflow_name_get
#
# Retrieve Multi-Record Workflow Details
#
# @param string $workflow_name  (required)
# @param string $authorization  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'workflow_name' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_objectworkflows_actions_workflow_name_get' } = {
        summary => 'Retrieve Multi-Record Workflow Details',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_objectworkflows_actions_workflow_name_get {
    my ($self, %args) = @_;

    # verify the required parameter 'workflow_name' is set
    unless (exists $args{'workflow_name'}) {
      croak("Missing the required parameter 'workflow_name' when calling objects_objectworkflows_actions_workflow_name_get");
    }

    # parse inputs
    my $_resource_path = '/objects/objectworkflows/actions/{workflow_name}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'workflow_name'}) {
        my $_base_variable = "{" . "workflow_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'workflow_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_objectworkflows_actions_workflow_name_post
#
# Initiate Multi-Record Workflow
#
# @param string $workflow_name  (required)
# @param string $authorization  (optional)
# @param string $content_type  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'workflow_name' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_objectworkflows_actions_workflow_name_post' } = {
        summary => 'Initiate Multi-Record Workflow',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_objectworkflows_actions_workflow_name_post {
    my ($self, %args) = @_;

    # verify the required parameter 'workflow_name' is set
    unless (exists $args{'workflow_name'}) {
      croak("Missing the required parameter 'workflow_name' when calling objects_objectworkflows_actions_workflow_name_post");
    }

    # parse inputs
    my $_resource_path = '/objects/objectworkflows/actions/{workflow_name}';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'workflow_name'}) {
        my $_base_variable = "{" . "workflow_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'workflow_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_objectworkflows_get
#
# Retrieve Workflows
#
# @param string $object__v To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the participant parameter is not used.  (optional)
# @param string $record_id__v To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the participant parameter is not used.  (optional)
# @param string $participant To retrieve all workflows available to a particular user, include the user id field value as ?participant&#x3D;{id}. To retrieve your own workflows, set this value to ?participant&#x3D;me. This parameter is required when the object__v and record_id__v parameters are not used.  (optional)
# @param string $status__v To retrieve all workflows with specific statuses, include one or more status name__v field values. For example: status__v&#x3D;active__v, status__v&#x3D;active__v,completed__v. Workflows with &#x60;status__v&#x3D;active__v&#x60; are in progress for the indicated object record. Valid statuses include: active__v completed__v cancelled__v (optional)
# @param string $offset This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset&#x3D;201.  (optional)
# @param string $page_size This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size&#x3D;1000.  (optional)
# @param string $loc When localized (translated) strings are available, retrieve them by including ?loc&#x3D;true.  (optional)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'object__v' => {
        data_type => 'string',
        description => 'To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the participant parameter is not used. ',
        required => '0',
    },
    'record_id__v' => {
        data_type => 'string',
        description => 'To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the participant parameter is not used. ',
        required => '0',
    },
    'participant' => {
        data_type => 'string',
        description => 'To retrieve all workflows available to a particular user, include the user id field value as ?participant&#x3D;{id}. To retrieve your own workflows, set this value to ?participant&#x3D;me. This parameter is required when the object__v and record_id__v parameters are not used. ',
        required => '0',
    },
    'status__v' => {
        data_type => 'string',
        description => 'To retrieve all workflows with specific statuses, include one or more status name__v field values. For example: status__v&#x3D;active__v, status__v&#x3D;active__v,completed__v. Workflows with &#x60;status__v&#x3D;active__v&#x60; are in progress for the indicated object record. Valid statuses include: active__v completed__v cancelled__v',
        required => '0',
    },
    'offset' => {
        data_type => 'string',
        description => 'This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset&#x3D;201. ',
        required => '0',
    },
    'page_size' => {
        data_type => 'string',
        description => 'This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size&#x3D;1000. ',
        required => '0',
    },
    'loc' => {
        data_type => 'string',
        description => 'When localized (translated) strings are available, retrieve them by including ?loc&#x3D;true. ',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_objectworkflows_get' } = {
        summary => 'Retrieve Workflows',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_objectworkflows_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/objects/objectworkflows';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'object__v'}) {
        $query_params->{'object__v'} = $self->{api_client}->to_query_value($args{'object__v'});
    }

    # query params
    if ( exists $args{'record_id__v'}) {
        $query_params->{'record_id__v'} = $self->{api_client}->to_query_value($args{'record_id__v'});
    }

    # query params
    if ( exists $args{'participant'}) {
        $query_params->{'participant'} = $self->{api_client}->to_query_value($args{'participant'});
    }

    # query params
    if ( exists $args{'status__v'}) {
        $query_params->{'status__v'} = $self->{api_client}->to_query_value($args{'status__v'});
    }

    # query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }

    # query params
    if ( exists $args{'page_size'}) {
        $query_params->{'page_size'} = $self->{api_client}->to_query_value($args{'page_size'});
    }

    # query params
    if ( exists $args{'loc'}) {
        $query_params->{'loc'} = $self->{api_client}->to_query_value($args{'loc'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_objectworkflows_tasks_get
#
# Retrieve Workflow Tasks
#
# @param string $object__v To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the assignee__v parameter is not used. (optional)
# @param string $record_id__v To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the assignee__v parameter is not used. (optional)
# @param string $assignee__v To retrieve all workflow tasks available to a particular user, include the user id field value as ?assignee__v&#x3D;{id}. To retrieve your own workflow tasks, set this value to ?assignee__v&#x3D;me. This parameter is required when the object__v and record_id__v parameters are not used.  (optional)
# @param string $status__v To retrieve all workflow tasks with specific statuses, include one or more status name__v field values. For example: ?status__v&#x3D;available__v or ?status__v&#x3D;available__v,completed__v.  (optional)
# @param string $offset This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset&#x3D;201.  (optional)
# @param string $page_size This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size&#x3D;1000.  (optional)
# @param string $loc When localized (translated) strings are available, retrieve them by including ?loc&#x3D;true.  (optional)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'object__v' => {
        data_type => 'string',
        description => 'To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the assignee__v parameter is not used.',
        required => '0',
    },
    'record_id__v' => {
        data_type => 'string',
        description => 'To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the assignee__v parameter is not used.',
        required => '0',
    },
    'assignee__v' => {
        data_type => 'string',
        description => 'To retrieve all workflow tasks available to a particular user, include the user id field value as ?assignee__v&#x3D;{id}. To retrieve your own workflow tasks, set this value to ?assignee__v&#x3D;me. This parameter is required when the object__v and record_id__v parameters are not used. ',
        required => '0',
    },
    'status__v' => {
        data_type => 'string',
        description => 'To retrieve all workflow tasks with specific statuses, include one or more status name__v field values. For example: ?status__v&#x3D;available__v or ?status__v&#x3D;available__v,completed__v. ',
        required => '0',
    },
    'offset' => {
        data_type => 'string',
        description => 'This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset&#x3D;201. ',
        required => '0',
    },
    'page_size' => {
        data_type => 'string',
        description => 'This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size&#x3D;1000. ',
        required => '0',
    },
    'loc' => {
        data_type => 'string',
        description => 'When localized (translated) strings are available, retrieve them by including ?loc&#x3D;true. ',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_objectworkflows_tasks_get' } = {
        summary => 'Retrieve Workflow Tasks',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_objectworkflows_tasks_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/objects/objectworkflows/tasks';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'object__v'}) {
        $query_params->{'object__v'} = $self->{api_client}->to_query_value($args{'object__v'});
    }

    # query params
    if ( exists $args{'record_id__v'}) {
        $query_params->{'record_id__v'} = $self->{api_client}->to_query_value($args{'record_id__v'});
    }

    # query params
    if ( exists $args{'assignee__v'}) {
        $query_params->{'assignee__v'} = $self->{api_client}->to_query_value($args{'assignee__v'});
    }

    # query params
    if ( exists $args{'status__v'}) {
        $query_params->{'status__v'} = $self->{api_client}->to_query_value($args{'status__v'});
    }

    # query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }

    # query params
    if ( exists $args{'page_size'}) {
        $query_params->{'page_size'} = $self->{api_client}->to_query_value($args{'page_size'});
    }

    # query params
    if ( exists $args{'loc'}) {
        $query_params->{'loc'} = $self->{api_client}->to_query_value($args{'loc'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_objectworkflows_tasks_task_id_actions_accept_post
#
# Accept Single Record Workflow Task
#
# @param string $task_id The task id field value. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'task_id' => {
        data_type => 'string',
        description => 'The task id field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_objectworkflows_tasks_task_id_actions_accept_post' } = {
        summary => 'Accept Single Record Workflow Task',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_objectworkflows_tasks_task_id_actions_accept_post {
    my ($self, %args) = @_;

    # verify the required parameter 'task_id' is set
    unless (exists $args{'task_id'}) {
      croak("Missing the required parameter 'task_id' when calling objects_objectworkflows_tasks_task_id_actions_accept_post");
    }

    # parse inputs
    my $_resource_path = '/objects/objectworkflows/tasks/{task_id}/actions/accept';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'task_id'}) {
        my $_base_variable = "{" . "task_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'task_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_objectworkflows_tasks_task_id_actions_cancel_post
#
# Cancel Workflow Task
#
# @param string $task_id The task id field value. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'task_id' => {
        data_type => 'string',
        description => 'The task id field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_objectworkflows_tasks_task_id_actions_cancel_post' } = {
        summary => 'Cancel Workflow Task',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_objectworkflows_tasks_task_id_actions_cancel_post {
    my ($self, %args) = @_;

    # verify the required parameter 'task_id' is set
    unless (exists $args{'task_id'}) {
      croak("Missing the required parameter 'task_id' when calling objects_objectworkflows_tasks_task_id_actions_cancel_post");
    }

    # parse inputs
    my $_resource_path = '/objects/objectworkflows/tasks/{task_id}/actions/cancel';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'task_id'}) {
        my $_base_variable = "{" . "task_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'task_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_objectworkflows_tasks_task_id_actions_complete_post
#
# Complete Single Record Workflow Task
#
# @param string $task_id The task id field value. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'task_id' => {
        data_type => 'string',
        description => 'The task id field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_objectworkflows_tasks_task_id_actions_complete_post' } = {
        summary => 'Complete Single Record Workflow Task',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_objectworkflows_tasks_task_id_actions_complete_post {
    my ($self, %args) = @_;

    # verify the required parameter 'task_id' is set
    unless (exists $args{'task_id'}) {
      croak("Missing the required parameter 'task_id' when calling objects_objectworkflows_tasks_task_id_actions_complete_post");
    }

    # parse inputs
    my $_resource_path = '/objects/objectworkflows/tasks/{task_id}/actions/complete';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'task_id'}) {
        my $_base_variable = "{" . "task_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'task_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_objectworkflows_tasks_task_id_actions_get
#
# Retrieve Workflow Task Actions
#
# @param string $task_id The task id field value. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'task_id' => {
        data_type => 'string',
        description => 'The task id field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_objectworkflows_tasks_task_id_actions_get' } = {
        summary => 'Retrieve Workflow Task Actions',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_objectworkflows_tasks_task_id_actions_get {
    my ($self, %args) = @_;

    # verify the required parameter 'task_id' is set
    unless (exists $args{'task_id'}) {
      croak("Missing the required parameter 'task_id' when calling objects_objectworkflows_tasks_task_id_actions_get");
    }

    # parse inputs
    my $_resource_path = '/objects/objectworkflows/tasks/{task_id}/actions';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'task_id'}) {
        my $_base_variable = "{" . "task_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'task_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_objectworkflows_tasks_task_id_actions_mdwaccept_post
#
# Accept Multi-item Workflow Task
#
# @param string $task_id The task id field value. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'task_id' => {
        data_type => 'string',
        description => 'The task id field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_objectworkflows_tasks_task_id_actions_mdwaccept_post' } = {
        summary => 'Accept Multi-item Workflow Task',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_objectworkflows_tasks_task_id_actions_mdwaccept_post {
    my ($self, %args) = @_;

    # verify the required parameter 'task_id' is set
    unless (exists $args{'task_id'}) {
      croak("Missing the required parameter 'task_id' when calling objects_objectworkflows_tasks_task_id_actions_mdwaccept_post");
    }

    # parse inputs
    my $_resource_path = '/objects/objectworkflows/tasks/{task_id}/actions/mdwaccept';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'task_id'}) {
        my $_base_variable = "{" . "task_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'task_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_objectworkflows_tasks_task_id_actions_mdwcomplete_post
#
# Complete Multi-item Workflow Task
#
# @param string $task_id The task id field value. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'task_id' => {
        data_type => 'string',
        description => 'The task id field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_objectworkflows_tasks_task_id_actions_mdwcomplete_post' } = {
        summary => 'Complete Multi-item Workflow Task',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_objectworkflows_tasks_task_id_actions_mdwcomplete_post {
    my ($self, %args) = @_;

    # verify the required parameter 'task_id' is set
    unless (exists $args{'task_id'}) {
      croak("Missing the required parameter 'task_id' when calling objects_objectworkflows_tasks_task_id_actions_mdwcomplete_post");
    }

    # parse inputs
    my $_resource_path = '/objects/objectworkflows/tasks/{task_id}/actions/mdwcomplete';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'task_id'}) {
        my $_base_variable = "{" . "task_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'task_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_objectworkflows_tasks_task_id_actions_mdwmanagecontent_post
#
# Manage Multi-Item Workflow Content
#
# @param string $task_id The task id field value. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'task_id' => {
        data_type => 'string',
        description => 'The task id field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_objectworkflows_tasks_task_id_actions_mdwmanagecontent_post' } = {
        summary => 'Manage Multi-Item Workflow Content',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_objectworkflows_tasks_task_id_actions_mdwmanagecontent_post {
    my ($self, %args) = @_;

    # verify the required parameter 'task_id' is set
    unless (exists $args{'task_id'}) {
      croak("Missing the required parameter 'task_id' when calling objects_objectworkflows_tasks_task_id_actions_mdwmanagecontent_post");
    }

    # parse inputs
    my $_resource_path = '/objects/objectworkflows/tasks/{task_id}/actions/mdwmanagecontent';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'task_id'}) {
        my $_base_variable = "{" . "task_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'task_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_objectworkflows_tasks_task_id_actions_mdwreassign_post
#
# Reassign Multi-item Workflow Task
#
# @param string $task_id The id of the task to reassign. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'task_id' => {
        data_type => 'string',
        description => 'The id of the task to reassign.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_objectworkflows_tasks_task_id_actions_mdwreassign_post' } = {
        summary => 'Reassign Multi-item Workflow Task',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_objectworkflows_tasks_task_id_actions_mdwreassign_post {
    my ($self, %args) = @_;

    # verify the required parameter 'task_id' is set
    unless (exists $args{'task_id'}) {
      croak("Missing the required parameter 'task_id' when calling objects_objectworkflows_tasks_task_id_actions_mdwreassign_post");
    }

    # parse inputs
    my $_resource_path = '/objects/objectworkflows/tasks/{task_id}/actions/mdwreassign';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'task_id'}) {
        my $_base_variable = "{" . "task_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'task_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_objectworkflows_tasks_task_id_actions_reassign_post
#
# Reassign Single Record Workflow Task
#
# @param string $task_id The id of the task to reassign. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'task_id' => {
        data_type => 'string',
        description => 'The id of the task to reassign.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_objectworkflows_tasks_task_id_actions_reassign_post' } = {
        summary => 'Reassign Single Record Workflow Task',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_objectworkflows_tasks_task_id_actions_reassign_post {
    my ($self, %args) = @_;

    # verify the required parameter 'task_id' is set
    unless (exists $args{'task_id'}) {
      croak("Missing the required parameter 'task_id' when calling objects_objectworkflows_tasks_task_id_actions_reassign_post");
    }

    # parse inputs
    my $_resource_path = '/objects/objectworkflows/tasks/{task_id}/actions/reassign';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'task_id'}) {
        my $_base_variable = "{" . "task_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'task_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_objectworkflows_tasks_task_id_actions_task_action_get
#
# Retrieve Workflow Task Action Details
#
# @param string $task_id The task id field value. (required)
# @param string $task_action The name of the task action retrieved from Retrieve Workflow Task Actions. (required)
# @param string $loc When localized (translated) strings are available, retrieve them by including loc&#x3D;true.  (optional)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'task_id' => {
        data_type => 'string',
        description => 'The task id field value.',
        required => '1',
    },
    'task_action' => {
        data_type => 'string',
        description => 'The name of the task action retrieved from Retrieve Workflow Task Actions.',
        required => '1',
    },
    'loc' => {
        data_type => 'string',
        description => 'When localized (translated) strings are available, retrieve them by including loc&#x3D;true. ',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_objectworkflows_tasks_task_id_actions_task_action_get' } = {
        summary => 'Retrieve Workflow Task Action Details',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_objectworkflows_tasks_task_id_actions_task_action_get {
    my ($self, %args) = @_;

    # verify the required parameter 'task_id' is set
    unless (exists $args{'task_id'}) {
      croak("Missing the required parameter 'task_id' when calling objects_objectworkflows_tasks_task_id_actions_task_action_get");
    }

    # verify the required parameter 'task_action' is set
    unless (exists $args{'task_action'}) {
      croak("Missing the required parameter 'task_action' when calling objects_objectworkflows_tasks_task_id_actions_task_action_get");
    }

    # parse inputs
    my $_resource_path = '/objects/objectworkflows/tasks/{task_id}/actions/{task_action}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'loc'}) {
        $query_params->{'loc'} = $self->{api_client}->to_query_value($args{'loc'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'task_id'}) {
        my $_base_variable = "{" . "task_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'task_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'task_action'}) {
        my $_base_variable = "{" . "task_action" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'task_action'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_objectworkflows_tasks_task_id_actions_undoaccept_post
#
# Undo Workflow Task Acceptance
#
# @param string $task_id The task id field value. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'task_id' => {
        data_type => 'string',
        description => 'The task id field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_objectworkflows_tasks_task_id_actions_undoaccept_post' } = {
        summary => 'Undo Workflow Task Acceptance',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_objectworkflows_tasks_task_id_actions_undoaccept_post {
    my ($self, %args) = @_;

    # verify the required parameter 'task_id' is set
    unless (exists $args{'task_id'}) {
      croak("Missing the required parameter 'task_id' when calling objects_objectworkflows_tasks_task_id_actions_undoaccept_post");
    }

    # parse inputs
    my $_resource_path = '/objects/objectworkflows/tasks/{task_id}/actions/undoaccept';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'task_id'}) {
        my $_base_variable = "{" . "task_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'task_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_objectworkflows_tasks_task_id_actions_updateduedate_post
#
# Update Workflow Task Due Date
#
# @param string $task_id The id of the task. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'task_id' => {
        data_type => 'string',
        description => 'The id of the task.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_objectworkflows_tasks_task_id_actions_updateduedate_post' } = {
        summary => 'Update Workflow Task Due Date',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_objectworkflows_tasks_task_id_actions_updateduedate_post {
    my ($self, %args) = @_;

    # verify the required parameter 'task_id' is set
    unless (exists $args{'task_id'}) {
      croak("Missing the required parameter 'task_id' when calling objects_objectworkflows_tasks_task_id_actions_updateduedate_post");
    }

    # parse inputs
    my $_resource_path = '/objects/objectworkflows/tasks/{task_id}/actions/updateduedate';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'task_id'}) {
        my $_base_variable = "{" . "task_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'task_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_objectworkflows_tasks_task_id_get
#
# Retrieve Workflow Task Details
#
# @param string $task_id The task id field value. (required)
# @param boolean $loc When localized (translated) strings are available, retrieve them by including loc&#x3D;true. (optional)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'task_id' => {
        data_type => 'string',
        description => 'The task id field value.',
        required => '1',
    },
    'loc' => {
        data_type => 'boolean',
        description => 'When localized (translated) strings are available, retrieve them by including loc&#x3D;true.',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_objectworkflows_tasks_task_id_get' } = {
        summary => 'Retrieve Workflow Task Details',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_objectworkflows_tasks_task_id_get {
    my ($self, %args) = @_;

    # verify the required parameter 'task_id' is set
    unless (exists $args{'task_id'}) {
      croak("Missing the required parameter 'task_id' when calling objects_objectworkflows_tasks_task_id_get");
    }

    # parse inputs
    my $_resource_path = '/objects/objectworkflows/tasks/{task_id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'loc'}) {
        $query_params->{'loc'} = $self->{api_client}->to_query_value($args{'loc'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'task_id'}) {
        my $_base_variable = "{" . "task_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'task_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_objectworkflows_workflow_id_actions_get
#
# Retrieve Workflow Actions
#
# @param string $workflow_id The workflow id field value. (required)
# @param string $loc When localized (translated) strings are available, retrieve them by including loc&#x3D;true.  (optional)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'workflow_id' => {
        data_type => 'string',
        description => 'The workflow id field value.',
        required => '1',
    },
    'loc' => {
        data_type => 'string',
        description => 'When localized (translated) strings are available, retrieve them by including loc&#x3D;true. ',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_objectworkflows_workflow_id_actions_get' } = {
        summary => 'Retrieve Workflow Actions',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_objectworkflows_workflow_id_actions_get {
    my ($self, %args) = @_;

    # verify the required parameter 'workflow_id' is set
    unless (exists $args{'workflow_id'}) {
      croak("Missing the required parameter 'workflow_id' when calling objects_objectworkflows_workflow_id_actions_get");
    }

    # parse inputs
    my $_resource_path = '/objects/objectworkflows/{workflow_id}/actions';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'loc'}) {
        $query_params->{'loc'} = $self->{api_client}->to_query_value($args{'loc'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'workflow_id'}) {
        my $_base_variable = "{" . "workflow_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'workflow_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_objectworkflows_workflow_id_actions_workflow_action_get
#
# Retrieve Workflow Action Details
#
# @param string $workflow_id The workflow id field value. (required)
# @param string $workflow_action The workflow action name retrieved from Retrieve Workflow Actions. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'workflow_id' => {
        data_type => 'string',
        description => 'The workflow id field value.',
        required => '1',
    },
    'workflow_action' => {
        data_type => 'string',
        description => 'The workflow action name retrieved from Retrieve Workflow Actions.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_objectworkflows_workflow_id_actions_workflow_action_get' } = {
        summary => 'Retrieve Workflow Action Details',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_objectworkflows_workflow_id_actions_workflow_action_get {
    my ($self, %args) = @_;

    # verify the required parameter 'workflow_id' is set
    unless (exists $args{'workflow_id'}) {
      croak("Missing the required parameter 'workflow_id' when calling objects_objectworkflows_workflow_id_actions_workflow_action_get");
    }

    # verify the required parameter 'workflow_action' is set
    unless (exists $args{'workflow_action'}) {
      croak("Missing the required parameter 'workflow_action' when calling objects_objectworkflows_workflow_id_actions_workflow_action_get");
    }

    # parse inputs
    my $_resource_path = '/objects/objectworkflows/{workflow_id}/actions/{workflow_action}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'workflow_id'}) {
        my $_base_variable = "{" . "workflow_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'workflow_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'workflow_action'}) {
        my $_base_variable = "{" . "workflow_action" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'workflow_action'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_objectworkflows_workflow_id_actions_workflow_action_post
#
# Initiate Workflow Action
#
# @param string $workflow_id The workflow id field value. (required)
# @param string $workflow_action The workflow action name retrieved from Retrieve Workflow Actions. (required)
# @param string $documents__sys Include the id or ids as a comma-separated list of the document(s) to be removed from a document workflow when using the removecontent action. If your workflow_action is remove_content, include the id of the document to remove the workflow. To remove multiple documents, use a comma-separated list of ids. (optional)
# @param string $authorization  (optional)
# @param string $content_type  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'workflow_id' => {
        data_type => 'string',
        description => 'The workflow id field value.',
        required => '1',
    },
    'workflow_action' => {
        data_type => 'string',
        description => 'The workflow action name retrieved from Retrieve Workflow Actions.',
        required => '1',
    },
    'documents__sys' => {
        data_type => 'string',
        description => 'Include the id or ids as a comma-separated list of the document(s) to be removed from a document workflow when using the removecontent action. If your workflow_action is remove_content, include the id of the document to remove the workflow. To remove multiple documents, use a comma-separated list of ids.',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_objectworkflows_workflow_id_actions_workflow_action_post' } = {
        summary => 'Initiate Workflow Action',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_objectworkflows_workflow_id_actions_workflow_action_post {
    my ($self, %args) = @_;

    # verify the required parameter 'workflow_id' is set
    unless (exists $args{'workflow_id'}) {
      croak("Missing the required parameter 'workflow_id' when calling objects_objectworkflows_workflow_id_actions_workflow_action_post");
    }

    # verify the required parameter 'workflow_action' is set
    unless (exists $args{'workflow_action'}) {
      croak("Missing the required parameter 'workflow_action' when calling objects_objectworkflows_workflow_id_actions_workflow_action_post");
    }

    # parse inputs
    my $_resource_path = '/objects/objectworkflows/{workflow_id}/actions/{workflow_action}';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'documents__sys'}) {
        $query_params->{'documents__sys'} = $self->{api_client}->to_query_value($args{'documents__sys'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'workflow_id'}) {
        my $_base_variable = "{" . "workflow_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'workflow_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'workflow_action'}) {
        my $_base_variable = "{" . "workflow_action" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'workflow_action'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_objectworkflows_workflow_id_get
#
# Retrieve Workflow Details
#
# @param string $workflow_id The workflow id field value. (required)
# @param boolean $loc When localized (translated) strings are available, retrieve them by including loc&#x3D;true. (optional)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'workflow_id' => {
        data_type => 'string',
        description => 'The workflow id field value.',
        required => '1',
    },
    'loc' => {
        data_type => 'boolean',
        description => 'When localized (translated) strings are available, retrieve them by including loc&#x3D;true.',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_objectworkflows_workflow_id_get' } = {
        summary => 'Retrieve Workflow Details',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_objectworkflows_workflow_id_get {
    my ($self, %args) = @_;

    # verify the required parameter 'workflow_id' is set
    unless (exists $args{'workflow_id'}) {
      croak("Missing the required parameter 'workflow_id' when calling objects_objectworkflows_workflow_id_get");
    }

    # parse inputs
    my $_resource_path = '/objects/objectworkflows/{workflow_id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'loc'}) {
        $query_params->{'loc'} = $self->{api_client}->to_query_value($args{'loc'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'workflow_id'}) {
        my $_base_variable = "{" . "workflow_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'workflow_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_picklists_get
#
# Retrieve All Picklists
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_picklists_get' } = {
        summary => 'Retrieve All Picklists',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_picklists_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/objects/picklists';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_picklists_picklist_name_get
#
# Retrieve Picklist Values
#
# @param string $picklist_name The picklist name field value (license_type__v, product_family__c, region__c, etc.) (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'picklist_name' => {
        data_type => 'string',
        description => 'The picklist name field value (license_type__v, product_family__c, region__c, etc.)',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_picklists_picklist_name_get' } = {
        summary => 'Retrieve Picklist Values',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_picklists_picklist_name_get {
    my ($self, %args) = @_;

    # verify the required parameter 'picklist_name' is set
    unless (exists $args{'picklist_name'}) {
      croak("Missing the required parameter 'picklist_name' when calling objects_picklists_picklist_name_get");
    }

    # parse inputs
    my $_resource_path = '/objects/picklists/{picklist_name}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'picklist_name'}) {
        my $_base_variable = "{" . "picklist_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'picklist_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_picklists_picklist_name_picklist_value_name_delete
#
# Inactivate Picklist Value
#
# @param string $picklist_name The picklist name field value (license_type__v, product_family__c, region__c, etc.) (required)
# @param string $picklist_value_name The picklist value name field value (north_america__c, south_america__c, etc.) (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'picklist_name' => {
        data_type => 'string',
        description => 'The picklist name field value (license_type__v, product_family__c, region__c, etc.)',
        required => '1',
    },
    'picklist_value_name' => {
        data_type => 'string',
        description => 'The picklist value name field value (north_america__c, south_america__c, etc.)',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_picklists_picklist_name_picklist_value_name_delete' } = {
        summary => 'Inactivate Picklist Value',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_picklists_picklist_name_picklist_value_name_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'picklist_name' is set
    unless (exists $args{'picklist_name'}) {
      croak("Missing the required parameter 'picklist_name' when calling objects_picklists_picklist_name_picklist_value_name_delete");
    }

    # verify the required parameter 'picklist_value_name' is set
    unless (exists $args{'picklist_value_name'}) {
      croak("Missing the required parameter 'picklist_value_name' when calling objects_picklists_picklist_name_picklist_value_name_delete");
    }

    # parse inputs
    my $_resource_path = '/objects/picklists/{picklist_name}/{picklist_value_name}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'picklist_name'}) {
        my $_base_variable = "{" . "picklist_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'picklist_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'picklist_value_name'}) {
        my $_base_variable = "{" . "picklist_value_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'picklist_value_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_picklists_picklist_name_picklist_value_name_put
#
# Update Picklist Value
#
# @param string $picklist_name The picklist name field value (license_type__v, product_family__c, region__c, etc.) (required)
# @param string $picklist_value_name The picklist value name field value (north_america__c, south_america__c, etc.) (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'picklist_name' => {
        data_type => 'string',
        description => 'The picklist name field value (license_type__v, product_family__c, region__c, etc.)',
        required => '1',
    },
    'picklist_value_name' => {
        data_type => 'string',
        description => 'The picklist value name field value (north_america__c, south_america__c, etc.)',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_picklists_picklist_name_picklist_value_name_put' } = {
        summary => 'Update Picklist Value',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_picklists_picklist_name_picklist_value_name_put {
    my ($self, %args) = @_;

    # verify the required parameter 'picklist_name' is set
    unless (exists $args{'picklist_name'}) {
      croak("Missing the required parameter 'picklist_name' when calling objects_picklists_picklist_name_picklist_value_name_put");
    }

    # verify the required parameter 'picklist_value_name' is set
    unless (exists $args{'picklist_value_name'}) {
      croak("Missing the required parameter 'picklist_value_name' when calling objects_picklists_picklist_name_picklist_value_name_put");
    }

    # parse inputs
    my $_resource_path = '/objects/picklists/{picklist_name}/{picklist_value_name}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'picklist_name'}) {
        my $_base_variable = "{" . "picklist_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'picklist_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'picklist_value_name'}) {
        my $_base_variable = "{" . "picklist_value_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'picklist_value_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_picklists_picklist_name_post
#
# Create Picklist Values
#
# @param string $picklist_name The picklist name field value (license_type__v, product_family__c, region__c, etc.) (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'picklist_name' => {
        data_type => 'string',
        description => 'The picklist name field value (license_type__v, product_family__c, region__c, etc.)',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_picklists_picklist_name_post' } = {
        summary => 'Create Picklist Values',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_picklists_picklist_name_post {
    my ($self, %args) = @_;

    # verify the required parameter 'picklist_name' is set
    unless (exists $args{'picklist_name'}) {
      croak("Missing the required parameter 'picklist_name' when calling objects_picklists_picklist_name_post");
    }

    # parse inputs
    my $_resource_path = '/objects/picklists/{picklist_name}';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'picklist_name'}) {
        my $_base_variable = "{" . "picklist_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'picklist_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_picklists_picklist_name_put
#
# Update Picklist Value Label
#
# @param string $picklist_name The picklist name field value (license_type__v, product_family__c, region__c, etc.) (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'picklist_name' => {
        data_type => 'string',
        description => 'The picklist name field value (license_type__v, product_family__c, region__c, etc.)',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_picklists_picklist_name_put' } = {
        summary => 'Update Picklist Value Label',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_picklists_picklist_name_put {
    my ($self, %args) = @_;

    # verify the required parameter 'picklist_name' is set
    unless (exists $args{'picklist_name'}) {
      croak("Missing the required parameter 'picklist_name' when calling objects_picklists_picklist_name_put");
    }

    # parse inputs
    my $_resource_path = '/objects/picklists/{picklist_name}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'picklist_name'}) {
        my $_base_variable = "{" . "picklist_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'picklist_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_sandbox_actions_buildproduction_post
#
# Build Production Vault
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_sandbox_actions_buildproduction_post' } = {
        summary => 'Build Production Vault',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_sandbox_actions_buildproduction_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/objects/sandbox/actions/buildproduction';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_sandbox_actions_promoteproduction_post
#
# Promote to Production
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_sandbox_actions_promoteproduction_post' } = {
        summary => 'Promote to Production',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_sandbox_actions_promoteproduction_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/objects/sandbox/actions/promoteproduction';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_sandbox_actions_recheckusage_post
#
# Recheck Sandbox Usage Limit
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_sandbox_actions_recheckusage_post' } = {
        summary => 'Recheck Sandbox Usage Limit',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_sandbox_actions_recheckusage_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/objects/sandbox/actions/recheckusage';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_sandbox_batch_changesize_post
#
# Change Sandbox Size
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_sandbox_batch_changesize_post' } = {
        summary => 'Change Sandbox Size',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_sandbox_batch_changesize_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/objects/sandbox/batch/changesize';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_sandbox_entitlements_set_post
#
# Set Sandbox Entitlements
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_sandbox_entitlements_set_post' } = {
        summary => 'Set Sandbox Entitlements',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_sandbox_entitlements_set_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/objects/sandbox/entitlements/set';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_sandbox_get
#
# Retrieve Sandboxes
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_sandbox_get' } = {
        summary => 'Retrieve Sandboxes',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_sandbox_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/objects/sandbox';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_sandbox_name_delete
#
# Delete Sandbox
#
# @param string $name The name of the sandbox vault to delete. This is the name which appears on the My Vaults page. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'The name of the sandbox vault to delete. This is the name which appears on the My Vaults page.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_sandbox_name_delete' } = {
        summary => 'Delete Sandbox',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_sandbox_name_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling objects_sandbox_name_delete");
    }

    # parse inputs
    my $_resource_path = '/objects/sandbox/{name}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_sandbox_post
#
# Create or Refresh Sandbox
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_sandbox_post' } = {
        summary => 'Create or Refresh Sandbox',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_sandbox_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/objects/sandbox';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_sandbox_snapshot_api_name_actions_update_post
#
# Update Sandbox Snapshot
#
# @param string $api_name The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'api_name' => {
        data_type => 'string',
        description => 'The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_sandbox_snapshot_api_name_actions_update_post' } = {
        summary => 'Update Sandbox Snapshot',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_sandbox_snapshot_api_name_actions_update_post {
    my ($self, %args) = @_;

    # verify the required parameter 'api_name' is set
    unless (exists $args{'api_name'}) {
      croak("Missing the required parameter 'api_name' when calling objects_sandbox_snapshot_api_name_actions_update_post");
    }

    # parse inputs
    my $_resource_path = '/objects/sandbox/snapshot/{api_name}/actions/update';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'api_name'}) {
        my $_base_variable = "{" . "api_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'api_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_sandbox_snapshot_api_name_actions_upgrade_post
#
# Upgrade Sandbox Snapshot
#
# @param string $api_name The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'api_name' => {
        data_type => 'string',
        description => 'The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_sandbox_snapshot_api_name_actions_upgrade_post' } = {
        summary => 'Upgrade Sandbox Snapshot',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_sandbox_snapshot_api_name_actions_upgrade_post {
    my ($self, %args) = @_;

    # verify the required parameter 'api_name' is set
    unless (exists $args{'api_name'}) {
      croak("Missing the required parameter 'api_name' when calling objects_sandbox_snapshot_api_name_actions_upgrade_post");
    }

    # parse inputs
    my $_resource_path = '/objects/sandbox/snapshot/{api_name}/actions/upgrade';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'api_name'}) {
        my $_base_variable = "{" . "api_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'api_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_sandbox_snapshot_api_name_delete
#
# Delete Sandbox Snapshot
#
# @param string $api_name The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'api_name' => {
        data_type => 'string',
        description => 'The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_sandbox_snapshot_api_name_delete' } = {
        summary => 'Delete Sandbox Snapshot',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_sandbox_snapshot_api_name_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'api_name' is set
    unless (exists $args{'api_name'}) {
      croak("Missing the required parameter 'api_name' when calling objects_sandbox_snapshot_api_name_delete");
    }

    # parse inputs
    my $_resource_path = '/objects/sandbox/snapshot/{api_name}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'api_name'}) {
        my $_base_variable = "{" . "api_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'api_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_sandbox_snapshot_get
#
# Retrieve Sandbox Snapshots
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_sandbox_snapshot_get' } = {
        summary => 'Retrieve Sandbox Snapshots',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_sandbox_snapshot_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/objects/sandbox/snapshot';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_sandbox_snapshot_post
#
# Create Sandbox Snapshot
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_sandbox_snapshot_post' } = {
        summary => 'Create Sandbox Snapshot',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_sandbox_snapshot_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/objects/sandbox/snapshot';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_sandbox_vault_id_actions_refresh_post
#
# Refresh Sandbox from Snapshot
#
# @param string $vault_id The Vault ID of the sandbox to be refreshed. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'vault_id' => {
        data_type => 'string',
        description => 'The Vault ID of the sandbox to be refreshed.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_sandbox_vault_id_actions_refresh_post' } = {
        summary => 'Refresh Sandbox from Snapshot',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_sandbox_vault_id_actions_refresh_post {
    my ($self, %args) = @_;

    # verify the required parameter 'vault_id' is set
    unless (exists $args{'vault_id'}) {
      croak("Missing the required parameter 'vault_id' when calling objects_sandbox_vault_id_actions_refresh_post");
    }

    # parse inputs
    my $_resource_path = '/objects/sandbox/{vault_id}/actions/refresh';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'vault_id'}) {
        my $_base_variable = "{" . "vault_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'vault_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_sandbox_vault_id_get
#
# Retrieve Sandbox Details by ID
#
# @param string $vault_id  (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'vault_id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_sandbox_vault_id_get' } = {
        summary => 'Retrieve Sandbox Details by ID',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_sandbox_vault_id_get {
    my ($self, %args) = @_;

    # verify the required parameter 'vault_id' is set
    unless (exists $args{'vault_id'}) {
      croak("Missing the required parameter 'vault_id' when calling objects_sandbox_vault_id_get");
    }

    # parse inputs
    my $_resource_path = '/objects/sandbox/{vault_id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'vault_id'}) {
        my $_base_variable = "{" . "vault_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'vault_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_securitypolicies_get
#
# Retrieve All Security Policies
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_securitypolicies_get' } = {
        summary => 'Retrieve All Security Policies',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_securitypolicies_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/objects/securitypolicies';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_securitypolicies_security_policy_name_get
#
# Retrieve Security Policy
#
# @param string $security_policy_name Security policy name__v field value (retrieved from previous request). This is typically a numeric value. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'security_policy_name' => {
        data_type => 'string',
        description => 'Security policy name__v field value (retrieved from previous request). This is typically a numeric value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_securitypolicies_security_policy_name_get' } = {
        summary => 'Retrieve Security Policy',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_securitypolicies_security_policy_name_get {
    my ($self, %args) = @_;

    # verify the required parameter 'security_policy_name' is set
    unless (exists $args{'security_policy_name'}) {
      croak("Missing the required parameter 'security_policy_name' when calling objects_securitypolicies_security_policy_name_get");
    }

    # parse inputs
    my $_resource_path = '/objects/securitypolicies/{security_policy_name}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'security_policy_name'}) {
        my $_base_variable = "{" . "security_policy_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'security_policy_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_users_get
#
# Retrieve All Users
#
# @param string $vaults Retrieve all users assigned to all Vaults in your domain. (optional)
# @param string $exclude_vault_membership Optional: Set to false to include vault_membership fields. If true or omitted, vault_membership fields are not included in the response. (optional)
# @param string $exclude_app_licensing Optional: Set to false to include app_licensing fields. If true or omitted, app_licensing fields are not included in the response. (optional)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'vaults' => {
        data_type => 'string',
        description => 'Retrieve all users assigned to all Vaults in your domain.',
        required => '0',
    },
    'exclude_vault_membership' => {
        data_type => 'string',
        description => 'Optional: Set to false to include vault_membership fields. If true or omitted, vault_membership fields are not included in the response.',
        required => '0',
    },
    'exclude_app_licensing' => {
        data_type => 'string',
        description => 'Optional: Set to false to include app_licensing fields. If true or omitted, app_licensing fields are not included in the response.',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_users_get' } = {
        summary => 'Retrieve All Users',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_users_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/objects/users/';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'vaults'}) {
        $query_params->{'vaults'} = $self->{api_client}->to_query_value($args{'vaults'});
    }

    # query params
    if ( exists $args{'exclude_vault_membership'}) {
        $query_params->{'exclude_vault_membership'} = $self->{api_client}->to_query_value($args{'exclude_vault_membership'});
    }

    # query params
    if ( exists $args{'exclude_app_licensing'}) {
        $query_params->{'exclude_app_licensing'} = $self->{api_client}->to_query_value($args{'exclude_app_licensing'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_users_id_get
#
# Retrieve User
#
# @param string $id The user id field value. Use the value me to get information for the currently authenticated user. (required)
# @param string $exclude_vault_membership Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response. (optional)
# @param string $exclude_app_licensing Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response. (optional)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The user id field value. Use the value me to get information for the currently authenticated user.',
        required => '1',
    },
    'exclude_vault_membership' => {
        data_type => 'string',
        description => 'Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response.',
        required => '0',
    },
    'exclude_app_licensing' => {
        data_type => 'string',
        description => 'Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response.',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_users_id_get' } = {
        summary => 'Retrieve User',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_users_id_get {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling objects_users_id_get");
    }

    # parse inputs
    my $_resource_path = '/objects/users/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'exclude_vault_membership'}) {
        $query_params->{'exclude_vault_membership'} = $self->{api_client}->to_query_value($args{'exclude_vault_membership'});
    }

    # query params
    if ( exists $args{'exclude_app_licensing'}) {
        $query_params->{'exclude_app_licensing'} = $self->{api_client}->to_query_value($args{'exclude_app_licensing'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_users_id_permissions_get
#
# Retrieve User Permissions
#
# @param string $id The ID of the user. Use the value me to retrieve information for the currently authenticated user. (required)
# @param string $filter Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below. (optional)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The ID of the user. Use the value me to retrieve information for the currently authenticated user.',
        required => '1',
    },
    'filter' => {
        data_type => 'string',
        description => 'Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below.',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_users_id_permissions_get' } = {
        summary => 'Retrieve User Permissions',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_users_id_permissions_get {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling objects_users_id_permissions_get");
    }

    # parse inputs
    my $_resource_path = '/objects/users/{id}/permissions';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'filter'}) {
        $query_params->{'filter'} = $self->{api_client}->to_query_value($args{'filter'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_users_id_put
#
# Update Single User
#
# @param string $id The user id field value. Use the value me to get information for the currently authenticated user. (required)
# @param string $authorization  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The user id field value. Use the value me to get information for the currently authenticated user.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_users_id_put' } = {
        summary => 'Update Single User',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_users_id_put {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling objects_users_id_put");
    }

    # parse inputs
    my $_resource_path = '/objects/users/{id}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_users_me_get
#
# Validate Session User
#
# @param string $exclude_vault_membership Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response. (optional)
# @param string $exclude_app_licensing Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response. (optional)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'exclude_vault_membership' => {
        data_type => 'string',
        description => 'Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response.',
        required => '0',
    },
    'exclude_app_licensing' => {
        data_type => 'string',
        description => 'Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response.',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_users_me_get' } = {
        summary => 'Validate Session User',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_users_me_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/objects/users/me';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'exclude_vault_membership'}) {
        $query_params->{'exclude_vault_membership'} = $self->{api_client}->to_query_value($args{'exclude_vault_membership'});
    }

    # query params
    if ( exists $args{'exclude_app_licensing'}) {
        $query_params->{'exclude_app_licensing'} = $self->{api_client}->to_query_value($args{'exclude_app_licensing'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_users_me_password_post
#
# Change My Password
#
# @param string $authorization  (optional)
# @param string $content_type  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_users_me_password_post' } = {
        summary => 'Change My Password',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_users_me_password_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/objects/users/me/password';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_users_me_permissions_get
#
# Retrieve My User Permissions
#
# @param string $filter Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below. (optional)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'filter' => {
        data_type => 'string',
        description => 'Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below.',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_users_me_permissions_get' } = {
        summary => 'Retrieve My User Permissions',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_users_me_permissions_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/objects/users/me/permissions';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'filter'}) {
        $query_params->{'filter'} = $self->{api_client}->to_query_value($args{'filter'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_users_me_put
#
# Update My User
#
# @param string $authorization  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_users_me_put' } = {
        summary => 'Update My User',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_users_me_put {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/objects/users/me';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_users_post
#
# Create Single User
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_users_post' } = {
        summary => 'Create Single User',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_users_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/objects/users';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_users_put
#
# Update Multiple Users
#
# @param string $authorization  (optional)
# @param string $content_type  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_users_put' } = {
        summary => 'Update Multiple Users',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_users_put {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/objects/users';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_users_user_id_delete
#
# Disable User
#
# @param string $user_id The user id field value.  (required)
# @param boolean $domain When true, this disables the user account in all vaults in the domain. (optional)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'user_id' => {
        data_type => 'string',
        description => 'The user id field value. ',
        required => '1',
    },
    'domain' => {
        data_type => 'boolean',
        description => 'When true, this disables the user account in all vaults in the domain.',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_users_user_id_delete' } = {
        summary => 'Disable User',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_users_user_id_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'user_id' is set
    unless (exists $args{'user_id'}) {
      croak("Missing the required parameter 'user_id' when calling objects_users_user_id_delete");
    }

    # parse inputs
    my $_resource_path = '/objects/users/{user_id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'domain'}) {
        $query_params->{'domain'} = $self->{api_client}->to_query_value($args{'domain'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'user_id'}) {
        my $_base_variable = "{" . "user_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'user_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_users_user_id_vault_membership_vault_id_put
#
# Update Vault Membership
#
# @param string $user_id The user id field value. (required)
# @param string $vault_id The system-managed id field value assigned to each vault in the domain. (required)
# @param string $authorization  (optional)
# @param string $content_type  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'user_id' => {
        data_type => 'string',
        description => 'The user id field value.',
        required => '1',
    },
    'vault_id' => {
        data_type => 'string',
        description => 'The system-managed id field value assigned to each vault in the domain.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_users_user_id_vault_membership_vault_id_put' } = {
        summary => 'Update Vault Membership',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_users_user_id_vault_membership_vault_id_put {
    my ($self, %args) = @_;

    # verify the required parameter 'user_id' is set
    unless (exists $args{'user_id'}) {
      croak("Missing the required parameter 'user_id' when calling objects_users_user_id_vault_membership_vault_id_put");
    }

    # verify the required parameter 'vault_id' is set
    unless (exists $args{'vault_id'}) {
      croak("Missing the required parameter 'vault_id' when calling objects_users_user_id_vault_membership_vault_id_put");
    }

    # parse inputs
    my $_resource_path = '/objects/users/{user_id}/vault_membership/{vault_id}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'user_id'}) {
        my $_base_variable = "{" . "user_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'user_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'vault_id'}) {
        my $_base_variable = "{" . "vault_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'vault_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_vault_actions_compare_post
#
# Vault Compare
#
# @param string $authorization  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_vault_actions_compare_post' } = {
        summary => 'Vault Compare',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_vault_actions_compare_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/objects/vault/actions/compare';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# objects_vault_actions_configreport_post
#
# Vault Configuration Report
#
# @param string $authorization  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'objects_vault_actions_configreport_post' } = {
        summary => 'Vault Configuration Report',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub objects_vault_actions_configreport_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/objects/vault/actions/configreport';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# query_components_post
#
# Component Definition Query
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'query_components_post' } = {
        summary => 'Component Definition Query',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub query_components_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/query/components';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# query_next_page_post
#
# Next Page URL
#
# @param string $next_page  (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param boolean $x_vault_api_describe_query  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'next_page' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_describe_query' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'query_next_page_post' } = {
        summary => 'Next Page URL',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub query_next_page_post {
    my ($self, %args) = @_;

    # verify the required parameter 'next_page' is set
    unless (exists $args{'next_page'}) {
      croak("Missing the required parameter 'next_page' when calling query_next_page_post");
    }

    # parse inputs
    my $_resource_path = '/query/{next_page}';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_describe_query'}) {
        $header_params->{'X-VaultAPI-DescribeQuery'} = $self->{api_client}->to_header_value($args{'x_vault_api_describe_query'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'next_page'}) {
        my $_base_variable = "{" . "next_page" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'next_page'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# query_post
#
# Submitting a Query
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param boolean $x_vault_api_describe_query  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_describe_query' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'query_post' } = {
        summary => 'Submitting a Query',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub query_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/query';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_describe_query'}) {
        $header_params->{'X-VaultAPI-DescribeQuery'} = $self->{api_client}->to_header_value($args{'x_vault_api_describe_query'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# query_previous_page_post
#
# Previous Page URL
#
# @param string $previous_page  (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param boolean $x_vault_api_describe_query  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'previous_page' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_describe_query' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'query_previous_page_post' } = {
        summary => 'Previous Page URL',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub query_previous_page_post {
    my ($self, %args) = @_;

    # verify the required parameter 'previous_page' is set
    unless (exists $args{'previous_page'}) {
      croak("Missing the required parameter 'previous_page' when calling query_previous_page_post");
    }

    # parse inputs
    my $_resource_path = '/query/{previous_page}';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_describe_query'}) {
        $header_params->{'X-VaultAPI-DescribeQuery'} = $self->{api_client}->to_header_value($args{'x_vault_api_describe_query'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'previous_page'}) {
        my $_base_variable = "{" . "previous_page" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'previous_page'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# scim_v2_me_get
#
# Retrieve Current User with SCIM
#
# @param string $attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned. (optional)
# @param string $excluded_attributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded. (optional)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'attributes' => {
        data_type => 'string',
        description => 'Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.',
        required => '0',
    },
    'excluded_attributes' => {
        data_type => 'string',
        description => 'Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'scim_v2_me_get' } = {
        summary => 'Retrieve Current User with SCIM',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub scim_v2_me_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/scim/v2/Me';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'attributes'}) {
        $query_params->{'attributes'} = $self->{api_client}->to_query_value($args{'attributes'});
    }

    # query params
    if ( exists $args{'excluded_attributes'}) {
        $query_params->{'excludedAttributes'} = $self->{api_client}->to_query_value($args{'excluded_attributes'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# scim_v2_me_put
#
# Update Current User with SCIM
#
# @param string $attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned. (optional)
# @param string $excluded_attributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded. (optional)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'attributes' => {
        data_type => 'string',
        description => 'Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.',
        required => '0',
    },
    'excluded_attributes' => {
        data_type => 'string',
        description => 'Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'scim_v2_me_put' } = {
        summary => 'Update Current User with SCIM',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub scim_v2_me_put {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/scim/v2/Me';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'attributes'}) {
        $query_params->{'attributes'} = $self->{api_client}->to_query_value($args{'attributes'});
    }

    # query params
    if ( exists $args{'excluded_attributes'}) {
        $query_params->{'excludedAttributes'} = $self->{api_client}->to_query_value($args{'excluded_attributes'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# scim_v2_resource_types_get
#
# Retrieve All SCIM Resource Types
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'scim_v2_resource_types_get' } = {
        summary => 'Retrieve All SCIM Resource Types',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub scim_v2_resource_types_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/scim/v2/ResourceTypes';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# scim_v2_resource_types_type_get
#
# Retrieve Single SCIM Resource Type
#
# @param string $type A specific resource type. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the id value. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'type' => {
        data_type => 'string',
        description => 'A specific resource type. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the id value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'scim_v2_resource_types_type_get' } = {
        summary => 'Retrieve Single SCIM Resource Type',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub scim_v2_resource_types_type_get {
    my ($self, %args) = @_;

    # verify the required parameter 'type' is set
    unless (exists $args{'type'}) {
      croak("Missing the required parameter 'type' when calling scim_v2_resource_types_type_get");
    }

    # parse inputs
    my $_resource_path = '/scim/v2/ResourceTypes/{type}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'type'}) {
        my $_base_variable = "{" . "type" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'type'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# scim_v2_schemas_get
#
# Retrieve All SCIM Schema Information
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'scim_v2_schemas_get' } = {
        summary => 'Retrieve All SCIM Schema Information',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub scim_v2_schemas_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/scim/v2/Schemas';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# scim_v2_schemas_id_get
#
# Retrieve Single SCIM Schema Information
#
# @param string $id The ID of a specific schema. For example, urn:ietf:params:scim:schemas:extension:veevavault:2.0:User. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The ID of a specific schema. For example, urn:ietf:params:scim:schemas:extension:veevavault:2.0:User.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'scim_v2_schemas_id_get' } = {
        summary => 'Retrieve Single SCIM Schema Information',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub scim_v2_schemas_id_get {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling scim_v2_schemas_id_get");
    }

    # parse inputs
    my $_resource_path = '/scim/v2/Schemas/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# scim_v2_service_provider_config_get
#
# Retrieve SCIM Provider
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'scim_v2_service_provider_config_get' } = {
        summary => 'Retrieve SCIM Provider',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub scim_v2_service_provider_config_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/scim/v2/ServiceProviderConfig';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# scim_v2_type_get
#
# Retrieve SCIM Resources
#
# @param string $type The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value. (required)
# @param string $filter Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \&quot;{value}\&quot;. For example, to filter for a particular user name, userName eq \&quot;john\&quot;. Complex expressions are not supported, and eq is the only supported operator. (optional)
# @param string $attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned. (optional)
# @param string $excluded_attributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded. (optional)
# @param string $sort_by Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage (optional)
# @param string $sort_order Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000. (optional)
# @param string $start_index Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1. (optional)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'type' => {
        data_type => 'string',
        description => 'The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value.',
        required => '1',
    },
    'filter' => {
        data_type => 'string',
        description => 'Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \&quot;{value}\&quot;. For example, to filter for a particular user name, userName eq \&quot;john\&quot;. Complex expressions are not supported, and eq is the only supported operator.',
        required => '0',
    },
    'attributes' => {
        data_type => 'string',
        description => 'Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.',
        required => '0',
    },
    'excluded_attributes' => {
        data_type => 'string',
        description => 'Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.',
        required => '0',
    },
    'sort_by' => {
        data_type => 'string',
        description => 'Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage',
        required => '0',
    },
    'sort_order' => {
        data_type => 'string',
        description => 'Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000.',
        required => '0',
    },
    'start_index' => {
        data_type => 'string',
        description => 'Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1.',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'scim_v2_type_get' } = {
        summary => 'Retrieve SCIM Resources',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub scim_v2_type_get {
    my ($self, %args) = @_;

    # verify the required parameter 'type' is set
    unless (exists $args{'type'}) {
      croak("Missing the required parameter 'type' when calling scim_v2_type_get");
    }

    # parse inputs
    my $_resource_path = '/scim/v2/{type}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'filter'}) {
        $query_params->{'filter'} = $self->{api_client}->to_query_value($args{'filter'});
    }

    # query params
    if ( exists $args{'attributes'}) {
        $query_params->{'attributes'} = $self->{api_client}->to_query_value($args{'attributes'});
    }

    # query params
    if ( exists $args{'excluded_attributes'}) {
        $query_params->{'excludedAttributes'} = $self->{api_client}->to_query_value($args{'excluded_attributes'});
    }

    # query params
    if ( exists $args{'sort_by'}) {
        $query_params->{'sortBy'} = $self->{api_client}->to_query_value($args{'sort_by'});
    }

    # query params
    if ( exists $args{'sort_order'}) {
        $query_params->{'sortOrder'} = $self->{api_client}->to_query_value($args{'sort_order'});
    }

    # query params
    if ( exists $args{'start_index'}) {
        $query_params->{'startIndex'} = $self->{api_client}->to_query_value($args{'start_index'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'type'}) {
        my $_base_variable = "{" . "type" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'type'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# scim_v2_type_id_get
#
# Retrieve Single SCIM Resource
#
# @param string $type The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value. (required)
# @param string $id The ID of the resource to retrieve. You can retrieve all resource IDs from a particular resource type with the Retrieve SCIM Resources endpoint. For example, business_admin__v. (required)
# @param string $attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned. (optional)
# @param string $excluded_attributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded. (optional)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'type' => {
        data_type => 'string',
        description => 'The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The ID of the resource to retrieve. You can retrieve all resource IDs from a particular resource type with the Retrieve SCIM Resources endpoint. For example, business_admin__v.',
        required => '1',
    },
    'attributes' => {
        data_type => 'string',
        description => 'Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.',
        required => '0',
    },
    'excluded_attributes' => {
        data_type => 'string',
        description => 'Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'scim_v2_type_id_get' } = {
        summary => 'Retrieve Single SCIM Resource',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub scim_v2_type_id_get {
    my ($self, %args) = @_;

    # verify the required parameter 'type' is set
    unless (exists $args{'type'}) {
      croak("Missing the required parameter 'type' when calling scim_v2_type_id_get");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling scim_v2_type_id_get");
    }

    # parse inputs
    my $_resource_path = '/scim/v2/{type}/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'attributes'}) {
        $query_params->{'attributes'} = $self->{api_client}->to_query_value($args{'attributes'});
    }

    # query params
    if ( exists $args{'excluded_attributes'}) {
        $query_params->{'excludedAttributes'} = $self->{api_client}->to_query_value($args{'excluded_attributes'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'type'}) {
        my $_base_variable = "{" . "type" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'type'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# scim_v2_users_get
#
# Retrieve All Users with SCIM
#
# @param string $filter Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \&quot;{value}\&quot;. For example, to filter for a particular user name, userName eq \&quot;john\&quot;. Complex expressions are not supported, and eq is the only supported operator. (optional)
# @param string $attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned. (optional)
# @param string $excluded_attributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded. (optional)
# @param string $sort_by Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage (optional)
# @param string $sort_order Optional: Specify the order in which the sortBy parameter is applied. Allowed values are ascending or descending. If omitted, defaults to ascending. (optional)
# @param string $count Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000. (optional)
# @param string $start_index Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1. (optional)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'filter' => {
        data_type => 'string',
        description => 'Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \&quot;{value}\&quot;. For example, to filter for a particular user name, userName eq \&quot;john\&quot;. Complex expressions are not supported, and eq is the only supported operator.',
        required => '0',
    },
    'attributes' => {
        data_type => 'string',
        description => 'Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.',
        required => '0',
    },
    'excluded_attributes' => {
        data_type => 'string',
        description => 'Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.',
        required => '0',
    },
    'sort_by' => {
        data_type => 'string',
        description => 'Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage',
        required => '0',
    },
    'sort_order' => {
        data_type => 'string',
        description => 'Optional: Specify the order in which the sortBy parameter is applied. Allowed values are ascending or descending. If omitted, defaults to ascending.',
        required => '0',
    },
    'count' => {
        data_type => 'string',
        description => 'Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000.',
        required => '0',
    },
    'start_index' => {
        data_type => 'string',
        description => 'Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1.',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'scim_v2_users_get' } = {
        summary => 'Retrieve All Users with SCIM',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub scim_v2_users_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/scim/v2/Users';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'filter'}) {
        $query_params->{'filter'} = $self->{api_client}->to_query_value($args{'filter'});
    }

    # query params
    if ( exists $args{'attributes'}) {
        $query_params->{'attributes'} = $self->{api_client}->to_query_value($args{'attributes'});
    }

    # query params
    if ( exists $args{'excluded_attributes'}) {
        $query_params->{'excludedAttributes'} = $self->{api_client}->to_query_value($args{'excluded_attributes'});
    }

    # query params
    if ( exists $args{'sort_by'}) {
        $query_params->{'sortBy'} = $self->{api_client}->to_query_value($args{'sort_by'});
    }

    # query params
    if ( exists $args{'sort_order'}) {
        $query_params->{'sortOrder'} = $self->{api_client}->to_query_value($args{'sort_order'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'start_index'}) {
        $query_params->{'startIndex'} = $self->{api_client}->to_query_value($args{'start_index'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# scim_v2_users_id_get
#
# Retrieve Single User with SCIM
#
# @param string $id The id of the user you wish to update. (required)
# @param string $filter Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \&quot;{value}\&quot;. For example, to filter for a particular user name, userName eq \&quot;john\&quot;. Complex expressions are not supported, and eq is the only supported operator. (optional)
# @param string $attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned. (optional)
# @param string $excluded_attributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded. (optional)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The id of the user you wish to update.',
        required => '1',
    },
    'filter' => {
        data_type => 'string',
        description => 'Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \&quot;{value}\&quot;. For example, to filter for a particular user name, userName eq \&quot;john\&quot;. Complex expressions are not supported, and eq is the only supported operator.',
        required => '0',
    },
    'attributes' => {
        data_type => 'string',
        description => 'Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.',
        required => '0',
    },
    'excluded_attributes' => {
        data_type => 'string',
        description => 'Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'scim_v2_users_id_get' } = {
        summary => 'Retrieve Single User with SCIM',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub scim_v2_users_id_get {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling scim_v2_users_id_get");
    }

    # parse inputs
    my $_resource_path = '/scim/v2/Users/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'filter'}) {
        $query_params->{'filter'} = $self->{api_client}->to_query_value($args{'filter'});
    }

    # query params
    if ( exists $args{'attributes'}) {
        $query_params->{'attributes'} = $self->{api_client}->to_query_value($args{'attributes'});
    }

    # query params
    if ( exists $args{'excluded_attributes'}) {
        $query_params->{'excludedAttributes'} = $self->{api_client}->to_query_value($args{'excluded_attributes'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# scim_v2_users_id_put
#
# Update User with SCIM
#
# @param string $id The id of the user you wish to update. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The id of the user you wish to update.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'scim_v2_users_id_put' } = {
        summary => 'Update User with SCIM',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub scim_v2_users_id_put {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling scim_v2_users_id_put");
    }

    # parse inputs
    my $_resource_path = '/scim/v2/Users/{id}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# scim_v2_users_post
#
# Create User with SCIM
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'scim_v2_users_post' } = {
        summary => 'Create User with SCIM',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub scim_v2_users_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/scim/v2/Users';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# services_certificate_cert_id_get
#
# Retrieve Signing Certificate
#
# @param string $cert_id The cert_id is provided in each Spark message in the X-VaultAPISignature-CertificateId header. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'cert_id' => {
        data_type => 'string',
        description => 'The cert_id is provided in each Spark message in the X-VaultAPISignature-CertificateId header.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'services_certificate_cert_id_get' } = {
        summary => 'Retrieve Signing Certificate',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub services_certificate_cert_id_get {
    my ($self, %args) = @_;

    # verify the required parameter 'cert_id' is set
    unless (exists $args{'cert_id'}) {
      croak("Missing the required parameter 'cert_id' when calling services_certificate_cert_id_get");
    }

    # parse inputs
    my $_resource_path = '/services/certificate/{cert_id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'cert_id'}) {
        my $_base_variable = "{" . "cert_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'cert_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# services_configuration_mode_actions_disable_post
#
# Disable Configuration Mode
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'services_configuration_mode_actions_disable_post' } = {
        summary => 'Disable Configuration Mode',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub services_configuration_mode_actions_disable_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/services/configuration_mode/actions/disable';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# services_configuration_mode_actions_enable_post
#
# Enable Configuration Mode
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'services_configuration_mode_actions_enable_post' } = {
        summary => 'Enable Configuration Mode',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub services_configuration_mode_actions_enable_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/services/configuration_mode/actions/enable';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# services_directdata_files_get
#
# Retrieve Available Direct Data Files
#
# @param string $extract_type The Direct Data file type: incremental_directdata, full_directdata, or log_directdata. If omitted, returns all files. (optional)
# @param int $start_time Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 7AM on January 15, 2024 would use 2024-01-15T07:00:00Z. If omitted, defaults to the Vault’s creation date and time. (optional)
# @param int $stop_time Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 9AM on January 15, 2024 would use 2024-01-15T09:00:00Z. If omitted, defaults to today’s date and current time. (optional)
# @param string $accept  (optional)
# @param string $authorization  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'extract_type' => {
        data_type => 'string',
        description => 'The Direct Data file type: incremental_directdata, full_directdata, or log_directdata. If omitted, returns all files.',
        required => '0',
    },
    'start_time' => {
        data_type => 'int',
        description => 'Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 7AM on January 15, 2024 would use 2024-01-15T07:00:00Z. If omitted, defaults to the Vault’s creation date and time.',
        required => '0',
    },
    'stop_time' => {
        data_type => 'int',
        description => 'Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 9AM on January 15, 2024 would use 2024-01-15T09:00:00Z. If omitted, defaults to today’s date and current time.',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'services_directdata_files_get' } = {
        summary => 'Retrieve Available Direct Data Files',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub services_directdata_files_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/services/directdata/files';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'extract_type'}) {
        $query_params->{'extract_type'} = $self->{api_client}->to_query_value($args{'extract_type'});
    }

    # query params
    if ( exists $args{'start_time'}) {
        $query_params->{'start_time'} = $self->{api_client}->to_query_value($args{'start_time'});
    }

    # query params
    if ( exists $args{'stop_time'}) {
        $query_params->{'stop_time'} = $self->{api_client}->to_query_value($args{'stop_time'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# services_directdata_files_name_get
#
# Download Direct Data File
#
# @param string $name The name of the Direct Data file part. Obtain this from the Retrieve Available Direct Data Files request. For example, 146478-20240213-0000-F.001. (required)
# @param string $accept  (optional)
# @param string $authorization  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'The name of the Direct Data file part. Obtain this from the Retrieve Available Direct Data Files request. For example, 146478-20240213-0000-F.001.',
        required => '1',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'services_directdata_files_name_get' } = {
        summary => 'Download Direct Data File',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub services_directdata_files_name_get {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling services_directdata_files_name_get");
    }

    # parse inputs
    my $_resource_path = '/services/directdata/files/{name}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# services_file_staging_items_content_item_get
#
# Download Item Content
#
# @param string $item The absolute path to a file or folder. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $range Optional: Specifies a partial range of bytes to include in the upload. Maximum 50 MB. Must be in the format &#x60;bytes&#x3D;{min}-{max}&#x60;. For example, &#x60;bytes&#x3D;0-1000&#x60;. (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'item' => {
        data_type => 'string',
        description => 'The absolute path to a file or folder. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'range' => {
        data_type => 'string',
        description => 'Optional: Specifies a partial range of bytes to include in the upload. Maximum 50 MB. Must be in the format &#x60;bytes&#x3D;{min}-{max}&#x60;. For example, &#x60;bytes&#x3D;0-1000&#x60;.',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'services_file_staging_items_content_item_get' } = {
        summary => 'Download Item Content',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub services_file_staging_items_content_item_get {
    my ($self, %args) = @_;

    # verify the required parameter 'item' is set
    unless (exists $args{'item'}) {
      croak("Missing the required parameter 'item' when calling services_file_staging_items_content_item_get");
    }

    # parse inputs
    my $_resource_path = '/services/file_staging/items/content/{item}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'range'}) {
        $header_params->{'Range'} = $self->{api_client}->to_header_value($args{'range'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'item'}) {
        my $_base_variable = "{" . "item" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'item'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# services_file_staging_items_item_delete
#
# Delete File or Folder
#
# @param string $item The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory. (required)
# @param string $recursive Applicable to deleting folders only. If true, the request will delete the contents of a folder and all subfolders. The default is false. (optional)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'item' => {
        data_type => 'string',
        description => 'The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.',
        required => '1',
    },
    'recursive' => {
        data_type => 'string',
        description => 'Applicable to deleting folders only. If true, the request will delete the contents of a folder and all subfolders. The default is false.',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'services_file_staging_items_item_delete' } = {
        summary => 'Delete File or Folder',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub services_file_staging_items_item_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'item' is set
    unless (exists $args{'item'}) {
      croak("Missing the required parameter 'item' when calling services_file_staging_items_item_delete");
    }

    # parse inputs
    my $_resource_path = '/services/file_staging/items/{item}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'recursive'}) {
        $query_params->{'recursive'} = $self->{api_client}->to_query_value($args{'recursive'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'item'}) {
        my $_base_variable = "{" . "item" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'item'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# services_file_staging_items_item_get
#
# List Items at a Path
#
# @param string $item The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory. (required)
# @param string $recursive If true, the response will contain the contents of all subfolders. If not specified, the default value is false. (optional)
# @param string $limit Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000. (optional)
# @param string $format_result If set to csv, the response includes a job_id. Use the Job ID value to retrieve the status and results of the request. (optional)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'item' => {
        data_type => 'string',
        description => 'The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.',
        required => '1',
    },
    'recursive' => {
        data_type => 'string',
        description => 'If true, the response will contain the contents of all subfolders. If not specified, the default value is false.',
        required => '0',
    },
    'limit' => {
        data_type => 'string',
        description => 'Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000.',
        required => '0',
    },
    'format_result' => {
        data_type => 'string',
        description => 'If set to csv, the response includes a job_id. Use the Job ID value to retrieve the status and results of the request.',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'services_file_staging_items_item_get' } = {
        summary => 'List Items at a Path',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub services_file_staging_items_item_get {
    my ($self, %args) = @_;

    # verify the required parameter 'item' is set
    unless (exists $args{'item'}) {
      croak("Missing the required parameter 'item' when calling services_file_staging_items_item_get");
    }

    # parse inputs
    my $_resource_path = '/services/file_staging/items/{item}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'recursive'}) {
        $query_params->{'recursive'} = $self->{api_client}->to_query_value($args{'recursive'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'format_result'}) {
        $query_params->{'format_result'} = $self->{api_client}->to_query_value($args{'format_result'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'item'}) {
        my $_base_variable = "{" . "item" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'item'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# services_file_staging_items_item_put
#
# Update Folder or File
#
# @param string $item The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'item' => {
        data_type => 'string',
        description => 'The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'services_file_staging_items_item_put' } = {
        summary => 'Update Folder or File',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub services_file_staging_items_item_put {
    my ($self, %args) = @_;

    # verify the required parameter 'item' is set
    unless (exists $args{'item'}) {
      croak("Missing the required parameter 'item' when calling services_file_staging_items_item_put");
    }

    # parse inputs
    my $_resource_path = '/services/file_staging/items/{item}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'item'}) {
        my $_base_variable = "{" . "item" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'item'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# services_file_staging_items_post
#
# Create Folder or File
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_md5 Optional: The MD5 checksum of the file being uploaded. (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_md5' => {
        data_type => 'string',
        description => 'Optional: The MD5 checksum of the file being uploaded.',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'services_file_staging_items_post' } = {
        summary => 'Create Folder or File',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub services_file_staging_items_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/services/file_staging/items';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_md5'}) {
        $header_params->{'Content-MD5'} = $self->{api_client}->to_header_value($args{'content_md5'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# services_file_staging_upload_get
#
# List Upload Sessions
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'services_file_staging_upload_get' } = {
        summary => 'List Upload Sessions',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub services_file_staging_upload_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/services/file_staging/upload/';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# services_file_staging_upload_post
#
# Create Resumable Upload Session
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'services_file_staging_upload_post' } = {
        summary => 'Create Resumable Upload Session',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub services_file_staging_upload_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/services/file_staging/upload';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# services_file_staging_upload_upload_session_id_delete
#
# Abort Upload Session
#
# @param string $upload_session_id  (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'upload_session_id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'services_file_staging_upload_upload_session_id_delete' } = {
        summary => 'Abort Upload Session',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub services_file_staging_upload_upload_session_id_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'upload_session_id' is set
    unless (exists $args{'upload_session_id'}) {
      croak("Missing the required parameter 'upload_session_id' when calling services_file_staging_upload_upload_session_id_delete");
    }

    # parse inputs
    my $_resource_path = '/services/file_staging/upload/{upload_session_id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'upload_session_id'}) {
        my $_base_variable = "{" . "upload_session_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'upload_session_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# services_file_staging_upload_upload_session_id_get
#
# Get Upload Session Details
#
# @param string $upload_session_id  (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'upload_session_id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'services_file_staging_upload_upload_session_id_get' } = {
        summary => 'Get Upload Session Details',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub services_file_staging_upload_upload_session_id_get {
    my ($self, %args) = @_;

    # verify the required parameter 'upload_session_id' is set
    unless (exists $args{'upload_session_id'}) {
      croak("Missing the required parameter 'upload_session_id' when calling services_file_staging_upload_upload_session_id_get");
    }

    # parse inputs
    my $_resource_path = '/services/file_staging/upload/{upload_session_id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'upload_session_id'}) {
        my $_base_variable = "{" . "upload_session_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'upload_session_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# services_file_staging_upload_upload_session_id_parts_get
#
# List File Parts Uploaded to Session
#
# @param string $upload_session_id  (required)
# @param string $limit Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000. (optional)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'upload_session_id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'limit' => {
        data_type => 'string',
        description => 'Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000.',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'services_file_staging_upload_upload_session_id_parts_get' } = {
        summary => 'List File Parts Uploaded to Session',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub services_file_staging_upload_upload_session_id_parts_get {
    my ($self, %args) = @_;

    # verify the required parameter 'upload_session_id' is set
    unless (exists $args{'upload_session_id'}) {
      croak("Missing the required parameter 'upload_session_id' when calling services_file_staging_upload_upload_session_id_parts_get");
    }

    # parse inputs
    my $_resource_path = '/services/file_staging/upload/{upload_session_id}/parts';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'upload_session_id'}) {
        my $_base_variable = "{" . "upload_session_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'upload_session_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# services_file_staging_upload_upload_session_id_post
#
# Commit Upload Session
#
# @param string $upload_session_id  (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'upload_session_id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'services_file_staging_upload_upload_session_id_post' } = {
        summary => 'Commit Upload Session',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub services_file_staging_upload_upload_session_id_post {
    my ($self, %args) = @_;

    # verify the required parameter 'upload_session_id' is set
    unless (exists $args{'upload_session_id'}) {
      croak("Missing the required parameter 'upload_session_id' when calling services_file_staging_upload_upload_session_id_post");
    }

    # parse inputs
    my $_resource_path = '/services/file_staging/upload/{upload_session_id}';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'upload_session_id'}) {
        my $_base_variable = "{" . "upload_session_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'upload_session_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# services_file_staging_upload_upload_session_id_put
#
# Upload to a Session
#
# @param string $upload_session_id  (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_file_part_number The part number, which uniquely identifies a file part and defines its position within the file as a whole. If a part is uploaded using a part number that has already been used, Vault overwrites the previously uploaded file part. You must upload parts in numerical order. For example, you cannot upload part 3 without first uploading parts 1 and 2. (optional)
# @param string $content_md5 Optional: The MD5 checksum of the file part being uploaded. (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'upload_session_id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_file_part_number' => {
        data_type => 'string',
        description => 'The part number, which uniquely identifies a file part and defines its position within the file as a whole. If a part is uploaded using a part number that has already been used, Vault overwrites the previously uploaded file part. You must upload parts in numerical order. For example, you cannot upload part 3 without first uploading parts 1 and 2.',
        required => '0',
    },
    'content_md5' => {
        data_type => 'string',
        description => 'Optional: The MD5 checksum of the file part being uploaded.',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'services_file_staging_upload_upload_session_id_put' } = {
        summary => 'Upload to a Session',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub services_file_staging_upload_upload_session_id_put {
    my ($self, %args) = @_;

    # verify the required parameter 'upload_session_id' is set
    unless (exists $args{'upload_session_id'}) {
      croak("Missing the required parameter 'upload_session_id' when calling services_file_staging_upload_upload_session_id_put");
    }

    # parse inputs
    my $_resource_path = '/services/file_staging/upload/{upload_session_id}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_file_part_number'}) {
        $header_params->{'X-VaultAPI-FilePartNumber'} = $self->{api_client}->to_header_value($args{'x_vault_api_file_part_number'});
    }

    # header params
    if ( exists $args{'content_md5'}) {
        $header_params->{'Content-MD5'} = $self->{api_client}->to_header_value($args{'content_md5'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'upload_session_id'}) {
        my $_base_variable = "{" . "upload_session_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'upload_session_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# services_jobs_histories_get
#
# Retrieve Job Histories
#
# @param string $start_date Sets the date to start retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job. (optional)
# @param string $end_date Sets the date to end retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time. (optional)
# @param string $status Filter to only retrieve jobs in a certain status. Allowed values are success, errors_encountered, failed_to_run, missed_schedule, cancelled. If omitted, retrieves all statuses. (optional)
# @param string $limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50. (optional)
# @param string $offset Paginate the results displayed per page by specifying the amount of offset from the first job history returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. (optional)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'start_date' => {
        data_type => 'string',
        description => 'Sets the date to start retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job.',
        required => '0',
    },
    'end_date' => {
        data_type => 'string',
        description => 'Sets the date to end retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time.',
        required => '0',
    },
    'status' => {
        data_type => 'string',
        description => 'Filter to only retrieve jobs in a certain status. Allowed values are success, errors_encountered, failed_to_run, missed_schedule, cancelled. If omitted, retrieves all statuses.',
        required => '0',
    },
    'limit' => {
        data_type => 'string',
        description => 'Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50.',
        required => '0',
    },
    'offset' => {
        data_type => 'string',
        description => 'Paginate the results displayed per page by specifying the amount of offset from the first job history returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51.',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'services_jobs_histories_get' } = {
        summary => 'Retrieve Job Histories',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub services_jobs_histories_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/services/jobs/histories';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'start_date'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'end_date'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'status'}) {
        $query_params->{'status'} = $self->{api_client}->to_query_value($args{'status'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# services_jobs_job_id_errors_get
#
# Retrieve Import Bulk Translation File Job Errors
#
# @param string $job_id The id value of the requested import job. This was returned from the Import Bulk Translation File request. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'job_id' => {
        data_type => 'string',
        description => 'The id value of the requested import job. This was returned from the Import Bulk Translation File request.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'services_jobs_job_id_errors_get' } = {
        summary => 'Retrieve Import Bulk Translation File Job Errors',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub services_jobs_job_id_errors_get {
    my ($self, %args) = @_;

    # verify the required parameter 'job_id' is set
    unless (exists $args{'job_id'}) {
      croak("Missing the required parameter 'job_id' when calling services_jobs_job_id_errors_get");
    }

    # parse inputs
    my $_resource_path = '/services/jobs/{job_id}/errors';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'job_id'}) {
        my $_base_variable = "{" . "job_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'job_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# services_jobs_job_id_get
#
# Retrieve Job Status
#
# @param string $job_id The ID of the job, returned from the original job request. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'job_id' => {
        data_type => 'string',
        description => 'The ID of the job, returned from the original job request.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'services_jobs_job_id_get' } = {
        summary => 'Retrieve Job Status',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub services_jobs_job_id_get {
    my ($self, %args) = @_;

    # verify the required parameter 'job_id' is set
    unless (exists $args{'job_id'}) {
      croak("Missing the required parameter 'job_id' when calling services_jobs_job_id_get");
    }

    # parse inputs
    my $_resource_path = '/services/jobs/{job_id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'job_id'}) {
        my $_base_variable = "{" . "job_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'job_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# services_jobs_job_id_summary_get
#
# Retrieve Import Bulk Translation File Job Summary
#
# @param string $job_id The id value of the requested import job. This was returned from the Import Bulk Translation File request. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'job_id' => {
        data_type => 'string',
        description => 'The id value of the requested import job. This was returned from the Import Bulk Translation File request.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'services_jobs_job_id_summary_get' } = {
        summary => 'Retrieve Import Bulk Translation File Job Summary',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub services_jobs_job_id_summary_get {
    my ($self, %args) = @_;

    # verify the required parameter 'job_id' is set
    unless (exists $args{'job_id'}) {
      croak("Missing the required parameter 'job_id' when calling services_jobs_job_id_summary_get");
    }

    # parse inputs
    my $_resource_path = '/services/jobs/{job_id}/summary';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'job_id'}) {
        my $_base_variable = "{" . "job_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'job_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# services_jobs_job_id_tasks_get
#
# Retrieve SDK Job Tasks
#
# @param string $job_id The ID of the SDK job, returned from the original job request. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'job_id' => {
        data_type => 'string',
        description => 'The ID of the SDK job, returned from the original job request.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'services_jobs_job_id_tasks_get' } = {
        summary => 'Retrieve SDK Job Tasks',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub services_jobs_job_id_tasks_get {
    my ($self, %args) = @_;

    # verify the required parameter 'job_id' is set
    unless (exists $args{'job_id'}) {
      croak("Missing the required parameter 'job_id' when calling services_jobs_job_id_tasks_get");
    }

    # parse inputs
    my $_resource_path = '/services/jobs/{job_id}/tasks';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'job_id'}) {
        my $_base_variable = "{" . "job_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'job_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# services_jobs_monitors_get
#
# Retrieve Job Monitors
#
# @param string $start_date Sets the date to start retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job. (optional)
# @param string $end_date Sets the date to end retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time. (optional)
# @param string $status Filter to only retrieve jobs in a certain status. Allowed values are scheduled, queued, running. If omitted, retrieves all statuses. (optional)
# @param string $limit Paginate the results by specifying the maximum number of jobs per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50. (optional)
# @param string $offset Paginate the results displayed per page by specifying the amount of offset from the first job instance returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. (optional)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'start_date' => {
        data_type => 'string',
        description => 'Sets the date to start retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job.',
        required => '0',
    },
    'end_date' => {
        data_type => 'string',
        description => 'Sets the date to end retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time.',
        required => '0',
    },
    'status' => {
        data_type => 'string',
        description => 'Filter to only retrieve jobs in a certain status. Allowed values are scheduled, queued, running. If omitted, retrieves all statuses.',
        required => '0',
    },
    'limit' => {
        data_type => 'string',
        description => 'Paginate the results by specifying the maximum number of jobs per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50.',
        required => '0',
    },
    'offset' => {
        data_type => 'string',
        description => 'Paginate the results displayed per page by specifying the amount of offset from the first job instance returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51.',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'services_jobs_monitors_get' } = {
        summary => 'Retrieve Job Monitors',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub services_jobs_monitors_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/services/jobs/monitors';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'start_date'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'end_date'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'status'}) {
        $query_params->{'status'} = $self->{api_client}->to_query_value($args{'status'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# services_jobs_start_now_job_id_post
#
# Start Job
#
# @param string $job_id The ID of the scheduled job instance to start. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'job_id' => {
        data_type => 'string',
        description => 'The ID of the scheduled job instance to start.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'services_jobs_start_now_job_id_post' } = {
        summary => 'Start Job',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub services_jobs_start_now_job_id_post {
    my ($self, %args) = @_;

    # verify the required parameter 'job_id' is set
    unless (exists $args{'job_id'}) {
      croak("Missing the required parameter 'job_id' when calling services_jobs_start_now_job_id_post");
    }

    # parse inputs
    my $_resource_path = '/services/jobs/start_now/{job_id}';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'job_id'}) {
        my $_base_variable = "{" . "job_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'job_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# services_loader_extract_post
#
# Extract Data Files
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'services_loader_extract_post' } = {
        summary => 'Extract Data Files',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub services_loader_extract_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/services/loader/extract';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# services_loader_job_id_tasks_task_id_failurelog_get
#
# Retrieve Load Failure Log Results
#
# @param string $job_id The id value of the requested extract job. (required)
# @param string $task_id The id value of the requested extract task. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'job_id' => {
        data_type => 'string',
        description => 'The id value of the requested extract job.',
        required => '1',
    },
    'task_id' => {
        data_type => 'string',
        description => 'The id value of the requested extract task.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'services_loader_job_id_tasks_task_id_failurelog_get' } = {
        summary => 'Retrieve Load Failure Log Results',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub services_loader_job_id_tasks_task_id_failurelog_get {
    my ($self, %args) = @_;

    # verify the required parameter 'job_id' is set
    unless (exists $args{'job_id'}) {
      croak("Missing the required parameter 'job_id' when calling services_loader_job_id_tasks_task_id_failurelog_get");
    }

    # verify the required parameter 'task_id' is set
    unless (exists $args{'task_id'}) {
      croak("Missing the required parameter 'task_id' when calling services_loader_job_id_tasks_task_id_failurelog_get");
    }

    # parse inputs
    my $_resource_path = '/services/loader/{job_id}/tasks/{task_id}/failurelog';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'job_id'}) {
        my $_base_variable = "{" . "job_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'job_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'task_id'}) {
        my $_base_variable = "{" . "task_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'task_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# services_loader_job_id_tasks_task_id_results_get
#
# Retrieve Loader Extract Results
#
# @param string $job_id The id value of the requested extract job. (required)
# @param string $task_id The id value of the requested extract task. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'job_id' => {
        data_type => 'string',
        description => 'The id value of the requested extract job.',
        required => '1',
    },
    'task_id' => {
        data_type => 'string',
        description => 'The id value of the requested extract task.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'services_loader_job_id_tasks_task_id_results_get' } = {
        summary => 'Retrieve Loader Extract Results',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub services_loader_job_id_tasks_task_id_results_get {
    my ($self, %args) = @_;

    # verify the required parameter 'job_id' is set
    unless (exists $args{'job_id'}) {
      croak("Missing the required parameter 'job_id' when calling services_loader_job_id_tasks_task_id_results_get");
    }

    # verify the required parameter 'task_id' is set
    unless (exists $args{'task_id'}) {
      croak("Missing the required parameter 'task_id' when calling services_loader_job_id_tasks_task_id_results_get");
    }

    # parse inputs
    my $_resource_path = '/services/loader/{job_id}/tasks/{task_id}/results';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'job_id'}) {
        my $_base_variable = "{" . "job_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'job_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'task_id'}) {
        my $_base_variable = "{" . "task_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'task_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# services_loader_job_id_tasks_task_id_results_renditions_get
#
# Retrieve Loader Extract Renditions Results
#
# @param string $job_id The id value of the requested extract job. (required)
# @param string $task_id The id value of the requested extract task. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'job_id' => {
        data_type => 'string',
        description => 'The id value of the requested extract job.',
        required => '1',
    },
    'task_id' => {
        data_type => 'string',
        description => 'The id value of the requested extract task.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'services_loader_job_id_tasks_task_id_results_renditions_get' } = {
        summary => 'Retrieve Loader Extract Renditions Results',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub services_loader_job_id_tasks_task_id_results_renditions_get {
    my ($self, %args) = @_;

    # verify the required parameter 'job_id' is set
    unless (exists $args{'job_id'}) {
      croak("Missing the required parameter 'job_id' when calling services_loader_job_id_tasks_task_id_results_renditions_get");
    }

    # verify the required parameter 'task_id' is set
    unless (exists $args{'task_id'}) {
      croak("Missing the required parameter 'task_id' when calling services_loader_job_id_tasks_task_id_results_renditions_get");
    }

    # parse inputs
    my $_resource_path = '/services/loader/{job_id}/tasks/{task_id}/results/renditions';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'job_id'}) {
        my $_base_variable = "{" . "job_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'job_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'task_id'}) {
        my $_base_variable = "{" . "task_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'task_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# services_loader_job_id_tasks_task_id_successlog_get
#
# Retrieve Load Success Log Results
#
# @param string $job_id The id value of the requested extract job. (required)
# @param string $task_id The id value of the requested extract task. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'job_id' => {
        data_type => 'string',
        description => 'The id value of the requested extract job.',
        required => '1',
    },
    'task_id' => {
        data_type => 'string',
        description => 'The id value of the requested extract task.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'services_loader_job_id_tasks_task_id_successlog_get' } = {
        summary => 'Retrieve Load Success Log Results',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub services_loader_job_id_tasks_task_id_successlog_get {
    my ($self, %args) = @_;

    # verify the required parameter 'job_id' is set
    unless (exists $args{'job_id'}) {
      croak("Missing the required parameter 'job_id' when calling services_loader_job_id_tasks_task_id_successlog_get");
    }

    # verify the required parameter 'task_id' is set
    unless (exists $args{'task_id'}) {
      croak("Missing the required parameter 'task_id' when calling services_loader_job_id_tasks_task_id_successlog_get");
    }

    # parse inputs
    my $_resource_path = '/services/loader/{job_id}/tasks/{task_id}/successlog';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'job_id'}) {
        my $_base_variable = "{" . "job_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'job_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'task_id'}) {
        my $_base_variable = "{" . "task_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'task_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# services_loader_load_post
#
# Load Data Objects
#
# @param string $authorization  (optional)
# @param string $content_type  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'services_loader_load_post' } = {
        summary => 'Load Data Objects',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub services_loader_load_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/services/loader/load';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# services_package_actions_validate_post
#
# Validate Package
#
# @param string $authorization  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'services_package_actions_validate_post' } = {
        summary => 'Validate Package',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub services_package_actions_validate_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/services/package/actions/validate';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# services_package_post
#
# Export Package
#
# @param string $authorization  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'services_package_post' } = {
        summary => 'Export Package',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub services_package_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/services/package';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# services_package_put
#
# Import Package
#
# @param string $authorization  (optional)
# @param string $content_type  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'services_package_put' } = {
        summary => 'Import Package',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub services_package_put {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/services/package';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# services_queues_get
#
# Retrieve All Queues
#
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'services_queues_get' } = {
        summary => 'Retrieve All Queues',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub services_queues_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/services/queues';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# services_queues_queue_name_actions_disable_delivery_put
#
# Disable Delivery
#
# @param string $queue_name The name of a specific Queue. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'queue_name' => {
        data_type => 'string',
        description => 'The name of a specific Queue.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'services_queues_queue_name_actions_disable_delivery_put' } = {
        summary => 'Disable Delivery',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub services_queues_queue_name_actions_disable_delivery_put {
    my ($self, %args) = @_;

    # verify the required parameter 'queue_name' is set
    unless (exists $args{'queue_name'}) {
      croak("Missing the required parameter 'queue_name' when calling services_queues_queue_name_actions_disable_delivery_put");
    }

    # parse inputs
    my $_resource_path = '/services/queues/{queue_name}/actions/disable_delivery';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'queue_name'}) {
        my $_base_variable = "{" . "queue_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'queue_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# services_queues_queue_name_actions_enable_delivery_put
#
# Enable Delivery
#
# @param string $queue_name The name of a specific Queue. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'queue_name' => {
        data_type => 'string',
        description => 'The name of a specific Queue.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'services_queues_queue_name_actions_enable_delivery_put' } = {
        summary => 'Enable Delivery',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub services_queues_queue_name_actions_enable_delivery_put {
    my ($self, %args) = @_;

    # verify the required parameter 'queue_name' is set
    unless (exists $args{'queue_name'}) {
      croak("Missing the required parameter 'queue_name' when calling services_queues_queue_name_actions_enable_delivery_put");
    }

    # parse inputs
    my $_resource_path = '/services/queues/{queue_name}/actions/enable_delivery';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'queue_name'}) {
        my $_base_variable = "{" . "queue_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'queue_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# services_queues_queue_name_actions_reset_put
#
# Reset Queue
#
# @param string $queue_name The name of a specific Queue. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'queue_name' => {
        data_type => 'string',
        description => 'The name of a specific Queue.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'services_queues_queue_name_actions_reset_put' } = {
        summary => 'Reset Queue',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub services_queues_queue_name_actions_reset_put {
    my ($self, %args) = @_;

    # verify the required parameter 'queue_name' is set
    unless (exists $args{'queue_name'}) {
      croak("Missing the required parameter 'queue_name' when calling services_queues_queue_name_actions_reset_put");
    }

    # parse inputs
    my $_resource_path = '/services/queues/{queue_name}/actions/reset';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'queue_name'}) {
        my $_base_variable = "{" . "queue_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'queue_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# services_queues_queue_name_get
#
# Retrieve Queue Status
#
# @param string $queue_name The name of a specific queue. For example, queue__c. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'queue_name' => {
        data_type => 'string',
        description => 'The name of a specific queue. For example, queue__c.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'services_queues_queue_name_get' } = {
        summary => 'Retrieve Queue Status',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub services_queues_queue_name_get {
    my ($self, %args) = @_;

    # verify the required parameter 'queue_name' is set
    unless (exists $args{'queue_name'}) {
      croak("Missing the required parameter 'queue_name' when calling services_queues_queue_name_get");
    }

    # parse inputs
    my $_resource_path = '/services/queues/{queue_name}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'queue_name'}) {
        my $_base_variable = "{" . "queue_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'queue_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# services_vobject_vault_package_v_package_id_actions_validate_post
#
# Validate Imported Package
#
# @param string $package_id The ID of the package to validate. You can find this in the API response of a package import, or in the URL of package in the Vault UI. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'package_id' => {
        data_type => 'string',
        description => 'The ID of the package to validate. You can find this in the API response of a package import, or in the URL of package in the Vault UI.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'services_vobject_vault_package_v_package_id_actions_validate_post' } = {
        summary => 'Validate Imported Package',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub services_vobject_vault_package_v_package_id_actions_validate_post {
    my ($self, %args) = @_;

    # verify the required parameter 'package_id' is set
    unless (exists $args{'package_id'}) {
      croak("Missing the required parameter 'package_id' when calling services_vobject_vault_package_v_package_id_actions_validate_post");
    }

    # parse inputs
    my $_resource_path = '/services/vobject/vault_package__v/{package_id}/actions/validate';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'package_id'}) {
        my $_base_variable = "{" . "package_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'package_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# session_delete
#
# End Session
#
# @param string $accept  (optional)
# @param string $authorization The Vault sessionId to end. (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => 'The Vault sessionId to end.',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'session_delete' } = {
        summary => 'End Session',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub session_delete {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/session';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# uicode_distributions_distribution_name_code_get
#
# Download Single Client Code Distribution
#
# @param string $distribution_name The name attribute of the client code distribution to download. (required)
# @param string $accept  (optional)
# @param string $authorization  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'distribution_name' => {
        data_type => 'string',
        description => 'The name attribute of the client code distribution to download.',
        required => '1',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'uicode_distributions_distribution_name_code_get' } = {
        summary => 'Download Single Client Code Distribution',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub uicode_distributions_distribution_name_code_get {
    my ($self, %args) = @_;

    # verify the required parameter 'distribution_name' is set
    unless (exists $args{'distribution_name'}) {
      croak("Missing the required parameter 'distribution_name' when calling uicode_distributions_distribution_name_code_get");
    }

    # parse inputs
    my $_resource_path = '/uicode/distributions/{distribution_name}/code';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'distribution_name'}) {
        my $_base_variable = "{" . "distribution_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'distribution_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# uicode_distributions_distribution_name_delete
#
# Delete Single Client Code Distribution
#
# @param string $distribution_name The name attribute of the client code distribution to delete. (required)
# @param string $accept  (optional)
# @param string $authorization  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'distribution_name' => {
        data_type => 'string',
        description => 'The name attribute of the client code distribution to delete.',
        required => '1',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'uicode_distributions_distribution_name_delete' } = {
        summary => 'Delete Single Client Code Distribution',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub uicode_distributions_distribution_name_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'distribution_name' is set
    unless (exists $args{'distribution_name'}) {
      croak("Missing the required parameter 'distribution_name' when calling uicode_distributions_distribution_name_delete");
    }

    # parse inputs
    my $_resource_path = '/uicode/distributions/{distribution_name}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'distribution_name'}) {
        my $_base_variable = "{" . "distribution_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'distribution_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# uicode_distributions_distribution_name_get
#
# Retrieve Single Client Code Distribution Metadata
#
# @param string $distribution_name The name attribute of the client code distribution to delete. (required)
# @param string $accept  (optional)
# @param string $authorization  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'distribution_name' => {
        data_type => 'string',
        description => 'The name attribute of the client code distribution to delete.',
        required => '1',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'uicode_distributions_distribution_name_get' } = {
        summary => 'Retrieve Single Client Code Distribution Metadata',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub uicode_distributions_distribution_name_get {
    my ($self, %args) = @_;

    # verify the required parameter 'distribution_name' is set
    unless (exists $args{'distribution_name'}) {
      croak("Missing the required parameter 'distribution_name' when calling uicode_distributions_distribution_name_get");
    }

    # parse inputs
    my $_resource_path = '/uicode/distributions/{distribution_name}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'distribution_name'}) {
        my $_base_variable = "{" . "distribution_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'distribution_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# uicode_distributions_get
#
# Retrieve All Client Code Distribution Metadata
#
# @param string $accept  (optional)
# @param string $authorization  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'uicode_distributions_get' } = {
        summary => 'Retrieve All Client Code Distribution Metadata',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub uicode_distributions_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/uicode/distributions';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# uicode_distributions_post
#
# Add or Replace Single Client Code Distribution
#
# @param string $accept  (optional)
# @param string $authorization  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'uicode_distributions_post' } = {
        summary => 'Add or Replace Single Client Code Distribution',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub uicode_distributions_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/uicode/distributions';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# vobject_vault_package_v_package_id_actions_deploy_post
#
# Deploy Package
#
# @param string $package_id The id field value of the vault_package__v object record used for deployment. See Import Package. (required)
# @param string $authorization  (optional)
# @param string $content_type  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'package_id' => {
        data_type => 'string',
        description => 'The id field value of the vault_package__v object record used for deployment. See Import Package.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'vobject_vault_package_v_package_id_actions_deploy_post' } = {
        summary => 'Deploy Package',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub vobject_vault_package_v_package_id_actions_deploy_post {
    my ($self, %args) = @_;

    # verify the required parameter 'package_id' is set
    unless (exists $args{'package_id'}) {
      croak("Missing the required parameter 'package_id' when calling vobject_vault_package_v_package_id_actions_deploy_post");
    }

    # parse inputs
    my $_resource_path = '/vobject/vault_package__v/{package_id}/actions/deploy';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'package_id'}) {
        my $_base_variable = "{" . "package_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'package_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# vobject_vault_package_v_package_id_actions_deploy_results_get
#
# Retrieve Package Deploy Results
#
# @param string $package_id The id field value of the vault_package__v object record used for deployment. See Deploy Package. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'package_id' => {
        data_type => 'string',
        description => 'The id field value of the vault_package__v object record used for deployment. See Deploy Package.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'vobject_vault_package_v_package_id_actions_deploy_results_get' } = {
        summary => 'Retrieve Package Deploy Results',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub vobject_vault_package_v_package_id_actions_deploy_results_get {
    my ($self, %args) = @_;

    # verify the required parameter 'package_id' is set
    unless (exists $args{'package_id'}) {
      croak("Missing the required parameter 'package_id' when calling vobject_vault_package_v_package_id_actions_deploy_results_get");
    }

    # parse inputs
    my $_resource_path = '/vobject/vault_package__v/{package_id}/actions/deploy/results';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'package_id'}) {
        my $_base_variable = "{" . "package_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'package_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# vobjects_cascadedelete_results_object_name_job_status_job_id_get
#
# Retrieve Results of Cascade Delete Job
#
# @param string $object_name The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
# @param string $job_status  (required)
# @param string $job_id  (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'object_name' => {
        data_type => 'string',
        description => 'The object name__v field value (product__v, country__v, custom_object__c, etc.).',
        required => '1',
    },
    'job_status' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'job_id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'vobjects_cascadedelete_results_object_name_job_status_job_id_get' } = {
        summary => 'Retrieve Results of Cascade Delete Job',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub vobjects_cascadedelete_results_object_name_job_status_job_id_get {
    my ($self, %args) = @_;

    # verify the required parameter 'object_name' is set
    unless (exists $args{'object_name'}) {
      croak("Missing the required parameter 'object_name' when calling vobjects_cascadedelete_results_object_name_job_status_job_id_get");
    }

    # verify the required parameter 'job_status' is set
    unless (exists $args{'job_status'}) {
      croak("Missing the required parameter 'job_status' when calling vobjects_cascadedelete_results_object_name_job_status_job_id_get");
    }

    # verify the required parameter 'job_id' is set
    unless (exists $args{'job_id'}) {
      croak("Missing the required parameter 'job_id' when calling vobjects_cascadedelete_results_object_name_job_status_job_id_get");
    }

    # parse inputs
    my $_resource_path = '/vobjects/cascadedelete/results/{object_name}/{job_status}/{job_id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'object_name'}) {
        my $_base_variable = "{" . "object_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'object_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'job_status'}) {
        my $_base_variable = "{" . "job_status" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'job_status'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'job_id'}) {
        my $_base_variable = "{" . "job_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'job_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# vobjects_deepcopy_results_object_name_job_status_job_id_get
#
# Retrieve Results of Deep Copy Job
#
# @param string $object_name The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
# @param string $job_status The ID of the job, retrieved from the response of the job request. (required)
# @param string $job_id Possible values are success or failure. Find if your job succeeded or failed by retrieving the job status. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'object_name' => {
        data_type => 'string',
        description => 'The object name__v field value (product__v, country__v, custom_object__c, etc.).',
        required => '1',
    },
    'job_status' => {
        data_type => 'string',
        description => 'The ID of the job, retrieved from the response of the job request.',
        required => '1',
    },
    'job_id' => {
        data_type => 'string',
        description => 'Possible values are success or failure. Find if your job succeeded or failed by retrieving the job status.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'vobjects_deepcopy_results_object_name_job_status_job_id_get' } = {
        summary => 'Retrieve Results of Deep Copy Job',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub vobjects_deepcopy_results_object_name_job_status_job_id_get {
    my ($self, %args) = @_;

    # verify the required parameter 'object_name' is set
    unless (exists $args{'object_name'}) {
      croak("Missing the required parameter 'object_name' when calling vobjects_deepcopy_results_object_name_job_status_job_id_get");
    }

    # verify the required parameter 'job_status' is set
    unless (exists $args{'job_status'}) {
      croak("Missing the required parameter 'job_status' when calling vobjects_deepcopy_results_object_name_job_status_job_id_get");
    }

    # verify the required parameter 'job_id' is set
    unless (exists $args{'job_id'}) {
      croak("Missing the required parameter 'job_id' when calling vobjects_deepcopy_results_object_name_job_status_job_id_get");
    }

    # parse inputs
    my $_resource_path = '/vobjects/deepcopy/results/{object_name}/{job_status}/{job_id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'object_name'}) {
        my $_base_variable = "{" . "object_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'object_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'job_status'}) {
        my $_base_variable = "{" . "job_status" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'job_status'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'job_id'}) {
        my $_base_variable = "{" . "job_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'job_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# vobjects_edl_item_v_actions_createplaceholder_post
#
# Create a Placeholder from an EDL Item
#
# @param string $authorization  (optional)
# @param string $content_type  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'vobjects_edl_item_v_actions_createplaceholder_post' } = {
        summary => 'Create a Placeholder from an EDL Item',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub vobjects_edl_item_v_actions_createplaceholder_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/vobjects/edl_item__v/actions/createplaceholder';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# vobjects_merges_job_id_log_get
#
# Download Merge Records Job Log
#
# @param string $job_id The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'job_id' => {
        data_type => 'string',
        description => 'The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'vobjects_merges_job_id_log_get' } = {
        summary => 'Download Merge Records Job Log',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub vobjects_merges_job_id_log_get {
    my ($self, %args) = @_;

    # verify the required parameter 'job_id' is set
    unless (exists $args{'job_id'}) {
      croak("Missing the required parameter 'job_id' when calling vobjects_merges_job_id_log_get");
    }

    # parse inputs
    my $_resource_path = '/vobjects/merges/{job_id}/log';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'job_id'}) {
        my $_base_variable = "{" . "job_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'job_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# vobjects_merges_job_id_results_get
#
# Retrieve Record Merge Results
#
# @param string $job_id The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'job_id' => {
        data_type => 'string',
        description => 'The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'vobjects_merges_job_id_results_get' } = {
        summary => 'Retrieve Record Merge Results',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub vobjects_merges_job_id_results_get {
    my ($self, %args) = @_;

    # verify the required parameter 'job_id' is set
    unless (exists $args{'job_id'}) {
      croak("Missing the required parameter 'job_id' when calling vobjects_merges_job_id_results_get");
    }

    # parse inputs
    my $_resource_path = '/vobjects/merges/{job_id}/results';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'job_id'}) {
        my $_base_variable = "{" . "job_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'job_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# vobjects_merges_job_id_status_get
#
# Retrieve Record Merge Status
#
# @param string $job_id The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'job_id' => {
        data_type => 'string',
        description => 'The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'vobjects_merges_job_id_status_get' } = {
        summary => 'Retrieve Record Merge Status',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub vobjects_merges_job_id_status_get {
    my ($self, %args) = @_;

    # verify the required parameter 'job_id' is set
    unless (exists $args{'job_id'}) {
      croak("Missing the required parameter 'job_id' when calling vobjects_merges_job_id_status_get");
    }

    # parse inputs
    my $_resource_path = '/vobjects/merges/{job_id}/status';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'job_id'}) {
        my $_base_variable = "{" . "job_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'job_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# vobjects_object_name_actions_action_name_post
#
# Initiate Object Action on Multiple Records
#
# @param string $object_name The object name__v field value. (required)
# @param string $action_name Either the name of the Objectaction or Objectlifecyclestateuseraction to initiate. This is obtained from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action. (required)
# @param string $authorization  (optional)
# @param string $content_type  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'object_name' => {
        data_type => 'string',
        description => 'The object name__v field value.',
        required => '1',
    },
    'action_name' => {
        data_type => 'string',
        description => 'Either the name of the Objectaction or Objectlifecyclestateuseraction to initiate. This is obtained from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'vobjects_object_name_actions_action_name_post' } = {
        summary => 'Initiate Object Action on Multiple Records',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub vobjects_object_name_actions_action_name_post {
    my ($self, %args) = @_;

    # verify the required parameter 'object_name' is set
    unless (exists $args{'object_name'}) {
      croak("Missing the required parameter 'object_name' when calling vobjects_object_name_actions_action_name_post");
    }

    # verify the required parameter 'action_name' is set
    unless (exists $args{'action_name'}) {
      croak("Missing the required parameter 'action_name' when calling vobjects_object_name_actions_action_name_post");
    }

    # parse inputs
    my $_resource_path = '/vobjects/{object_name}/actions/{action_name}';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'object_name'}) {
        my $_base_variable = "{" . "object_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'object_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'action_name'}) {
        my $_base_variable = "{" . "action_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'action_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# vobjects_object_name_actions_changetype_post
#
# Change Object Type
#
# @param string $object_name The name of the object. (required)
# @param string $authorization  (optional)
# @param string $content_type  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'object_name' => {
        data_type => 'string',
        description => 'The name of the object.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'vobjects_object_name_actions_changetype_post' } = {
        summary => 'Change Object Type',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub vobjects_object_name_actions_changetype_post {
    my ($self, %args) = @_;

    # verify the required parameter 'object_name' is set
    unless (exists $args{'object_name'}) {
      croak("Missing the required parameter 'object_name' when calling vobjects_object_name_actions_changetype_post");
    }

    # parse inputs
    my $_resource_path = '/vobjects/{object_name}/actions/changetype';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'object_name'}) {
        my $_base_variable = "{" . "object_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'object_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# vobjects_object_name_actions_merge_post
#
# Initiate Record Merge
#
# @param string $object_name The object name__v field value. For example, account__v. This object must have Enable Merges configured. (required)
# @param string $authorization  (optional)
# @param string $content_type  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
# @param ARRAY[VobjectsObjectNameActionsMergePostRequestInner] $vobjects_object_name_actions_merge_post_request_inner  (optional)
{
    my $params = {
    'object_name' => {
        data_type => 'string',
        description => 'The object name__v field value. For example, account__v. This object must have Enable Merges configured.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    'vobjects_object_name_actions_merge_post_request_inner' => {
        data_type => 'ARRAY[VobjectsObjectNameActionsMergePostRequestInner]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'vobjects_object_name_actions_merge_post' } = {
        summary => 'Initiate Record Merge',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub vobjects_object_name_actions_merge_post {
    my ($self, %args) = @_;

    # verify the required parameter 'object_name' is set
    unless (exists $args{'object_name'}) {
      croak("Missing the required parameter 'object_name' when calling vobjects_object_name_actions_merge_post");
    }

    # parse inputs
    my $_resource_path = '/vobjects/{object_name}/actions/merge';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'object_name'}) {
        my $_base_variable = "{" . "object_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'object_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'vobjects_object_name_actions_merge_post_request_inner'}) {
        $_body_data = $args{'vobjects_object_name_actions_merge_post_request_inner'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# vobjects_object_name_actions_recalculaterollups_get
#
# Retrieve Roll-up Field Recalculation Status
#
# @param string $object_name The name of the object for which to check the status of a Roll-up field recalculation. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'object_name' => {
        data_type => 'string',
        description => 'The name of the object for which to check the status of a Roll-up field recalculation.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'vobjects_object_name_actions_recalculaterollups_get' } = {
        summary => 'Retrieve Roll-up Field Recalculation Status',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub vobjects_object_name_actions_recalculaterollups_get {
    my ($self, %args) = @_;

    # verify the required parameter 'object_name' is set
    unless (exists $args{'object_name'}) {
      croak("Missing the required parameter 'object_name' when calling vobjects_object_name_actions_recalculaterollups_get");
    }

    # parse inputs
    my $_resource_path = '/vobjects/{object_name}/actions/recalculaterollups';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'object_name'}) {
        my $_base_variable = "{" . "object_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'object_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# vobjects_object_name_actions_recalculaterollups_post
#
# Recalculate Roll-up Fields
#
# @param string $object_name The name of the object for which to check the status of a Roll-up field recalculation. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'object_name' => {
        data_type => 'string',
        description => 'The name of the object for which to check the status of a Roll-up field recalculation.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'vobjects_object_name_actions_recalculaterollups_post' } = {
        summary => 'Recalculate Roll-up Fields',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub vobjects_object_name_actions_recalculaterollups_post {
    my ($self, %args) = @_;

    # verify the required parameter 'object_name' is set
    unless (exists $args{'object_name'}) {
      croak("Missing the required parameter 'object_name' when calling vobjects_object_name_actions_recalculaterollups_post");
    }

    # parse inputs
    my $_resource_path = '/vobjects/{object_name}/actions/recalculaterollups';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'object_name'}) {
        my $_base_variable = "{" . "object_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'object_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# vobjects_object_name_actions_updatecorporatecurrency_put
#
# Update Corporate Currency Fields
#
# @param string $object_name The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'object_name' => {
        data_type => 'string',
        description => 'The object name__v field value (product__v, country__v, custom_object__c, etc.).',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'vobjects_object_name_actions_updatecorporatecurrency_put' } = {
        summary => 'Update Corporate Currency Fields',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub vobjects_object_name_actions_updatecorporatecurrency_put {
    my ($self, %args) = @_;

    # verify the required parameter 'object_name' is set
    unless (exists $args{'object_name'}) {
      croak("Missing the required parameter 'object_name' when calling vobjects_object_name_actions_updatecorporatecurrency_put");
    }

    # parse inputs
    my $_resource_path = '/vobjects/{object_name}/actions/updatecorporatecurrency';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'object_name'}) {
        my $_base_variable = "{" . "object_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'object_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# vobjects_object_name_attachments_batch_delete
#
# Delete Multiple Object Record Attachments
#
# @param string $object_name The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
# @param string $id_param  (optional)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'object_name' => {
        data_type => 'string',
        description => 'The object name__v field value (product__v, country__v, custom_object__c, etc.).',
        required => '1',
    },
    'id_param' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'vobjects_object_name_attachments_batch_delete' } = {
        summary => 'Delete Multiple Object Record Attachments',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub vobjects_object_name_attachments_batch_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'object_name' is set
    unless (exists $args{'object_name'}) {
      croak("Missing the required parameter 'object_name' when calling vobjects_object_name_attachments_batch_delete");
    }

    # parse inputs
    my $_resource_path = '/vobjects/{object_name}/attachments/batch';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'id_param'}) {
        $query_params->{'idParam'} = $self->{api_client}->to_query_value($args{'id_param'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'object_name'}) {
        my $_base_variable = "{" . "object_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'object_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# vobjects_object_name_attachments_batch_post
#
# Create Multiple Object Record Attachments
#
# @param string $object_name The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'object_name' => {
        data_type => 'string',
        description => 'The object name__v field value (product__v, country__v, custom_object__c, etc.).',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'vobjects_object_name_attachments_batch_post' } = {
        summary => 'Create Multiple Object Record Attachments',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub vobjects_object_name_attachments_batch_post {
    my ($self, %args) = @_;

    # verify the required parameter 'object_name' is set
    unless (exists $args{'object_name'}) {
      croak("Missing the required parameter 'object_name' when calling vobjects_object_name_attachments_batch_post");
    }

    # parse inputs
    my $_resource_path = '/vobjects/{object_name}/attachments/batch';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'object_name'}) {
        my $_base_variable = "{" . "object_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'object_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# vobjects_object_name_attachments_batch_put
#
# Update Multiple Object Record Attachment Descriptions
#
# @param string $object_name The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'object_name' => {
        data_type => 'string',
        description => 'The object name__v field value (product__v, country__v, custom_object__c, etc.).',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'vobjects_object_name_attachments_batch_put' } = {
        summary => 'Update Multiple Object Record Attachment Descriptions',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub vobjects_object_name_attachments_batch_put {
    my ($self, %args) = @_;

    # verify the required parameter 'object_name' is set
    unless (exists $args{'object_name'}) {
      croak("Missing the required parameter 'object_name' when calling vobjects_object_name_attachments_batch_put");
    }

    # parse inputs
    my $_resource_path = '/vobjects/{object_name}/attachments/batch';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'object_name'}) {
        my $_base_variable = "{" . "object_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'object_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# vobjects_object_name_delete
#
# Delete Object Records
#
# @param string $object_name The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
# @param string $authorization  (optional)
# @param string $content_type Can be text/csv or application/json (optional)
# @param string $accept Can be text/csv or application/json (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'object_name' => {
        data_type => 'string',
        description => 'The object name__v field value (product__v, country__v, custom_object__c, etc.).',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => 'Can be text/csv or application/json',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => 'Can be text/csv or application/json',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'vobjects_object_name_delete' } = {
        summary => 'Delete Object Records',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub vobjects_object_name_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'object_name' is set
    unless (exists $args{'object_name'}) {
      croak("Missing the required parameter 'object_name' when calling vobjects_object_name_delete");
    }

    # parse inputs
    my $_resource_path = '/vobjects/{object_name}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'object_name'}) {
        my $_base_variable = "{" . "object_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'object_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# vobjects_object_name_id_roles_role_name_get
#
# Retrieve Object Record Roles
#
# @param string $object_name The object name. (required)
# @param string $id The id of the document, binder, or object record. (required)
# @param string $role_name Optional: Include a role name to filter for a specific role. For example, owner__v. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'object_name' => {
        data_type => 'string',
        description => 'The object name.',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the document, binder, or object record.',
        required => '1',
    },
    'role_name' => {
        data_type => 'string',
        description => 'Optional: Include a role name to filter for a specific role. For example, owner__v.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'vobjects_object_name_id_roles_role_name_get' } = {
        summary => 'Retrieve Object Record Roles',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub vobjects_object_name_id_roles_role_name_get {
    my ($self, %args) = @_;

    # verify the required parameter 'object_name' is set
    unless (exists $args{'object_name'}) {
      croak("Missing the required parameter 'object_name' when calling vobjects_object_name_id_roles_role_name_get");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling vobjects_object_name_id_roles_role_name_get");
    }

    # verify the required parameter 'role_name' is set
    unless (exists $args{'role_name'}) {
      croak("Missing the required parameter 'role_name' when calling vobjects_object_name_id_roles_role_name_get");
    }

    # parse inputs
    my $_resource_path = '/vobjects/{object_name}/{id}/roles/{role_name}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'object_name'}) {
        my $_base_variable = "{" . "object_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'object_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'role_name'}) {
        my $_base_variable = "{" . "role_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'role_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# vobjects_object_name_object_record_id_actions_action_name_get
#
# Retrieve Object User Actions Details
#
# @param string $object_name The object name__v field value. (required)
# @param string $object_record_id The object record id field value from which to retrieve user actions. (required)
# @param string $action_name The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'object_name' => {
        data_type => 'string',
        description => 'The object name__v field value.',
        required => '1',
    },
    'object_record_id' => {
        data_type => 'string',
        description => 'The object record id field value from which to retrieve user actions.',
        required => '1',
    },
    'action_name' => {
        data_type => 'string',
        description => 'The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'vobjects_object_name_object_record_id_actions_action_name_get' } = {
        summary => 'Retrieve Object User Actions Details',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub vobjects_object_name_object_record_id_actions_action_name_get {
    my ($self, %args) = @_;

    # verify the required parameter 'object_name' is set
    unless (exists $args{'object_name'}) {
      croak("Missing the required parameter 'object_name' when calling vobjects_object_name_object_record_id_actions_action_name_get");
    }

    # verify the required parameter 'object_record_id' is set
    unless (exists $args{'object_record_id'}) {
      croak("Missing the required parameter 'object_record_id' when calling vobjects_object_name_object_record_id_actions_action_name_get");
    }

    # verify the required parameter 'action_name' is set
    unless (exists $args{'action_name'}) {
      croak("Missing the required parameter 'action_name' when calling vobjects_object_name_object_record_id_actions_action_name_get");
    }

    # parse inputs
    my $_resource_path = '/vobjects/{object_name}/{object_record_id}/actions/{action_name}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'object_name'}) {
        my $_base_variable = "{" . "object_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'object_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'object_record_id'}) {
        my $_base_variable = "{" . "object_record_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'object_record_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'action_name'}) {
        my $_base_variable = "{" . "action_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'action_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# vobjects_object_name_object_record_id_actions_action_name_post
#
# Initiate Object Action on a Single Record
#
# @param string $object_name The object name__v field value. (required)
# @param string $object_record_id The object record id field value from which to retrieve user actions. (required)
# @param string $action_name The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action. (required)
# @param string $authorization  (optional)
# @param string $content_type  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'object_name' => {
        data_type => 'string',
        description => 'The object name__v field value.',
        required => '1',
    },
    'object_record_id' => {
        data_type => 'string',
        description => 'The object record id field value from which to retrieve user actions.',
        required => '1',
    },
    'action_name' => {
        data_type => 'string',
        description => 'The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'vobjects_object_name_object_record_id_actions_action_name_post' } = {
        summary => 'Initiate Object Action on a Single Record',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub vobjects_object_name_object_record_id_actions_action_name_post {
    my ($self, %args) = @_;

    # verify the required parameter 'object_name' is set
    unless (exists $args{'object_name'}) {
      croak("Missing the required parameter 'object_name' when calling vobjects_object_name_object_record_id_actions_action_name_post");
    }

    # verify the required parameter 'object_record_id' is set
    unless (exists $args{'object_record_id'}) {
      croak("Missing the required parameter 'object_record_id' when calling vobjects_object_name_object_record_id_actions_action_name_post");
    }

    # verify the required parameter 'action_name' is set
    unless (exists $args{'action_name'}) {
      croak("Missing the required parameter 'action_name' when calling vobjects_object_name_object_record_id_actions_action_name_post");
    }

    # parse inputs
    my $_resource_path = '/vobjects/{object_name}/{object_record_id}/actions/{action_name}';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'object_name'}) {
        my $_base_variable = "{" . "object_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'object_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'object_record_id'}) {
        my $_base_variable = "{" . "object_record_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'object_record_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'action_name'}) {
        my $_base_variable = "{" . "action_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'action_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# vobjects_object_name_object_record_id_actions_cascadedelete_post
#
# Cascade Delete Object Record
#
# @param string $object_name The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
# @param string $object_record_id The object record id field value. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'object_name' => {
        data_type => 'string',
        description => 'The object name__v field value (product__v, country__v, custom_object__c, etc.).',
        required => '1',
    },
    'object_record_id' => {
        data_type => 'string',
        description => 'The object record id field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'vobjects_object_name_object_record_id_actions_cascadedelete_post' } = {
        summary => 'Cascade Delete Object Record',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub vobjects_object_name_object_record_id_actions_cascadedelete_post {
    my ($self, %args) = @_;

    # verify the required parameter 'object_name' is set
    unless (exists $args{'object_name'}) {
      croak("Missing the required parameter 'object_name' when calling vobjects_object_name_object_record_id_actions_cascadedelete_post");
    }

    # verify the required parameter 'object_record_id' is set
    unless (exists $args{'object_record_id'}) {
      croak("Missing the required parameter 'object_record_id' when calling vobjects_object_name_object_record_id_actions_cascadedelete_post");
    }

    # parse inputs
    my $_resource_path = '/vobjects/{object_name}/{object_record_id}/actions/cascadedelete';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'object_name'}) {
        my $_base_variable = "{" . "object_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'object_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'object_record_id'}) {
        my $_base_variable = "{" . "object_record_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'object_record_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# vobjects_object_name_object_record_id_actions_deepcopy_post
#
# Deep Copy Object Record
#
# @param string $object_name The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
# @param string $object_record_id The object record id field value. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'object_name' => {
        data_type => 'string',
        description => 'The object name__v field value (product__v, country__v, custom_object__c, etc.).',
        required => '1',
    },
    'object_record_id' => {
        data_type => 'string',
        description => 'The object record id field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'vobjects_object_name_object_record_id_actions_deepcopy_post' } = {
        summary => 'Deep Copy Object Record',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub vobjects_object_name_object_record_id_actions_deepcopy_post {
    my ($self, %args) = @_;

    # verify the required parameter 'object_name' is set
    unless (exists $args{'object_name'}) {
      croak("Missing the required parameter 'object_name' when calling vobjects_object_name_object_record_id_actions_deepcopy_post");
    }

    # verify the required parameter 'object_record_id' is set
    unless (exists $args{'object_record_id'}) {
      croak("Missing the required parameter 'object_record_id' when calling vobjects_object_name_object_record_id_actions_deepcopy_post");
    }

    # parse inputs
    my $_resource_path = '/vobjects/{object_name}/{object_record_id}/actions/deepcopy';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'object_name'}) {
        my $_base_variable = "{" . "object_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'object_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'object_record_id'}) {
        my $_base_variable = "{" . "object_record_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'object_record_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# vobjects_object_name_object_record_id_actions_get
#
# Retrieve Object Record User Actions
#
# @param string $object_name The object name__v field value. (required)
# @param string $object_record_id The object record id field value. (required)
# @param boolean $loc Optional: When true, retrieves localized (translated) strings for the label.  (optional)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'object_name' => {
        data_type => 'string',
        description => 'The object name__v field value.',
        required => '1',
    },
    'object_record_id' => {
        data_type => 'string',
        description => 'The object record id field value.',
        required => '1',
    },
    'loc' => {
        data_type => 'boolean',
        description => 'Optional: When true, retrieves localized (translated) strings for the label. ',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'vobjects_object_name_object_record_id_actions_get' } = {
        summary => 'Retrieve Object Record User Actions',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub vobjects_object_name_object_record_id_actions_get {
    my ($self, %args) = @_;

    # verify the required parameter 'object_name' is set
    unless (exists $args{'object_name'}) {
      croak("Missing the required parameter 'object_name' when calling vobjects_object_name_object_record_id_actions_get");
    }

    # verify the required parameter 'object_record_id' is set
    unless (exists $args{'object_record_id'}) {
      croak("Missing the required parameter 'object_record_id' when calling vobjects_object_name_object_record_id_actions_get");
    }

    # parse inputs
    my $_resource_path = '/vobjects/{object_name}/{object_record_id}/actions';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'loc'}) {
        $query_params->{'loc'} = $self->{api_client}->to_query_value($args{'loc'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'object_name'}) {
        my $_base_variable = "{" . "object_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'object_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'object_record_id'}) {
        my $_base_variable = "{" . "object_record_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'object_record_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# vobjects_object_name_object_record_id_attachment_fields_attachment_field_name_file_get
#
# Download Attachment Field File
#
# @param string $object_name The object name__v field value. For example, product__v. (required)
# @param string $object_record_id The object record id field value. (required)
# @param string $attachment_field_name The name of the Attachment field to update. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'object_name' => {
        data_type => 'string',
        description => 'The object name__v field value. For example, product__v.',
        required => '1',
    },
    'object_record_id' => {
        data_type => 'string',
        description => 'The object record id field value.',
        required => '1',
    },
    'attachment_field_name' => {
        data_type => 'string',
        description => 'The name of the Attachment field to update.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'vobjects_object_name_object_record_id_attachment_fields_attachment_field_name_file_get' } = {
        summary => 'Download Attachment Field File',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub vobjects_object_name_object_record_id_attachment_fields_attachment_field_name_file_get {
    my ($self, %args) = @_;

    # verify the required parameter 'object_name' is set
    unless (exists $args{'object_name'}) {
      croak("Missing the required parameter 'object_name' when calling vobjects_object_name_object_record_id_attachment_fields_attachment_field_name_file_get");
    }

    # verify the required parameter 'object_record_id' is set
    unless (exists $args{'object_record_id'}) {
      croak("Missing the required parameter 'object_record_id' when calling vobjects_object_name_object_record_id_attachment_fields_attachment_field_name_file_get");
    }

    # verify the required parameter 'attachment_field_name' is set
    unless (exists $args{'attachment_field_name'}) {
      croak("Missing the required parameter 'attachment_field_name' when calling vobjects_object_name_object_record_id_attachment_fields_attachment_field_name_file_get");
    }

    # parse inputs
    my $_resource_path = '/vobjects/{object_name}/{object_record_id}/attachment_fields/{attachment_field_name}/file';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'object_name'}) {
        my $_base_variable = "{" . "object_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'object_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'object_record_id'}) {
        my $_base_variable = "{" . "object_record_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'object_record_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'attachment_field_name'}) {
        my $_base_variable = "{" . "attachment_field_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'attachment_field_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# vobjects_object_name_object_record_id_attachment_fields_attachment_field_name_file_post
#
# Update Attachment Field File
#
# @param string $object_name The object name__v field value. For example, product__v. (required)
# @param string $object_record_id The object record id field value. (required)
# @param string $attachment_field_name The name of the Attachment field to update. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'object_name' => {
        data_type => 'string',
        description => 'The object name__v field value. For example, product__v.',
        required => '1',
    },
    'object_record_id' => {
        data_type => 'string',
        description => 'The object record id field value.',
        required => '1',
    },
    'attachment_field_name' => {
        data_type => 'string',
        description => 'The name of the Attachment field to update.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'vobjects_object_name_object_record_id_attachment_fields_attachment_field_name_file_post' } = {
        summary => 'Update Attachment Field File',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub vobjects_object_name_object_record_id_attachment_fields_attachment_field_name_file_post {
    my ($self, %args) = @_;

    # verify the required parameter 'object_name' is set
    unless (exists $args{'object_name'}) {
      croak("Missing the required parameter 'object_name' when calling vobjects_object_name_object_record_id_attachment_fields_attachment_field_name_file_post");
    }

    # verify the required parameter 'object_record_id' is set
    unless (exists $args{'object_record_id'}) {
      croak("Missing the required parameter 'object_record_id' when calling vobjects_object_name_object_record_id_attachment_fields_attachment_field_name_file_post");
    }

    # verify the required parameter 'attachment_field_name' is set
    unless (exists $args{'attachment_field_name'}) {
      croak("Missing the required parameter 'attachment_field_name' when calling vobjects_object_name_object_record_id_attachment_fields_attachment_field_name_file_post");
    }

    # parse inputs
    my $_resource_path = '/vobjects/{object_name}/{object_record_id}/attachment_fields/{attachment_field_name}/file';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'object_name'}) {
        my $_base_variable = "{" . "object_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'object_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'object_record_id'}) {
        my $_base_variable = "{" . "object_record_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'object_record_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'attachment_field_name'}) {
        my $_base_variable = "{" . "attachment_field_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'attachment_field_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# vobjects_object_name_object_record_id_attachment_fields_file_get
#
# Download All Attachment Field Files
#
# @param string $object_name The object name__v field value. For example, product__v. (required)
# @param string $object_record_id The object record id field value. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'object_name' => {
        data_type => 'string',
        description => 'The object name__v field value. For example, product__v.',
        required => '1',
    },
    'object_record_id' => {
        data_type => 'string',
        description => 'The object record id field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'vobjects_object_name_object_record_id_attachment_fields_file_get' } = {
        summary => 'Download All Attachment Field Files',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub vobjects_object_name_object_record_id_attachment_fields_file_get {
    my ($self, %args) = @_;

    # verify the required parameter 'object_name' is set
    unless (exists $args{'object_name'}) {
      croak("Missing the required parameter 'object_name' when calling vobjects_object_name_object_record_id_attachment_fields_file_get");
    }

    # verify the required parameter 'object_record_id' is set
    unless (exists $args{'object_record_id'}) {
      croak("Missing the required parameter 'object_record_id' when calling vobjects_object_name_object_record_id_attachment_fields_file_get");
    }

    # parse inputs
    my $_resource_path = '/vobjects/{object_name}/{object_record_id}/attachment_fields/file';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'object_name'}) {
        my $_base_variable = "{" . "object_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'object_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'object_record_id'}) {
        my $_base_variable = "{" . "object_record_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'object_record_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# vobjects_object_name_object_record_id_attachments_attachment_id_delete
#
# Delete Object Record Attachment
#
# @param string $object_name The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
# @param string $object_record_id The object record id field value. (required)
# @param string $attachment_id The attachment id field value. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'object_name' => {
        data_type => 'string',
        description => 'The object name__v field value (product__v, country__v, custom_object__c, etc.).',
        required => '1',
    },
    'object_record_id' => {
        data_type => 'string',
        description => 'The object record id field value.',
        required => '1',
    },
    'attachment_id' => {
        data_type => 'string',
        description => 'The attachment id field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'vobjects_object_name_object_record_id_attachments_attachment_id_delete' } = {
        summary => 'Delete Object Record Attachment',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub vobjects_object_name_object_record_id_attachments_attachment_id_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'object_name' is set
    unless (exists $args{'object_name'}) {
      croak("Missing the required parameter 'object_name' when calling vobjects_object_name_object_record_id_attachments_attachment_id_delete");
    }

    # verify the required parameter 'object_record_id' is set
    unless (exists $args{'object_record_id'}) {
      croak("Missing the required parameter 'object_record_id' when calling vobjects_object_name_object_record_id_attachments_attachment_id_delete");
    }

    # verify the required parameter 'attachment_id' is set
    unless (exists $args{'attachment_id'}) {
      croak("Missing the required parameter 'attachment_id' when calling vobjects_object_name_object_record_id_attachments_attachment_id_delete");
    }

    # parse inputs
    my $_resource_path = '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'object_name'}) {
        my $_base_variable = "{" . "object_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'object_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'object_record_id'}) {
        my $_base_variable = "{" . "object_record_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'object_record_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'attachment_id'}) {
        my $_base_variable = "{" . "attachment_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'attachment_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# vobjects_object_name_object_record_id_attachments_attachment_id_get
#
# Retrieve Object Record Attachment Metadata
#
# @param string $object_name The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
# @param string $object_record_id The object record id field value. (required)
# @param string $attachment_id The attachment id field value. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'object_name' => {
        data_type => 'string',
        description => 'The object name__v field value (product__v, country__v, custom_object__c, etc.).',
        required => '1',
    },
    'object_record_id' => {
        data_type => 'string',
        description => 'The object record id field value.',
        required => '1',
    },
    'attachment_id' => {
        data_type => 'string',
        description => 'The attachment id field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'vobjects_object_name_object_record_id_attachments_attachment_id_get' } = {
        summary => 'Retrieve Object Record Attachment Metadata',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub vobjects_object_name_object_record_id_attachments_attachment_id_get {
    my ($self, %args) = @_;

    # verify the required parameter 'object_name' is set
    unless (exists $args{'object_name'}) {
      croak("Missing the required parameter 'object_name' when calling vobjects_object_name_object_record_id_attachments_attachment_id_get");
    }

    # verify the required parameter 'object_record_id' is set
    unless (exists $args{'object_record_id'}) {
      croak("Missing the required parameter 'object_record_id' when calling vobjects_object_name_object_record_id_attachments_attachment_id_get");
    }

    # verify the required parameter 'attachment_id' is set
    unless (exists $args{'attachment_id'}) {
      croak("Missing the required parameter 'attachment_id' when calling vobjects_object_name_object_record_id_attachments_attachment_id_get");
    }

    # parse inputs
    my $_resource_path = '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'object_name'}) {
        my $_base_variable = "{" . "object_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'object_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'object_record_id'}) {
        my $_base_variable = "{" . "object_record_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'object_record_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'attachment_id'}) {
        my $_base_variable = "{" . "attachment_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'attachment_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# vobjects_object_name_object_record_id_attachments_attachment_id_put
#
# Update Object Record Attachment Description
#
# @param string $object_name The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
# @param string $object_record_id The object record id field value. (required)
# @param string $attachment_id The attachment id field value. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'object_name' => {
        data_type => 'string',
        description => 'The object name__v field value (product__v, country__v, custom_object__c, etc.).',
        required => '1',
    },
    'object_record_id' => {
        data_type => 'string',
        description => 'The object record id field value.',
        required => '1',
    },
    'attachment_id' => {
        data_type => 'string',
        description => 'The attachment id field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'vobjects_object_name_object_record_id_attachments_attachment_id_put' } = {
        summary => 'Update Object Record Attachment Description',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub vobjects_object_name_object_record_id_attachments_attachment_id_put {
    my ($self, %args) = @_;

    # verify the required parameter 'object_name' is set
    unless (exists $args{'object_name'}) {
      croak("Missing the required parameter 'object_name' when calling vobjects_object_name_object_record_id_attachments_attachment_id_put");
    }

    # verify the required parameter 'object_record_id' is set
    unless (exists $args{'object_record_id'}) {
      croak("Missing the required parameter 'object_record_id' when calling vobjects_object_name_object_record_id_attachments_attachment_id_put");
    }

    # verify the required parameter 'attachment_id' is set
    unless (exists $args{'attachment_id'}) {
      croak("Missing the required parameter 'attachment_id' when calling vobjects_object_name_object_record_id_attachments_attachment_id_put");
    }

    # parse inputs
    my $_resource_path = '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'object_name'}) {
        my $_base_variable = "{" . "object_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'object_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'object_record_id'}) {
        my $_base_variable = "{" . "object_record_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'object_record_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'attachment_id'}) {
        my $_base_variable = "{" . "attachment_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'attachment_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_delete
#
# Delete Object Record Attachment Version
#
# @param string $object_name The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
# @param string $object_record_id The object record id field value. (required)
# @param string $attachment_id The attachment id field value. (required)
# @param string $attachment_version The attachment version__v field value. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'object_name' => {
        data_type => 'string',
        description => 'The object name__v field value (product__v, country__v, custom_object__c, etc.).',
        required => '1',
    },
    'object_record_id' => {
        data_type => 'string',
        description => 'The object record id field value.',
        required => '1',
    },
    'attachment_id' => {
        data_type => 'string',
        description => 'The attachment id field value.',
        required => '1',
    },
    'attachment_version' => {
        data_type => 'string',
        description => 'The attachment version__v field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_delete' } = {
        summary => 'Delete Object Record Attachment Version',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'object_name' is set
    unless (exists $args{'object_name'}) {
      croak("Missing the required parameter 'object_name' when calling vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_delete");
    }

    # verify the required parameter 'object_record_id' is set
    unless (exists $args{'object_record_id'}) {
      croak("Missing the required parameter 'object_record_id' when calling vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_delete");
    }

    # verify the required parameter 'attachment_id' is set
    unless (exists $args{'attachment_id'}) {
      croak("Missing the required parameter 'attachment_id' when calling vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_delete");
    }

    # verify the required parameter 'attachment_version' is set
    unless (exists $args{'attachment_version'}) {
      croak("Missing the required parameter 'attachment_version' when calling vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_delete");
    }

    # parse inputs
    my $_resource_path = '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'object_name'}) {
        my $_base_variable = "{" . "object_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'object_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'object_record_id'}) {
        my $_base_variable = "{" . "object_record_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'object_record_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'attachment_id'}) {
        my $_base_variable = "{" . "attachment_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'attachment_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'attachment_version'}) {
        my $_base_variable = "{" . "attachment_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'attachment_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_file_get
#
# Download Object Record Attachment File
#
# @param string $object_name The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
# @param string $object_record_id The object record id field value. (required)
# @param string $attachment_id The attachment id field value. (required)
# @param string $attachment_version  (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'object_name' => {
        data_type => 'string',
        description => 'The object name__v field value (product__v, country__v, custom_object__c, etc.).',
        required => '1',
    },
    'object_record_id' => {
        data_type => 'string',
        description => 'The object record id field value.',
        required => '1',
    },
    'attachment_id' => {
        data_type => 'string',
        description => 'The attachment id field value.',
        required => '1',
    },
    'attachment_version' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_file_get' } = {
        summary => 'Download Object Record Attachment File',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_file_get {
    my ($self, %args) = @_;

    # verify the required parameter 'object_name' is set
    unless (exists $args{'object_name'}) {
      croak("Missing the required parameter 'object_name' when calling vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_file_get");
    }

    # verify the required parameter 'object_record_id' is set
    unless (exists $args{'object_record_id'}) {
      croak("Missing the required parameter 'object_record_id' when calling vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_file_get");
    }

    # verify the required parameter 'attachment_id' is set
    unless (exists $args{'attachment_id'}) {
      croak("Missing the required parameter 'attachment_id' when calling vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_file_get");
    }

    # verify the required parameter 'attachment_version' is set
    unless (exists $args{'attachment_version'}) {
      croak("Missing the required parameter 'attachment_version' when calling vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_file_get");
    }

    # parse inputs
    my $_resource_path = '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}/file';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'object_name'}) {
        my $_base_variable = "{" . "object_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'object_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'object_record_id'}) {
        my $_base_variable = "{" . "object_record_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'object_record_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'attachment_id'}) {
        my $_base_variable = "{" . "attachment_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'attachment_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'attachment_version'}) {
        my $_base_variable = "{" . "attachment_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'attachment_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_get
#
# Retrieve Object Record Attachment Version Metadata
#
# @param string $object_name The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
# @param string $object_record_id The object record id field value. (required)
# @param string $attachment_id The attachment id field value. (required)
# @param string $attachment_version The attachment version__v field value. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'object_name' => {
        data_type => 'string',
        description => 'The object name__v field value (product__v, country__v, custom_object__c, etc.).',
        required => '1',
    },
    'object_record_id' => {
        data_type => 'string',
        description => 'The object record id field value.',
        required => '1',
    },
    'attachment_id' => {
        data_type => 'string',
        description => 'The attachment id field value.',
        required => '1',
    },
    'attachment_version' => {
        data_type => 'string',
        description => 'The attachment version__v field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_get' } = {
        summary => 'Retrieve Object Record Attachment Version Metadata',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_get {
    my ($self, %args) = @_;

    # verify the required parameter 'object_name' is set
    unless (exists $args{'object_name'}) {
      croak("Missing the required parameter 'object_name' when calling vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_get");
    }

    # verify the required parameter 'object_record_id' is set
    unless (exists $args{'object_record_id'}) {
      croak("Missing the required parameter 'object_record_id' when calling vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_get");
    }

    # verify the required parameter 'attachment_id' is set
    unless (exists $args{'attachment_id'}) {
      croak("Missing the required parameter 'attachment_id' when calling vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_get");
    }

    # verify the required parameter 'attachment_version' is set
    unless (exists $args{'attachment_version'}) {
      croak("Missing the required parameter 'attachment_version' when calling vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_get");
    }

    # parse inputs
    my $_resource_path = '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'object_name'}) {
        my $_base_variable = "{" . "object_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'object_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'object_record_id'}) {
        my $_base_variable = "{" . "object_record_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'object_record_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'attachment_id'}) {
        my $_base_variable = "{" . "attachment_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'attachment_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'attachment_version'}) {
        my $_base_variable = "{" . "attachment_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'attachment_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_post
#
# Restore Object Record Attachment Version
#
# @param string $object_name The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
# @param string $object_record_id The object record id field value. (required)
# @param string $attachment_id The attachment id field value. (required)
# @param string $attachment_version The attachment version__v field value. (required)
# @param boolean $restore  (optional)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'object_name' => {
        data_type => 'string',
        description => 'The object name__v field value (product__v, country__v, custom_object__c, etc.).',
        required => '1',
    },
    'object_record_id' => {
        data_type => 'string',
        description => 'The object record id field value.',
        required => '1',
    },
    'attachment_id' => {
        data_type => 'string',
        description => 'The attachment id field value.',
        required => '1',
    },
    'attachment_version' => {
        data_type => 'string',
        description => 'The attachment version__v field value.',
        required => '1',
    },
    'restore' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_post' } = {
        summary => 'Restore Object Record Attachment Version',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_post {
    my ($self, %args) = @_;

    # verify the required parameter 'object_name' is set
    unless (exists $args{'object_name'}) {
      croak("Missing the required parameter 'object_name' when calling vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_post");
    }

    # verify the required parameter 'object_record_id' is set
    unless (exists $args{'object_record_id'}) {
      croak("Missing the required parameter 'object_record_id' when calling vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_post");
    }

    # verify the required parameter 'attachment_id' is set
    unless (exists $args{'attachment_id'}) {
      croak("Missing the required parameter 'attachment_id' when calling vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_post");
    }

    # verify the required parameter 'attachment_version' is set
    unless (exists $args{'attachment_version'}) {
      croak("Missing the required parameter 'attachment_version' when calling vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_post");
    }

    # parse inputs
    my $_resource_path = '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'restore'}) {
        $query_params->{'restore'} = $self->{api_client}->to_query_value($args{'restore'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'object_name'}) {
        my $_base_variable = "{" . "object_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'object_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'object_record_id'}) {
        my $_base_variable = "{" . "object_record_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'object_record_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'attachment_id'}) {
        my $_base_variable = "{" . "attachment_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'attachment_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'attachment_version'}) {
        my $_base_variable = "{" . "attachment_version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'attachment_version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# vobjects_object_name_object_record_id_attachments_attachment_id_versions_get
#
# Retrieve Object Record Attachment Versions
#
# @param string $object_name The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
# @param string $object_record_id The object record id field value. (required)
# @param string $attachment_id The attachment id field value. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'object_name' => {
        data_type => 'string',
        description => 'The object name__v field value (product__v, country__v, custom_object__c, etc.).',
        required => '1',
    },
    'object_record_id' => {
        data_type => 'string',
        description => 'The object record id field value.',
        required => '1',
    },
    'attachment_id' => {
        data_type => 'string',
        description => 'The attachment id field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'vobjects_object_name_object_record_id_attachments_attachment_id_versions_get' } = {
        summary => 'Retrieve Object Record Attachment Versions',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub vobjects_object_name_object_record_id_attachments_attachment_id_versions_get {
    my ($self, %args) = @_;

    # verify the required parameter 'object_name' is set
    unless (exists $args{'object_name'}) {
      croak("Missing the required parameter 'object_name' when calling vobjects_object_name_object_record_id_attachments_attachment_id_versions_get");
    }

    # verify the required parameter 'object_record_id' is set
    unless (exists $args{'object_record_id'}) {
      croak("Missing the required parameter 'object_record_id' when calling vobjects_object_name_object_record_id_attachments_attachment_id_versions_get");
    }

    # verify the required parameter 'attachment_id' is set
    unless (exists $args{'attachment_id'}) {
      croak("Missing the required parameter 'attachment_id' when calling vobjects_object_name_object_record_id_attachments_attachment_id_versions_get");
    }

    # parse inputs
    my $_resource_path = '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'object_name'}) {
        my $_base_variable = "{" . "object_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'object_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'object_record_id'}) {
        my $_base_variable = "{" . "object_record_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'object_record_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'attachment_id'}) {
        my $_base_variable = "{" . "attachment_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'attachment_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# vobjects_object_name_object_record_id_attachments_file_get
#
# Download All Object Record Attachment Files
#
# @param string $object_name The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
# @param string $object_record_id The object record id field value. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'object_name' => {
        data_type => 'string',
        description => 'The object name__v field value (product__v, country__v, custom_object__c, etc.).',
        required => '1',
    },
    'object_record_id' => {
        data_type => 'string',
        description => 'The object record id field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'vobjects_object_name_object_record_id_attachments_file_get' } = {
        summary => 'Download All Object Record Attachment Files',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub vobjects_object_name_object_record_id_attachments_file_get {
    my ($self, %args) = @_;

    # verify the required parameter 'object_name' is set
    unless (exists $args{'object_name'}) {
      croak("Missing the required parameter 'object_name' when calling vobjects_object_name_object_record_id_attachments_file_get");
    }

    # verify the required parameter 'object_record_id' is set
    unless (exists $args{'object_record_id'}) {
      croak("Missing the required parameter 'object_record_id' when calling vobjects_object_name_object_record_id_attachments_file_get");
    }

    # parse inputs
    my $_resource_path = '/vobjects/{object_name}/{object_record_id}/attachments/file';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'object_name'}) {
        my $_base_variable = "{" . "object_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'object_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'object_record_id'}) {
        my $_base_variable = "{" . "object_record_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'object_record_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# vobjects_object_name_object_record_id_attachments_get
#
# Retrieve Object Record Attachments
#
# @param string $object_name The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
# @param string $object_record_id The object record id field value. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'object_name' => {
        data_type => 'string',
        description => 'The object name__v field value (product__v, country__v, custom_object__c, etc.).',
        required => '1',
    },
    'object_record_id' => {
        data_type => 'string',
        description => 'The object record id field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'vobjects_object_name_object_record_id_attachments_get' } = {
        summary => 'Retrieve Object Record Attachments',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub vobjects_object_name_object_record_id_attachments_get {
    my ($self, %args) = @_;

    # verify the required parameter 'object_name' is set
    unless (exists $args{'object_name'}) {
      croak("Missing the required parameter 'object_name' when calling vobjects_object_name_object_record_id_attachments_get");
    }

    # verify the required parameter 'object_record_id' is set
    unless (exists $args{'object_record_id'}) {
      croak("Missing the required parameter 'object_record_id' when calling vobjects_object_name_object_record_id_attachments_get");
    }

    # parse inputs
    my $_resource_path = '/vobjects/{object_name}/{object_record_id}/attachments';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'object_name'}) {
        my $_base_variable = "{" . "object_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'object_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'object_record_id'}) {
        my $_base_variable = "{" . "object_record_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'object_record_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# vobjects_object_name_object_record_id_attachments_post
#
# Create Object Record Attachment
#
# @param string $object_name The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
# @param string $object_record_id The object record id field value. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'object_name' => {
        data_type => 'string',
        description => 'The object name__v field value (product__v, country__v, custom_object__c, etc.).',
        required => '1',
    },
    'object_record_id' => {
        data_type => 'string',
        description => 'The object record id field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'vobjects_object_name_object_record_id_attachments_post' } = {
        summary => 'Create Object Record Attachment',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub vobjects_object_name_object_record_id_attachments_post {
    my ($self, %args) = @_;

    # verify the required parameter 'object_name' is set
    unless (exists $args{'object_name'}) {
      croak("Missing the required parameter 'object_name' when calling vobjects_object_name_object_record_id_attachments_post");
    }

    # verify the required parameter 'object_record_id' is set
    unless (exists $args{'object_record_id'}) {
      croak("Missing the required parameter 'object_record_id' when calling vobjects_object_name_object_record_id_attachments_post");
    }

    # parse inputs
    my $_resource_path = '/vobjects/{object_name}/{object_record_id}/attachments';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'object_name'}) {
        my $_base_variable = "{" . "object_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'object_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'object_record_id'}) {
        my $_base_variable = "{" . "object_record_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'object_record_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# vobjects_object_name_object_record_id_audittrail_get
#
# Retrieve Complete Audit History for a Single Object Record
#
# @param string $object_name The object name__v field value. (required)
# @param string $object_record_id The object record id field value from which to retrieve user actions. (required)
# @param string $start_date Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vVault’s creation date.  (optional)
# @param string $end_date Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date.  (optional)
# @param string $format_result To request a CSV file of your audit history, use csv.  (optional)
# @param string $limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200. (optional)
# @param string $offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0. (optional)
# @param string $events Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of object audit events. The values passed to this parameter are case sensitive. For example, events&#x3D;Copy,Edit,Delete. If omitted, defaults to all audit events. (optional)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'object_name' => {
        data_type => 'string',
        description => 'The object name__v field value.',
        required => '1',
    },
    'object_record_id' => {
        data_type => 'string',
        description => 'The object record id field value from which to retrieve user actions.',
        required => '1',
    },
    'start_date' => {
        data_type => 'string',
        description => 'Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vVault’s creation date. ',
        required => '0',
    },
    'end_date' => {
        data_type => 'string',
        description => 'Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date. ',
        required => '0',
    },
    'format_result' => {
        data_type => 'string',
        description => 'To request a CSV file of your audit history, use csv. ',
        required => '0',
    },
    'limit' => {
        data_type => 'string',
        description => 'Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.',
        required => '0',
    },
    'offset' => {
        data_type => 'string',
        description => 'Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0.',
        required => '0',
    },
    'events' => {
        data_type => 'string',
        description => 'Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of object audit events. The values passed to this parameter are case sensitive. For example, events&#x3D;Copy,Edit,Delete. If omitted, defaults to all audit events.',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'vobjects_object_name_object_record_id_audittrail_get' } = {
        summary => 'Retrieve Complete Audit History for a Single Object Record',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub vobjects_object_name_object_record_id_audittrail_get {
    my ($self, %args) = @_;

    # verify the required parameter 'object_name' is set
    unless (exists $args{'object_name'}) {
      croak("Missing the required parameter 'object_name' when calling vobjects_object_name_object_record_id_audittrail_get");
    }

    # verify the required parameter 'object_record_id' is set
    unless (exists $args{'object_record_id'}) {
      croak("Missing the required parameter 'object_record_id' when calling vobjects_object_name_object_record_id_audittrail_get");
    }

    # parse inputs
    my $_resource_path = '/vobjects/{object_name}/{object_record_id}/audittrail';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'start_date'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'end_date'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'format_result'}) {
        $query_params->{'format_result'} = $self->{api_client}->to_query_value($args{'format_result'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }

    # query params
    if ( exists $args{'events'}) {
        $query_params->{'events'} = $self->{api_client}->to_query_value($args{'events'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'object_name'}) {
        my $_base_variable = "{" . "object_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'object_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'object_record_id'}) {
        my $_base_variable = "{" . "object_record_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'object_record_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# vobjects_object_name_object_record_id_get
#
# Retrieve Object Record
#
# @param string $object_name The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
# @param string $object_record_id The object record id field value. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'object_name' => {
        data_type => 'string',
        description => 'The object name__v field value (product__v, country__v, custom_object__c, etc.).',
        required => '1',
    },
    'object_record_id' => {
        data_type => 'string',
        description => 'The object record id field value.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'vobjects_object_name_object_record_id_get' } = {
        summary => 'Retrieve Object Record',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub vobjects_object_name_object_record_id_get {
    my ($self, %args) = @_;

    # verify the required parameter 'object_name' is set
    unless (exists $args{'object_name'}) {
      croak("Missing the required parameter 'object_name' when calling vobjects_object_name_object_record_id_get");
    }

    # verify the required parameter 'object_record_id' is set
    unless (exists $args{'object_record_id'}) {
      croak("Missing the required parameter 'object_record_id' when calling vobjects_object_name_object_record_id_get");
    }

    # parse inputs
    my $_resource_path = '/vobjects/{object_name}/{object_record_id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'object_name'}) {
        my $_base_variable = "{" . "object_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'object_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'object_record_id'}) {
        my $_base_variable = "{" . "object_record_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'object_record_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# vobjects_object_name_post
#
# Create & Upsert Object Records
#
# @param string $object_name The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
# @param string $id_param To upsert object records, add &#x60;idParam&#x3D;{field_name}&#x60; to the request endpoint. You can use any object field which has &#x60;unique&#x60; set to &#x60;true&#x60; in the object metadata. For example, &#x60;idParam&#x3D;external_id__v&#x60;. (optional)
# @param string $authorization  (optional)
# @param string $content_type Can be text/csv or application/json (optional)
# @param string $accept Can be text/csv or application/json (optional)
# @param boolean $x_vault_api_migration_mode If set to &#x60;true&#x60;, Vault allows you to create or update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as &#x60;created_by__v&#x60;. Does not bypass record triggers. Use the &#x60;X-VaultAPI-NoTriggers&#x60; header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header. (optional)
# @param boolean $x_vault_api_no_triggers If set to &#x60;true&#x60; and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers. (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'object_name' => {
        data_type => 'string',
        description => 'The object name__v field value (product__v, country__v, custom_object__c, etc.).',
        required => '1',
    },
    'id_param' => {
        data_type => 'string',
        description => 'To upsert object records, add &#x60;idParam&#x3D;{field_name}&#x60; to the request endpoint. You can use any object field which has &#x60;unique&#x60; set to &#x60;true&#x60; in the object metadata. For example, &#x60;idParam&#x3D;external_id__v&#x60;.',
        required => '0',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => 'Can be text/csv or application/json',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => 'Can be text/csv or application/json',
        required => '0',
    },
    'x_vault_api_migration_mode' => {
        data_type => 'boolean',
        description => 'If set to &#x60;true&#x60;, Vault allows you to create or update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as &#x60;created_by__v&#x60;. Does not bypass record triggers. Use the &#x60;X-VaultAPI-NoTriggers&#x60; header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header.',
        required => '0',
    },
    'x_vault_api_no_triggers' => {
        data_type => 'boolean',
        description => 'If set to &#x60;true&#x60; and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers.',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'vobjects_object_name_post' } = {
        summary => 'Create &amp; Upsert Object Records',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub vobjects_object_name_post {
    my ($self, %args) = @_;

    # verify the required parameter 'object_name' is set
    unless (exists $args{'object_name'}) {
      croak("Missing the required parameter 'object_name' when calling vobjects_object_name_post");
    }

    # parse inputs
    my $_resource_path = '/vobjects/{object_name}';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'id_param'}) {
        $query_params->{'idParam'} = $self->{api_client}->to_query_value($args{'id_param'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_migration_mode'}) {
        $header_params->{'X-VaultAPI-MigrationMode'} = $self->{api_client}->to_header_value($args{'x_vault_api_migration_mode'});
    }

    # header params
    if ( exists $args{'x_vault_api_no_triggers'}) {
        $header_params->{'X-VaultAPI-NoTriggers'} = $self->{api_client}->to_header_value($args{'x_vault_api_no_triggers'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'object_name'}) {
        my $_base_variable = "{" . "object_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'object_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# vobjects_object_name_put
#
# Update Object Records
#
# @param string $object_name The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
# @param string $authorization  (optional)
# @param string $content_type Can be text/csv or application/json (optional)
# @param string $accept Can be text/csv or application/json (optional)
# @param boolean $x_vault_api_migration_mode If set to &#x60;true&#x60;, Vault allows you to update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as &#x60;created_by__v&#x60;. Does not bypass record triggers. Use the &#x60;X-VaultAPI-NoTriggers&#x60; header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header. (optional)
# @param boolean $x_vault_api_no_triggers If set to &#x60;true&#x60; and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers. (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'object_name' => {
        data_type => 'string',
        description => 'The object name__v field value (product__v, country__v, custom_object__c, etc.).',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => 'Can be text/csv or application/json',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => 'Can be text/csv or application/json',
        required => '0',
    },
    'x_vault_api_migration_mode' => {
        data_type => 'boolean',
        description => 'If set to &#x60;true&#x60;, Vault allows you to update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as &#x60;created_by__v&#x60;. Does not bypass record triggers. Use the &#x60;X-VaultAPI-NoTriggers&#x60; header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header.',
        required => '0',
    },
    'x_vault_api_no_triggers' => {
        data_type => 'boolean',
        description => 'If set to &#x60;true&#x60; and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers.',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'vobjects_object_name_put' } = {
        summary => 'Update Object Records',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub vobjects_object_name_put {
    my ($self, %args) = @_;

    # verify the required parameter 'object_name' is set
    unless (exists $args{'object_name'}) {
      croak("Missing the required parameter 'object_name' when calling vobjects_object_name_put");
    }

    # parse inputs
    my $_resource_path = '/vobjects/{object_name}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_migration_mode'}) {
        $header_params->{'X-VaultAPI-MigrationMode'} = $self->{api_client}->to_header_value($args{'x_vault_api_migration_mode'});
    }

    # header params
    if ( exists $args{'x_vault_api_no_triggers'}) {
        $header_params->{'X-VaultAPI-NoTriggers'} = $self->{api_client}->to_header_value($args{'x_vault_api_no_triggers'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'object_name'}) {
        my $_base_variable = "{" . "object_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'object_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# vobjects_object_name_roles_delete
#
# Remove Users & Groups from Roles on Object Records
#
# @param string $object_name The name of the object where you want to remove roles. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'object_name' => {
        data_type => 'string',
        description => 'The name of the object where you want to remove roles.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'vobjects_object_name_roles_delete' } = {
        summary => 'Remove Users &amp; Groups from Roles on Object Records',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub vobjects_object_name_roles_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'object_name' is set
    unless (exists $args{'object_name'}) {
      croak("Missing the required parameter 'object_name' when calling vobjects_object_name_roles_delete");
    }

    # parse inputs
    my $_resource_path = '/vobjects/{object_name}/roles';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'object_name'}) {
        my $_base_variable = "{" . "object_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'object_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# vobjects_object_name_roles_post
#
# Assign Users & Groups to Roles on Object Records
#
# @param string $object_name The name of the object where you want to remove roles. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $content_type  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'object_name' => {
        data_type => 'string',
        description => 'The name of the object where you want to remove roles.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'vobjects_object_name_roles_post' } = {
        summary => 'Assign Users &amp; Groups to Roles on Object Records',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub vobjects_object_name_roles_post {
    my ($self, %args) = @_;

    # verify the required parameter 'object_name' is set
    unless (exists $args{'object_name'}) {
      croak("Missing the required parameter 'object_name' when calling vobjects_object_name_roles_post");
    }

    # parse inputs
    my $_resource_path = '/vobjects/{object_name}/roles';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'object_name'}) {
        my $_base_variable = "{" . "object_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'object_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# vobjects_outbound_package_v_package_id_dependencies_get
#
# Retrieve Outbound Package Dependencies
#
# @param string $package_id The ID of the outbound_package__v record from which to retrieve dependencies. (required)
# @param string $authorization  (optional)
# @param string $accept  (optional)
# @param string $x_vault_api_client_id Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
{
    my $params = {
    'package_id' => {
        data_type => 'string',
        description => 'The ID of the outbound_package__v record from which to retrieve dependencies.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'x_vault_api_client_id' => {
        data_type => 'string',
        description => 'Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'vobjects_outbound_package_v_package_id_dependencies_get' } = {
        summary => 'Retrieve Outbound Package Dependencies',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub vobjects_outbound_package_v_package_id_dependencies_get {
    my ($self, %args) = @_;

    # verify the required parameter 'package_id' is set
    unless (exists $args{'package_id'}) {
      croak("Missing the required parameter 'package_id' when calling vobjects_outbound_package_v_package_id_dependencies_get");
    }

    # parse inputs
    my $_resource_path = '/vobjects/outbound_package__v/{package_id}/dependencies';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_vault_api_client_id'}) {
        $header_params->{'X-VaultAPI-ClientID'} = $self->{api_client}->to_header_value($args{'x_vault_api_client_id'});
    }

    # path params
    if ( exists $args{'package_id'}) {
        my $_base_variable = "{" . "package_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'package_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

1;
