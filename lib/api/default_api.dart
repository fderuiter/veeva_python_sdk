//
// AUTO-GENERATED FILE, DO NOT MODIFY!
//
// @dart=2.18

// ignore_for_file: unused_element, unused_import
// ignore_for_file: always_put_required_named_parameters_first
// ignore_for_file: constant_identifier_names
// ignore_for_file: lines_longer_than_80_chars

part of openapi.api;


class DefaultApi {
  DefaultApi([ApiClient? apiClient]) : apiClient = apiClient ?? defaultApiClient;

  final ApiClient apiClient;

  /// Retrieve API Versions
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> apiGetWithHttpInfo({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/api/';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve API Versions
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> apiGet({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await apiGetWithHttpInfo( authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Content File
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] componentTypeAndRecordName (required):
  ///   The component type of the record followed by the name of the record from which to retrieve the content file. The format is `{Componenttype}.{record_name}`. For example, `Formattedoutput.my_formatted_output__c`.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> apiMdlComponentsComponentTypeAndRecordNameFilesGetWithHttpInfo(String componentTypeAndRecordName, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/api/mdl/components/{component_type_and_record_name}/files'
      .replaceAll('{component_type_and_record_name}', componentTypeAndRecordName);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Content File
  ///
  /// Parameters:
  ///
  /// * [String] componentTypeAndRecordName (required):
  ///   The component type of the record followed by the name of the record from which to retrieve the content file. The format is `{Componenttype}.{record_name}`. For example, `Formattedoutput.my_formatted_output__c`.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> apiMdlComponentsComponentTypeAndRecordNameFilesGet(String componentTypeAndRecordName, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await apiMdlComponentsComponentTypeAndRecordNameFilesGetWithHttpInfo(componentTypeAndRecordName,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Component Record (MDL)
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] componentTypeAndRecordName (required):
  ///   The component type name (`Picklist`, `Docfield`, `Doctype`, etc.) followed by the name of the record from which to retrieve metadata. The format is `{Componenttype}.{record_name}`. For example, `Picklist.color__c`. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> apiMdlComponentsComponentTypeAndRecordNameGetWithHttpInfo(String componentTypeAndRecordName, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/api/mdl/components/{component_type_and_record_name}'
      .replaceAll('{component_type_and_record_name}', componentTypeAndRecordName);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Component Record (MDL)
  ///
  /// Parameters:
  ///
  /// * [String] componentTypeAndRecordName (required):
  ///   The component type name (`Picklist`, `Docfield`, `Doctype`, etc.) followed by the name of the record from which to retrieve metadata. The format is `{Componenttype}.{record_name}`. For example, `Picklist.color__c`. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> apiMdlComponentsComponentTypeAndRecordNameGet(String componentTypeAndRecordName, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await apiMdlComponentsComponentTypeAndRecordNameGetWithHttpInfo(componentTypeAndRecordName,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Asynchronous MDL Script Results
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] jobId (required):
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> apiMdlExecuteAsyncJobIdResultsGetWithHttpInfo(String jobId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/api/mdl/execute_async/{job_id}/results'
      .replaceAll('{job_id}', jobId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Asynchronous MDL Script Results
  ///
  /// Parameters:
  ///
  /// * [String] jobId (required):
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> apiMdlExecuteAsyncJobIdResultsGet(String jobId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await apiMdlExecuteAsyncJobIdResultsGetWithHttpInfo(jobId,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Execute MDL Script Asynchronously
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> apiMdlExecuteAsyncPostWithHttpInfo({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/api/mdl/execute_async';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Execute MDL Script Asynchronously
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> apiMdlExecuteAsyncPost({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await apiMdlExecuteAsyncPostWithHttpInfo( authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Execute MDL Script
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> apiMdlExecutePostWithHttpInfo({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/api/mdl/execute';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Execute MDL Script
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> apiMdlExecutePost({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await apiMdlExecutePostWithHttpInfo( authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Upload Content File
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> apiMdlFilesPostWithHttpInfo({ String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/api/mdl/files';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Upload Content File
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> apiMdlFilesPost({ String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await apiMdlFilesPostWithHttpInfo( authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Audit Details
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] auditTrailType (required):
  ///   The name of the specified audit type (document_audit_trail, object_audit_trail, etc). Use the Retrieve Audit Types API to retrieve types available in your Vault. Requests for login_audit_trail only accept one request per user at a time.
  ///
  /// * [String] startDate:
  ///   Specify a start date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days.
  ///
  /// * [String] endDate:
  ///   Specify an end date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days.
  ///
  /// * [String] allDates:
  ///   Set to true to request audit information for all dates. You must leave start_date and end_date blank when requesting an export of a full audit trail.
  ///
  /// * [String] formatResult:
  ///   To request a downloadable CSV file of your audit details, use csv. The response contains a jobId to retrieve the job status, which contains a link to download the CSV file. If omitted, the API returns a JSON response and does not start a job. If all_dates is true, this parameter is required.
  ///
  /// * [String] limit:
  ///   Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
  ///
  /// * [String] offset:
  ///   Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51. If omitted, defaults to 0.
  ///
  /// * [String] objects:
  ///   This is an optional parameter when specifying object_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more object names to retrieve their audit details. For example, objects=product__v,country__v. If omitted, defaults to all objects.
  ///
  /// * [String] events:
  ///   This is an optional parameter when specifying object_audit_trail or document_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more audit events to retrieve their audit details. For example, events=Edit,Delete,TaskAssignment. If omitted, defaults to all audit events. See Vault Help for full lists of object audit events and document audit events.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> audittrailAuditTrailTypeGetWithHttpInfo(String auditTrailType, { String? startDate, String? endDate, String? allDates, String? formatResult, String? limit, String? offset, String? objects, String? events, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/audittrail/{audit_trail_type}'
      .replaceAll('{audit_trail_type}', auditTrailType);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (startDate != null) {
      queryParams.addAll(_queryParams('', 'start_date', startDate));
    }
    if (endDate != null) {
      queryParams.addAll(_queryParams('', 'end_date', endDate));
    }
    if (allDates != null) {
      queryParams.addAll(_queryParams('', 'all_dates', allDates));
    }
    if (formatResult != null) {
      queryParams.addAll(_queryParams('', 'format_result', formatResult));
    }
    if (limit != null) {
      queryParams.addAll(_queryParams('', 'limit', limit));
    }
    if (offset != null) {
      queryParams.addAll(_queryParams('', 'offset', offset));
    }
    if (objects != null) {
      queryParams.addAll(_queryParams('', 'objects', objects));
    }
    if (events != null) {
      queryParams.addAll(_queryParams('', 'events', events));
    }

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Audit Details
  ///
  /// Parameters:
  ///
  /// * [String] auditTrailType (required):
  ///   The name of the specified audit type (document_audit_trail, object_audit_trail, etc). Use the Retrieve Audit Types API to retrieve types available in your Vault. Requests for login_audit_trail only accept one request per user at a time.
  ///
  /// * [String] startDate:
  ///   Specify a start date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days.
  ///
  /// * [String] endDate:
  ///   Specify an end date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days.
  ///
  /// * [String] allDates:
  ///   Set to true to request audit information for all dates. You must leave start_date and end_date blank when requesting an export of a full audit trail.
  ///
  /// * [String] formatResult:
  ///   To request a downloadable CSV file of your audit details, use csv. The response contains a jobId to retrieve the job status, which contains a link to download the CSV file. If omitted, the API returns a JSON response and does not start a job. If all_dates is true, this parameter is required.
  ///
  /// * [String] limit:
  ///   Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
  ///
  /// * [String] offset:
  ///   Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51. If omitted, defaults to 0.
  ///
  /// * [String] objects:
  ///   This is an optional parameter when specifying object_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more object names to retrieve their audit details. For example, objects=product__v,country__v. If omitted, defaults to all objects.
  ///
  /// * [String] events:
  ///   This is an optional parameter when specifying object_audit_trail or document_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more audit events to retrieve their audit details. For example, events=Edit,Delete,TaskAssignment. If omitted, defaults to all audit events. See Vault Help for full lists of object audit events and document audit events.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> audittrailAuditTrailTypeGet(String auditTrailType, { String? startDate, String? endDate, String? allDates, String? formatResult, String? limit, String? offset, String? objects, String? events, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await audittrailAuditTrailTypeGetWithHttpInfo(auditTrailType,  startDate: startDate, endDate: endDate, allDates: allDates, formatResult: formatResult, limit: limit, offset: offset, objects: objects, events: events, authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Authentication Type Discovery
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> authDiscoveryPostWithHttpInfo({ String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/auth/discovery';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Authentication Type Discovery
  ///
  /// Parameters:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> authDiscoveryPost({ String? accept, String? xVaultAPIClientID, }) async {
    final response = await authDiscoveryPostWithHttpInfo( accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// OAuth 2.0 / OpenID Connect
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] oathOidcProfileId (required):
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> authOauthSessionOathOidcProfileIdPostWithHttpInfo(String oathOidcProfileId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/auth/oauth/session/{oath_oidc_profile_id}'
      .replaceAll('{oath_oidc_profile_id}', oathOidcProfileId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// OAuth 2.0 / OpenID Connect
  ///
  /// Parameters:
  ///
  /// * [String] oathOidcProfileId (required):
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> authOauthSessionOathOidcProfileIdPost(String oathOidcProfileId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await authOauthSessionOathOidcProfileIdPostWithHttpInfo(oathOidcProfileId,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// User Name and Password
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> authPostWithHttpInfo({ String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/auth';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// User Name and Password
  ///
  /// Parameters:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> authPost({ String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    final response = await authPostWithHttpInfo( contentType: contentType, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Delete Single Source Code File
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] className (required):
  ///   The fully qualified class name of your file.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> codeClassNameDeleteWithHttpInfo(String className, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/code/{class_name}'
      .replaceAll('{class_name}', className);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'DELETE',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Delete Single Source Code File
  ///
  /// Parameters:
  ///
  /// * [String] className (required):
  ///   The fully qualified class name of your file.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> codeClassNameDelete(String className, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await codeClassNameDeleteWithHttpInfo(className,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Disable Vault Extension
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] className (required):
  ///   The fully qualified class name of your file.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> codeClassNameDisablePutWithHttpInfo(String className, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/code/{class_name}/disable'
      .replaceAll('{class_name}', className);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'PUT',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Disable Vault Extension
  ///
  /// Parameters:
  ///
  /// * [String] className (required):
  ///   The fully qualified class name of your file.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> codeClassNameDisablePut(String className, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await codeClassNameDisablePutWithHttpInfo(className,  authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Enable Vault Extension
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] className (required):
  ///   The fully qualified class name of your file.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> codeClassNameEnablePutWithHttpInfo(String className, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/code/{class_name}/enable'
      .replaceAll('{class_name}', className);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'PUT',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Enable Vault Extension
  ///
  /// Parameters:
  ///
  /// * [String] className (required):
  ///   The fully qualified class name of your file.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> codeClassNameEnablePut(String className, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await codeClassNameEnablePutWithHttpInfo(className,  authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Single Source Code File
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] className (required):
  ///   The fully qualified class name of your file.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> codeClassNameGetWithHttpInfo(String className, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/code/{class_name}'
      .replaceAll('{class_name}', className);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Single Source Code File
  ///
  /// Parameters:
  ///
  /// * [String] className (required):
  ///   The fully qualified class name of your file.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> codeClassNameGet(String className, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await codeClassNameGetWithHttpInfo(className,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve All Profiling Sessions
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> codeProfilerGetWithHttpInfo({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/code/profiler';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve All Profiling Sessions
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> codeProfilerGet({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await codeProfilerGetWithHttpInfo( authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Create Profiling Session
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> codeProfilerPostWithHttpInfo({ String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/code/profiler';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Create Profiling Session
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> codeProfilerPost({ String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    final response = await codeProfilerPostWithHttpInfo( authorization: authorization, contentType: contentType, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// End Profiling Session
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] sessionName (required):
  ///   The name of the session, for example,  baseline__c.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> codeProfilerSessionNameActionsEndPostWithHttpInfo(String sessionName, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/code/profiler/{session_name}/actions/end'
      .replaceAll('{session_name}', sessionName);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// End Profiling Session
  ///
  /// Parameters:
  ///
  /// * [String] sessionName (required):
  ///   The name of the session, for example,  baseline__c.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> codeProfilerSessionNameActionsEndPost(String sessionName, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await codeProfilerSessionNameActionsEndPostWithHttpInfo(sessionName,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Delete Profiling Session
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] sessionName (required):
  ///   The name of the session, for example,  baseline__c.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> codeProfilerSessionNameDeleteWithHttpInfo(String sessionName, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/code/profiler/{session_name}'
      .replaceAll('{session_name}', sessionName);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'DELETE',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Delete Profiling Session
  ///
  /// Parameters:
  ///
  /// * [String] sessionName (required):
  ///   The name of the session, for example,  baseline__c.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> codeProfilerSessionNameDelete(String sessionName, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await codeProfilerSessionNameDeleteWithHttpInfo(sessionName,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Profiling Session
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] sessionName (required):
  ///   The name of the session, for example,  baseline__c.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> codeProfilerSessionNameGetWithHttpInfo(String sessionName, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/code/profiler/{session_name}'
      .replaceAll('{session_name}', sessionName);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Profiling Session
  ///
  /// Parameters:
  ///
  /// * [String] sessionName (required):
  ///   The name of the session, for example,  baseline__c.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> codeProfilerSessionNameGet(String sessionName, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await codeProfilerSessionNameGetWithHttpInfo(sessionName,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Download Profiling Session Results
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] sessionName (required):
  ///   The name of the session, for example,  baseline__c.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> codeProfilerSessionNameResultsGetWithHttpInfo(String sessionName, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/code/profiler/{session_name}/results'
      .replaceAll('{session_name}', sessionName);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Download Profiling Session Results
  ///
  /// Parameters:
  ///
  /// * [String] sessionName (required):
  ///   The name of the session, for example,  baseline__c.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> codeProfilerSessionNameResultsGet(String sessionName, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await codeProfilerSessionNameResultsGetWithHttpInfo(sessionName,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Add or Replace Single Source Code File
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> codePutWithHttpInfo({ String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/code';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'PUT',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Add or Replace Single Source Code File
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> codePut({ String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await codePutWithHttpInfo( authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Specific Root Nodes
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] edlHierarchyOrTemplate (required):
  ///   Choose to retrieve either edl_hierarchy__v or edl_template__v
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> compositesTreesEdlHierarchyOrTemplateActionsListnodesPostWithHttpInfo(String edlHierarchyOrTemplate, { String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/composites/trees/{edl_hierarchy_or_template}/actions/listnodes'
      .replaceAll('{edl_hierarchy_or_template}', edlHierarchyOrTemplate);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Specific Root Nodes
  ///
  /// Parameters:
  ///
  /// * [String] edlHierarchyOrTemplate (required):
  ///   Choose to retrieve either edl_hierarchy__v or edl_template__v
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> compositesTreesEdlHierarchyOrTemplateActionsListnodesPost(String edlHierarchyOrTemplate, { String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    final response = await compositesTreesEdlHierarchyOrTemplateActionsListnodesPostWithHttpInfo(edlHierarchyOrTemplate,  authorization: authorization, contentType: contentType, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve All Root Nodes
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] edlHierarchyOrTemplate (required):
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> compositesTreesEdlHierarchyOrTemplateGetWithHttpInfo(String edlHierarchyOrTemplate, { String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/composites/trees/{edl_hierarchy_or_template}'
      .replaceAll('{edl_hierarchy_or_template}', edlHierarchyOrTemplate);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve All Root Nodes
  ///
  /// Parameters:
  ///
  /// * [String] edlHierarchyOrTemplate (required):
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> compositesTreesEdlHierarchyOrTemplateGet(String edlHierarchyOrTemplate, { String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    final response = await compositesTreesEdlHierarchyOrTemplateGetWithHttpInfo(edlHierarchyOrTemplate,  authorization: authorization, contentType: contentType, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve a Node's Children
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] parentNodeId (required):
  ///   The ID of a parent node in the hierarchy.
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> compositesTreesEdlHierarchyVParentNodeIdChildrenGetWithHttpInfo(String parentNodeId, { String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/composites/trees/edl_hierarchy__v/{parent_node_id}/children'
      .replaceAll('{parent_node_id}', parentNodeId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve a Node's Children
  ///
  /// Parameters:
  ///
  /// * [String] parentNodeId (required):
  ///   The ID of a parent node in the hierarchy.
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> compositesTreesEdlHierarchyVParentNodeIdChildrenGet(String parentNodeId, { String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    final response = await compositesTreesEdlHierarchyVParentNodeIdChildrenGetWithHttpInfo(parentNodeId,  authorization: authorization, contentType: contentType, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Update Node Order
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] parentNodeId (required):
  ///   The ID of a parent node in the hierarchy.
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> compositesTreesEdlHierarchyVParentNodeIdChildrenPutWithHttpInfo(String parentNodeId, { String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/composites/trees/edl_hierarchy__v/{parent_node_id}/children'
      .replaceAll('{parent_node_id}', parentNodeId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'PUT',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Update Node Order
  ///
  /// Parameters:
  ///
  /// * [String] parentNodeId (required):
  ///   The ID of a parent node in the hierarchy.
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> compositesTreesEdlHierarchyVParentNodeIdChildrenPut(String parentNodeId, { String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    final response = await compositesTreesEdlHierarchyVParentNodeIdChildrenPutWithHttpInfo(parentNodeId,  authorization: authorization, contentType: contentType, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Component Record (XML/JSON)
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] componentTypeAndRecordName (required):
  ///   The component type name (`Picklist`, `Docfield`, `Doctype`, etc.) followed by the name of the record from which to retrieve metadata. The format is `{Componenttype}.{record_name}`. For example, `Picklist.color__c`. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint.
  ///
  /// * [String] loc:
  ///   When localized (translated) strings are available, retrieve them by setting loc to true.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> configurationComponentTypeAndRecordNameGetWithHttpInfo(String componentTypeAndRecordName, { String? loc, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/configuration/{component_type_and_record_name}'
      .replaceAll('{component_type_and_record_name}', componentTypeAndRecordName);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (loc != null) {
      queryParams.addAll(_queryParams('', 'loc', loc));
    }

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Component Record (XML/JSON)
  ///
  /// Parameters:
  ///
  /// * [String] componentTypeAndRecordName (required):
  ///   The component type name (`Picklist`, `Docfield`, `Doctype`, etc.) followed by the name of the record from which to retrieve metadata. The format is `{Componenttype}.{record_name}`. For example, `Picklist.color__c`. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint.
  ///
  /// * [String] loc:
  ///   When localized (translated) strings are available, retrieve them by setting loc to true.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> configurationComponentTypeAndRecordNameGet(String componentTypeAndRecordName, { String? loc, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await configurationComponentTypeAndRecordNameGetWithHttpInfo(componentTypeAndRecordName,  loc: loc, authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Component Record Collection
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] componentType (required):
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> configurationComponentTypeGetWithHttpInfo(String componentType, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/configuration/{component_type}'
      .replaceAll('{component_type}', componentType);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Component Record Collection
  ///
  /// Parameters:
  ///
  /// * [String] componentType (required):
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> configurationComponentTypeGet(String componentType, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await configurationComponentTypeGetWithHttpInfo(componentType,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Details from a Specific Object
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] objectNameAndObjectType (required):
  ///   The object name followed by the object type in the format `Objecttype.{object_name}.{object_type}`. For example, `Objecttype.product__v.base__v`.
  ///
  /// * [String] loc:
  ///   When localized (translated) strings are available, retrieve them by setting loc to true.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> configurationObjectNameAndObjectTypeGetWithHttpInfo(String objectNameAndObjectType, { String? loc, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/configuration/{object_name_and_object_type}'
      .replaceAll('{object_name_and_object_type}', objectNameAndObjectType);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (loc != null) {
      queryParams.addAll(_queryParams('', 'loc', loc));
    }

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Details from a Specific Object
  ///
  /// Parameters:
  ///
  /// * [String] objectNameAndObjectType (required):
  ///   The object name followed by the object type in the format `Objecttype.{object_name}.{object_type}`. For example, `Objecttype.product__v.base__v`.
  ///
  /// * [String] loc:
  ///   When localized (translated) strings are available, retrieve them by setting loc to true.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> configurationObjectNameAndObjectTypeGet(String objectNameAndObjectType, { String? loc, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await configurationObjectNameAndObjectTypeGetWithHttpInfo(objectNameAndObjectType,  loc: loc, authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Details from All Object Types
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> configurationObjecttypeGetWithHttpInfo({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/configuration/Objecttype';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Details from All Object Types
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> configurationObjecttypeGet({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await configurationObjecttypeGetWithHttpInfo( authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Delete Lifecycle Role Assignment Override Rules
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> configurationRoleAssignmentRuleDeleteWithHttpInfo({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/configuration/role_assignment_rule';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'DELETE',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Delete Lifecycle Role Assignment Override Rules
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> configurationRoleAssignmentRuleDelete({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await configurationRoleAssignmentRuleDeleteWithHttpInfo( authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Lifecycle Role Assignment Rules (Default & Override)
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] lifecycleV:
  ///   Include the name of the lifecycle from which to retrieve information. For example: lifecycle_v=general_lifecycle__c
  ///
  /// * [String] roleV:
  ///   Include the name of the role from which to retrieve information. For example: role__v=editor__c
  ///
  /// * [String] productV:
  ///   Include the ID/name of a specific product to see product-based override rules to default users/allowed users for the lifecycle role. For example: product__v=0PR0011001 or product__v.name__v=CholeCap
  ///
  /// * [String] countryV:
  ///   Include the ID/name of a specific country to see country-based override rules to default users/allowed users for the lifecycle role. For example: country__v=0CR0022002 or country__v.name__v=United States
  ///
  /// * [String] studyV:
  ///   In eTMF Vaults only. Include the ID/name of a specific study to see study-based override rules to default users/allowed users for the lifecycle role. For example: study__v=0ST0021J01 or study__v.name__v=CholeCap Study
  ///
  /// * [String] studyCountryV:
  ///   In eTMF Vaults only. Include the ID/name of a specific study country to see study country-based override rules to default users/allowed users for the lifecycle role. For example: study_country__v=0SC0001001 or study_country__v.name__v=Germany
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> configurationRoleAssignmentRuleGetWithHttpInfo({ String? lifecycleV, String? roleV, String? productV, String? countryV, String? studyV, String? studyCountryV, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/configuration/role_assignment_rule';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (lifecycleV != null) {
      queryParams.addAll(_queryParams('', 'lifecycle__v', lifecycleV));
    }
    if (roleV != null) {
      queryParams.addAll(_queryParams('', 'role__v', roleV));
    }
    if (productV != null) {
      queryParams.addAll(_queryParams('', 'product__v', productV));
    }
    if (countryV != null) {
      queryParams.addAll(_queryParams('', 'country__v', countryV));
    }
    if (studyV != null) {
      queryParams.addAll(_queryParams('', 'study__v', studyV));
    }
    if (studyCountryV != null) {
      queryParams.addAll(_queryParams('', 'study_country__v', studyCountryV));
    }

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Lifecycle Role Assignment Rules (Default & Override)
  ///
  /// Parameters:
  ///
  /// * [String] lifecycleV:
  ///   Include the name of the lifecycle from which to retrieve information. For example: lifecycle_v=general_lifecycle__c
  ///
  /// * [String] roleV:
  ///   Include the name of the role from which to retrieve information. For example: role__v=editor__c
  ///
  /// * [String] productV:
  ///   Include the ID/name of a specific product to see product-based override rules to default users/allowed users for the lifecycle role. For example: product__v=0PR0011001 or product__v.name__v=CholeCap
  ///
  /// * [String] countryV:
  ///   Include the ID/name of a specific country to see country-based override rules to default users/allowed users for the lifecycle role. For example: country__v=0CR0022002 or country__v.name__v=United States
  ///
  /// * [String] studyV:
  ///   In eTMF Vaults only. Include the ID/name of a specific study to see study-based override rules to default users/allowed users for the lifecycle role. For example: study__v=0ST0021J01 or study__v.name__v=CholeCap Study
  ///
  /// * [String] studyCountryV:
  ///   In eTMF Vaults only. Include the ID/name of a specific study country to see study country-based override rules to default users/allowed users for the lifecycle role. For example: study_country__v=0SC0001001 or study_country__v.name__v=Germany
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> configurationRoleAssignmentRuleGet({ String? lifecycleV, String? roleV, String? productV, String? countryV, String? studyV, String? studyCountryV, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await configurationRoleAssignmentRuleGetWithHttpInfo( lifecycleV: lifecycleV, roleV: roleV, productV: productV, countryV: countryV, studyV: studyV, studyCountryV: studyCountryV, authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Create Lifecycle Role Assignment Override Rules
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> configurationRoleAssignmentRulePostWithHttpInfo({ String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/configuration/role_assignment_rule';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Create Lifecycle Role Assignment Override Rules
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> configurationRoleAssignmentRulePost({ String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await configurationRoleAssignmentRulePostWithHttpInfo( authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Update Lifecycle Role Assignment Rules (Default & Override)
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> configurationRoleAssignmentRulePutWithHttpInfo({ String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/configuration/role_assignment_rule';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'PUT',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Update Lifecycle Role Assignment Rules (Default & Override)
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> configurationRoleAssignmentRulePut({ String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await configurationRoleAssignmentRulePutWithHttpInfo( authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Initiate Delegated Session
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///   The sessionId of the currently authenticated user who will initiate the delegated session. Cannot be a delegated_sessionid.
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> delegationLoginPostWithHttpInfo({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/delegation/login';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Initiate Delegated Session
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///   The sessionId of the currently authenticated user who will initiate the delegated session. Cannot be a delegated_sessionid.
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> delegationLoginPost({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await delegationLoginPostWithHttpInfo( authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Delegations
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> delegationVaultsGetWithHttpInfo({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/delegation/vaults';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Delegations
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> delegationVaultsGet({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await delegationVaultsGetWithHttpInfo( authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Session Keep Alive
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> keepAlivePostWithHttpInfo({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/keep-alive';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Session Keep Alive
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> keepAlivePost({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await keepAlivePostWithHttpInfo( authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Limits on Objects
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> limitsGetWithHttpInfo({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/limits';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Limits on Objects
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> limitsGet({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await limitsGetWithHttpInfo( authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Download Daily API Usage
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] date:
  ///   The day to retrieve the API Usage log. Date is in UTC and follows the format YYYY-MM-DD. Date cannot be more than 30 days in the past.
  ///
  /// * [String] logFormat:
  ///   Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP. 
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> logsApiUsageGetWithHttpInfo({ String? date, String? logFormat, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/logs/api_usage';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (date != null) {
      queryParams.addAll(_queryParams('', 'date', date));
    }
    if (logFormat != null) {
      queryParams.addAll(_queryParams('', 'log_format', logFormat));
    }

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Download Daily API Usage
  ///
  /// Parameters:
  ///
  /// * [String] date:
  ///   The day to retrieve the API Usage log. Date is in UTC and follows the format YYYY-MM-DD. Date cannot be more than 30 days in the past.
  ///
  /// * [String] logFormat:
  ///   Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP. 
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> logsApiUsageGet({ String? date, String? logFormat, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await logsApiUsageGetWithHttpInfo( date: date, logFormat: logFormat, authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve All Debug Logs
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] userId:
  ///   Filter results to retrieve the debug log for this user ID only. If omitted, this request retrieves debug logs for all users in the Vault.
  ///
  /// * [bool] includeInactive:
  ///   Set to `true` to include debug log sessions with a status of `inactive__sys` in the response. If omitted, defaults to `false` and inactive sessions are not included in the response.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> logsCodeDebugGetWithHttpInfo({ String? userId, bool? includeInactive, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/logs/code/debug';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (userId != null) {
      queryParams.addAll(_queryParams('', 'user_id', userId));
    }
    if (includeInactive != null) {
      queryParams.addAll(_queryParams('', 'include_inactive', includeInactive));
    }

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve All Debug Logs
  ///
  /// Parameters:
  ///
  /// * [String] userId:
  ///   Filter results to retrieve the debug log for this user ID only. If omitted, this request retrieves debug logs for all users in the Vault.
  ///
  /// * [bool] includeInactive:
  ///   Set to `true` to include debug log sessions with a status of `inactive__sys` in the response. If omitted, defaults to `false` and inactive sessions are not included in the response.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> logsCodeDebugGet({ String? userId, bool? includeInactive, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await logsCodeDebugGetWithHttpInfo( userId: userId, includeInactive: includeInactive, authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Delete Debug Log
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] id (required):
  ///   The ID of the debug log to delete.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> logsCodeDebugIdActionsResetDeleteWithHttpInfo(String id, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/logs/code/debug/{id}/actions/reset'
      .replaceAll('{id}', id);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'DELETE',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Delete Debug Log
  ///
  /// Parameters:
  ///
  /// * [String] id (required):
  ///   The ID of the debug log to delete.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> logsCodeDebugIdActionsResetDelete(String id, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await logsCodeDebugIdActionsResetDeleteWithHttpInfo(id,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Reset Debug Log
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] id (required):
  ///   The ID of the debug log to delete.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> logsCodeDebugIdActionsResetPostWithHttpInfo(String id, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/logs/code/debug/{id}/actions/reset'
      .replaceAll('{id}', id);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Reset Debug Log
  ///
  /// Parameters:
  ///
  /// * [String] id (required):
  ///   The ID of the debug log to delete.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> logsCodeDebugIdActionsResetPost(String id, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await logsCodeDebugIdActionsResetPostWithHttpInfo(id,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Download Debug Log Files
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] id (required):
  ///   The ID of the debug log to download.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> logsCodeDebugIdFilesGetWithHttpInfo(String id, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/logs/code/debug/{id}/files'
      .replaceAll('{id}', id);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Download Debug Log Files
  ///
  /// Parameters:
  ///
  /// * [String] id (required):
  ///   The ID of the debug log to download.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> logsCodeDebugIdFilesGet(String id, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await logsCodeDebugIdFilesGetWithHttpInfo(id,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Single Debug Log
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] id (required):
  ///   The ID of the debug log to retrieve.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> logsCodeDebugIdGetWithHttpInfo(String id, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/logs/code/debug/{id}'
      .replaceAll('{id}', id);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Single Debug Log
  ///
  /// Parameters:
  ///
  /// * [String] id (required):
  ///   The ID of the debug log to retrieve.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> logsCodeDebugIdGet(String id, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await logsCodeDebugIdGetWithHttpInfo(id,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Create Debug Log
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> logsCodeDebugPostWithHttpInfo({ String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/logs/code/debug';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Create Debug Log
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> logsCodeDebugPost({ String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await logsCodeDebugPostWithHttpInfo( authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Download SDK Runtime Log
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] date:
  ///
  /// * [String] logFormat:
  ///   Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP. 
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> logsCodeRuntimeGetWithHttpInfo({ String? date, String? logFormat, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/logs/code/runtime';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (date != null) {
      queryParams.addAll(_queryParams('', 'date', date));
    }
    if (logFormat != null) {
      queryParams.addAll(_queryParams('', 'log_format', logFormat));
    }

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Download SDK Runtime Log
  ///
  /// Parameters:
  ///
  /// * [String] date:
  ///
  /// * [String] logFormat:
  ///   Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP. 
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> logsCodeRuntimeGet({ String? date, String? logFormat, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await logsCodeRuntimeGetWithHttpInfo( date: date, logFormat: logFormat, authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Import Bulk Translation File
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] messageType (required):
  ///   The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> messagesMessageTypeActionsImportPostWithHttpInfo(String messageType, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/messages/{message_type}/actions/import'
      .replaceAll('{message_type}', messageType);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Import Bulk Translation File
  ///
  /// Parameters:
  ///
  /// * [String] messageType (required):
  ///   The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> messagesMessageTypeActionsImportPost(String messageType, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await messagesMessageTypeActionsImportPostWithHttpInfo(messageType,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Export Bulk Translation File
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] messageType (required):
  ///   The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys.
  ///
  /// * [String] lang (required):
  ///   A valid language code value, for example, en. Retrieve available values from the Admin Key (admin_key__sys) field on the Language (language__sys) object. Active and Inactive languages are both valid. 
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> messagesMessageTypeLanguageLangActionsExportPostWithHttpInfo(String messageType, String lang, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/messages/{message_type}/language/{lang}/actions/export'
      .replaceAll('{message_type}', messageType)
      .replaceAll('{lang}', lang);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Export Bulk Translation File
  ///
  /// Parameters:
  ///
  /// * [String] messageType (required):
  ///   The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys.
  ///
  /// * [String] lang (required):
  ///   A valid language code value, for example, en. Retrieve available values from the Admin Key (admin_key__sys) field on the Language (language__sys) object. Active and Inactive languages are both valid. 
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> messagesMessageTypeLanguageLangActionsExportPost(String messageType, String lang, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await messagesMessageTypeLanguageLangActionsExportPostWithHttpInfo(messageType, lang,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Audit Metadata
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] auditTrailType (required):
  ///   The name of the specified audit type (document_audit_trail, object_audit_trail, etc).
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> metadataAudittrailAuditTrailTypeGetWithHttpInfo(String auditTrailType, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/metadata/audittrail/{audit_trail_type}'
      .replaceAll('{audit_trail_type}', auditTrailType);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Audit Metadata
  ///
  /// Parameters:
  ///
  /// * [String] auditTrailType (required):
  ///   The name of the specified audit type (document_audit_trail, object_audit_trail, etc).
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> metadataAudittrailAuditTrailTypeGet(String auditTrailType, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await metadataAudittrailAuditTrailTypeGetWithHttpInfo(auditTrailType,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Audit Types
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> metadataAudittrailGetWithHttpInfo({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/metadata/audittrail';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Audit Types
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> metadataAudittrailGet({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await metadataAudittrailGetWithHttpInfo( authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Component Type Metadata
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] componentType (required):
  ///   The component type name (Picklist, Docfield, Doctype, etc.).
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> metadataComponentsComponentTypeGetWithHttpInfo(String componentType, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/metadata/components/{component_type}'
      .replaceAll('{component_type}', componentType);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Component Type Metadata
  ///
  /// Parameters:
  ///
  /// * [String] componentType (required):
  ///   The component type name (Picklist, Docfield, Doctype, etc.).
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> metadataComponentsComponentTypeGet(String componentType, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await metadataComponentsComponentTypeGetWithHttpInfo(componentType,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve All Component Metadata
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> metadataComponentsGetWithHttpInfo({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/metadata/components';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve All Component Metadata
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> metadataComponentsGet({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await metadataComponentsGetWithHttpInfo( authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Binder Template Node Metadata
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> metadataObjectsBindersTemplatesBindernodesGetWithHttpInfo({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/metadata/objects/binders/templates/bindernodes';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Binder Template Node Metadata
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> metadataObjectsBindersTemplatesBindernodesGet({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await metadataObjectsBindersTemplatesBindernodesGetWithHttpInfo( authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Binder Template Metadata
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> metadataObjectsBindersTemplatesGetWithHttpInfo({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/metadata/objects/binders/templates';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Binder Template Metadata
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> metadataObjectsBindersTemplatesGet({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await metadataObjectsBindersTemplatesGetWithHttpInfo( authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Annotation Placemark Type Metadata
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] placemarkType (required):
  ///   The name of the placemark type. For example, sticky__sys.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGetWithHttpInfo(String placemarkType, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/metadata/objects/documents/annotations/placemarks/types/{placemark_type}'
      .replaceAll('{placemark_type}', placemarkType);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Annotation Placemark Type Metadata
  ///
  /// Parameters:
  ///
  /// * [String] placemarkType (required):
  ///   The name of the placemark type. For example, sticky__sys.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGet(String placemarkType, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGetWithHttpInfo(placemarkType,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Annotation Reference Type Metadata
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] referenceType (required):
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGetWithHttpInfo(String referenceType, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/metadata/objects/documents/annotations/references/types/{reference_type}'
      .replaceAll('{reference_type}', referenceType);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Annotation Reference Type Metadata
  ///
  /// Parameters:
  ///
  /// * [String] referenceType (required):
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGet(String referenceType, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGetWithHttpInfo(referenceType,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Annotation Type Metadata
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] annotationType (required):
  ///   The name of the annotation type. Valid annotation types include: `note__sys` `line__sys` `document_link__sys` `permalink_link__sys` `anchor__sys` `reply__sys` `external_link__sys`  The following annotation types are only valid in Medical and PromoMats Vaults:  `suggested_link__sys` `approved_link__sys` `auto_link__sys` `keyword_link__sys`
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGetWithHttpInfo(String annotationType, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/metadata/objects/documents/annotations/types/{annotation_type}'
      .replaceAll('{annotation_type}', annotationType);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Annotation Type Metadata
  ///
  /// Parameters:
  ///
  /// * [String] annotationType (required):
  ///   The name of the annotation type. Valid annotation types include: `note__sys` `line__sys` `document_link__sys` `permalink_link__sys` `anchor__sys` `reply__sys` `external_link__sys`  The following annotation types are only valid in Medical and PromoMats Vaults:  `suggested_link__sys` `approved_link__sys` `auto_link__sys` `keyword_link__sys`
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGet(String annotationType, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGetWithHttpInfo(annotationType,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Document Event SubType Metadata
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] eventType (required):
  ///   The event type. For example, distribution__v.
  ///
  /// * [String] eventSubtype (required):
  ///   The event subtype. For example, approved_email__v.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGetWithHttpInfo(String eventType, String eventSubtype, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/metadata/objects/documents/events/{event_type}/types/{event_subtype}'
      .replaceAll('{event_type}', eventType)
      .replaceAll('{event_subtype}', eventSubtype);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Document Event SubType Metadata
  ///
  /// Parameters:
  ///
  /// * [String] eventType (required):
  ///   The event type. For example, distribution__v.
  ///
  /// * [String] eventSubtype (required):
  ///   The event subtype. For example, approved_email__v.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet(String eventType, String eventSubtype, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGetWithHttpInfo(eventType, eventSubtype,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Document Event Types and Subtypes
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> metadataObjectsDocumentsEventsGetWithHttpInfo({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/metadata/objects/documents/events';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Document Event Types and Subtypes
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> metadataObjectsDocumentsEventsGet({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await metadataObjectsDocumentsEventsGetWithHttpInfo( authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Document Lock Metadata
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> metadataObjectsDocumentsLockGetWithHttpInfo({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/metadata/objects/documents/lock';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Document Lock Metadata
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> metadataObjectsDocumentsLockGet({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await metadataObjectsDocumentsLockGetWithHttpInfo( authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Common Document Fields
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] authorization:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> metadataObjectsDocumentsPropertiesFindCommonPostWithHttpInfo({ String? contentType, String? accept, String? authorization, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/metadata/objects/documents/properties/find_common';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Common Document Fields
  ///
  /// Parameters:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] authorization:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> metadataObjectsDocumentsPropertiesFindCommonPost({ String? contentType, String? accept, String? authorization, String? xVaultAPIClientID, }) async {
    final response = await metadataObjectsDocumentsPropertiesFindCommonPostWithHttpInfo( contentType: contentType, accept: accept, authorization: authorization, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve All Document Fields
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> metadataObjectsDocumentsPropertiesGetWithHttpInfo({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/metadata/objects/documents/properties';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve All Document Fields
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> metadataObjectsDocumentsPropertiesGet({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await metadataObjectsDocumentsPropertiesGetWithHttpInfo( authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Document Template Metadata
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> metadataObjectsDocumentsTemplatesGetWithHttpInfo({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/metadata/objects/documents/templates';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Document Template Metadata
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> metadataObjectsDocumentsTemplatesGet({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await metadataObjectsDocumentsTemplatesGetWithHttpInfo( authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve All Document Types
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> metadataObjectsDocumentsTypesGetWithHttpInfo({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/metadata/objects/documents/types';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve All Document Types
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> metadataObjectsDocumentsTypesGet({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await metadataObjectsDocumentsTypesGetWithHttpInfo( authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Document Type
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] type (required):
  ///   The document type. See Retrieve Document Types.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> metadataObjectsDocumentsTypesTypeGetWithHttpInfo(String type, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/metadata/objects/documents/types/{type}'
      .replaceAll('{type}', type);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Document Type
  ///
  /// Parameters:
  ///
  /// * [String] type (required):
  ///   The document type. See Retrieve Document Types.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> metadataObjectsDocumentsTypesTypeGet(String type, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await metadataObjectsDocumentsTypesTypeGetWithHttpInfo(type,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Document Type Relationships
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] type (required):
  ///   The document type. See Retrieve Document Types.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> metadataObjectsDocumentsTypesTypeRelationshipsGetWithHttpInfo(String type, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/metadata/objects/documents/types/{type}/relationships'
      .replaceAll('{type}', type);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Document Type Relationships
  ///
  /// Parameters:
  ///
  /// * [String] type (required):
  ///   The document type. See Retrieve Document Types.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> metadataObjectsDocumentsTypesTypeRelationshipsGet(String type, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await metadataObjectsDocumentsTypesTypeRelationshipsGetWithHttpInfo(type,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Document Classification
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] type (required):
  ///   The document type. See Retrieve Document Types.
  ///
  /// * [String] subtype (required):
  ///   The document subtype. See Retrieve Document Types.
  ///
  /// * [String] classification (required):
  ///   The document classification. See Retrieve Document Types.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGetWithHttpInfo(String type, String subtype, String classification, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/metadata/objects/documents/types/{type}/subtypes/{subtype}/classifications/{classification}'
      .replaceAll('{type}', type)
      .replaceAll('{subtype}', subtype)
      .replaceAll('{classification}', classification);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Document Classification
  ///
  /// Parameters:
  ///
  /// * [String] type (required):
  ///   The document type. See Retrieve Document Types.
  ///
  /// * [String] subtype (required):
  ///   The document subtype. See Retrieve Document Types.
  ///
  /// * [String] classification (required):
  ///   The document classification. See Retrieve Document Types.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet(String type, String subtype, String classification, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGetWithHttpInfo(type, subtype, classification,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Document Subtype
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] type (required):
  ///   The document type. See Retrieve Document Types.
  ///
  /// * [String] subtype (required):
  ///   The document subtype. See Retrieve Document Types.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> metadataObjectsDocumentsTypesTypeSubtypesSubtypeGetWithHttpInfo(String type, String subtype, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/metadata/objects/documents/types/{type}/subtypes/{subtype}'
      .replaceAll('{type}', type)
      .replaceAll('{subtype}', subtype);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Document Subtype
  ///
  /// Parameters:
  ///
  /// * [String] type (required):
  ///   The document type. See Retrieve Document Types.
  ///
  /// * [String] subtype (required):
  ///   The document subtype. See Retrieve Document Types.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet(String type, String subtype, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await metadataObjectsDocumentsTypesTypeSubtypesSubtypeGetWithHttpInfo(type, subtype,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Group Metadata
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> metadataObjectsGroupsGetWithHttpInfo({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/metadata/objects/groups';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Group Metadata
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> metadataObjectsGroupsGet({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await metadataObjectsGroupsGetWithHttpInfo( authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Security Policy Metadata
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> metadataObjectsSecuritypoliciesGetWithHttpInfo({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/metadata/objects/securitypolicies';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Security Policy Metadata
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> metadataObjectsSecuritypoliciesGet({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await metadataObjectsSecuritypoliciesGetWithHttpInfo( authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve User Metadata
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> metadataObjectsUsersGetWithHttpInfo({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/metadata/objects/users';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve User Metadata
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> metadataObjectsUsersGet({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await metadataObjectsUsersGetWithHttpInfo( authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Archived Document Signature Metadata
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGetWithHttpInfo({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/metadata/query/archived_documents/relationships/document_signature__sysr';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Archived Document Signature Metadata
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGet({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGetWithHttpInfo( authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Document Signature Metadata
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> metadataQueryDocumentsRelationshipsDocumentSignatureSysrGetWithHttpInfo({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/metadata/query/documents/relationships/document_signature__sysr';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Document Signature Metadata
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> metadataQueryDocumentsRelationshipsDocumentSignatureSysrGet({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await metadataQueryDocumentsRelationshipsDocumentSignatureSysrGetWithHttpInfo( authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Object Collection
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [bool] loc:
  ///   To retrieve localized (translated) strings, include the parameter loc=true. See the next request below for details.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> metadataVobjectsGetWithHttpInfo({ bool? loc, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/metadata/vobjects';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (loc != null) {
      queryParams.addAll(_queryParams('', 'loc', loc));
    }

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Object Collection
  ///
  /// Parameters:
  ///
  /// * [bool] loc:
  ///   To retrieve localized (translated) strings, include the parameter loc=true. See the next request below for details.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> metadataVobjectsGet({ bool? loc, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await metadataVobjectsGetWithHttpInfo( loc: loc, authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Cancel Raw Object Deployment
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> metadataVobjectsObjectNameActionsCanceldeploymentPostWithHttpInfo(String objectName, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/metadata/vobjects/{object_name}/actions/canceldeployment'
      .replaceAll('{object_name}', objectName);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Cancel Raw Object Deployment
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> metadataVobjectsObjectNameActionsCanceldeploymentPost(String objectName, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await metadataVobjectsObjectNameActionsCanceldeploymentPostWithHttpInfo(objectName,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Object Field Metadata
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The object name__v field value (product__v, country__v, custom_object__c, etc.).
  ///
  /// * [String] objectFieldName (required):
  ///   The object field name value (id, name__v, external_id__v, etc.).
  ///
  /// * [bool] loc:
  ///   To retrieve localized (translated) strings, include the parameter loc=true. See the next request below for details.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> metadataVobjectsObjectNameFieldsObjectFieldNameGetWithHttpInfo(String objectName, String objectFieldName, { bool? loc, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/metadata/vobjects/{object_name}/fields/{object_field_name}'
      .replaceAll('{object_name}', objectName)
      .replaceAll('{object_field_name}', objectFieldName);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (loc != null) {
      queryParams.addAll(_queryParams('', 'loc', loc));
    }

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Object Field Metadata
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The object name__v field value (product__v, country__v, custom_object__c, etc.).
  ///
  /// * [String] objectFieldName (required):
  ///   The object field name value (id, name__v, external_id__v, etc.).
  ///
  /// * [bool] loc:
  ///   To retrieve localized (translated) strings, include the parameter loc=true. See the next request below for details.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> metadataVobjectsObjectNameFieldsObjectFieldNameGet(String objectName, String objectFieldName, { bool? loc, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await metadataVobjectsObjectNameFieldsObjectFieldNameGetWithHttpInfo(objectName, objectFieldName,  loc: loc, authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Object Metadata
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The object name__v field value (product__v, country__v, custom_object__c, etc.).
  ///
  /// * [bool] loc:
  ///   To retrieve localized (translated) strings, include the parameter loc=true. See the next request below for details.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> metadataVobjectsObjectNameGetWithHttpInfo(String objectName, { bool? loc, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/metadata/vobjects/{object_name}'
      .replaceAll('{object_name}', objectName);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (loc != null) {
      queryParams.addAll(_queryParams('', 'loc', loc));
    }

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Object Metadata
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The object name__v field value (product__v, country__v, custom_object__c, etc.).
  ///
  /// * [bool] loc:
  ///   To retrieve localized (translated) strings, include the parameter loc=true. See the next request below for details.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> metadataVobjectsObjectNameGet(String objectName, { bool? loc, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await metadataVobjectsObjectNameGetWithHttpInfo(objectName,  loc: loc, authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Page Layouts
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> metadataVobjectsObjectNamePageLayoutsGetWithHttpInfo(String objectName, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/metadata/vobjects/{object_name}/page_layouts'
      .replaceAll('{object_name}', objectName);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Page Layouts
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> metadataVobjectsObjectNamePageLayoutsGet(String objectName, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await metadataVobjectsObjectNamePageLayoutsGetWithHttpInfo(objectName,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Page Layout Metadata
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The name of the object from which to retrieve page layout metadata.
  ///
  /// * [String] layoutName (required):
  ///   The name of the page layout from which to retrieve metadata.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> metadataVobjectsObjectNamePageLayoutsLayoutNameGetWithHttpInfo(String objectName, String layoutName, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/metadata/vobjects/{object_name}/page_layouts/{layout_name}'
      .replaceAll('{object_name}', objectName)
      .replaceAll('{layout_name}', layoutName);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Page Layout Metadata
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The name of the object from which to retrieve page layout metadata.
  ///
  /// * [String] layoutName (required):
  ///   The name of the page layout from which to retrieve metadata.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> metadataVobjectsObjectNamePageLayoutsLayoutNameGet(String objectName, String layoutName, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await metadataVobjectsObjectNamePageLayoutsLayoutNameGetWithHttpInfo(objectName, layoutName,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Email Notification Histories
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] startDate:
  ///   Specify a start date to retrieve notification history. This date cannot be more than 2 years ago. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the start of the day. If start_date is omitted entirely, defaults to the start of the previous day. If you’ve specified a start_date, you must also specify an end_date.
  ///
  /// * [String] endDate:
  ///   Specify an end date to retrieve notification history. This date cannot be more than 30 days away from the specified start_date. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the time of the API request. If you’ve specified an end_date, you must also specify a start_date.
  ///
  /// * [bool] allDates:
  ///   Set to true to request notification history for all dates. This is the same as requesting a full CSV export from the Vault UI. When requesting a full notification history, you must leave start_date and end_date blank and set format_result to csv. You can request an export of notification history for all_dates once every 24 hours.
  ///
  /// * [String] formatResult:
  ///   To request a downloadable CSV file of your notification history, set this parameter to csv. The response contains a jobId to retrieve the job status, which provides a link to download the CSV file. If omitted, the API returns a JSON response with notification history and does not start a job. If all_dates is true, this parameter must be csv.
  ///
  /// * [String] limit:
  ///   Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
  ///
  /// * [String] offset:
  ///   Paginate the results displayed per page by specifying the amount of offset from the entry returned. If omitted, defaults to 0.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> notificationsHistoriesGetWithHttpInfo({ String? startDate, String? endDate, bool? allDates, String? formatResult, String? limit, String? offset, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/notifications/histories';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (startDate != null) {
      queryParams.addAll(_queryParams('', 'start_date', startDate));
    }
    if (endDate != null) {
      queryParams.addAll(_queryParams('', 'end_date', endDate));
    }
    if (allDates != null) {
      queryParams.addAll(_queryParams('', 'all_dates', allDates));
    }
    if (formatResult != null) {
      queryParams.addAll(_queryParams('', 'format_result', formatResult));
    }
    if (limit != null) {
      queryParams.addAll(_queryParams('', 'limit', limit));
    }
    if (offset != null) {
      queryParams.addAll(_queryParams('', 'offset', offset));
    }

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Email Notification Histories
  ///
  /// Parameters:
  ///
  /// * [String] startDate:
  ///   Specify a start date to retrieve notification history. This date cannot be more than 2 years ago. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the start of the day. If start_date is omitted entirely, defaults to the start of the previous day. If you’ve specified a start_date, you must also specify an end_date.
  ///
  /// * [String] endDate:
  ///   Specify an end date to retrieve notification history. This date cannot be more than 30 days away from the specified start_date. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the time of the API request. If you’ve specified an end_date, you must also specify a start_date.
  ///
  /// * [bool] allDates:
  ///   Set to true to request notification history for all dates. This is the same as requesting a full CSV export from the Vault UI. When requesting a full notification history, you must leave start_date and end_date blank and set format_result to csv. You can request an export of notification history for all_dates once every 24 hours.
  ///
  /// * [String] formatResult:
  ///   To request a downloadable CSV file of your notification history, set this parameter to csv. The response contains a jobId to retrieve the job status, which provides a link to download the CSV file. If omitted, the API returns a JSON response with notification history and does not start a job. If all_dates is true, this parameter must be csv.
  ///
  /// * [String] limit:
  ///   Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
  ///
  /// * [String] offset:
  ///   Paginate the results displayed per page by specifying the amount of offset from the entry returned. If omitted, defaults to 0.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> notificationsHistoriesGet({ String? startDate, String? endDate, bool? allDates, String? formatResult, String? limit, String? offset, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await notificationsHistoriesGetWithHttpInfo( startDate: startDate, endDate: endDate, allDates: allDates, formatResult: formatResult, limit: limit, offset: offset, authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Bulk Workflow Action Details
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] action (required):
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectWorkflowActionsActionGetWithHttpInfo(String action, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/object/workflow/actions/{action}'
      .replaceAll('{action}', action);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Bulk Workflow Action Details
  ///
  /// Parameters:
  ///
  /// * [String] action (required):
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectWorkflowActionsActionGet(String action, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectWorkflowActionsActionGetWithHttpInfo(action,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Initiate Workflow Actions on Multiple Workflows
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] action (required):
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectWorkflowActionsActionPostWithHttpInfo(String action, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/object/workflow/actions/{action}'
      .replaceAll('{action}', action);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Initiate Workflow Actions on Multiple Workflows
  ///
  /// Parameters:
  ///
  /// * [String] action (required):
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectWorkflowActionsActionPost(String action, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await objectWorkflowActionsActionPostWithHttpInfo(action,  authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Cancel Workflow Tasks
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectWorkflowActionsCanceltasksPostWithHttpInfo({ String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/object/workflow/actions/canceltasks';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Cancel Workflow Tasks
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectWorkflowActionsCanceltasksPost({ String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await objectWorkflowActionsCanceltasksPostWithHttpInfo( authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Cancel Workflows
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectWorkflowActionsCancelworkflowsPostWithHttpInfo({ String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/object/workflow/actions/cancelworkflows';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Cancel Workflows
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectWorkflowActionsCancelworkflowsPost({ String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await objectWorkflowActionsCancelworkflowsPostWithHttpInfo( authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Bulk Workflow Actions
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectWorkflowActionsGetWithHttpInfo({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/object/workflow/actions';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Bulk Workflow Actions
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectWorkflowActionsGet({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectWorkflowActionsGetWithHttpInfo( authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Reassign Workflow Tasks
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectWorkflowActionsReassigntasksPostWithHttpInfo({ String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/object/workflow/actions/reassigntasks';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Reassign Workflow Tasks
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectWorkflowActionsReassigntasksPost({ String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await objectWorkflowActionsReassigntasksPostWithHttpInfo( authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Replace Workflow Owner
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectWorkflowActionsReplaceworkflowownerPostWithHttpInfo({ String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/object/workflow/actions/replaceworkflowowner';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Replace Workflow Owner
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectWorkflowActionsReplaceworkflowownerPost({ String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await objectWorkflowActionsReplaceworkflowownerPostWithHttpInfo( authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Binder Export Results
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] jobId (required):
  ///   The id value of the requested export job. This is returned with the export binder requests above.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsBindersActionsExportJobIdResultsGetWithHttpInfo(String jobId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/binders/actions/export/{job_id}/results'
      .replaceAll('{job_id}', jobId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Binder Export Results
  ///
  /// Parameters:
  ///
  /// * [String] jobId (required):
  ///   The id value of the requested export job. This is returned with the export binder requests above.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsBindersActionsExportJobIdResultsGet(String jobId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsBindersActionsExportJobIdResultsGetWithHttpInfo(jobId,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Export Binder (Latest Version)
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] binderId (required):
  ///   The binder id field value.
  ///
  /// * [bool] source_:
  ///   to include source content or not
  ///
  /// * [String] renditiontype:
  ///   to include viewable renditions
  ///
  /// * [String] docversion:
  ///   to include all major versions
  ///
  /// * [String] attachments:
  ///   to include all versions of attachments
  ///
  /// * [String] export_:
  ///   configurable filename metadata
  ///
  /// * [bool] docfield:
  ///   to exclude document metadata csv
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsBindersBinderIdActionsExportPostWithHttpInfo(String binderId, { bool? source_, String? renditiontype, String? docversion, String? attachments, String? export_, bool? docfield, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/binders/{binder_id}/actions/export'
      .replaceAll('{binder_id}', binderId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (source_ != null) {
      queryParams.addAll(_queryParams('', 'source', source_));
    }
    if (renditiontype != null) {
      queryParams.addAll(_queryParams('', 'renditiontype', renditiontype));
    }
    if (docversion != null) {
      queryParams.addAll(_queryParams('', 'docversion', docversion));
    }
    if (attachments != null) {
      queryParams.addAll(_queryParams('', 'attachments', attachments));
    }
    if (export_ != null) {
      queryParams.addAll(_queryParams('', 'export', export_));
    }
    if (docfield != null) {
      queryParams.addAll(_queryParams('', 'docfield', docfield));
    }

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Export Binder (Latest Version)
  ///
  /// Parameters:
  ///
  /// * [String] binderId (required):
  ///   The binder id field value.
  ///
  /// * [bool] source_:
  ///   to include source content or not
  ///
  /// * [String] renditiontype:
  ///   to include viewable renditions
  ///
  /// * [String] docversion:
  ///   to include all major versions
  ///
  /// * [String] attachments:
  ///   to include all versions of attachments
  ///
  /// * [String] export_:
  ///   configurable filename metadata
  ///
  /// * [bool] docfield:
  ///   to exclude document metadata csv
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsBindersBinderIdActionsExportPost(String binderId, { bool? source_, String? renditiontype, String? docversion, String? attachments, String? export_, bool? docfield, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsBindersBinderIdActionsExportPostWithHttpInfo(binderId,  source_: source_, renditiontype: renditiontype, docversion: docversion, attachments: attachments, export_: export_, docfield: docfield, authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Refresh Binder Auto-Filing
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] binderId (required):
  ///   The binder id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsBindersBinderIdActionsPostWithHttpInfo(String binderId, { String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/binders/{binder_id}/actions'
      .replaceAll('{binder_id}', binderId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Refresh Binder Auto-Filing
  ///
  /// Parameters:
  ///
  /// * [String] binderId (required):
  ///   The binder id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsBindersBinderIdActionsPost(String binderId, { String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsBindersBinderIdActionsPostWithHttpInfo(binderId,  authorization: authorization, contentType: contentType, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Update Binding Rule
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] binderId (required):
  ///   The binder id field value.
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] authorization:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsBindersBinderIdBindingRulePutWithHttpInfo(String binderId, { String? contentType, String? accept, String? authorization, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/binders/{binder_id}/binding_rule'
      .replaceAll('{binder_id}', binderId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'PUT',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Update Binding Rule
  ///
  /// Parameters:
  ///
  /// * [String] binderId (required):
  ///   The binder id field value.
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] authorization:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsBindersBinderIdBindingRulePut(String binderId, { String? contentType, String? accept, String? authorization, String? xVaultAPIClientID, }) async {
    final response = await objectsBindersBinderIdBindingRulePutWithHttpInfo(binderId,  contentType: contentType, accept: accept, authorization: authorization, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Delete Binder
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] binderId (required):
  ///   The binder id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsBindersBinderIdDeleteWithHttpInfo(String binderId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/binders/{binder_id}'
      .replaceAll('{binder_id}', binderId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'DELETE',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Delete Binder
  ///
  /// Parameters:
  ///
  /// * [String] binderId (required):
  ///   The binder id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsBindersBinderIdDelete(String binderId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsBindersBinderIdDeleteWithHttpInfo(binderId,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Update Binder Document Binding Rule
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] binderId (required):
  ///   The binder id field value.
  ///
  /// * [String] nodeId (required):
  ///   The binder node id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsBindersBinderIdDocumentsNodeIdBindingRulePutWithHttpInfo(String binderId, String nodeId, { String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/binders/{binder_id}/documents/{node_id}/binding_rule'
      .replaceAll('{binder_id}', binderId)
      .replaceAll('{node_id}', nodeId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'PUT',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Update Binder Document Binding Rule
  ///
  /// Parameters:
  ///
  /// * [String] binderId (required):
  ///   The binder id field value.
  ///
  /// * [String] nodeId (required):
  ///   The binder node id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsBindersBinderIdDocumentsNodeIdBindingRulePut(String binderId, String nodeId, { String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsBindersBinderIdDocumentsNodeIdBindingRulePutWithHttpInfo(binderId, nodeId,  authorization: authorization, contentType: contentType, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Add Document to Binder
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] binderId (required):
  ///   The binder id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsBindersBinderIdDocumentsPostWithHttpInfo(String binderId, { String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/binders/{binder_id}/documents'
      .replaceAll('{binder_id}', binderId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Add Document to Binder
  ///
  /// Parameters:
  ///
  /// * [String] binderId (required):
  ///   The binder id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsBindersBinderIdDocumentsPost(String binderId, { String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsBindersBinderIdDocumentsPostWithHttpInfo(binderId,  authorization: authorization, contentType: contentType, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Remove Document from Binder
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] binderId (required):
  ///   The binder id field value.
  ///
  /// * [String] sectionId (required):
  ///   The binder node id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsBindersBinderIdDocumentsSectionIdDeleteWithHttpInfo(String binderId, String sectionId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/binders/{binder_id}/documents/{section_id}'
      .replaceAll('{binder_id}', binderId)
      .replaceAll('{section_id}', sectionId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'DELETE',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Remove Document from Binder
  ///
  /// Parameters:
  ///
  /// * [String] binderId (required):
  ///   The binder id field value.
  ///
  /// * [String] sectionId (required):
  ///   The binder node id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsBindersBinderIdDocumentsSectionIdDelete(String binderId, String sectionId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsBindersBinderIdDocumentsSectionIdDeleteWithHttpInfo(binderId, sectionId,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Move Document in Binder
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] binderId (required):
  ///   The binder id field value.
  ///
  /// * [String] sectionId (required):
  ///   The binder node id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsBindersBinderIdDocumentsSectionIdPutWithHttpInfo(String binderId, String sectionId, { String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/binders/{binder_id}/documents/{section_id}'
      .replaceAll('{binder_id}', binderId)
      .replaceAll('{section_id}', sectionId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'PUT',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Move Document in Binder
  ///
  /// Parameters:
  ///
  /// * [String] binderId (required):
  ///   The binder id field value.
  ///
  /// * [String] sectionId (required):
  ///   The binder node id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsBindersBinderIdDocumentsSectionIdPut(String binderId, String sectionId, { String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsBindersBinderIdDocumentsSectionIdPutWithHttpInfo(binderId, sectionId,  authorization: authorization, contentType: contentType, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Binder
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] binderId (required):
  ///   The binder id field value.
  ///
  /// * [String] depth:
  ///   To retrieve all information in all levels of the binder, set this to all. By default, only one level is returned.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsBindersBinderIdGetWithHttpInfo(String binderId, { String? depth, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/binders/{binder_id}'
      .replaceAll('{binder_id}', binderId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (depth != null) {
      queryParams.addAll(_queryParams('', 'depth', depth));
    }

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Binder
  ///
  /// Parameters:
  ///
  /// * [String] binderId (required):
  ///   The binder id field value.
  ///
  /// * [String] depth:
  ///   To retrieve all information in all levels of the binder, set this to all. By default, only one level is returned.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsBindersBinderIdGet(String binderId, { String? depth, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsBindersBinderIdGetWithHttpInfo(binderId,  depth: depth, authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Create Binder Version
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] binderId (required):
  ///   The binder id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsBindersBinderIdPostWithHttpInfo(String binderId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/binders/{binder_id}'
      .replaceAll('{binder_id}', binderId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Create Binder Version
  ///
  /// Parameters:
  ///
  /// * [String] binderId (required):
  ///   The binder id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsBindersBinderIdPost(String binderId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsBindersBinderIdPostWithHttpInfo(binderId,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Update Binder
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] binderId (required):
  ///   The binder id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsBindersBinderIdPutWithHttpInfo(String binderId, { String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/binders/{binder_id}'
      .replaceAll('{binder_id}', binderId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'PUT',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Update Binder
  ///
  /// Parameters:
  ///
  /// * [String] binderId (required):
  ///   The binder id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsBindersBinderIdPut(String binderId, { String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsBindersBinderIdPutWithHttpInfo(binderId,  authorization: authorization, contentType: contentType, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Remove Users & Groups from Roles on a Single Binder
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] binderId (required):
  ///   The id value of the binder from which to remove roles.
  ///
  /// * [String] roleNameAndUserOrGroup (required):
  ///   The name of the role from which to remove the user or group followed by either `user` or `group`. The format is `{role_name}.{user_or_group}`. For example, `consumer__v.user`.
  ///
  /// * [String] id (required):
  ///   The id value of the user or group to remove from the role.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDeleteWithHttpInfo(String binderId, String roleNameAndUserOrGroup, String id, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/binders/{binder_id}/roles/{role_name_and_user_or_group}/{id}'
      .replaceAll('{binder_id}', binderId)
      .replaceAll('{role_name_and_user_or_group}', roleNameAndUserOrGroup)
      .replaceAll('{id}', id);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'DELETE',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Remove Users & Groups from Roles on a Single Binder
  ///
  /// Parameters:
  ///
  /// * [String] binderId (required):
  ///   The id value of the binder from which to remove roles.
  ///
  /// * [String] roleNameAndUserOrGroup (required):
  ///   The name of the role from which to remove the user or group followed by either `user` or `group`. The format is `{role_name}.{user_or_group}`. For example, `consumer__v.user`.
  ///
  /// * [String] id (required):
  ///   The id value of the user or group to remove from the role.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete(String binderId, String roleNameAndUserOrGroup, String id, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDeleteWithHttpInfo(binderId, roleNameAndUserOrGroup, id,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Update Binder Section Binding Rule
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] binderId (required):
  ///   The binder id field value.
  ///
  /// * [String] nodeId (required):
  ///   The binder node id field value.
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] authorization:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsBindersBinderIdSectionsNodeIdBindingRulePutWithHttpInfo(String binderId, String nodeId, { String? contentType, String? accept, String? authorization, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/binders/{binder_id}/sections/{node_id}/binding_rule'
      .replaceAll('{binder_id}', binderId)
      .replaceAll('{node_id}', nodeId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'PUT',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Update Binder Section Binding Rule
  ///
  /// Parameters:
  ///
  /// * [String] binderId (required):
  ///   The binder id field value.
  ///
  /// * [String] nodeId (required):
  ///   The binder node id field value.
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] authorization:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsBindersBinderIdSectionsNodeIdBindingRulePut(String binderId, String nodeId, { String? contentType, String? accept, String? authorization, String? xVaultAPIClientID, }) async {
    final response = await objectsBindersBinderIdSectionsNodeIdBindingRulePutWithHttpInfo(binderId, nodeId,  contentType: contentType, accept: accept, authorization: authorization, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Update Binder Section
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] binderId (required):
  ///   The binder id field value.
  ///
  /// * [String] nodeId (required):
  ///   The binder node id of the section.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsBindersBinderIdSectionsNodeIdPutWithHttpInfo(String binderId, String nodeId, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/binders/{binder_id}/sections/{node_id}'
      .replaceAll('{binder_id}', binderId)
      .replaceAll('{node_id}', nodeId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'PUT',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Update Binder Section
  ///
  /// Parameters:
  ///
  /// * [String] binderId (required):
  ///   The binder id field value.
  ///
  /// * [String] nodeId (required):
  ///   The binder node id of the section.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsBindersBinderIdSectionsNodeIdPut(String binderId, String nodeId, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await objectsBindersBinderIdSectionsNodeIdPutWithHttpInfo(binderId, nodeId,  authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Create Binder Section
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] binderId (required):
  ///   The binder id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsBindersBinderIdSectionsPostWithHttpInfo(String binderId, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/binders/{binder_id}/sections'
      .replaceAll('{binder_id}', binderId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Create Binder Section
  ///
  /// Parameters:
  ///
  /// * [String] binderId (required):
  ///   The binder id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsBindersBinderIdSectionsPost(String binderId, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await objectsBindersBinderIdSectionsPostWithHttpInfo(binderId,  authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Delete Binder Section
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] binderId (required):
  ///   The binder id field value.
  ///
  /// * [String] sectionId (required):
  ///   The binder node id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsBindersBinderIdSectionsSectionIdDeleteWithHttpInfo(String binderId, String sectionId, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/binders/{binder_id}/sections/{section_id}'
      .replaceAll('{binder_id}', binderId)
      .replaceAll('{section_id}', sectionId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'DELETE',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Delete Binder Section
  ///
  /// Parameters:
  ///
  /// * [String] binderId (required):
  ///   The binder id field value.
  ///
  /// * [String] sectionId (required):
  ///   The binder node id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsBindersBinderIdSectionsSectionIdDelete(String binderId, String sectionId, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await objectsBindersBinderIdSectionsSectionIdDeleteWithHttpInfo(binderId, sectionId,  authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Binder Sections
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] binderId (required):
  ///   The binder id field value.
  ///
  /// * [String] sectionId (required):
  ///   The binder node id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsBindersBinderIdSectionsSectionIdGetWithHttpInfo(String binderId, String sectionId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/binders/{binder_id}/sections/{section_id}'
      .replaceAll('{binder_id}', binderId)
      .replaceAll('{section_id}', sectionId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Binder Sections
  ///
  /// Parameters:
  ///
  /// * [String] binderId (required):
  ///   The binder id field value.
  ///
  /// * [String] sectionId (required):
  ///   The binder node id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsBindersBinderIdSectionsSectionIdGet(String binderId, String sectionId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsBindersBinderIdSectionsSectionIdGetWithHttpInfo(binderId, sectionId,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve All Binder Versions
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] binderId (required):
  ///   The binder id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsBindersBinderIdVersionsGetWithHttpInfo(String binderId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/binders/{binder_id}/versions'
      .replaceAll('{binder_id}', binderId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve All Binder Versions
  ///
  /// Parameters:
  ///
  /// * [String] binderId (required):
  ///   The binder id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsBindersBinderIdVersionsGet(String binderId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsBindersBinderIdVersionsGetWithHttpInfo(binderId,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Export Binder (Specific Version)
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] binderId (required):
  ///   The binder id field value.
  ///
  /// * [String] majorVersion (required):
  ///   The binder major_version_number__v field value.
  ///
  /// * [String] minorVersion (required):
  ///   The binder minor_version_number__v field value.
  ///
  /// * [bool] source_:
  ///   to include source content or not
  ///
  /// * [String] renditiontype:
  ///   to include viewable renditions
  ///
  /// * [String] docversion:
  ///   to include all major versions
  ///
  /// * [String] attachments:
  ///   to include all versions of attachments
  ///
  /// * [String] export_:
  ///   configurable filename metadata
  ///
  /// * [bool] docfield:
  ///   to exclude document metadata csv
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPostWithHttpInfo(String binderId, String majorVersion, String minorVersion, { bool? source_, String? renditiontype, String? docversion, String? attachments, String? export_, bool? docfield, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/actions/export'
      .replaceAll('{binder_id}', binderId)
      .replaceAll('{major_version}', majorVersion)
      .replaceAll('{minor_version}', minorVersion);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (source_ != null) {
      queryParams.addAll(_queryParams('', 'source', source_));
    }
    if (renditiontype != null) {
      queryParams.addAll(_queryParams('', 'renditiontype', renditiontype));
    }
    if (docversion != null) {
      queryParams.addAll(_queryParams('', 'docversion', docversion));
    }
    if (attachments != null) {
      queryParams.addAll(_queryParams('', 'attachments', attachments));
    }
    if (export_ != null) {
      queryParams.addAll(_queryParams('', 'export', export_));
    }
    if (docfield != null) {
      queryParams.addAll(_queryParams('', 'docfield', docfield));
    }

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Export Binder (Specific Version)
  ///
  /// Parameters:
  ///
  /// * [String] binderId (required):
  ///   The binder id field value.
  ///
  /// * [String] majorVersion (required):
  ///   The binder major_version_number__v field value.
  ///
  /// * [String] minorVersion (required):
  ///   The binder minor_version_number__v field value.
  ///
  /// * [bool] source_:
  ///   to include source content or not
  ///
  /// * [String] renditiontype:
  ///   to include viewable renditions
  ///
  /// * [String] docversion:
  ///   to include all major versions
  ///
  /// * [String] attachments:
  ///   to include all versions of attachments
  ///
  /// * [String] export_:
  ///   configurable filename metadata
  ///
  /// * [bool] docfield:
  ///   to exclude document metadata csv
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost(String binderId, String majorVersion, String minorVersion, { bool? source_, String? renditiontype, String? docversion, String? attachments, String? export_, bool? docfield, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPostWithHttpInfo(binderId, majorVersion, minorVersion,  source_: source_, renditiontype: renditiontype, docversion: docversion, attachments: attachments, export_: export_, docfield: docfield, authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Delete Binder Version
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] binderId (required):
  ///   The binder id field value.
  ///
  /// * [String] majorVersion (required):
  ///   The binder major_version_number__v field value.
  ///
  /// * [String] minorVersion (required):
  ///   The binder minor_version_number__v field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsBindersBinderIdVersionsMajorVersionMinorVersionDeleteWithHttpInfo(String binderId, String majorVersion, String minorVersion, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/binders/{binder_id}/versions/{major_version}/{minor_version}'
      .replaceAll('{binder_id}', binderId)
      .replaceAll('{major_version}', majorVersion)
      .replaceAll('{minor_version}', minorVersion);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'DELETE',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Delete Binder Version
  ///
  /// Parameters:
  ///
  /// * [String] binderId (required):
  ///   The binder id field value.
  ///
  /// * [String] majorVersion (required):
  ///   The binder major_version_number__v field value.
  ///
  /// * [String] minorVersion (required):
  ///   The binder minor_version_number__v field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete(String binderId, String majorVersion, String minorVersion, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsBindersBinderIdVersionsMajorVersionMinorVersionDeleteWithHttpInfo(binderId, majorVersion, minorVersion,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Binder Version
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] binderId (required):
  ///   The binder id field value.
  ///
  /// * [String] majorVersion (required):
  ///   The binder major_version_number__v field value.
  ///
  /// * [String] minorVersion (required):
  ///   The binder minor_version_number__v field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsBindersBinderIdVersionsMajorVersionMinorVersionGetWithHttpInfo(String binderId, String majorVersion, String minorVersion, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/binders/{binder_id}/versions/{major_version}/{minor_version}'
      .replaceAll('{binder_id}', binderId)
      .replaceAll('{major_version}', majorVersion)
      .replaceAll('{minor_version}', minorVersion);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Binder Version
  ///
  /// Parameters:
  ///
  /// * [String] binderId (required):
  ///   The binder id field value.
  ///
  /// * [String] majorVersion (required):
  ///   The binder major_version_number__v field value.
  ///
  /// * [String] minorVersion (required):
  ///   The binder minor_version_number__v field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsBindersBinderIdVersionsMajorVersionMinorVersionGet(String binderId, String majorVersion, String minorVersion, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsBindersBinderIdVersionsMajorVersionMinorVersionGetWithHttpInfo(binderId, majorVersion, minorVersion,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Update Binder Version
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] binderId (required):
  ///   The binder id field value.
  ///
  /// * [String] majorVersion (required):
  ///   The binder major_version_number__v field value.
  ///
  /// * [String] minorVersion (required):
  ///   The binder minor_version_number__v field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsBindersBinderIdVersionsMajorVersionMinorVersionPutWithHttpInfo(String binderId, String majorVersion, String minorVersion, { String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/binders/{binder_id}/versions/{major_version}/{minor_version}'
      .replaceAll('{binder_id}', binderId)
      .replaceAll('{major_version}', majorVersion)
      .replaceAll('{minor_version}', minorVersion);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'PUT',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Update Binder Version
  ///
  /// Parameters:
  ///
  /// * [String] binderId (required):
  ///   The binder id field value.
  ///
  /// * [String] majorVersion (required):
  ///   The binder major_version_number__v field value.
  ///
  /// * [String] minorVersion (required):
  ///   The binder minor_version_number__v field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsBindersBinderIdVersionsMajorVersionMinorVersionPut(String binderId, String majorVersion, String minorVersion, { String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsBindersBinderIdVersionsMajorVersionMinorVersionPutWithHttpInfo(binderId, majorVersion, minorVersion,  authorization: authorization, contentType: contentType, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Create Binder Relationship
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] binderId (required):
  ///   The binder id field value.
  ///
  /// * [String] majorVersion (required):
  ///   The binder major_version_number__v field value.
  ///
  /// * [String] minorVersion (required):
  ///   The binder minor_version_number__v field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPostWithHttpInfo(String binderId, String majorVersion, String minorVersion, { String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships'
      .replaceAll('{binder_id}', binderId)
      .replaceAll('{major_version}', majorVersion)
      .replaceAll('{minor_version}', minorVersion);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Create Binder Relationship
  ///
  /// Parameters:
  ///
  /// * [String] binderId (required):
  ///   The binder id field value.
  ///
  /// * [String] majorVersion (required):
  ///   The binder major_version_number__v field value.
  ///
  /// * [String] minorVersion (required):
  ///   The binder minor_version_number__v field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost(String binderId, String majorVersion, String minorVersion, { String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPostWithHttpInfo(binderId, majorVersion, minorVersion,  authorization: authorization, contentType: contentType, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Delete Binder Relationship
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] binderId (required):
  ///   The binder id field value.
  ///
  /// * [String] majorVersion (required):
  ///   The binder major_version_number__v field value.
  ///
  /// * [String] minorVersion (required):
  ///   The binder minor_version_number__v field value.
  ///
  /// * [String] relationshipId (required):
  ///   The binder relationship id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteWithHttpInfo(String binderId, String majorVersion, String minorVersion, String relationshipId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}'
      .replaceAll('{binder_id}', binderId)
      .replaceAll('{major_version}', majorVersion)
      .replaceAll('{minor_version}', minorVersion)
      .replaceAll('{relationship_id}', relationshipId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'DELETE',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Delete Binder Relationship
  ///
  /// Parameters:
  ///
  /// * [String] binderId (required):
  ///   The binder id field value.
  ///
  /// * [String] majorVersion (required):
  ///   The binder major_version_number__v field value.
  ///
  /// * [String] minorVersion (required):
  ///   The binder minor_version_number__v field value.
  ///
  /// * [String] relationshipId (required):
  ///   The binder relationship id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete(String binderId, String majorVersion, String minorVersion, String relationshipId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteWithHttpInfo(binderId, majorVersion, minorVersion, relationshipId,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Binder Relationship
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] binderId (required):
  ///   The binder id field value.
  ///
  /// * [String] majorVersion (required):
  ///   The binder major_version_number__v field value.
  ///
  /// * [String] minorVersion (required):
  ///   The binder minor_version_number__v field value.
  ///
  /// * [String] relationshipId (required):
  ///   The binder relationship id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetWithHttpInfo(String binderId, String majorVersion, String minorVersion, String relationshipId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}'
      .replaceAll('{binder_id}', binderId)
      .replaceAll('{major_version}', majorVersion)
      .replaceAll('{minor_version}', minorVersion)
      .replaceAll('{relationship_id}', relationshipId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Binder Relationship
  ///
  /// Parameters:
  ///
  /// * [String] binderId (required):
  ///   The binder id field value.
  ///
  /// * [String] majorVersion (required):
  ///   The binder major_version_number__v field value.
  ///
  /// * [String] minorVersion (required):
  ///   The binder minor_version_number__v field value.
  ///
  /// * [String] relationshipId (required):
  ///   The binder relationship id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet(String binderId, String majorVersion, String minorVersion, String relationshipId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetWithHttpInfo(binderId, majorVersion, minorVersion, relationshipId,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Binder Version Section
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] binderId (required):
  ///   The binder id field value.
  ///
  /// * [String] majorVersion (required):
  ///   The binder major_version_number__v field value.
  ///
  /// * [String] minorVersion (required):
  ///   The binder minor_version_number__v field value.
  ///
  /// * [String] sectionId (required):
  ///   Retrieve all sections (documents and subsections) in a binder’s sub-level node. If not included, all sections from the binder’s top-level root node will be returned.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGetWithHttpInfo(String binderId, String majorVersion, String minorVersion, String sectionId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/sections/{section_id}'
      .replaceAll('{binder_id}', binderId)
      .replaceAll('{major_version}', majorVersion)
      .replaceAll('{minor_version}', minorVersion)
      .replaceAll('{section_id}', sectionId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Binder Version Section
  ///
  /// Parameters:
  ///
  /// * [String] binderId (required):
  ///   The binder id field value.
  ///
  /// * [String] majorVersion (required):
  ///   The binder major_version_number__v field value.
  ///
  /// * [String] minorVersion (required):
  ///   The binder minor_version_number__v field value.
  ///
  /// * [String] sectionId (required):
  ///   Retrieve all sections (documents and subsections) in a binder’s sub-level node. If not included, all sections from the binder’s top-level root node will be returned.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet(String binderId, String majorVersion, String minorVersion, String sectionId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGetWithHttpInfo(binderId, majorVersion, minorVersion, sectionId,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve All Binder Roles
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] id (required):
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsBindersIdRolesGetWithHttpInfo(String id, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/binders/{id}/roles'
      .replaceAll('{id}', id);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve All Binder Roles
  ///
  /// Parameters:
  ///
  /// * [String] id (required):
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsBindersIdRolesGet(String id, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsBindersIdRolesGetWithHttpInfo(id,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Assign Users & Groups to Roles on a Single Binder
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] id (required):
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsBindersIdRolesPostWithHttpInfo(String id, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/binders/{id}/roles'
      .replaceAll('{id}', id);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Assign Users & Groups to Roles on a Single Binder
  ///
  /// Parameters:
  ///
  /// * [String] id (required):
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsBindersIdRolesPost(String id, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await objectsBindersIdRolesPostWithHttpInfo(id,  authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Document Role
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] id (required):
  ///   The binder `id`.
  ///
  /// * [String] roleName (required):
  ///   The name of the role to retrieve. For example, `owner__v`.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsBindersIdRolesRoleNameGetWithHttpInfo(String id, String roleName, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/binders/{id}/roles/{role_name}'
      .replaceAll('{id}', id)
      .replaceAll('{role_name}', roleName);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Document Role
  ///
  /// Parameters:
  ///
  /// * [String] id (required):
  ///   The binder `id`.
  ///
  /// * [String] roleName (required):
  ///   The name of the role to retrieve. For example, `owner__v`.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsBindersIdRolesRoleNameGet(String id, String roleName, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsBindersIdRolesRoleNameGetWithHttpInfo(id, roleName,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Binder User Actions
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] id (required):
  ///   The binder id field value from which to retrieve available user actions.
  ///
  /// * [String] majorVersion (required):
  ///   The major version number of the binder.
  ///
  /// * [String] minorVersion (required):
  ///   The minor version number of the binder.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGetWithHttpInfo(String id, String majorVersion, String minorVersion, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions'
      .replaceAll('{id}', id)
      .replaceAll('{major_version}', majorVersion)
      .replaceAll('{minor_version}', minorVersion);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Binder User Actions
  ///
  /// Parameters:
  ///
  /// * [String] id (required):
  ///   The binder id field value from which to retrieve available user actions.
  ///
  /// * [String] majorVersion (required):
  ///   The major version number of the binder.
  ///
  /// * [String] minorVersion (required):
  ///   The minor version number of the binder.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet(String id, String majorVersion, String minorVersion, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGetWithHttpInfo(id, majorVersion, minorVersion,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Binder Entry Criteria
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] id (required):
  ///   The binder id field value from which to retrieve available user actions.
  ///
  /// * [String] majorVersion (required):
  ///   The major version number of the binder.
  ///
  /// * [String] minorVersion (required):
  ///   The minor version number of the binder.
  ///
  /// * [String] nameV (required):
  ///   The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetWithHttpInfo(String id, String majorVersion, String minorVersion, String nameV, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}/entry_requirements'
      .replaceAll('{id}', id)
      .replaceAll('{major_version}', majorVersion)
      .replaceAll('{minor_version}', minorVersion)
      .replaceAll('{name__v}', nameV);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Binder Entry Criteria
  ///
  /// Parameters:
  ///
  /// * [String] id (required):
  ///   The binder id field value from which to retrieve available user actions.
  ///
  /// * [String] majorVersion (required):
  ///   The major version number of the binder.
  ///
  /// * [String] minorVersion (required):
  ///   The minor version number of the binder.
  ///
  /// * [String] nameV (required):
  ///   The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet(String id, String majorVersion, String minorVersion, String nameV, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetWithHttpInfo(id, majorVersion, minorVersion, nameV,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Initiate Binder User Action
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] id (required):
  ///   The binder id field value from which to retrieve available user actions.
  ///
  /// * [String] majorVersion (required):
  ///   The major version number of the binder.
  ///
  /// * [String] minorVersion (required):
  ///   The minor version number of the binder.
  ///
  /// * [String] nameV (required):
  ///   The action name__v field value to initiate. This is retrieved from the Retrieve User Action request.
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutWithHttpInfo(String id, String majorVersion, String minorVersion, String nameV, { String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}'
      .replaceAll('{id}', id)
      .replaceAll('{major_version}', majorVersion)
      .replaceAll('{minor_version}', minorVersion)
      .replaceAll('{name__v}', nameV);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'PUT',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Initiate Binder User Action
  ///
  /// Parameters:
  ///
  /// * [String] id (required):
  ///   The binder id field value from which to retrieve available user actions.
  ///
  /// * [String] majorVersion (required):
  ///   The major version number of the binder.
  ///
  /// * [String] minorVersion (required):
  ///   The minor version number of the binder.
  ///
  /// * [String] nameV (required):
  ///   The action name__v field value to initiate. This is retrieved from the Retrieve User Action request.
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut(String id, String majorVersion, String minorVersion, String nameV, { String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutWithHttpInfo(id, majorVersion, minorVersion, nameV,  authorization: authorization, contentType: contentType, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve User Actions on Multiple Binders
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsBindersLifecycleActionsPostWithHttpInfo({ String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/binders/lifecycle_actions';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve User Actions on Multiple Binders
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsBindersLifecycleActionsPost({ String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await objectsBindersLifecycleActionsPostWithHttpInfo( authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Initiate Bulk Binder User Actions
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] userActionName (required):
  ///   The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Binders endpoint.
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsBindersLifecycleActionsUserActionNamePutWithHttpInfo(String userActionName, { String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/binders/lifecycle_actions/{user_action_name}'
      .replaceAll('{user_action_name}', userActionName);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'PUT',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Initiate Bulk Binder User Actions
  ///
  /// Parameters:
  ///
  /// * [String] userActionName (required):
  ///   The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Binders endpoint.
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsBindersLifecycleActionsUserActionNamePut(String userActionName, { String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsBindersLifecycleActionsUserActionNamePutWithHttpInfo(userActionName,  authorization: authorization, contentType: contentType, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Create Binder
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [bool] async_:
  ///   When creating a binder, the binder metadata is indexed synchronously by default. To process the indexing asynchronously, include a query parameter async set to true (objects/binders?async=true). This helps speed up the response time from Vault when processing large amounts of data. 
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsBindersPostWithHttpInfo({ bool? async_, String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/binders';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (async_ != null) {
      queryParams.addAll(_queryParams('', 'async', async_));
    }

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Create Binder
  ///
  /// Parameters:
  ///
  /// * [bool] async_:
  ///   When creating a binder, the binder metadata is indexed synchronously by default. To process the indexing asynchronously, include a query parameter async set to true (objects/binders?async=true). This helps speed up the response time from Vault when processing large amounts of data. 
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsBindersPost({ bool? async_, String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsBindersPostWithHttpInfo( async_: async_, authorization: authorization, contentType: contentType, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Binder Template Collection
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsBindersTemplatesGetWithHttpInfo({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/binders/templates';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Binder Template Collection
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsBindersTemplatesGet({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsBindersTemplatesGetWithHttpInfo( authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Create Binder Template
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsBindersTemplatesPostWithHttpInfo({ String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/binders/templates';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Create Binder Template
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsBindersTemplatesPost({ String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await objectsBindersTemplatesPostWithHttpInfo( authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Update Binder Template
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsBindersTemplatesPutWithHttpInfo({ String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/binders/templates';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'PUT',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Update Binder Template
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsBindersTemplatesPut({ String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await objectsBindersTemplatesPutWithHttpInfo( authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Binder Template Node Attributes
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] templateName (required):
  ///   The binder template name__v field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsBindersTemplatesTemplateNameBindernodesGetWithHttpInfo(String templateName, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/binders/templates/{template_name}/bindernodes'
      .replaceAll('{template_name}', templateName);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Binder Template Node Attributes
  ///
  /// Parameters:
  ///
  /// * [String] templateName (required):
  ///   The binder template name__v field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsBindersTemplatesTemplateNameBindernodesGet(String templateName, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsBindersTemplatesTemplateNameBindernodesGetWithHttpInfo(templateName,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Create Binder Template Node
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] templateName (required):
  ///   The binder template name__v field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsBindersTemplatesTemplateNameBindernodesPostWithHttpInfo(String templateName, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/binders/templates/{template_name}/bindernodes'
      .replaceAll('{template_name}', templateName);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Create Binder Template Node
  ///
  /// Parameters:
  ///
  /// * [String] templateName (required):
  ///   The binder template name__v field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsBindersTemplatesTemplateNameBindernodesPost(String templateName, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await objectsBindersTemplatesTemplateNameBindernodesPostWithHttpInfo(templateName,  authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Replace Binder Template Nodes
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] templateName (required):
  ///   The binder template name__v field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsBindersTemplatesTemplateNameBindernodesPutWithHttpInfo(String templateName, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/binders/templates/{template_name}/bindernodes'
      .replaceAll('{template_name}', templateName);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'PUT',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Replace Binder Template Nodes
  ///
  /// Parameters:
  ///
  /// * [String] templateName (required):
  ///   The binder template name__v field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsBindersTemplatesTemplateNameBindernodesPut(String templateName, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await objectsBindersTemplatesTemplateNameBindernodesPutWithHttpInfo(templateName,  authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Delete Binder Template
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] templateName (required):
  ///   The binder template name__v field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsBindersTemplatesTemplateNameDeleteWithHttpInfo(String templateName, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/binders/templates/{template_name}'
      .replaceAll('{template_name}', templateName);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'DELETE',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Delete Binder Template
  ///
  /// Parameters:
  ///
  /// * [String] templateName (required):
  ///   The binder template name__v field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsBindersTemplatesTemplateNameDelete(String templateName, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsBindersTemplatesTemplateNameDeleteWithHttpInfo(templateName,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Binder Template Attributes
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] templateName (required):
  ///   The binder template name__v field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsBindersTemplatesTemplateNameGetWithHttpInfo(String templateName, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/binders/templates/{template_name}'
      .replaceAll('{template_name}', templateName);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Binder Template Attributes
  ///
  /// Parameters:
  ///
  /// * [String] templateName (required):
  ///   The binder template name__v field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsBindersTemplatesTemplateNameGet(String templateName, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsBindersTemplatesTemplateNameGetWithHttpInfo(templateName,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Deleted Document IDs
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] startDate:
  ///   Specify a date (no more than 30 days past) after which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z
  ///
  /// * [String] endDate:
  ///   Specify a date (no more than 30 days past) before which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z 
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDeletionsDocumentsGetWithHttpInfo({ String? startDate, String? endDate, String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/deletions/documents';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (startDate != null) {
      queryParams.addAll(_queryParams('', 'start_date', startDate));
    }
    if (endDate != null) {
      queryParams.addAll(_queryParams('', 'end_date', endDate));
    }

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Deleted Document IDs
  ///
  /// Parameters:
  ///
  /// * [String] startDate:
  ///   Specify a date (no more than 30 days past) after which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z
  ///
  /// * [String] endDate:
  ///   Specify a date (no more than 30 days past) before which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z 
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDeletionsDocumentsGet({ String? startDate, String? endDate, String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsDeletionsDocumentsGetWithHttpInfo( startDate: startDate, endDate: endDate, authorization: authorization, contentType: contentType, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Deleted Object Record ID
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The object name__v field value (product__v, country__v, custom_object__c, etc.).
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDeletionsVobjectsObjectNameGetWithHttpInfo(String objectName, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/deletions/vobjects/{object_name}'
      .replaceAll('{object_name}', objectName);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Deleted Object Record ID
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The object name__v field value (product__v, country__v, custom_object__c, etc.).
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDeletionsVobjectsObjectNameGet(String objectName, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsDeletionsVobjectsObjectNameGetWithHttpInfo(objectName,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve All Document Workflows
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [bool] loc:
  ///   When localized (translated) strings are available, retrieve them by setting loc to true.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsActionsGetWithHttpInfo({ bool? loc, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/actions';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (loc != null) {
      queryParams.addAll(_queryParams('', 'loc', loc));
    }

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve All Document Workflows
  ///
  /// Parameters:
  ///
  /// * [bool] loc:
  ///   When localized (translated) strings are available, retrieve them by setting loc to true.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsActionsGet({ bool? loc, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsActionsGetWithHttpInfo( loc: loc, authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Download Controlled Copy Job Results
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] lifecycleAndStateAndAction (required):
  ///   The `name__v` values for the lifecycle, state, and action in the format `{lifecycle_name}.{state_name}.{action_name}`. To get this value, [Retrieve the Job Status](https://developer.veevavault.com/api/24.3#RetrieveJobStatus) and find the `href` under the `artifacts` link.
  ///
  /// * [String] jobId (required):
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGetWithHttpInfo(String lifecycleAndStateAndAction, String jobId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/actions/{lifecycle_and_state_and_action}/{job_id}/results'
      .replaceAll('{lifecycle_and_state_and_action}', lifecycleAndStateAndAction)
      .replaceAll('{job_id}', jobId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Download Controlled Copy Job Results
  ///
  /// Parameters:
  ///
  /// * [String] lifecycleAndStateAndAction (required):
  ///   The `name__v` values for the lifecycle, state, and action in the format `{lifecycle_name}.{state_name}.{action_name}`. To get this value, [Retrieve the Job Status](https://developer.veevavault.com/api/24.3#RetrieveJobStatus) and find the `href` under the `artifacts` link.
  ///
  /// * [String] jobId (required):
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet(String lifecycleAndStateAndAction, String jobId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGetWithHttpInfo(lifecycleAndStateAndAction, jobId,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Document Workflow Details
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] workflowName (required):
  ///   The document workflow name value.
  ///
  /// * [bool] loc:
  ///   When localized (translated) strings are available, retrieve them by setting loc to true.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsActionsWorkflowNameGetWithHttpInfo(String workflowName, { bool? loc, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/actions/{workflow_name}'
      .replaceAll('{workflow_name}', workflowName);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (loc != null) {
      queryParams.addAll(_queryParams('', 'loc', loc));
    }

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Document Workflow Details
  ///
  /// Parameters:
  ///
  /// * [String] workflowName (required):
  ///   The document workflow name value.
  ///
  /// * [bool] loc:
  ///   When localized (translated) strings are available, retrieve them by setting loc to true.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsActionsWorkflowNameGet(String workflowName, { bool? loc, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsActionsWorkflowNameGetWithHttpInfo(workflowName,  loc: loc, authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Initiate Document Workflow
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] workflowName (required):
  ///   The document workflow name value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsActionsWorkflowNamePostWithHttpInfo(String workflowName, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/actions/{workflow_name}'
      .replaceAll('{workflow_name}', workflowName);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Initiate Document Workflow
  ///
  /// Parameters:
  ///
  /// * [String] workflowName (required):
  ///   The document workflow name value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsActionsWorkflowNamePost(String workflowName, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsActionsWorkflowNamePostWithHttpInfo(workflowName,  authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Delete Annotations
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsAnnotationsBatchDeleteWithHttpInfo({ String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/annotations/batch';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'DELETE',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Delete Annotations
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsAnnotationsBatchDelete({ String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsAnnotationsBatchDeleteWithHttpInfo( authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Create Multiple Annotations
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization (required):
  ///
  /// * [String] contentType (required):
  ///
  /// * [String] accept (required):
  ///
  /// * [String] xVaultAPIClientID (required):
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsAnnotationsBatchPostWithHttpInfo(String authorization, String contentType, String accept, String xVaultAPIClientID,) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/annotations/batch';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    headerParams[r'Authorization'] = parameterToString(authorization);
    headerParams[r'Content-Type'] = parameterToString(contentType);
    headerParams[r'Accept'] = parameterToString(accept);
    headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Create Multiple Annotations
  ///
  /// Parameters:
  ///
  /// * [String] authorization (required):
  ///
  /// * [String] contentType (required):
  ///
  /// * [String] accept (required):
  ///
  /// * [String] xVaultAPIClientID (required):
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsAnnotationsBatchPost(String authorization, String contentType, String accept, String xVaultAPIClientID,) async {
    final response = await objectsDocumentsAnnotationsBatchPostWithHttpInfo(authorization, contentType, accept, xVaultAPIClientID,);
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Update Annotations
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsAnnotationsBatchPutWithHttpInfo({ String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/annotations/batch';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'PUT',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Update Annotations
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsAnnotationsBatchPut({ String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsAnnotationsBatchPutWithHttpInfo( authorization: authorization, contentType: contentType, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Add Annotation Replies
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsAnnotationsRepliesBatchPostWithHttpInfo({ String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/annotations/replies/batch';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Add Annotation Replies
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsAnnotationsRepliesBatchPost({ String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsAnnotationsRepliesBatchPostWithHttpInfo( authorization: authorization, contentType: contentType, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Delete Multiple Document Attachments
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] accept:
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsAttachmentsBatchDeleteWithHttpInfo({ String? accept, String? authorization, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/attachments/batch';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'DELETE',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Delete Multiple Document Attachments
  ///
  /// Parameters:
  ///
  /// * [String] accept:
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsAttachmentsBatchDelete({ String? accept, String? authorization, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsAttachmentsBatchDeleteWithHttpInfo( accept: accept, authorization: authorization, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Create Multiple Document Attachments
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] accept:
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsAttachmentsBatchPostWithHttpInfo({ String? accept, String? authorization, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/attachments/batch';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Create Multiple Document Attachments
  ///
  /// Parameters:
  ///
  /// * [String] accept:
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsAttachmentsBatchPost({ String? accept, String? authorization, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsAttachmentsBatchPostWithHttpInfo( accept: accept, authorization: authorization, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Update Multiple Document Attachment Descriptions
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] accept:
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsAttachmentsBatchPutWithHttpInfo({ String? accept, String? authorization, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/attachments/batch';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'PUT',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Update Multiple Document Attachment Descriptions
  ///
  /// Parameters:
  ///
  /// * [String] accept:
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsAttachmentsBatchPut({ String? accept, String? authorization, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsAttachmentsBatchPutWithHttpInfo( accept: accept, authorization: authorization, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Document Export Results
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] jobId (required):
  ///   The id value of the requested export job. This is returned with the export document requests.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsBatchActionsFileextractJobIdResultsGetWithHttpInfo(String jobId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/batch/actions/fileextract/{job_id}/results'
      .replaceAll('{job_id}', jobId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Document Export Results
  ///
  /// Parameters:
  ///
  /// * [String] jobId (required):
  ///   The id value of the requested export job. This is returned with the export document requests.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsBatchActionsFileextractJobIdResultsGet(String jobId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsBatchActionsFileextractJobIdResultsGetWithHttpInfo(jobId,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Export Documents
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [bool] source_:
  ///   Optional: To exclude source files, include a query parameter source=false. If omitted, defaults to true.
  ///
  /// * [bool] renditions:
  ///   Optional: To include renditions, include a query parameter renditions=true. If omitted, defaults to false.
  ///
  /// * [bool] allversions:
  ///   Optional: To include all versions or latest version, include a query parameter allversions=true. If omitted, defaults to false.
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsBatchActionsFileextractPostWithHttpInfo({ bool? source_, bool? renditions, bool? allversions, String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/batch/actions/fileextract';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (source_ != null) {
      queryParams.addAll(_queryParams('', 'source', source_));
    }
    if (renditions != null) {
      queryParams.addAll(_queryParams('', 'renditions', renditions));
    }
    if (allversions != null) {
      queryParams.addAll(_queryParams('', 'allversions', allversions));
    }

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Export Documents
  ///
  /// Parameters:
  ///
  /// * [bool] source_:
  ///   Optional: To exclude source files, include a query parameter source=false. If omitted, defaults to true.
  ///
  /// * [bool] renditions:
  ///   Optional: To include renditions, include a query parameter renditions=true. If omitted, defaults to false.
  ///
  /// * [bool] allversions:
  ///   Optional: To include all versions or latest version, include a query parameter allversions=true. If omitted, defaults to false.
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsBatchActionsFileextractPost({ bool? source_, bool? renditions, bool? allversions, String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsBatchActionsFileextractPostWithHttpInfo( source_: source_, renditions: renditions, allversions: allversions, authorization: authorization, contentType: contentType, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Reclassify Multiple Documents
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [bool] xVaultAPIMigrationMode:
  ///   When set to true, Vault allows you to manually set the document number and to update documents to any lifecycle state using the status__v field. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message.  You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsBatchActionsReclassifyPutWithHttpInfo({ String? authorization, String? contentType, String? accept, bool? xVaultAPIMigrationMode, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/batch/actions/reclassify';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIMigrationMode != null) {
      headerParams[r'X-VaultAPI-MigrationMode'] = parameterToString(xVaultAPIMigrationMode);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'PUT',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Reclassify Multiple Documents
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [bool] xVaultAPIMigrationMode:
  ///   When set to true, Vault allows you to manually set the document number and to update documents to any lifecycle state using the status__v field. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message.  You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsBatchActionsReclassifyPut({ String? authorization, String? contentType, String? accept, bool? xVaultAPIMigrationMode, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsBatchActionsReclassifyPutWithHttpInfo( authorization: authorization, contentType: contentType, accept: accept, xVaultAPIMigrationMode: xVaultAPIMigrationMode, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Update Multiple Document Renditions
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsBatchActionsRerenderPostWithHttpInfo({ String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/batch/actions/rerender';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Update Multiple Document Renditions
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsBatchActionsRerenderPost({ String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsBatchActionsRerenderPostWithHttpInfo( authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Delete Multiple Documents
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] idParam:
  ///   If you’re identifying documents in your input by their external ID
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsBatchDeleteWithHttpInfo({ String? idParam, String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/batch';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (idParam != null) {
      queryParams.addAll(_queryParams('', 'idParam', idParam));
    }

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'DELETE',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Delete Multiple Documents
  ///
  /// Parameters:
  ///
  /// * [String] idParam:
  ///   If you’re identifying documents in your input by their external ID
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsBatchDelete({ String? idParam, String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsBatchDeleteWithHttpInfo( idParam: idParam, authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Undo Collaborative Authoring Checkout
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsBatchLockDeleteWithHttpInfo({ String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/batch/lock';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'DELETE',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Undo Collaborative Authoring Checkout
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsBatchLockDelete({ String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsBatchLockDeleteWithHttpInfo( authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Create Multiple Documents
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [bool] xVaultAPIMigrationMode:
  ///   When set to true, Vault allows you to create documents in any lifecycle state using the status__v field, and to manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsBatchPostWithHttpInfo({ String? authorization, String? accept, String? contentType, bool? xVaultAPIMigrationMode, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/batch';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIMigrationMode != null) {
      headerParams[r'X-VaultAPI-MigrationMode'] = parameterToString(xVaultAPIMigrationMode);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Create Multiple Documents
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [bool] xVaultAPIMigrationMode:
  ///   When set to true, Vault allows you to create documents in any lifecycle state using the status__v field, and to manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsBatchPost({ String? authorization, String? accept, String? contentType, bool? xVaultAPIMigrationMode, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsBatchPostWithHttpInfo( authorization: authorization, accept: accept, contentType: contentType, xVaultAPIMigrationMode: xVaultAPIMigrationMode, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Update Multiple Documents
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [bool] xVaultAPIMigrationMode:
  ///   When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header.Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsBatchPutWithHttpInfo({ String? authorization, String? accept, String? contentType, bool? xVaultAPIMigrationMode, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/batch';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIMigrationMode != null) {
      headerParams[r'X-VaultAPI-MigrationMode'] = parameterToString(xVaultAPIMigrationMode);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'PUT',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Update Multiple Documents
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [bool] xVaultAPIMigrationMode:
  ///   When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header.Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsBatchPut({ String? authorization, String? accept, String? contentType, bool? xVaultAPIMigrationMode, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsBatchPutWithHttpInfo( authorization: authorization, accept: accept, contentType: contentType, xVaultAPIMigrationMode: xVaultAPIMigrationMode, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Anchor IDs
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsDocIdAnchorsGetWithHttpInfo(String docId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/{doc_id}/anchors'
      .replaceAll('{doc_id}', docId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Anchor IDs
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsDocIdAnchorsGet(String docId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsDocIdAnchorsGetWithHttpInfo(docId,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Export Document Annotations to PDF
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsDocIdAnnotationsFileGetWithHttpInfo(String docId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/{doc_id}/annotations/file'
      .replaceAll('{doc_id}', docId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Export Document Annotations to PDF
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsDocIdAnnotationsFileGet(String docId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsDocIdAnnotationsFileGetWithHttpInfo(docId,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Import Document Annotations from PDF
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsDocIdAnnotationsFilePostWithHttpInfo(String docId, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/{doc_id}/annotations/file'
      .replaceAll('{doc_id}', docId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Import Document Annotations from PDF
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsDocIdAnnotationsFilePost(String docId, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsDocIdAnnotationsFilePostWithHttpInfo(docId,  authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Delete Single Document Attachment
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] attachmentId (required):
  ///   The attachment id field value.
  ///
  /// * [String] accept:
  ///
  /// * [String] authorization:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsDocIdAttachmentsAttachmentIdDeleteWithHttpInfo(String docId, String attachmentId, { String? accept, String? authorization, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/{doc_id}/attachments/{attachment_id}'
      .replaceAll('{doc_id}', docId)
      .replaceAll('{attachment_id}', attachmentId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'DELETE',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Delete Single Document Attachment
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] attachmentId (required):
  ///   The attachment id field value.
  ///
  /// * [String] accept:
  ///
  /// * [String] authorization:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsDocIdAttachmentsAttachmentIdDelete(String docId, String attachmentId, { String? accept, String? authorization, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsDocIdAttachmentsAttachmentIdDeleteWithHttpInfo(docId, attachmentId,  accept: accept, authorization: authorization, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Download Document Attachment
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] attachmentId (required):
  ///   The attachment id field value.
  ///
  /// * [String] accept:
  ///
  /// * [String] authorization:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsDocIdAttachmentsAttachmentIdFileGetWithHttpInfo(String docId, String attachmentId, { String? accept, String? authorization, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/{doc_id}/attachments/{attachment_id}/file'
      .replaceAll('{doc_id}', docId)
      .replaceAll('{attachment_id}', attachmentId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Download Document Attachment
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] attachmentId (required):
  ///   The attachment id field value.
  ///
  /// * [String] accept:
  ///
  /// * [String] authorization:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsDocIdAttachmentsAttachmentIdFileGet(String docId, String attachmentId, { String? accept, String? authorization, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsDocIdAttachmentsAttachmentIdFileGetWithHttpInfo(docId, attachmentId,  accept: accept, authorization: authorization, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Document Attachment Metadata
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] attachmentId (required):
  ///   The attachment id field value.
  ///
  /// * [String] accept:
  ///
  /// * [String] authorization:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsDocIdAttachmentsAttachmentIdGetWithHttpInfo(String docId, String attachmentId, { String? accept, String? authorization, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/{doc_id}/attachments/{attachment_id}'
      .replaceAll('{doc_id}', docId)
      .replaceAll('{attachment_id}', attachmentId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Document Attachment Metadata
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] attachmentId (required):
  ///   The attachment id field value.
  ///
  /// * [String] accept:
  ///
  /// * [String] authorization:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsDocIdAttachmentsAttachmentIdGet(String docId, String attachmentId, { String? accept, String? authorization, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsDocIdAttachmentsAttachmentIdGetWithHttpInfo(docId, attachmentId,  accept: accept, authorization: authorization, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Update Document Attachment Description
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] attachmentId (required):
  ///   The attachment id field value.
  ///
  /// * [String] accept:
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsDocIdAttachmentsAttachmentIdPutWithHttpInfo(String docId, String attachmentId, { String? accept, String? authorization, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/{doc_id}/attachments/{attachment_id}'
      .replaceAll('{doc_id}', docId)
      .replaceAll('{attachment_id}', attachmentId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'PUT',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Update Document Attachment Description
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] attachmentId (required):
  ///   The attachment id field value.
  ///
  /// * [String] accept:
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsDocIdAttachmentsAttachmentIdPut(String docId, String attachmentId, { String? accept, String? authorization, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsDocIdAttachmentsAttachmentIdPutWithHttpInfo(docId, attachmentId,  accept: accept, authorization: authorization, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Delete Single Document Attachment Version
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] attachmentId (required):
  ///   The attachment id field value.
  ///
  /// * [String] attachmentVersion (required):
  ///   The attachment version__v field value.
  ///
  /// * [String] accept:
  ///
  /// * [String] authorization:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteWithHttpInfo(String docId, String attachmentId, String attachmentVersion, { String? accept, String? authorization, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}'
      .replaceAll('{doc_id}', docId)
      .replaceAll('{attachment_id}', attachmentId)
      .replaceAll('{attachment_version}', attachmentVersion);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'DELETE',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Delete Single Document Attachment Version
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] attachmentId (required):
  ///   The attachment id field value.
  ///
  /// * [String] attachmentVersion (required):
  ///   The attachment version__v field value.
  ///
  /// * [String] accept:
  ///
  /// * [String] authorization:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete(String docId, String attachmentId, String attachmentVersion, { String? accept, String? authorization, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteWithHttpInfo(docId, attachmentId, attachmentVersion,  accept: accept, authorization: authorization, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Download Document Attachment Version
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] attachmentId (required):
  ///   The attachment id field value.
  ///
  /// * [String] attachmentVersion (required):
  ///   The attachment version__v field value.
  ///
  /// * [String] accept:
  ///
  /// * [String] authorization:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetWithHttpInfo(String docId, String attachmentId, String attachmentVersion, { String? accept, String? authorization, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}/file'
      .replaceAll('{doc_id}', docId)
      .replaceAll('{attachment_id}', attachmentId)
      .replaceAll('{attachment_version}', attachmentVersion);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Download Document Attachment Version
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] attachmentId (required):
  ///   The attachment id field value.
  ///
  /// * [String] attachmentVersion (required):
  ///   The attachment version__v field value.
  ///
  /// * [String] accept:
  ///
  /// * [String] authorization:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(String docId, String attachmentId, String attachmentVersion, { String? accept, String? authorization, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetWithHttpInfo(docId, attachmentId, attachmentVersion,  accept: accept, authorization: authorization, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Document Attachment Version Metadata
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] attachmentId (required):
  ///   The attachment id field value.
  ///
  /// * [String] attachmentVersion (required):
  ///   The attachment version__v field value.
  ///
  /// * [String] accept:
  ///
  /// * [String] authorization:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGetWithHttpInfo(String docId, String attachmentId, String attachmentVersion, { String? accept, String? authorization, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}'
      .replaceAll('{doc_id}', docId)
      .replaceAll('{attachment_id}', attachmentId)
      .replaceAll('{attachment_version}', attachmentVersion);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Document Attachment Version Metadata
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] attachmentId (required):
  ///   The attachment id field value.
  ///
  /// * [String] attachmentVersion (required):
  ///   The attachment version__v field value.
  ///
  /// * [String] accept:
  ///
  /// * [String] authorization:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet(String docId, String attachmentId, String attachmentVersion, { String? accept, String? authorization, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGetWithHttpInfo(docId, attachmentId, attachmentVersion,  accept: accept, authorization: authorization, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Restore Document Attachment Version
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] attachmentId (required):
  ///   The attachment id field value.
  ///
  /// * [String] attachmentVersion (required):
  ///   The attachment version__v field value.
  ///
  /// * [bool] restore:
  ///   The parameter restore must be set to true. 
  ///
  /// * [String] accept:
  ///
  /// * [String] authorization:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPostWithHttpInfo(String docId, String attachmentId, String attachmentVersion, { bool? restore, String? accept, String? authorization, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}'
      .replaceAll('{doc_id}', docId)
      .replaceAll('{attachment_id}', attachmentId)
      .replaceAll('{attachment_version}', attachmentVersion);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (restore != null) {
      queryParams.addAll(_queryParams('', 'restore', restore));
    }

    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Restore Document Attachment Version
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] attachmentId (required):
  ///   The attachment id field value.
  ///
  /// * [String] attachmentVersion (required):
  ///   The attachment version__v field value.
  ///
  /// * [bool] restore:
  ///   The parameter restore must be set to true. 
  ///
  /// * [String] accept:
  ///
  /// * [String] authorization:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost(String docId, String attachmentId, String attachmentVersion, { bool? restore, String? accept, String? authorization, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPostWithHttpInfo(docId, attachmentId, attachmentVersion,  restore: restore, accept: accept, authorization: authorization, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Document Attachment Versions
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] attachmentId (required):
  ///   The attachment id field value.
  ///
  /// * [String] accept:
  ///
  /// * [String] authorization:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGetWithHttpInfo(String docId, String attachmentId, { String? accept, String? authorization, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/{doc_id}/attachments/{attachment_id}/versions'
      .replaceAll('{doc_id}', docId)
      .replaceAll('{attachment_id}', attachmentId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Document Attachment Versions
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] attachmentId (required):
  ///   The attachment id field value.
  ///
  /// * [String] accept:
  ///
  /// * [String] authorization:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet(String docId, String attachmentId, { String? accept, String? authorization, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGetWithHttpInfo(docId, attachmentId,  accept: accept, authorization: authorization, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Download All Document Attachments
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] accept:
  ///
  /// * [String] authorization:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsDocIdAttachmentsFileGetWithHttpInfo(String docId, { String? accept, String? authorization, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/{doc_id}/attachments/file'
      .replaceAll('{doc_id}', docId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Download All Document Attachments
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] accept:
  ///
  /// * [String] authorization:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsDocIdAttachmentsFileGet(String docId, { String? accept, String? authorization, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsDocIdAttachmentsFileGetWithHttpInfo(docId,  accept: accept, authorization: authorization, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Document Attachments
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] accept:
  ///
  /// * [String] authorization:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsDocIdAttachmentsGetWithHttpInfo(String docId, { String? accept, String? authorization, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/{doc_id}/attachments'
      .replaceAll('{doc_id}', docId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Document Attachments
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] accept:
  ///
  /// * [String] authorization:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsDocIdAttachmentsGet(String docId, { String? accept, String? authorization, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsDocIdAttachmentsGetWithHttpInfo(docId,  accept: accept, authorization: authorization, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Create Document Attachment
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] accept:
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsDocIdAttachmentsPostWithHttpInfo(String docId, { String? accept, String? authorization, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/{doc_id}/attachments'
      .replaceAll('{doc_id}', docId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Create Document Attachment
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] accept:
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsDocIdAttachmentsPost(String docId, { String? accept, String? authorization, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsDocIdAttachmentsPostWithHttpInfo(docId,  accept: accept, authorization: authorization, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Complete Audit History for a Single Document
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document ID for which to retrieve audit history.
  ///
  /// * [String] startDate:
  ///   Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vault’s creation date. 
  ///
  /// * [String] endDate:
  ///   Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date. 
  ///
  /// * [String] formatResult:
  ///   To request a CSV file of your audit history, use csv. 
  ///
  /// * [String] limit:
  ///   Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
  ///
  /// * [String] offset:
  ///   Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51. If omitted, defaults to 0.
  ///
  /// * [String] events:
  ///   Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of document audit events. The values passed to this parameter are case sensitive. For example, events=WorkflowCompletion,TaskAssignment. If omitted, defaults to all audit events.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsDocIdAudittrailGetWithHttpInfo(String docId, { String? startDate, String? endDate, String? formatResult, String? limit, String? offset, String? events, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/{doc_id}/audittrail'
      .replaceAll('{doc_id}', docId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (startDate != null) {
      queryParams.addAll(_queryParams('', 'start_date', startDate));
    }
    if (endDate != null) {
      queryParams.addAll(_queryParams('', 'end_date', endDate));
    }
    if (formatResult != null) {
      queryParams.addAll(_queryParams('', 'format_result', formatResult));
    }
    if (limit != null) {
      queryParams.addAll(_queryParams('', 'limit', limit));
    }
    if (offset != null) {
      queryParams.addAll(_queryParams('', 'offset', offset));
    }
    if (events != null) {
      queryParams.addAll(_queryParams('', 'events', events));
    }

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Complete Audit History for a Single Document
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document ID for which to retrieve audit history.
  ///
  /// * [String] startDate:
  ///   Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vault’s creation date. 
  ///
  /// * [String] endDate:
  ///   Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date. 
  ///
  /// * [String] formatResult:
  ///   To request a CSV file of your audit history, use csv. 
  ///
  /// * [String] limit:
  ///   Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
  ///
  /// * [String] offset:
  ///   Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51. If omitted, defaults to 0.
  ///
  /// * [String] events:
  ///   Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of document audit events. The values passed to this parameter are case sensitive. For example, events=WorkflowCompletion,TaskAssignment. If omitted, defaults to all audit events.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsDocIdAudittrailGet(String docId, { String? startDate, String? endDate, String? formatResult, String? limit, String? offset, String? events, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsDocIdAudittrailGetWithHttpInfo(docId,  startDate: startDate, endDate: endDate, formatResult: formatResult, limit: limit, offset: offset, events: events, authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Delete Single Document
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsDocIdDeleteWithHttpInfo(String docId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/{doc_id}'
      .replaceAll('{doc_id}', docId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'DELETE',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Delete Single Document
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsDocIdDelete(String docId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsDocIdDeleteWithHttpInfo(docId,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Document Events
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsDocIdEventsGetWithHttpInfo(String docId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/{doc_id}/events'
      .replaceAll('{doc_id}', docId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Document Events
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsDocIdEventsGet(String docId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsDocIdEventsGetWithHttpInfo(docId,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Download Document File
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [bool] lockDocument:
  ///   Set to true to Check Out this document before retrieval. If omitted, defaults to false.
  ///
  /// * [String] accept:
  ///
  /// * [String] authorization:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsDocIdFileGetWithHttpInfo(String docId, { bool? lockDocument, String? accept, String? authorization, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/{doc_id}/file'
      .replaceAll('{doc_id}', docId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (lockDocument != null) {
      queryParams.addAll(_queryParams('', 'lockDocument', lockDocument));
    }

    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Download Document File
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [bool] lockDocument:
  ///   Set to true to Check Out this document before retrieval. If omitted, defaults to false.
  ///
  /// * [String] accept:
  ///
  /// * [String] authorization:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsDocIdFileGet(String docId, { bool? lockDocument, String? accept, String? authorization, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsDocIdFileGetWithHttpInfo(docId,  lockDocument: lockDocument, accept: accept, authorization: authorization, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Document
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsDocIdGetWithHttpInfo(String docId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/{doc_id}'
      .replaceAll('{doc_id}', docId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Document
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsDocIdGet(String docId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsDocIdGetWithHttpInfo(docId,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Delete Document Lock
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsDocIdLockDeleteWithHttpInfo(String docId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/{doc_id}/lock'
      .replaceAll('{doc_id}', docId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'DELETE',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Delete Document Lock
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsDocIdLockDelete(String docId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsDocIdLockDeleteWithHttpInfo(docId,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Document Lock
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsDocIdLockGetWithHttpInfo(String docId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/{doc_id}/lock'
      .replaceAll('{doc_id}', docId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Document Lock
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsDocIdLockGet(String docId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsDocIdLockGetWithHttpInfo(docId,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Create Document Lock
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsDocIdLockPostWithHttpInfo(String docId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/{doc_id}/lock'
      .replaceAll('{doc_id}', docId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Create Document Lock
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsDocIdLockPost(String docId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsDocIdLockPostWithHttpInfo(docId,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Download All Document Version Attachments
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] majorVersion (required):
  ///   The document major_version_number__v field value.
  ///
  /// * [String] minorVersion (required):
  ///   The document minor_version_number__v field value.
  ///
  /// * [String] accept:
  ///
  /// * [String] authorization:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGetWithHttpInfo(String docId, String majorVersion, String minorVersion, { String? accept, String? authorization, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/{doc_id}/{major_version}/{minor_version}/attachments/file'
      .replaceAll('{doc_id}', docId)
      .replaceAll('{major_version}', majorVersion)
      .replaceAll('{minor_version}', minorVersion);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Download All Document Version Attachments
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] majorVersion (required):
  ///   The document major_version_number__v field value.
  ///
  /// * [String] minorVersion (required):
  ///   The document minor_version_number__v field value.
  ///
  /// * [String] accept:
  ///
  /// * [String] authorization:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet(String docId, String majorVersion, String minorVersion, { String? accept, String? authorization, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGetWithHttpInfo(docId, majorVersion, minorVersion,  accept: accept, authorization: authorization, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Create Single Document Version
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] suppressRendition:
  ///   Set to true to suppress automatic generation of the viewable rendition. If omitted, defaults to false
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsDocIdPostWithHttpInfo(String docId, { String? suppressRendition, String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/{doc_id}'
      .replaceAll('{doc_id}', docId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (suppressRendition != null) {
      queryParams.addAll(_queryParams('', 'suppressRendition', suppressRendition));
    }

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Create Single Document Version
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] suppressRendition:
  ///   Set to true to suppress automatic generation of the viewable rendition. If omitted, defaults to false
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsDocIdPost(String docId, { String? suppressRendition, String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsDocIdPostWithHttpInfo(docId,  suppressRendition: suppressRendition, authorization: authorization, contentType: contentType, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Update Single Document
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [bool] xVaultAPIMigrationMode:
  ///   When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsDocIdPutWithHttpInfo(String docId, { String? authorization, String? contentType, String? accept, bool? xVaultAPIMigrationMode, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/{doc_id}'
      .replaceAll('{doc_id}', docId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIMigrationMode != null) {
      headerParams[r'X-VaultAPI-MigrationMode'] = parameterToString(xVaultAPIMigrationMode);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'PUT',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Update Single Document
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [bool] xVaultAPIMigrationMode:
  ///   When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsDocIdPut(String docId, { String? authorization, String? contentType, String? accept, bool? xVaultAPIMigrationMode, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsDocIdPutWithHttpInfo(docId,  authorization: authorization, contentType: contentType, accept: accept, xVaultAPIMigrationMode: xVaultAPIMigrationMode, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Document Renditions
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsDocIdRenditionsGetWithHttpInfo(String docId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/{doc_id}/renditions'
      .replaceAll('{doc_id}', docId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Document Renditions
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsDocIdRenditionsGet(String docId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsDocIdRenditionsGetWithHttpInfo(docId,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Delete Single Document Rendition
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] renditionType (required):
  ///   The document rendition type.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsDocIdRenditionsRenditionTypeDeleteWithHttpInfo(String docId, String renditionType, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/{doc_id}/renditions/{rendition_type}'
      .replaceAll('{doc_id}', docId)
      .replaceAll('{rendition_type}', renditionType);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'DELETE',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Delete Single Document Rendition
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] renditionType (required):
  ///   The document rendition type.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsDocIdRenditionsRenditionTypeDelete(String docId, String renditionType, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsDocIdRenditionsRenditionTypeDeleteWithHttpInfo(docId, renditionType,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Download Document Rendition File
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] renditionType (required):
  ///   The document rendition type.
  ///
  /// * [String] steadyState:
  ///   Set to true to download a rendition (file) from the latest steady state version (1.0, 2.0, etc.) of a document. 
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsDocIdRenditionsRenditionTypeGetWithHttpInfo(String docId, String renditionType, { String? steadyState, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/{doc_id}/renditions/{rendition_type}'
      .replaceAll('{doc_id}', docId)
      .replaceAll('{rendition_type}', renditionType);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (steadyState != null) {
      queryParams.addAll(_queryParams('', 'steadyState', steadyState));
    }

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Download Document Rendition File
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] renditionType (required):
  ///   The document rendition type.
  ///
  /// * [String] steadyState:
  ///   Set to true to download a rendition (file) from the latest steady state version (1.0, 2.0, etc.) of a document. 
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsDocIdRenditionsRenditionTypeGet(String docId, String renditionType, { String? steadyState, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsDocIdRenditionsRenditionTypeGetWithHttpInfo(docId, renditionType,  steadyState: steadyState, authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Add Single Document Rendition
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] renditionType (required):
  ///   The document rendition type.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsDocIdRenditionsRenditionTypePostWithHttpInfo(String docId, String renditionType, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/{doc_id}/renditions/{rendition_type}'
      .replaceAll('{doc_id}', docId)
      .replaceAll('{rendition_type}', renditionType);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Add Single Document Rendition
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] renditionType (required):
  ///   The document rendition type.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsDocIdRenditionsRenditionTypePost(String docId, String renditionType, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsDocIdRenditionsRenditionTypePostWithHttpInfo(docId, renditionType,  authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Replace Document Rendition
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] renditionType (required):
  ///   The document rendition type.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsDocIdRenditionsRenditionTypePutWithHttpInfo(String docId, String renditionType, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/{doc_id}/renditions/{rendition_type}'
      .replaceAll('{doc_id}', docId)
      .replaceAll('{rendition_type}', renditionType);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'PUT',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Replace Document Rendition
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] renditionType (required):
  ///   The document rendition type.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsDocIdRenditionsRenditionTypePut(String docId, String renditionType, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsDocIdRenditionsRenditionTypePutWithHttpInfo(docId, renditionType,  authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Remove Users & Groups from Roles on a Single Document
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The id value of the document from which to remove roles.
  ///
  /// * [String] roleNameAndUserOrGroup (required):
  ///   The name of the role from which to remove the user or group followed by either `user` or `group`. The format is `{role_name}.{user_or_group}`. For example, `consumer__v.user`.
  ///
  /// * [String] id (required):
  ///   The id value of the user or group to remove from the role.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDeleteWithHttpInfo(String docId, String roleNameAndUserOrGroup, String id, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/{doc_id}/roles/{role_name_and_user_or_group}/{id}'
      .replaceAll('{doc_id}', docId)
      .replaceAll('{role_name_and_user_or_group}', roleNameAndUserOrGroup)
      .replaceAll('{id}', id);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'DELETE',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Remove Users & Groups from Roles on a Single Document
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The id value of the document from which to remove roles.
  ///
  /// * [String] roleNameAndUserOrGroup (required):
  ///   The name of the role from which to remove the user or group followed by either `user` or `group`. The format is `{role_name}.{user_or_group}`. For example, `consumer__v.user`.
  ///
  /// * [String] id (required):
  ///   The id value of the user or group to remove from the role.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete(String docId, String roleNameAndUserOrGroup, String id, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDeleteWithHttpInfo(docId, roleNameAndUserOrGroup, id,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Document Version Attachments
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] majorVersion (required):
  ///   The document major_version_number__v field value.
  ///
  /// * [String] minorVersion (required):
  ///   The document minor_version_number__v field value.
  ///
  /// * [String] accept:
  ///
  /// * [String] authorization:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGetWithHttpInfo(String docId, String majorVersion, String minorVersion, { String? accept, String? authorization, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/{doc_id}/version/{major_version}/{minor_version}/attachments'
      .replaceAll('{doc_id}', docId)
      .replaceAll('{major_version}', majorVersion)
      .replaceAll('{minor_version}', minorVersion);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Document Version Attachments
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] majorVersion (required):
  ///   The document major_version_number__v field value.
  ///
  /// * [String] minorVersion (required):
  ///   The document minor_version_number__v field value.
  ///
  /// * [String] accept:
  ///
  /// * [String] authorization:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet(String docId, String majorVersion, String minorVersion, { String? accept, String? authorization, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGetWithHttpInfo(docId, majorVersion, minorVersion,  accept: accept, authorization: authorization, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Document Versions
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsDocIdVersionsGetWithHttpInfo(String docId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/{doc_id}/versions'
      .replaceAll('{doc_id}', docId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Document Versions
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsDocIdVersionsGet(String docId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsDocIdVersionsGetWithHttpInfo(docId,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Read Annotations by ID
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] majorVersion (required):
  ///   The document major_version_number__v field value.
  ///
  /// * [String] minorVersion (required):
  ///   The document minor_version_number__v field value.
  ///
  /// * [String] annotationId (required):
  ///   The annotation ID, which can be retrieved with Read Annotations by Document Version and Type.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGetWithHttpInfo(String docId, String majorVersion, String minorVersion, String annotationId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/{annotation_id}'
      .replaceAll('{doc_id}', docId)
      .replaceAll('{major_version}', majorVersion)
      .replaceAll('{minor_version}', minorVersion)
      .replaceAll('{annotation_id}', annotationId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Read Annotations by ID
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] majorVersion (required):
  ///   The document major_version_number__v field value.
  ///
  /// * [String] minorVersion (required):
  ///   The document minor_version_number__v field value.
  ///
  /// * [String] annotationId (required):
  ///   The annotation ID, which can be retrieved with Read Annotations by Document Version and Type.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet(String docId, String majorVersion, String minorVersion, String annotationId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGetWithHttpInfo(docId, majorVersion, minorVersion, annotationId,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Read Replies of Parent Annotation
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] majorVersion (required):
  ///   The document major_version_number__v field value.
  ///
  /// * [String] minorVersion (required):
  ///   The document minor_version_number__v field value.
  ///
  /// * [String] annotationId (required):
  ///   The parent annotation ID, which can be retrieved with Read Annotations by Document Version and Type.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGetWithHttpInfo(String docId, String majorVersion, String minorVersion, String annotationId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/{annotation_id}/replies'
      .replaceAll('{doc_id}', docId)
      .replaceAll('{major_version}', majorVersion)
      .replaceAll('{minor_version}', minorVersion)
      .replaceAll('{annotation_id}', annotationId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Read Replies of Parent Annotation
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] majorVersion (required):
  ///   The document major_version_number__v field value.
  ///
  /// * [String] minorVersion (required):
  ///   The document minor_version_number__v field value.
  ///
  /// * [String] annotationId (required):
  ///   The parent annotation ID, which can be retrieved with Read Annotations by Document Version and Type.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet(String docId, String majorVersion, String minorVersion, String annotationId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGetWithHttpInfo(docId, majorVersion, minorVersion, annotationId,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Export Document Version Annotations to PDF
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] majorVersion (required):
  ///   The document major_version_number__v field value.
  ///
  /// * [String] minorVersion (required):
  ///   The document minor_version_number__v field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGetWithHttpInfo(String docId, String majorVersion, String minorVersion, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/file'
      .replaceAll('{doc_id}', docId)
      .replaceAll('{major_version}', majorVersion)
      .replaceAll('{minor_version}', minorVersion);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Export Document Version Annotations to PDF
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] majorVersion (required):
  ///   The document major_version_number__v field value.
  ///
  /// * [String] minorVersion (required):
  ///   The document minor_version_number__v field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet(String docId, String majorVersion, String minorVersion, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGetWithHttpInfo(docId, majorVersion, minorVersion,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Import Document Version Annotations from PDF
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] majorVersion (required):
  ///   The document major_version_number__v field value.
  ///
  /// * [String] minorVersion (required):
  ///   The document minor_version_number__v field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePostWithHttpInfo(String docId, String majorVersion, String minorVersion, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/file'
      .replaceAll('{doc_id}', docId)
      .replaceAll('{major_version}', majorVersion)
      .replaceAll('{minor_version}', minorVersion);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Import Document Version Annotations from PDF
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] majorVersion (required):
  ///   The document major_version_number__v field value.
  ///
  /// * [String] minorVersion (required):
  ///   The document minor_version_number__v field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost(String docId, String majorVersion, String minorVersion, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePostWithHttpInfo(docId, majorVersion, minorVersion,  authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Read Annotations by Document Version and Type
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] majorVersion (required):
  ///   The document major_version_number__v field value.
  ///
  /// * [String] minorVersion (required):
  ///   The document minor_version_number__v field value.
  ///
  /// * [String] limit:
  ///   Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 500. If omitted, defaults to 500. Values greater than 500 are ignored.
  ///
  /// * [String] offset:
  ///   This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to offset=201.
  ///
  /// * [String] annotationTypes:
  ///   The type(s) of annotations to retrieve. For example, note__sys,anchor__sys. If omitted, Vault returns all annotations. Valid annotation types include: `note__sys` `line__sys` `document_link__sys` `permalink_link__sys` `anchor__sys` `reply__sys` `external_link__sys`  The following annotation types are only valid in PromoMats Vaults:  `suggested_link__sys` `approved_link__sys` `auto_link__sys` `keyword_link__sys` 
  ///
  /// * [String] paginationId:
  ///   A unique identifier used to load requests with paginated results.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGetWithHttpInfo(String docId, String majorVersion, String minorVersion, { String? limit, String? offset, String? annotationTypes, String? paginationId, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations'
      .replaceAll('{doc_id}', docId)
      .replaceAll('{major_version}', majorVersion)
      .replaceAll('{minor_version}', minorVersion);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (limit != null) {
      queryParams.addAll(_queryParams('', 'limit', limit));
    }
    if (offset != null) {
      queryParams.addAll(_queryParams('', 'offset', offset));
    }
    if (annotationTypes != null) {
      queryParams.addAll(_queryParams('', 'annotation_types', annotationTypes));
    }
    if (paginationId != null) {
      queryParams.addAll(_queryParams('', 'pagination_id', paginationId));
    }

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Read Annotations by Document Version and Type
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] majorVersion (required):
  ///   The document major_version_number__v field value.
  ///
  /// * [String] minorVersion (required):
  ///   The document minor_version_number__v field value.
  ///
  /// * [String] limit:
  ///   Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 500. If omitted, defaults to 500. Values greater than 500 are ignored.
  ///
  /// * [String] offset:
  ///   This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to offset=201.
  ///
  /// * [String] annotationTypes:
  ///   The type(s) of annotations to retrieve. For example, note__sys,anchor__sys. If omitted, Vault returns all annotations. Valid annotation types include: `note__sys` `line__sys` `document_link__sys` `permalink_link__sys` `anchor__sys` `reply__sys` `external_link__sys`  The following annotation types are only valid in PromoMats Vaults:  `suggested_link__sys` `approved_link__sys` `auto_link__sys` `keyword_link__sys` 
  ///
  /// * [String] paginationId:
  ///   A unique identifier used to load requests with paginated results.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet(String docId, String majorVersion, String minorVersion, { String? limit, String? offset, String? annotationTypes, String? paginationId, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGetWithHttpInfo(docId, majorVersion, minorVersion,  limit: limit, offset: offset, annotationTypes: annotationTypes, paginationId: paginationId, authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Download Document Version Attachment Version
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] majorVersion (required):
  ///   The document major_version_number__v field value.
  ///
  /// * [String] minorVersion (required):
  ///   The document minor_version_number__v field value.
  ///
  /// * [String] attachmentId (required):
  ///   The id field value of the attachment.
  ///
  /// * [String] attachmentVersion (required):
  ///   The version of the attachment.
  ///
  /// * [String] accept:
  ///
  /// * [String] authorization:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGetWithHttpInfo(String docId, String majorVersion, String minorVersion, String attachmentId, String attachmentVersion, { String? accept, String? authorization, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/attachments/{attachment_id}/versions/{attachment_version}/file'
      .replaceAll('{doc_id}', docId)
      .replaceAll('{major_version}', majorVersion)
      .replaceAll('{minor_version}', minorVersion)
      .replaceAll('{attachment_id}', attachmentId)
      .replaceAll('{attachment_version}', attachmentVersion);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Download Document Version Attachment Version
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] majorVersion (required):
  ///   The document major_version_number__v field value.
  ///
  /// * [String] minorVersion (required):
  ///   The document minor_version_number__v field value.
  ///
  /// * [String] attachmentId (required):
  ///   The id field value of the attachment.
  ///
  /// * [String] attachmentVersion (required):
  ///   The version of the attachment.
  ///
  /// * [String] accept:
  ///
  /// * [String] authorization:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(String docId, String majorVersion, String minorVersion, String attachmentId, String attachmentVersion, { String? accept, String? authorization, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGetWithHttpInfo(docId, majorVersion, minorVersion, attachmentId, attachmentVersion,  accept: accept, authorization: authorization, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Document Version Attachment Versions
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] majorVersion (required):
  ///   The document major_version_number__v field value.
  ///
  /// * [String] minorVersion (required):
  ///   The document minor_version_number__v field value.
  ///
  /// * [String] attachmentId (required):
  ///   The id of the document attachment to retrieve.
  ///
  /// * [String] attachmentVersion (required):
  ///   Optional: The version of the attachment to retrieve. If omitted, the endpoint retrieves all versions of the specified attachment.
  ///
  /// * [String] accept:
  ///
  /// * [String] authorization:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGetWithHttpInfo(String docId, String majorVersion, String minorVersion, String attachmentId, String attachmentVersion, { String? accept, String? authorization, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/attachments/{attachment_id}/versions/{attachment_version}'
      .replaceAll('{doc_id}', docId)
      .replaceAll('{major_version}', majorVersion)
      .replaceAll('{minor_version}', minorVersion)
      .replaceAll('{attachment_id}', attachmentId)
      .replaceAll('{attachment_version}', attachmentVersion);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Document Version Attachment Versions
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] majorVersion (required):
  ///   The document major_version_number__v field value.
  ///
  /// * [String] minorVersion (required):
  ///   The document minor_version_number__v field value.
  ///
  /// * [String] attachmentId (required):
  ///   The id of the document attachment to retrieve.
  ///
  /// * [String] attachmentVersion (required):
  ///   Optional: The version of the attachment to retrieve. If omitted, the endpoint retrieves all versions of the specified attachment.
  ///
  /// * [String] accept:
  ///
  /// * [String] authorization:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet(String docId, String majorVersion, String minorVersion, String attachmentId, String attachmentVersion, { String? accept, String? authorization, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGetWithHttpInfo(docId, majorVersion, minorVersion, attachmentId, attachmentVersion,  accept: accept, authorization: authorization, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Delete Single Document Version
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] majorVersion (required):
  ///   The document major_version_number__v field value.
  ///
  /// * [String] minorVersion (required):
  ///   The document minor_version_number__v field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsDocIdVersionsMajorVersionMinorVersionDeleteWithHttpInfo(String docId, String majorVersion, String minorVersion, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/{doc_id}/versions/{major_version}/{minor_version}'
      .replaceAll('{doc_id}', docId)
      .replaceAll('{major_version}', majorVersion)
      .replaceAll('{minor_version}', minorVersion);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'DELETE',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Delete Single Document Version
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] majorVersion (required):
  ///   The document major_version_number__v field value.
  ///
  /// * [String] minorVersion (required):
  ///   The document minor_version_number__v field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete(String docId, String majorVersion, String minorVersion, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsDocIdVersionsMajorVersionMinorVersionDeleteWithHttpInfo(docId, majorVersion, minorVersion,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Document Version Notes as CSV
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] majorVersion (required):
  ///   The document major_version_number__v field value.
  ///
  /// * [String] minorVersion (required):
  ///   The document minor_version_number__v field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGetWithHttpInfo(String docId, String majorVersion, String minorVersion, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/doc-export-annotations-to-csv'
      .replaceAll('{doc_id}', docId)
      .replaceAll('{major_version}', majorVersion)
      .replaceAll('{minor_version}', minorVersion);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Document Version Notes as CSV
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] majorVersion (required):
  ///   The document major_version_number__v field value.
  ///
  /// * [String] minorVersion (required):
  ///   The document minor_version_number__v field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet(String docId, String majorVersion, String minorVersion, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGetWithHttpInfo(docId, majorVersion, minorVersion,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Create Document Event
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] majorVersion (required):
  ///   The document major_version_number__v field value.
  ///
  /// * [String] minorVersion (required):
  ///   The document minor_version_number__v field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPostWithHttpInfo(String docId, String majorVersion, String minorVersion, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/events'
      .replaceAll('{doc_id}', docId)
      .replaceAll('{major_version}', majorVersion)
      .replaceAll('{minor_version}', minorVersion);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Create Document Event
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] majorVersion (required):
  ///   The document major_version_number__v field value.
  ///
  /// * [String] minorVersion (required):
  ///   The document minor_version_number__v field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost(String docId, String majorVersion, String minorVersion, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPostWithHttpInfo(docId, majorVersion, minorVersion,  authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Video Annotations
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The video document id field value.
  ///
  /// * [String] majorVersion (required):
  ///   The video document major_version_number__v field value.
  ///
  /// * [String] minorVersion (required):
  ///   The video document minor_version_number__v field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///   This `Accept` header only changes the format of the response in the case of an error. On `SUCCESS`, the HTTP Response Header `Content-Type` is set to `text/plain;charset=UnicodeLittle`.
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGetWithHttpInfo(String docId, String majorVersion, String minorVersion, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/export-video-annotations'
      .replaceAll('{doc_id}', docId)
      .replaceAll('{major_version}', majorVersion)
      .replaceAll('{minor_version}', minorVersion);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Video Annotations
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The video document id field value.
  ///
  /// * [String] majorVersion (required):
  ///   The video document major_version_number__v field value.
  ///
  /// * [String] minorVersion (required):
  ///   The video document minor_version_number__v field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///   This `Accept` header only changes the format of the response in the case of an error. On `SUCCESS`, the HTTP Response Header `Content-Type` is set to `text/plain;charset=UnicodeLittle`.
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet(String docId, String majorVersion, String minorVersion, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGetWithHttpInfo(docId, majorVersion, minorVersion,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Download Document Version File
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] majorVersion (required):
  ///   The document major_version_number__v field value.
  ///
  /// * [String] minorVersion (required):
  ///   The document minor_version_number__v field value.
  ///
  /// * [String] accept:
  ///
  /// * [String] authorization:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGetWithHttpInfo(String docId, String majorVersion, String minorVersion, { String? accept, String? authorization, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/file'
      .replaceAll('{doc_id}', docId)
      .replaceAll('{major_version}', majorVersion)
      .replaceAll('{minor_version}', minorVersion);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Download Document Version File
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] majorVersion (required):
  ///   The document major_version_number__v field value.
  ///
  /// * [String] minorVersion (required):
  ///   The document minor_version_number__v field value.
  ///
  /// * [String] accept:
  ///
  /// * [String] authorization:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet(String docId, String majorVersion, String minorVersion, { String? accept, String? authorization, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGetWithHttpInfo(docId, majorVersion, minorVersion,  accept: accept, authorization: authorization, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Document Version
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] majorVersion (required):
  ///   The document major_version_number__v field value.
  ///
  /// * [String] minorVersion (required):
  ///   The document minor_version_number__v field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsDocIdVersionsMajorVersionMinorVersionGetWithHttpInfo(String docId, String majorVersion, String minorVersion, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/{doc_id}/versions/{major_version}/{minor_version}'
      .replaceAll('{doc_id}', docId)
      .replaceAll('{major_version}', majorVersion)
      .replaceAll('{minor_version}', minorVersion);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Document Version
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] majorVersion (required):
  ///   The document major_version_number__v field value.
  ///
  /// * [String] minorVersion (required):
  ///   The document minor_version_number__v field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet(String docId, String majorVersion, String minorVersion, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsDocIdVersionsMajorVersionMinorVersionGetWithHttpInfo(docId, majorVersion, minorVersion,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Update Document Version
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] majorVersion (required):
  ///   The document major_version_number__v field value.
  ///
  /// * [String] minorVersion (required):
  ///   The document minor_version_number__v field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [bool] xVaultAPIMigrationMode:
  ///   When set to true, Vault allows you to manually set the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsDocIdVersionsMajorVersionMinorVersionPutWithHttpInfo(String docId, String majorVersion, String minorVersion, { String? authorization, String? contentType, String? accept, bool? xVaultAPIMigrationMode, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/{doc_id}/versions/{major_version}/{minor_version}'
      .replaceAll('{doc_id}', docId)
      .replaceAll('{major_version}', majorVersion)
      .replaceAll('{minor_version}', minorVersion);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIMigrationMode != null) {
      headerParams[r'X-VaultAPI-MigrationMode'] = parameterToString(xVaultAPIMigrationMode);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'PUT',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Update Document Version
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] majorVersion (required):
  ///   The document major_version_number__v field value.
  ///
  /// * [String] minorVersion (required):
  ///   The document minor_version_number__v field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [bool] xVaultAPIMigrationMode:
  ///   When set to true, Vault allows you to manually set the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut(String docId, String majorVersion, String minorVersion, { String? authorization, String? contentType, String? accept, bool? xVaultAPIMigrationMode, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsDocIdVersionsMajorVersionMinorVersionPutWithHttpInfo(docId, majorVersion, minorVersion,  authorization: authorization, contentType: contentType, accept: accept, xVaultAPIMigrationMode: xVaultAPIMigrationMode, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Document Relationships
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] majorVersion (required):
  ///   The document major_version_number__v field value.
  ///
  /// * [String] minorVersion (required):
  ///   The document minor_version_number__v field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGetWithHttpInfo(String docId, String majorVersion, String minorVersion, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships'
      .replaceAll('{doc_id}', docId)
      .replaceAll('{major_version}', majorVersion)
      .replaceAll('{minor_version}', minorVersion);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Document Relationships
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] majorVersion (required):
  ///   The document major_version_number__v field value.
  ///
  /// * [String] minorVersion (required):
  ///   The document minor_version_number__v field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet(String docId, String majorVersion, String minorVersion, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGetWithHttpInfo(docId, majorVersion, minorVersion,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Create Single Document Relationship
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] majorVersion (required):
  ///   The document major_version_number__v field value.
  ///
  /// * [String] minorVersion (required):
  ///   The document minor_version_number__v field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPostWithHttpInfo(String docId, String majorVersion, String minorVersion, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships'
      .replaceAll('{doc_id}', docId)
      .replaceAll('{major_version}', majorVersion)
      .replaceAll('{minor_version}', minorVersion);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Create Single Document Relationship
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] majorVersion (required):
  ///   The document major_version_number__v field value.
  ///
  /// * [String] minorVersion (required):
  ///   The document minor_version_number__v field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost(String docId, String majorVersion, String minorVersion, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPostWithHttpInfo(docId, majorVersion, minorVersion,  authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Delete Single Document Relationship
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] majorVersion (required):
  ///   The document major_version_number__v field value.
  ///
  /// * [String] minorVersion (required):
  ///   The document minor_version_number__v field value.
  ///
  /// * [String] relationshipId (required):
  ///   The relationship id field value. See Retrieve Document Relationships.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteWithHttpInfo(String docId, String majorVersion, String minorVersion, String relationshipId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}'
      .replaceAll('{doc_id}', docId)
      .replaceAll('{major_version}', majorVersion)
      .replaceAll('{minor_version}', minorVersion)
      .replaceAll('{relationship_id}', relationshipId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'DELETE',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Delete Single Document Relationship
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] majorVersion (required):
  ///   The document major_version_number__v field value.
  ///
  /// * [String] minorVersion (required):
  ///   The document minor_version_number__v field value.
  ///
  /// * [String] relationshipId (required):
  ///   The relationship id field value. See Retrieve Document Relationships.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete(String docId, String majorVersion, String minorVersion, String relationshipId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteWithHttpInfo(docId, majorVersion, minorVersion, relationshipId,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Document Relationship
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] majorVersion (required):
  ///   The document major_version_number__v field value.
  ///
  /// * [String] minorVersion (required):
  ///   The document minor_version_number__v field value.
  ///
  /// * [String] relationshipId (required):
  ///   The relationship id field value. See Retrieve Document Relationships.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetWithHttpInfo(String docId, String majorVersion, String minorVersion, String relationshipId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}'
      .replaceAll('{doc_id}', docId)
      .replaceAll('{major_version}', majorVersion)
      .replaceAll('{minor_version}', minorVersion)
      .replaceAll('{relationship_id}', relationshipId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Document Relationship
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] majorVersion (required):
  ///   The document major_version_number__v field value.
  ///
  /// * [String] minorVersion (required):
  ///   The document minor_version_number__v field value.
  ///
  /// * [String] relationshipId (required):
  ///   The relationship id field value. See Retrieve Document Relationships.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet(String docId, String majorVersion, String minorVersion, String relationshipId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetWithHttpInfo(docId, majorVersion, minorVersion, relationshipId,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Document Version Renditions
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] majorVersion (required):
  ///   The document major_version_number__v field value.
  ///
  /// * [String] minorVersion (required):
  ///   The document minor_version_number__v field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGetWithHttpInfo(String docId, String majorVersion, String minorVersion, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions'
      .replaceAll('{doc_id}', docId)
      .replaceAll('{major_version}', majorVersion)
      .replaceAll('{minor_version}', minorVersion);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Document Version Renditions
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] majorVersion (required):
  ///   The document major_version_number__v field value.
  ///
  /// * [String] minorVersion (required):
  ///   The document minor_version_number__v field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet(String docId, String majorVersion, String minorVersion, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGetWithHttpInfo(docId, majorVersion, minorVersion,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Delete Document Version Rendition
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] majorVersion (required):
  ///   The document major_version_number__v field value.
  ///
  /// * [String] minorVersion (required):
  ///   The document minor_version_number__v field value.
  ///
  /// * [String] renditionType (required):
  ///   The document rendition type.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDeleteWithHttpInfo(String docId, String majorVersion, String minorVersion, String renditionType, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}'
      .replaceAll('{doc_id}', docId)
      .replaceAll('{major_version}', majorVersion)
      .replaceAll('{minor_version}', minorVersion)
      .replaceAll('{rendition_type}', renditionType);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'DELETE',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Delete Document Version Rendition
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] majorVersion (required):
  ///   The document major_version_number__v field value.
  ///
  /// * [String] minorVersion (required):
  ///   The document minor_version_number__v field value.
  ///
  /// * [String] renditionType (required):
  ///   The document rendition type.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete(String docId, String majorVersion, String minorVersion, String renditionType, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDeleteWithHttpInfo(docId, majorVersion, minorVersion, renditionType,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Download Document Version Rendition File
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] majorVersion (required):
  ///   The document major_version_number__v field value.
  ///
  /// * [String] minorVersion (required):
  ///   The document minor_version_number__v field value.
  ///
  /// * [String] renditionType (required):
  ///   The document rendition type.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGetWithHttpInfo(String docId, String majorVersion, String minorVersion, String renditionType, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}'
      .replaceAll('{doc_id}', docId)
      .replaceAll('{major_version}', majorVersion)
      .replaceAll('{minor_version}', minorVersion)
      .replaceAll('{rendition_type}', renditionType);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Download Document Version Rendition File
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] majorVersion (required):
  ///   The document major_version_number__v field value.
  ///
  /// * [String] minorVersion (required):
  ///   The document minor_version_number__v field value.
  ///
  /// * [String] renditionType (required):
  ///   The document rendition type.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet(String docId, String majorVersion, String minorVersion, String renditionType, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGetWithHttpInfo(docId, majorVersion, minorVersion, renditionType,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Upload Document Version Rendition
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] majorVersion (required):
  ///   The document major_version_number__v field value.
  ///
  /// * [String] minorVersion (required):
  ///   The document minor_version_number__v field value.
  ///
  /// * [String] renditionType (required):
  ///   The document rendition type.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePostWithHttpInfo(String docId, String majorVersion, String minorVersion, String renditionType, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}'
      .replaceAll('{doc_id}', docId)
      .replaceAll('{major_version}', majorVersion)
      .replaceAll('{minor_version}', minorVersion)
      .replaceAll('{rendition_type}', renditionType);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Upload Document Version Rendition
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] majorVersion (required):
  ///   The document major_version_number__v field value.
  ///
  /// * [String] minorVersion (required):
  ///   The document minor_version_number__v field value.
  ///
  /// * [String] renditionType (required):
  ///   The document rendition type.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost(String docId, String majorVersion, String minorVersion, String renditionType, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePostWithHttpInfo(docId, majorVersion, minorVersion, renditionType,  authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Replace Document Version Rendition
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] majorVersion (required):
  ///   The document major_version_number__v field value.
  ///
  /// * [String] minorVersion (required):
  ///   The document minor_version_number__v field value.
  ///
  /// * [String] renditionType (required):
  ///   The document rendition type.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePutWithHttpInfo(String docId, String majorVersion, String minorVersion, String renditionType, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}'
      .replaceAll('{doc_id}', docId)
      .replaceAll('{major_version}', majorVersion)
      .replaceAll('{minor_version}', minorVersion)
      .replaceAll('{rendition_type}', renditionType);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'PUT',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Replace Document Version Rendition
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] majorVersion (required):
  ///   The document major_version_number__v field value.
  ///
  /// * [String] minorVersion (required):
  ///   The document minor_version_number__v field value.
  ///
  /// * [String] renditionType (required):
  ///   The document rendition type.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut(String docId, String majorVersion, String minorVersion, String renditionType, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePutWithHttpInfo(docId, majorVersion, minorVersion, renditionType,  authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Download Document Version Thumbnail File
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] majorVersion (required):
  ///   The document major_version_number__v field value.
  ///
  /// * [String] minorVersion (required):
  ///   The document minor_version_number__v field value.
  ///
  /// * [String] accept:
  ///
  /// * [String] authorization:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGetWithHttpInfo(String docId, String majorVersion, String minorVersion, { String? accept, String? authorization, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/thumbnail'
      .replaceAll('{doc_id}', docId)
      .replaceAll('{major_version}', majorVersion)
      .replaceAll('{minor_version}', minorVersion);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Download Document Version Thumbnail File
  ///
  /// Parameters:
  ///
  /// * [String] docId (required):
  ///   The document id field value.
  ///
  /// * [String] majorVersion (required):
  ///   The document major_version_number__v field value.
  ///
  /// * [String] minorVersion (required):
  ///   The document minor_version_number__v field value.
  ///
  /// * [String] accept:
  ///
  /// * [String] authorization:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet(String docId, String majorVersion, String minorVersion, { String? accept, String? authorization, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGetWithHttpInfo(docId, majorVersion, minorVersion,  accept: accept, authorization: authorization, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve All Documents
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] namedFilter:
  ///   Retrieves only documents which you have created.
  ///
  /// * [String] scope:
  ///   Searches only within the document content.
  ///
  /// * [String] versionscope:
  ///   Retrieves all document versions, rather than only the latest version.
  ///
  /// * [String] search:
  ///   Search for documents based on a {keyword} in searchable document fields.
  ///
  /// * [String] limit:
  ///   See VQL documentation for more information.
  ///
  /// * [String] sort:
  ///   See VQL documentation for more information.
  ///
  /// * [String] start:
  ///   See VQL documentation for more information.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsGetWithHttpInfo({ String? namedFilter, String? scope, String? versionscope, String? search, String? limit, String? sort, String? start, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (namedFilter != null) {
      queryParams.addAll(_queryParams('', 'named_filter', namedFilter));
    }
    if (scope != null) {
      queryParams.addAll(_queryParams('', 'scope', scope));
    }
    if (versionscope != null) {
      queryParams.addAll(_queryParams('', 'versionscope', versionscope));
    }
    if (search != null) {
      queryParams.addAll(_queryParams('', 'search', search));
    }
    if (limit != null) {
      queryParams.addAll(_queryParams('', 'limit', limit));
    }
    if (sort != null) {
      queryParams.addAll(_queryParams('', 'sort', sort));
    }
    if (start != null) {
      queryParams.addAll(_queryParams('', 'start', start));
    }

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve All Documents
  ///
  /// Parameters:
  ///
  /// * [String] namedFilter:
  ///   Retrieves only documents which you have created.
  ///
  /// * [String] scope:
  ///   Searches only within the document content.
  ///
  /// * [String] versionscope:
  ///   Retrieves all document versions, rather than only the latest version.
  ///
  /// * [String] search:
  ///   Search for documents based on a {keyword} in searchable document fields.
  ///
  /// * [String] limit:
  ///   See VQL documentation for more information.
  ///
  /// * [String] sort:
  ///   See VQL documentation for more information.
  ///
  /// * [String] start:
  ///   See VQL documentation for more information.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsGet({ String? namedFilter, String? scope, String? versionscope, String? search, String? limit, String? sort, String? start, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsGetWithHttpInfo( namedFilter: namedFilter, scope: scope, versionscope: versionscope, search: search, limit: limit, sort: sort, start: start, authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve All Document Roles
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] id (required):
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsIdRolesGetWithHttpInfo(String id, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/{id}/roles'
      .replaceAll('{id}', id);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve All Document Roles
  ///
  /// Parameters:
  ///
  /// * [String] id (required):
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsIdRolesGet(String id, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsIdRolesGetWithHttpInfo(id,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Assign Users & Groups to Roles on a Single Document
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] id (required):
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsIdRolesPostWithHttpInfo(String id, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/{id}/roles'
      .replaceAll('{id}', id);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Assign Users & Groups to Roles on a Single Document
  ///
  /// Parameters:
  ///
  /// * [String] id (required):
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsIdRolesPost(String id, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsIdRolesPostWithHttpInfo(id,  authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Document Role
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] id (required):
  ///   The document `id`.
  ///
  /// * [String] roleName (required):
  ///   The name of the role to retrieve. For example, `owner__v`.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsIdRolesRoleNameGetWithHttpInfo(String id, String roleName, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/{id}/roles/{role_name}'
      .replaceAll('{id}', id)
      .replaceAll('{role_name}', roleName);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Document Role
  ///
  /// Parameters:
  ///
  /// * [String] id (required):
  ///   The document `id`.
  ///
  /// * [String] roleName (required):
  ///   The name of the role to retrieve. For example, `owner__v`.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsIdRolesRoleNameGet(String id, String roleName, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsIdRolesRoleNameGetWithHttpInfo(id, roleName,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Document User Actions
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] id (required):
  ///   The document id field value from which to retrieve available user actions.
  ///
  /// * [String] majorVersion (required):
  ///   The major version number of the document.
  ///
  /// * [String] minorVersion (required):
  ///   The minor version number of the document.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGetWithHttpInfo(String id, String majorVersion, String minorVersion, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions'
      .replaceAll('{id}', id)
      .replaceAll('{major_version}', majorVersion)
      .replaceAll('{minor_version}', minorVersion);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Document User Actions
  ///
  /// Parameters:
  ///
  /// * [String] id (required):
  ///   The document id field value from which to retrieve available user actions.
  ///
  /// * [String] majorVersion (required):
  ///   The major version number of the document.
  ///
  /// * [String] minorVersion (required):
  ///   The minor version number of the document.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet(String id, String majorVersion, String minorVersion, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGetWithHttpInfo(id, majorVersion, minorVersion,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Document Entry Criteria
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] id (required):
  ///   The document id field value from which to retrieve available user actions.
  ///
  /// * [String] majorVersion (required):
  ///   The major version number of the document.
  ///
  /// * [String] minorVersion (required):
  ///   The minor version number of the document.
  ///
  /// * [String] nameV (required):
  ///   The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetWithHttpInfo(String id, String majorVersion, String minorVersion, String nameV, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}/entry_requirements'
      .replaceAll('{id}', id)
      .replaceAll('{major_version}', majorVersion)
      .replaceAll('{minor_version}', minorVersion)
      .replaceAll('{name__v}', nameV);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Document Entry Criteria
  ///
  /// Parameters:
  ///
  /// * [String] id (required):
  ///   The document id field value from which to retrieve available user actions.
  ///
  /// * [String] majorVersion (required):
  ///   The major version number of the document.
  ///
  /// * [String] minorVersion (required):
  ///   The minor version number of the document.
  ///
  /// * [String] nameV (required):
  ///   The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet(String id, String majorVersion, String minorVersion, String nameV, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetWithHttpInfo(id, majorVersion, minorVersion, nameV,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Initiate Document User Action
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] id (required):
  ///   The document id field value from which to retrieve available user actions.
  ///
  /// * [String] majorVersion (required):
  ///   The major version number of the document.
  ///
  /// * [String] minorVersion (required):
  ///   The minor version number of the document.
  ///
  /// * [String] nameV (required):
  ///   The action name__v field value to initiate. This is retrieved from the Retrieve User Action request.
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutWithHttpInfo(String id, String majorVersion, String minorVersion, String nameV, { String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}'
      .replaceAll('{id}', id)
      .replaceAll('{major_version}', majorVersion)
      .replaceAll('{minor_version}', minorVersion)
      .replaceAll('{name__v}', nameV);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'PUT',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Initiate Document User Action
  ///
  /// Parameters:
  ///
  /// * [String] id (required):
  ///   The document id field value from which to retrieve available user actions.
  ///
  /// * [String] majorVersion (required):
  ///   The major version number of the document.
  ///
  /// * [String] minorVersion (required):
  ///   The minor version number of the document.
  ///
  /// * [String] nameV (required):
  ///   The action name__v field value to initiate. This is retrieved from the Retrieve User Action request.
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut(String id, String majorVersion, String minorVersion, String nameV, { String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutWithHttpInfo(id, majorVersion, minorVersion, nameV,  authorization: authorization, contentType: contentType, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve User Actions on Multiple Documents
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsLifecycleActionsPostWithHttpInfo({ String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/lifecycle_actions';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve User Actions on Multiple Documents
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsLifecycleActionsPost({ String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsLifecycleActionsPostWithHttpInfo( authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Initiate Bulk Document User Actions
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] userActionName (required):
  ///   The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Documents endpoint.
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsLifecycleActionsUserActionNamePutWithHttpInfo(String userActionName, { String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/lifecycle_actions/{user_action_name}'
      .replaceAll('{user_action_name}', userActionName);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'PUT',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Initiate Bulk Document User Actions
  ///
  /// Parameters:
  ///
  /// * [String] userActionName (required):
  ///   The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Documents endpoint.
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsLifecycleActionsUserActionNamePut(String userActionName, { String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsLifecycleActionsUserActionNamePutWithHttpInfo(userActionName,  authorization: authorization, contentType: contentType, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Create Single Document
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [bool] xVaultAPIMigrationMode:
  ///   When set to true,  you can use the status__v field to create documents in any lifecycle state. Additionally, you can manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsPostWithHttpInfo({ String? authorization, String? accept, bool? xVaultAPIMigrationMode, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIMigrationMode != null) {
      headerParams[r'X-VaultAPI-MigrationMode'] = parameterToString(xVaultAPIMigrationMode);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Create Single Document
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [bool] xVaultAPIMigrationMode:
  ///   When set to true,  you can use the status__v field to create documents in any lifecycle state. Additionally, you can manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsPost({ String? authorization, String? accept, bool? xVaultAPIMigrationMode, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsPostWithHttpInfo( authorization: authorization, accept: accept, xVaultAPIMigrationMode: xVaultAPIMigrationMode, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Delete Multiple Document Relationships
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsRelationshipsBatchDeleteWithHttpInfo({ String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/relationships/batch';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'DELETE',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Delete Multiple Document Relationships
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsRelationshipsBatchDelete({ String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsRelationshipsBatchDeleteWithHttpInfo( authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Create Multiple Document Relationships
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsRelationshipsBatchPostWithHttpInfo({ String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/relationships/batch';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Create Multiple Document Relationships
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsRelationshipsBatchPost({ String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsRelationshipsBatchPostWithHttpInfo( authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Delete Multiple Document Renditions
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsRenditionsBatchDeleteWithHttpInfo({ String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/renditions/batch';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'DELETE',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Delete Multiple Document Renditions
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsRenditionsBatchDelete({ String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsRenditionsBatchDeleteWithHttpInfo( authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Add Multiple Document Renditions
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] idParam:
  ///   If you’re identifying documents in your input by their external ID
  ///
  /// * [String] largeSizeAsset:
  ///   If set to true, indicates that the renditions to add are of the Large Size Asset (large_size_asset__v) rendition type. Vault applies Document Migration Mode limitations to renditions created with the request, but Document Migration permission is not required and your vault need not be in Migration Mode to use the parameter. Note that the request results in an error if the CSV contains any rendition type other than large_size_asset__v.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [bool] xVaultAPIMigrationMode:
  ///   Must be set to true when importing any rendition type other than large_size_asset__v. You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsRenditionsBatchPostWithHttpInfo({ String? idParam, String? largeSizeAsset, String? authorization, String? accept, String? contentType, bool? xVaultAPIMigrationMode, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/renditions/batch';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (idParam != null) {
      queryParams.addAll(_queryParams('', 'idParam', idParam));
    }
    if (largeSizeAsset != null) {
      queryParams.addAll(_queryParams('', 'largeSizeAsset', largeSizeAsset));
    }

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIMigrationMode != null) {
      headerParams[r'X-VaultAPI-MigrationMode'] = parameterToString(xVaultAPIMigrationMode);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Add Multiple Document Renditions
  ///
  /// Parameters:
  ///
  /// * [String] idParam:
  ///   If you’re identifying documents in your input by their external ID
  ///
  /// * [String] largeSizeAsset:
  ///   If set to true, indicates that the renditions to add are of the Large Size Asset (large_size_asset__v) rendition type. Vault applies Document Migration Mode limitations to renditions created with the request, but Document Migration permission is not required and your vault need not be in Migration Mode to use the parameter. Note that the request results in an error if the CSV contains any rendition type other than large_size_asset__v.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [bool] xVaultAPIMigrationMode:
  ///   Must be set to true when importing any rendition type other than large_size_asset__v. You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsRenditionsBatchPost({ String? idParam, String? largeSizeAsset, String? authorization, String? accept, String? contentType, bool? xVaultAPIMigrationMode, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsRenditionsBatchPostWithHttpInfo( idParam: idParam, largeSizeAsset: largeSizeAsset, authorization: authorization, accept: accept, contentType: contentType, xVaultAPIMigrationMode: xVaultAPIMigrationMode, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Remove Users and Groups from Roles on Multiple Documents & Binders
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsRolesBatchDeleteWithHttpInfo({ String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/roles/batch';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'DELETE',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Remove Users and Groups from Roles on Multiple Documents & Binders
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsRolesBatchDelete({ String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsRolesBatchDeleteWithHttpInfo( authorization: authorization, contentType: contentType, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Assign Users & Groups to Roles on Multiple Documents & Binders
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsRolesBatchPostWithHttpInfo({ String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/roles/batch';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Assign Users & Groups to Roles on Multiple Documents & Binders
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsRolesBatchPost({ String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsRolesBatchPostWithHttpInfo( authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Document Template Collection
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsTemplatesGetWithHttpInfo({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/templates';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Document Template Collection
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsTemplatesGet({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsTemplatesGetWithHttpInfo( authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Create Single Document Template
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsTemplatesPostWithHttpInfo({ String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/templates';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Create Single Document Template
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsTemplatesPost({ String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsTemplatesPostWithHttpInfo( authorization: authorization, contentType: contentType, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Update Multiple Document Templates
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsTemplatesPutWithHttpInfo({ String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/templates';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'PUT',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Update Multiple Document Templates
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsTemplatesPut({ String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsTemplatesPutWithHttpInfo( authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Delete Basic Document Template
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] templateName (required):
  ///   The document template name__v field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsTemplatesTemplateNameDeleteWithHttpInfo(String templateName, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/templates/{template_name}'
      .replaceAll('{template_name}', templateName);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'DELETE',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Delete Basic Document Template
  ///
  /// Parameters:
  ///
  /// * [String] templateName (required):
  ///   The document template name__v field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsTemplatesTemplateNameDelete(String templateName, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsTemplatesTemplateNameDeleteWithHttpInfo(templateName,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Download Document Template File
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] templateName (required):
  ///   The document template name__v field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsTemplatesTemplateNameFileGetWithHttpInfo(String templateName, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/templates/{template_name}/file'
      .replaceAll('{template_name}', templateName);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Download Document Template File
  ///
  /// Parameters:
  ///
  /// * [String] templateName (required):
  ///   The document template name__v field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsTemplatesTemplateNameFileGet(String templateName, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsTemplatesTemplateNameFileGetWithHttpInfo(templateName,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Document Template Attributes
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] templateName (required):
  ///   The document template name__v field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsTemplatesTemplateNameGetWithHttpInfo(String templateName, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/templates/{template_name}'
      .replaceAll('{template_name}', templateName);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Document Template Attributes
  ///
  /// Parameters:
  ///
  /// * [String] templateName (required):
  ///   The document template name__v field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsTemplatesTemplateNameGet(String templateName, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsTemplatesTemplateNameGetWithHttpInfo(templateName,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Update Single Document Template
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] templateName (required):
  ///   The document template name__v field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsTemplatesTemplateNamePutWithHttpInfo(String templateName, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/templates/{template_name}'
      .replaceAll('{template_name}', templateName);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'PUT',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Update Single Document Template
  ///
  /// Parameters:
  ///
  /// * [String] templateName (required):
  ///   The document template name__v field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsTemplatesTemplateNamePut(String templateName, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsTemplatesTemplateNamePutWithHttpInfo(templateName,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Document Tokens
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsTokensPostWithHttpInfo({ String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/tokens';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Document Tokens
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsTokensPost({ String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsTokensPostWithHttpInfo( authorization: authorization, contentType: contentType, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Export Document Versions
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [bool] source_:
  ///   Optional: To exclude source files, include a query parameter source=false. If omitted, defaults to true.
  ///
  /// * [bool] renditions:
  ///   Optional: To include renditions, include a query parameter renditions=true. If omitted, defaults to false.
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsVersionsBatchActionsFileextractPostWithHttpInfo({ bool? source_, bool? renditions, String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/versions/batch/actions/fileextract';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (source_ != null) {
      queryParams.addAll(_queryParams('', 'source', source_));
    }
    if (renditions != null) {
      queryParams.addAll(_queryParams('', 'renditions', renditions));
    }

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Export Document Versions
  ///
  /// Parameters:
  ///
  /// * [bool] source_:
  ///   Optional: To exclude source files, include a query parameter source=false. If omitted, defaults to true.
  ///
  /// * [bool] renditions:
  ///   Optional: To include renditions, include a query parameter renditions=true. If omitted, defaults to false.
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsVersionsBatchActionsFileextractPost({ bool? source_, bool? renditions, String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsVersionsBatchActionsFileextractPostWithHttpInfo( source_: source_, renditions: renditions, authorization: authorization, contentType: contentType, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Delete Multiple Document Versions
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] idParam:
  ///   If you’re identifying documents in your input by their external ID
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsVersionsBatchDeleteWithHttpInfo({ String? idParam, String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/versions/batch';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (idParam != null) {
      queryParams.addAll(_queryParams('', 'idParam', idParam));
    }

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'DELETE',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Delete Multiple Document Versions
  ///
  /// Parameters:
  ///
  /// * [String] idParam:
  ///   If you’re identifying documents in your input by their external ID
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsVersionsBatchDelete({ String? idParam, String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsVersionsBatchDeleteWithHttpInfo( idParam: idParam, authorization: authorization, contentType: contentType, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Create Multiple Document Versions
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] idParam:
  ///   If you’re identifying documents in your input by their external ID
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIMigrationMode:
  ///   Must be set to true. Vault allows you to manually set the name and version number and to create documents in any lifecycle state using the `status__v` field, but does not allow you to change the document number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDocumentsVersionsBatchPostWithHttpInfo({ String? idParam, String? authorization, String? accept, String? contentType, String? xVaultAPIMigrationMode, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/documents/versions/batch';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (idParam != null) {
      queryParams.addAll(_queryParams('', 'idParam', idParam));
    }

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIMigrationMode != null) {
      headerParams[r'X-VaultAPI-MigrationMode'] = parameterToString(xVaultAPIMigrationMode);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Create Multiple Document Versions
  ///
  /// Parameters:
  ///
  /// * [String] idParam:
  ///   If you’re identifying documents in your input by their external ID
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIMigrationMode:
  ///   Must be set to true. Vault allows you to manually set the name and version number and to create documents in any lifecycle state using the `status__v` field, but does not allow you to change the document number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDocumentsVersionsBatchPost({ String? idParam, String? authorization, String? accept, String? contentType, String? xVaultAPIMigrationMode, String? xVaultAPIClientID, }) async {
    final response = await objectsDocumentsVersionsBatchPostWithHttpInfo( idParam: idParam, authorization: authorization, accept: accept, contentType: contentType, xVaultAPIMigrationMode: xVaultAPIMigrationMode, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Domain Information
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [bool] includeApplication:
  ///   To include Vault application type information in the response, set include_application to true. If omitted, defaults to false and application information is not included.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDomainGetWithHttpInfo({ bool? includeApplication, String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/domain';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (includeApplication != null) {
      queryParams.addAll(_queryParams('', 'include_application', includeApplication));
    }

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Domain Information
  ///
  /// Parameters:
  ///
  /// * [bool] includeApplication:
  ///   To include Vault application type information in the response, set include_application to true. If omitted, defaults to false and application information is not included.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDomainGet({ bool? includeApplication, String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await objectsDomainGetWithHttpInfo( includeApplication: includeApplication, authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Domains
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsDomainsGetWithHttpInfo({ String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/domains';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Domains
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsDomainsGet({ String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await objectsDomainsGetWithHttpInfo( authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Add EDL Matched Documents
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsEdlMatchedDocumentsBatchActionsAddPostWithHttpInfo({ String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/edl_matched_documents/batch/actions/add';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Add EDL Matched Documents
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsEdlMatchedDocumentsBatchActionsAddPost({ String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsEdlMatchedDocumentsBatchActionsAddPostWithHttpInfo( authorization: authorization, contentType: contentType, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Remove EDL Matched Documents
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsEdlMatchedDocumentsBatchActionsRemovePostWithHttpInfo({ String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/edl_matched_documents/batch/actions/remove';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Remove EDL Matched Documents
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsEdlMatchedDocumentsBatchActionsRemovePost({ String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsEdlMatchedDocumentsBatchActionsRemovePostWithHttpInfo( authorization: authorization, contentType: contentType, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Auto Managed Groups
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] limit:
  ///   Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 1000. 
  ///
  /// * [String] offset:
  ///   Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51. If omitted, defaults to 0.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsGroupsAutoGetWithHttpInfo({ String? limit, String? offset, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/groups/auto';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (limit != null) {
      queryParams.addAll(_queryParams('', 'limit', limit));
    }
    if (offset != null) {
      queryParams.addAll(_queryParams('', 'offset', offset));
    }

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Auto Managed Groups
  ///
  /// Parameters:
  ///
  /// * [String] limit:
  ///   Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 1000. 
  ///
  /// * [String] offset:
  ///   Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51. If omitted, defaults to 0.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsGroupsAutoGet({ String? limit, String? offset, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsGroupsAutoGetWithHttpInfo( limit: limit, offset: offset, authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve All Groups
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] includeImplied:
  ///   When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. If omitted, the response includes only the members__v field. These users are individually added to a group by an Admin.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsGroupsGetWithHttpInfo({ String? includeImplied, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/groups';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (includeImplied != null) {
      queryParams.addAll(_queryParams('', 'includeImplied', includeImplied));
    }

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve All Groups
  ///
  /// Parameters:
  ///
  /// * [String] includeImplied:
  ///   When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. If omitted, the response includes only the members__v field. These users are individually added to a group by an Admin.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsGroupsGet({ String? includeImplied, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsGroupsGetWithHttpInfo( includeImplied: includeImplied, authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Delete Group
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] groupId (required):
  ///   The group id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsGroupsGroupIdDeleteWithHttpInfo(String groupId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/groups/{group_id}'
      .replaceAll('{group_id}', groupId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'DELETE',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Delete Group
  ///
  /// Parameters:
  ///
  /// * [String] groupId (required):
  ///   The group id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsGroupsGroupIdDelete(String groupId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsGroupsGroupIdDeleteWithHttpInfo(groupId,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Group
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] groupId (required):
  ///   The group id field value.
  ///
  /// * [bool] includeImplied:
  ///   When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. When not used, the response includes only the members__v field. These users are individually added to a group by Admin.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsGroupsGroupIdGetWithHttpInfo(String groupId, { bool? includeImplied, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/groups/{group_id}'
      .replaceAll('{group_id}', groupId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (includeImplied != null) {
      queryParams.addAll(_queryParams('', 'includeImplied', includeImplied));
    }

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Group
  ///
  /// Parameters:
  ///
  /// * [String] groupId (required):
  ///   The group id field value.
  ///
  /// * [bool] includeImplied:
  ///   When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. When not used, the response includes only the members__v field. These users are individually added to a group by Admin.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsGroupsGroupIdGet(String groupId, { bool? includeImplied, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsGroupsGroupIdGetWithHttpInfo(groupId,  includeImplied: includeImplied, authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Update Group
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] groupId (required):
  ///   The group id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsGroupsGroupIdPutWithHttpInfo(String groupId, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/groups/{group_id}'
      .replaceAll('{group_id}', groupId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'PUT',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Update Group
  ///
  /// Parameters:
  ///
  /// * [String] groupId (required):
  ///   The group id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsGroupsGroupIdPut(String groupId, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await objectsGroupsGroupIdPutWithHttpInfo(groupId,  authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Create Group 
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsGroupsPostWithHttpInfo({ String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/groups';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Create Group 
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsGroupsPost({ String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await objectsGroupsPostWithHttpInfo( authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Application License Usage
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsLicensesGetWithHttpInfo({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/licenses';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Application License Usage
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsLicensesGet({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsLicensesGetWithHttpInfo( authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve All Multi-Record Workflows
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsObjectworkflowsActionsGetWithHttpInfo({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/objectworkflows/actions';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve All Multi-Record Workflows
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsObjectworkflowsActionsGet({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsObjectworkflowsActionsGetWithHttpInfo( authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Multi-Record Workflow Details
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] workflowName (required):
  ///
  /// * [String] authorization:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsObjectworkflowsActionsWorkflowNameGetWithHttpInfo(String workflowName, { String? authorization, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/objectworkflows/actions/{workflow_name}'
      .replaceAll('{workflow_name}', workflowName);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Multi-Record Workflow Details
  ///
  /// Parameters:
  ///
  /// * [String] workflowName (required):
  ///
  /// * [String] authorization:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsObjectworkflowsActionsWorkflowNameGet(String workflowName, { String? authorization, String? xVaultAPIClientID, }) async {
    final response = await objectsObjectworkflowsActionsWorkflowNameGetWithHttpInfo(workflowName,  authorization: authorization, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Initiate Multi-Record Workflow
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] workflowName (required):
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsObjectworkflowsActionsWorkflowNamePostWithHttpInfo(String workflowName, { String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/objectworkflows/actions/{workflow_name}'
      .replaceAll('{workflow_name}', workflowName);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Initiate Multi-Record Workflow
  ///
  /// Parameters:
  ///
  /// * [String] workflowName (required):
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsObjectworkflowsActionsWorkflowNamePost(String workflowName, { String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsObjectworkflowsActionsWorkflowNamePostWithHttpInfo(workflowName,  authorization: authorization, contentType: contentType, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Workflows
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] objectV:
  ///   To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v={name__v}&record_id__v={id}. These two parameters are required when the participant parameter is not used. 
  ///
  /// * [String] recordIdV:
  ///   To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v={name__v}&record_id__v={id}. These two parameters are required when the participant parameter is not used. 
  ///
  /// * [String] participant:
  ///   To retrieve all workflows available to a particular user, include the user id field value as ?participant={id}. To retrieve your own workflows, set this value to ?participant=me. This parameter is required when the object__v and record_id__v parameters are not used. 
  ///
  /// * [String] statusV:
  ///   To retrieve all workflows with specific statuses, include one or more status name__v field values. For example: status__v=active__v, status__v=active__v,completed__v. Workflows with `status__v=active__v` are in progress for the indicated object record. Valid statuses include: active__v completed__v cancelled__v
  ///
  /// * [String] offset:
  ///   This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset=201. 
  ///
  /// * [String] pageSize:
  ///   This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size=1000. 
  ///
  /// * [String] loc:
  ///   When localized (translated) strings are available, retrieve them by including ?loc=true. 
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsObjectworkflowsGetWithHttpInfo({ String? objectV, String? recordIdV, String? participant, String? statusV, String? offset, String? pageSize, String? loc, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/objectworkflows';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (objectV != null) {
      queryParams.addAll(_queryParams('', 'object__v', objectV));
    }
    if (recordIdV != null) {
      queryParams.addAll(_queryParams('', 'record_id__v', recordIdV));
    }
    if (participant != null) {
      queryParams.addAll(_queryParams('', 'participant', participant));
    }
    if (statusV != null) {
      queryParams.addAll(_queryParams('', 'status__v', statusV));
    }
    if (offset != null) {
      queryParams.addAll(_queryParams('', 'offset', offset));
    }
    if (pageSize != null) {
      queryParams.addAll(_queryParams('', 'page_size', pageSize));
    }
    if (loc != null) {
      queryParams.addAll(_queryParams('', 'loc', loc));
    }

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Workflows
  ///
  /// Parameters:
  ///
  /// * [String] objectV:
  ///   To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v={name__v}&record_id__v={id}. These two parameters are required when the participant parameter is not used. 
  ///
  /// * [String] recordIdV:
  ///   To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v={name__v}&record_id__v={id}. These two parameters are required when the participant parameter is not used. 
  ///
  /// * [String] participant:
  ///   To retrieve all workflows available to a particular user, include the user id field value as ?participant={id}. To retrieve your own workflows, set this value to ?participant=me. This parameter is required when the object__v and record_id__v parameters are not used. 
  ///
  /// * [String] statusV:
  ///   To retrieve all workflows with specific statuses, include one or more status name__v field values. For example: status__v=active__v, status__v=active__v,completed__v. Workflows with `status__v=active__v` are in progress for the indicated object record. Valid statuses include: active__v completed__v cancelled__v
  ///
  /// * [String] offset:
  ///   This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset=201. 
  ///
  /// * [String] pageSize:
  ///   This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size=1000. 
  ///
  /// * [String] loc:
  ///   When localized (translated) strings are available, retrieve them by including ?loc=true. 
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsObjectworkflowsGet({ String? objectV, String? recordIdV, String? participant, String? statusV, String? offset, String? pageSize, String? loc, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsObjectworkflowsGetWithHttpInfo( objectV: objectV, recordIdV: recordIdV, participant: participant, statusV: statusV, offset: offset, pageSize: pageSize, loc: loc, authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Workflow Tasks
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] objectV:
  ///   To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v={name__v}&record_id__v={id}. These two parameters are required when the assignee__v parameter is not used.
  ///
  /// * [String] recordIdV:
  ///   To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v={name__v}&record_id__v={id}. These two parameters are required when the assignee__v parameter is not used.
  ///
  /// * [String] assigneeV:
  ///   To retrieve all workflow tasks available to a particular user, include the user id field value as ?assignee__v={id}. To retrieve your own workflow tasks, set this value to ?assignee__v=me. This parameter is required when the object__v and record_id__v parameters are not used. 
  ///
  /// * [String] statusV:
  ///   To retrieve all workflow tasks with specific statuses, include one or more status name__v field values. For example: ?status__v=available__v or ?status__v=available__v,completed__v. 
  ///
  /// * [String] offset:
  ///   This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset=201. 
  ///
  /// * [String] pageSize:
  ///   This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size=1000. 
  ///
  /// * [String] loc:
  ///   When localized (translated) strings are available, retrieve them by including ?loc=true. 
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsObjectworkflowsTasksGetWithHttpInfo({ String? objectV, String? recordIdV, String? assigneeV, String? statusV, String? offset, String? pageSize, String? loc, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/objectworkflows/tasks';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (objectV != null) {
      queryParams.addAll(_queryParams('', 'object__v', objectV));
    }
    if (recordIdV != null) {
      queryParams.addAll(_queryParams('', 'record_id__v', recordIdV));
    }
    if (assigneeV != null) {
      queryParams.addAll(_queryParams('', 'assignee__v', assigneeV));
    }
    if (statusV != null) {
      queryParams.addAll(_queryParams('', 'status__v', statusV));
    }
    if (offset != null) {
      queryParams.addAll(_queryParams('', 'offset', offset));
    }
    if (pageSize != null) {
      queryParams.addAll(_queryParams('', 'page_size', pageSize));
    }
    if (loc != null) {
      queryParams.addAll(_queryParams('', 'loc', loc));
    }

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Workflow Tasks
  ///
  /// Parameters:
  ///
  /// * [String] objectV:
  ///   To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v={name__v}&record_id__v={id}. These two parameters are required when the assignee__v parameter is not used.
  ///
  /// * [String] recordIdV:
  ///   To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v={name__v}&record_id__v={id}. These two parameters are required when the assignee__v parameter is not used.
  ///
  /// * [String] assigneeV:
  ///   To retrieve all workflow tasks available to a particular user, include the user id field value as ?assignee__v={id}. To retrieve your own workflow tasks, set this value to ?assignee__v=me. This parameter is required when the object__v and record_id__v parameters are not used. 
  ///
  /// * [String] statusV:
  ///   To retrieve all workflow tasks with specific statuses, include one or more status name__v field values. For example: ?status__v=available__v or ?status__v=available__v,completed__v. 
  ///
  /// * [String] offset:
  ///   This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset=201. 
  ///
  /// * [String] pageSize:
  ///   This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size=1000. 
  ///
  /// * [String] loc:
  ///   When localized (translated) strings are available, retrieve them by including ?loc=true. 
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsObjectworkflowsTasksGet({ String? objectV, String? recordIdV, String? assigneeV, String? statusV, String? offset, String? pageSize, String? loc, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsObjectworkflowsTasksGetWithHttpInfo( objectV: objectV, recordIdV: recordIdV, assigneeV: assigneeV, statusV: statusV, offset: offset, pageSize: pageSize, loc: loc, authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Accept Single Record Workflow Task
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] taskId (required):
  ///   The task id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsObjectworkflowsTasksTaskIdActionsAcceptPostWithHttpInfo(String taskId, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/objectworkflows/tasks/{task_id}/actions/accept'
      .replaceAll('{task_id}', taskId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Accept Single Record Workflow Task
  ///
  /// Parameters:
  ///
  /// * [String] taskId (required):
  ///   The task id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsObjectworkflowsTasksTaskIdActionsAcceptPost(String taskId, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await objectsObjectworkflowsTasksTaskIdActionsAcceptPostWithHttpInfo(taskId,  authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Cancel Workflow Task
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] taskId (required):
  ///   The task id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsObjectworkflowsTasksTaskIdActionsCancelPostWithHttpInfo(String taskId, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/objectworkflows/tasks/{task_id}/actions/cancel'
      .replaceAll('{task_id}', taskId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Cancel Workflow Task
  ///
  /// Parameters:
  ///
  /// * [String] taskId (required):
  ///   The task id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsObjectworkflowsTasksTaskIdActionsCancelPost(String taskId, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await objectsObjectworkflowsTasksTaskIdActionsCancelPostWithHttpInfo(taskId,  authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Complete Single Record Workflow Task
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] taskId (required):
  ///   The task id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsObjectworkflowsTasksTaskIdActionsCompletePostWithHttpInfo(String taskId, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/objectworkflows/tasks/{task_id}/actions/complete'
      .replaceAll('{task_id}', taskId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Complete Single Record Workflow Task
  ///
  /// Parameters:
  ///
  /// * [String] taskId (required):
  ///   The task id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsObjectworkflowsTasksTaskIdActionsCompletePost(String taskId, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await objectsObjectworkflowsTasksTaskIdActionsCompletePostWithHttpInfo(taskId,  authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Workflow Task Actions
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] taskId (required):
  ///   The task id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsObjectworkflowsTasksTaskIdActionsGetWithHttpInfo(String taskId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/objectworkflows/tasks/{task_id}/actions'
      .replaceAll('{task_id}', taskId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Workflow Task Actions
  ///
  /// Parameters:
  ///
  /// * [String] taskId (required):
  ///   The task id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsObjectworkflowsTasksTaskIdActionsGet(String taskId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsObjectworkflowsTasksTaskIdActionsGetWithHttpInfo(taskId,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Accept Multi-item Workflow Task
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] taskId (required):
  ///   The task id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsObjectworkflowsTasksTaskIdActionsMdwacceptPostWithHttpInfo(String taskId, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/objectworkflows/tasks/{task_id}/actions/mdwaccept'
      .replaceAll('{task_id}', taskId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Accept Multi-item Workflow Task
  ///
  /// Parameters:
  ///
  /// * [String] taskId (required):
  ///   The task id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsObjectworkflowsTasksTaskIdActionsMdwacceptPost(String taskId, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await objectsObjectworkflowsTasksTaskIdActionsMdwacceptPostWithHttpInfo(taskId,  authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Complete Multi-item Workflow Task
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] taskId (required):
  ///   The task id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsObjectworkflowsTasksTaskIdActionsMdwcompletePostWithHttpInfo(String taskId, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/objectworkflows/tasks/{task_id}/actions/mdwcomplete'
      .replaceAll('{task_id}', taskId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Complete Multi-item Workflow Task
  ///
  /// Parameters:
  ///
  /// * [String] taskId (required):
  ///   The task id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsObjectworkflowsTasksTaskIdActionsMdwcompletePost(String taskId, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await objectsObjectworkflowsTasksTaskIdActionsMdwcompletePostWithHttpInfo(taskId,  authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Manage Multi-Item Workflow Content
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] taskId (required):
  ///   The task id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPostWithHttpInfo(String taskId, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/objectworkflows/tasks/{task_id}/actions/mdwmanagecontent'
      .replaceAll('{task_id}', taskId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Manage Multi-Item Workflow Content
  ///
  /// Parameters:
  ///
  /// * [String] taskId (required):
  ///   The task id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPost(String taskId, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPostWithHttpInfo(taskId,  authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Reassign Multi-item Workflow Task
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] taskId (required):
  ///   The id of the task to reassign.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsObjectworkflowsTasksTaskIdActionsMdwreassignPostWithHttpInfo(String taskId, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/objectworkflows/tasks/{task_id}/actions/mdwreassign'
      .replaceAll('{task_id}', taskId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Reassign Multi-item Workflow Task
  ///
  /// Parameters:
  ///
  /// * [String] taskId (required):
  ///   The id of the task to reassign.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsObjectworkflowsTasksTaskIdActionsMdwreassignPost(String taskId, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await objectsObjectworkflowsTasksTaskIdActionsMdwreassignPostWithHttpInfo(taskId,  authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Reassign Single Record Workflow Task
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] taskId (required):
  ///   The id of the task to reassign.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsObjectworkflowsTasksTaskIdActionsReassignPostWithHttpInfo(String taskId, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/objectworkflows/tasks/{task_id}/actions/reassign'
      .replaceAll('{task_id}', taskId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Reassign Single Record Workflow Task
  ///
  /// Parameters:
  ///
  /// * [String] taskId (required):
  ///   The id of the task to reassign.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsObjectworkflowsTasksTaskIdActionsReassignPost(String taskId, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await objectsObjectworkflowsTasksTaskIdActionsReassignPostWithHttpInfo(taskId,  authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Workflow Task Action Details
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] taskId (required):
  ///   The task id field value.
  ///
  /// * [String] taskAction (required):
  ///   The name of the task action retrieved from Retrieve Workflow Task Actions.
  ///
  /// * [String] loc:
  ///   When localized (translated) strings are available, retrieve them by including loc=true. 
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsObjectworkflowsTasksTaskIdActionsTaskActionGetWithHttpInfo(String taskId, String taskAction, { String? loc, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/objectworkflows/tasks/{task_id}/actions/{task_action}'
      .replaceAll('{task_id}', taskId)
      .replaceAll('{task_action}', taskAction);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (loc != null) {
      queryParams.addAll(_queryParams('', 'loc', loc));
    }

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Workflow Task Action Details
  ///
  /// Parameters:
  ///
  /// * [String] taskId (required):
  ///   The task id field value.
  ///
  /// * [String] taskAction (required):
  ///   The name of the task action retrieved from Retrieve Workflow Task Actions.
  ///
  /// * [String] loc:
  ///   When localized (translated) strings are available, retrieve them by including loc=true. 
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsObjectworkflowsTasksTaskIdActionsTaskActionGet(String taskId, String taskAction, { String? loc, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsObjectworkflowsTasksTaskIdActionsTaskActionGetWithHttpInfo(taskId, taskAction,  loc: loc, authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Undo Workflow Task Acceptance
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] taskId (required):
  ///   The task id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsObjectworkflowsTasksTaskIdActionsUndoacceptPostWithHttpInfo(String taskId, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/objectworkflows/tasks/{task_id}/actions/undoaccept'
      .replaceAll('{task_id}', taskId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Undo Workflow Task Acceptance
  ///
  /// Parameters:
  ///
  /// * [String] taskId (required):
  ///   The task id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsObjectworkflowsTasksTaskIdActionsUndoacceptPost(String taskId, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await objectsObjectworkflowsTasksTaskIdActionsUndoacceptPostWithHttpInfo(taskId,  authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Update Workflow Task Due Date
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] taskId (required):
  ///   The id of the task.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePostWithHttpInfo(String taskId, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/objectworkflows/tasks/{task_id}/actions/updateduedate'
      .replaceAll('{task_id}', taskId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Update Workflow Task Due Date
  ///
  /// Parameters:
  ///
  /// * [String] taskId (required):
  ///   The id of the task.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePost(String taskId, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePostWithHttpInfo(taskId,  authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Workflow Task Details
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] taskId (required):
  ///   The task id field value.
  ///
  /// * [bool] loc:
  ///   When localized (translated) strings are available, retrieve them by including loc=true.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsObjectworkflowsTasksTaskIdGetWithHttpInfo(String taskId, { bool? loc, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/objectworkflows/tasks/{task_id}'
      .replaceAll('{task_id}', taskId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (loc != null) {
      queryParams.addAll(_queryParams('', 'loc', loc));
    }

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Workflow Task Details
  ///
  /// Parameters:
  ///
  /// * [String] taskId (required):
  ///   The task id field value.
  ///
  /// * [bool] loc:
  ///   When localized (translated) strings are available, retrieve them by including loc=true.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsObjectworkflowsTasksTaskIdGet(String taskId, { bool? loc, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsObjectworkflowsTasksTaskIdGetWithHttpInfo(taskId,  loc: loc, authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Workflow Actions
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] workflowId (required):
  ///   The workflow id field value.
  ///
  /// * [String] loc:
  ///   When localized (translated) strings are available, retrieve them by including loc=true. 
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsObjectworkflowsWorkflowIdActionsGetWithHttpInfo(String workflowId, { String? loc, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/objectworkflows/{workflow_id}/actions'
      .replaceAll('{workflow_id}', workflowId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (loc != null) {
      queryParams.addAll(_queryParams('', 'loc', loc));
    }

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Workflow Actions
  ///
  /// Parameters:
  ///
  /// * [String] workflowId (required):
  ///   The workflow id field value.
  ///
  /// * [String] loc:
  ///   When localized (translated) strings are available, retrieve them by including loc=true. 
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsObjectworkflowsWorkflowIdActionsGet(String workflowId, { String? loc, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsObjectworkflowsWorkflowIdActionsGetWithHttpInfo(workflowId,  loc: loc, authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Workflow Action Details
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] workflowId (required):
  ///   The workflow id field value.
  ///
  /// * [String] workflowAction (required):
  ///   The workflow action name retrieved from Retrieve Workflow Actions.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsObjectworkflowsWorkflowIdActionsWorkflowActionGetWithHttpInfo(String workflowId, String workflowAction, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/objectworkflows/{workflow_id}/actions/{workflow_action}'
      .replaceAll('{workflow_id}', workflowId)
      .replaceAll('{workflow_action}', workflowAction);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Workflow Action Details
  ///
  /// Parameters:
  ///
  /// * [String] workflowId (required):
  ///   The workflow id field value.
  ///
  /// * [String] workflowAction (required):
  ///   The workflow action name retrieved from Retrieve Workflow Actions.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet(String workflowId, String workflowAction, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsObjectworkflowsWorkflowIdActionsWorkflowActionGetWithHttpInfo(workflowId, workflowAction,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Initiate Workflow Action
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] workflowId (required):
  ///   The workflow id field value.
  ///
  /// * [String] workflowAction (required):
  ///   The workflow action name retrieved from Retrieve Workflow Actions.
  ///
  /// * [String] documentsSys:
  ///   Include the id or ids as a comma-separated list of the document(s) to be removed from a document workflow when using the removecontent action. If your workflow_action is remove_content, include the id of the document to remove the workflow. To remove multiple documents, use a comma-separated list of ids.
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsObjectworkflowsWorkflowIdActionsWorkflowActionPostWithHttpInfo(String workflowId, String workflowAction, { String? documentsSys, String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/objectworkflows/{workflow_id}/actions/{workflow_action}'
      .replaceAll('{workflow_id}', workflowId)
      .replaceAll('{workflow_action}', workflowAction);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (documentsSys != null) {
      queryParams.addAll(_queryParams('', 'documents__sys', documentsSys));
    }

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Initiate Workflow Action
  ///
  /// Parameters:
  ///
  /// * [String] workflowId (required):
  ///   The workflow id field value.
  ///
  /// * [String] workflowAction (required):
  ///   The workflow action name retrieved from Retrieve Workflow Actions.
  ///
  /// * [String] documentsSys:
  ///   Include the id or ids as a comma-separated list of the document(s) to be removed from a document workflow when using the removecontent action. If your workflow_action is remove_content, include the id of the document to remove the workflow. To remove multiple documents, use a comma-separated list of ids.
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost(String workflowId, String workflowAction, { String? documentsSys, String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsObjectworkflowsWorkflowIdActionsWorkflowActionPostWithHttpInfo(workflowId, workflowAction,  documentsSys: documentsSys, authorization: authorization, contentType: contentType, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Workflow Details
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] workflowId (required):
  ///   The workflow id field value.
  ///
  /// * [bool] loc:
  ///   When localized (translated) strings are available, retrieve them by including loc=true.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsObjectworkflowsWorkflowIdGetWithHttpInfo(String workflowId, { bool? loc, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/objectworkflows/{workflow_id}'
      .replaceAll('{workflow_id}', workflowId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (loc != null) {
      queryParams.addAll(_queryParams('', 'loc', loc));
    }

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Workflow Details
  ///
  /// Parameters:
  ///
  /// * [String] workflowId (required):
  ///   The workflow id field value.
  ///
  /// * [bool] loc:
  ///   When localized (translated) strings are available, retrieve them by including loc=true.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsObjectworkflowsWorkflowIdGet(String workflowId, { bool? loc, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsObjectworkflowsWorkflowIdGetWithHttpInfo(workflowId,  loc: loc, authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve All Picklists
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsPicklistsGetWithHttpInfo({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/picklists';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve All Picklists
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsPicklistsGet({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsPicklistsGetWithHttpInfo( authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Picklist Values
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] picklistName (required):
  ///   The picklist name field value (license_type__v, product_family__c, region__c, etc.)
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsPicklistsPicklistNameGetWithHttpInfo(String picklistName, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/picklists/{picklist_name}'
      .replaceAll('{picklist_name}', picklistName);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Picklist Values
  ///
  /// Parameters:
  ///
  /// * [String] picklistName (required):
  ///   The picklist name field value (license_type__v, product_family__c, region__c, etc.)
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsPicklistsPicklistNameGet(String picklistName, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsPicklistsPicklistNameGetWithHttpInfo(picklistName,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Inactivate Picklist Value
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] picklistName (required):
  ///   The picklist name field value (license_type__v, product_family__c, region__c, etc.)
  ///
  /// * [String] picklistValueName (required):
  ///   The picklist value name field value (north_america__c, south_america__c, etc.)
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsPicklistsPicklistNamePicklistValueNameDeleteWithHttpInfo(String picklistName, String picklistValueName, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/picklists/{picklist_name}/{picklist_value_name}'
      .replaceAll('{picklist_name}', picklistName)
      .replaceAll('{picklist_value_name}', picklistValueName);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'DELETE',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Inactivate Picklist Value
  ///
  /// Parameters:
  ///
  /// * [String] picklistName (required):
  ///   The picklist name field value (license_type__v, product_family__c, region__c, etc.)
  ///
  /// * [String] picklistValueName (required):
  ///   The picklist value name field value (north_america__c, south_america__c, etc.)
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsPicklistsPicklistNamePicklistValueNameDelete(String picklistName, String picklistValueName, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsPicklistsPicklistNamePicklistValueNameDeleteWithHttpInfo(picklistName, picklistValueName,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Update Picklist Value
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] picklistName (required):
  ///   The picklist name field value (license_type__v, product_family__c, region__c, etc.)
  ///
  /// * [String] picklistValueName (required):
  ///   The picklist value name field value (north_america__c, south_america__c, etc.)
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsPicklistsPicklistNamePicklistValueNamePutWithHttpInfo(String picklistName, String picklistValueName, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/picklists/{picklist_name}/{picklist_value_name}'
      .replaceAll('{picklist_name}', picklistName)
      .replaceAll('{picklist_value_name}', picklistValueName);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'PUT',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Update Picklist Value
  ///
  /// Parameters:
  ///
  /// * [String] picklistName (required):
  ///   The picklist name field value (license_type__v, product_family__c, region__c, etc.)
  ///
  /// * [String] picklistValueName (required):
  ///   The picklist value name field value (north_america__c, south_america__c, etc.)
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsPicklistsPicklistNamePicklistValueNamePut(String picklistName, String picklistValueName, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await objectsPicklistsPicklistNamePicklistValueNamePutWithHttpInfo(picklistName, picklistValueName,  authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Create Picklist Values
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] picklistName (required):
  ///   The picklist name field value (license_type__v, product_family__c, region__c, etc.)
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsPicklistsPicklistNamePostWithHttpInfo(String picklistName, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/picklists/{picklist_name}'
      .replaceAll('{picklist_name}', picklistName);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Create Picklist Values
  ///
  /// Parameters:
  ///
  /// * [String] picklistName (required):
  ///   The picklist name field value (license_type__v, product_family__c, region__c, etc.)
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsPicklistsPicklistNamePost(String picklistName, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await objectsPicklistsPicklistNamePostWithHttpInfo(picklistName,  authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Update Picklist Value Label
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] picklistName (required):
  ///   The picklist name field value (license_type__v, product_family__c, region__c, etc.)
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsPicklistsPicklistNamePutWithHttpInfo(String picklistName, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/picklists/{picklist_name}'
      .replaceAll('{picklist_name}', picklistName);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'PUT',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Update Picklist Value Label
  ///
  /// Parameters:
  ///
  /// * [String] picklistName (required):
  ///   The picklist name field value (license_type__v, product_family__c, region__c, etc.)
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsPicklistsPicklistNamePut(String picklistName, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await objectsPicklistsPicklistNamePutWithHttpInfo(picklistName,  authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Build Production Vault
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsSandboxActionsBuildproductionPostWithHttpInfo({ String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/sandbox/actions/buildproduction';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Build Production Vault
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsSandboxActionsBuildproductionPost({ String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await objectsSandboxActionsBuildproductionPostWithHttpInfo( authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Promote to Production
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsSandboxActionsPromoteproductionPostWithHttpInfo({ String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/sandbox/actions/promoteproduction';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Promote to Production
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsSandboxActionsPromoteproductionPost({ String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await objectsSandboxActionsPromoteproductionPostWithHttpInfo( authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Recheck Sandbox Usage Limit
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsSandboxActionsRecheckusagePostWithHttpInfo({ String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/sandbox/actions/recheckusage';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Recheck Sandbox Usage Limit
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsSandboxActionsRecheckusagePost({ String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await objectsSandboxActionsRecheckusagePostWithHttpInfo( authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Change Sandbox Size
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsSandboxBatchChangesizePostWithHttpInfo({ String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/sandbox/batch/changesize';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Change Sandbox Size
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsSandboxBatchChangesizePost({ String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await objectsSandboxBatchChangesizePostWithHttpInfo( authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Set Sandbox Entitlements
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsSandboxEntitlementsSetPostWithHttpInfo({ String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/sandbox/entitlements/set';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Set Sandbox Entitlements
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsSandboxEntitlementsSetPost({ String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await objectsSandboxEntitlementsSetPostWithHttpInfo( authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Sandboxes
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsSandboxGetWithHttpInfo({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/sandbox';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Sandboxes
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsSandboxGet({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsSandboxGetWithHttpInfo( authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Delete Sandbox
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] name (required):
  ///   The name of the sandbox vault to delete. This is the name which appears on the My Vaults page.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsSandboxNameDeleteWithHttpInfo(String name, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/sandbox/{name}'
      .replaceAll('{name}', name);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'DELETE',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Delete Sandbox
  ///
  /// Parameters:
  ///
  /// * [String] name (required):
  ///   The name of the sandbox vault to delete. This is the name which appears on the My Vaults page.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsSandboxNameDelete(String name, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsSandboxNameDeleteWithHttpInfo(name,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Create or Refresh Sandbox
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsSandboxPostWithHttpInfo({ String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/sandbox';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Create or Refresh Sandbox
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsSandboxPost({ String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await objectsSandboxPostWithHttpInfo( authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Update Sandbox Snapshot
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] apiName (required):
  ///   The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsSandboxSnapshotApiNameActionsUpdatePostWithHttpInfo(String apiName, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/sandbox/snapshot/{api_name}/actions/update'
      .replaceAll('{api_name}', apiName);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Update Sandbox Snapshot
  ///
  /// Parameters:
  ///
  /// * [String] apiName (required):
  ///   The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsSandboxSnapshotApiNameActionsUpdatePost(String apiName, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsSandboxSnapshotApiNameActionsUpdatePostWithHttpInfo(apiName,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Upgrade Sandbox Snapshot
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] apiName (required):
  ///   The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsSandboxSnapshotApiNameActionsUpgradePostWithHttpInfo(String apiName, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/sandbox/snapshot/{api_name}/actions/upgrade'
      .replaceAll('{api_name}', apiName);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Upgrade Sandbox Snapshot
  ///
  /// Parameters:
  ///
  /// * [String] apiName (required):
  ///   The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsSandboxSnapshotApiNameActionsUpgradePost(String apiName, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsSandboxSnapshotApiNameActionsUpgradePostWithHttpInfo(apiName,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Delete Sandbox Snapshot
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] apiName (required):
  ///   The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsSandboxSnapshotApiNameDeleteWithHttpInfo(String apiName, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/sandbox/snapshot/{api_name}'
      .replaceAll('{api_name}', apiName);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'DELETE',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Delete Sandbox Snapshot
  ///
  /// Parameters:
  ///
  /// * [String] apiName (required):
  ///   The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsSandboxSnapshotApiNameDelete(String apiName, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsSandboxSnapshotApiNameDeleteWithHttpInfo(apiName,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Sandbox Snapshots
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsSandboxSnapshotGetWithHttpInfo({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/sandbox/snapshot';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Sandbox Snapshots
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsSandboxSnapshotGet({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsSandboxSnapshotGetWithHttpInfo( authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Create Sandbox Snapshot
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsSandboxSnapshotPostWithHttpInfo({ String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/sandbox/snapshot';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Create Sandbox Snapshot
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsSandboxSnapshotPost({ String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await objectsSandboxSnapshotPostWithHttpInfo( authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Refresh Sandbox from Snapshot
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] vaultId (required):
  ///   The Vault ID of the sandbox to be refreshed.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsSandboxVaultIdActionsRefreshPostWithHttpInfo(String vaultId, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/sandbox/{vault_id}/actions/refresh'
      .replaceAll('{vault_id}', vaultId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Refresh Sandbox from Snapshot
  ///
  /// Parameters:
  ///
  /// * [String] vaultId (required):
  ///   The Vault ID of the sandbox to be refreshed.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsSandboxVaultIdActionsRefreshPost(String vaultId, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await objectsSandboxVaultIdActionsRefreshPostWithHttpInfo(vaultId,  authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Sandbox Details by ID
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] vaultId (required):
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsSandboxVaultIdGetWithHttpInfo(String vaultId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/sandbox/{vault_id}'
      .replaceAll('{vault_id}', vaultId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Sandbox Details by ID
  ///
  /// Parameters:
  ///
  /// * [String] vaultId (required):
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsSandboxVaultIdGet(String vaultId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsSandboxVaultIdGetWithHttpInfo(vaultId,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve All Security Policies
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsSecuritypoliciesGetWithHttpInfo({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/securitypolicies';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve All Security Policies
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsSecuritypoliciesGet({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsSecuritypoliciesGetWithHttpInfo( authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Security Policy
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] securityPolicyName (required):
  ///   Security policy name__v field value (retrieved from previous request). This is typically a numeric value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsSecuritypoliciesSecurityPolicyNameGetWithHttpInfo(String securityPolicyName, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/securitypolicies/{security_policy_name}'
      .replaceAll('{security_policy_name}', securityPolicyName);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Security Policy
  ///
  /// Parameters:
  ///
  /// * [String] securityPolicyName (required):
  ///   Security policy name__v field value (retrieved from previous request). This is typically a numeric value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsSecuritypoliciesSecurityPolicyNameGet(String securityPolicyName, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsSecuritypoliciesSecurityPolicyNameGetWithHttpInfo(securityPolicyName,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve All Users
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] vaults:
  ///   Retrieve all users assigned to all Vaults in your domain.
  ///
  /// * [String] excludeVaultMembership:
  ///   Optional: Set to false to include vault_membership fields. If true or omitted, vault_membership fields are not included in the response.
  ///
  /// * [String] excludeAppLicensing:
  ///   Optional: Set to false to include app_licensing fields. If true or omitted, app_licensing fields are not included in the response.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsUsersGetWithHttpInfo({ String? vaults, String? excludeVaultMembership, String? excludeAppLicensing, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/users/';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (vaults != null) {
      queryParams.addAll(_queryParams('', 'vaults', vaults));
    }
    if (excludeVaultMembership != null) {
      queryParams.addAll(_queryParams('', 'exclude_vault_membership', excludeVaultMembership));
    }
    if (excludeAppLicensing != null) {
      queryParams.addAll(_queryParams('', 'exclude_app_licensing', excludeAppLicensing));
    }

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve All Users
  ///
  /// Parameters:
  ///
  /// * [String] vaults:
  ///   Retrieve all users assigned to all Vaults in your domain.
  ///
  /// * [String] excludeVaultMembership:
  ///   Optional: Set to false to include vault_membership fields. If true or omitted, vault_membership fields are not included in the response.
  ///
  /// * [String] excludeAppLicensing:
  ///   Optional: Set to false to include app_licensing fields. If true or omitted, app_licensing fields are not included in the response.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsUsersGet({ String? vaults, String? excludeVaultMembership, String? excludeAppLicensing, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsUsersGetWithHttpInfo( vaults: vaults, excludeVaultMembership: excludeVaultMembership, excludeAppLicensing: excludeAppLicensing, authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve User
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] id (required):
  ///   The user id field value. Use the value me to get information for the currently authenticated user.
  ///
  /// * [String] excludeVaultMembership:
  ///   Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response.
  ///
  /// * [String] excludeAppLicensing:
  ///   Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsUsersIdGetWithHttpInfo(String id, { String? excludeVaultMembership, String? excludeAppLicensing, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/users/{id}'
      .replaceAll('{id}', id);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (excludeVaultMembership != null) {
      queryParams.addAll(_queryParams('', 'exclude_vault_membership', excludeVaultMembership));
    }
    if (excludeAppLicensing != null) {
      queryParams.addAll(_queryParams('', 'exclude_app_licensing', excludeAppLicensing));
    }

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve User
  ///
  /// Parameters:
  ///
  /// * [String] id (required):
  ///   The user id field value. Use the value me to get information for the currently authenticated user.
  ///
  /// * [String] excludeVaultMembership:
  ///   Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response.
  ///
  /// * [String] excludeAppLicensing:
  ///   Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsUsersIdGet(String id, { String? excludeVaultMembership, String? excludeAppLicensing, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsUsersIdGetWithHttpInfo(id,  excludeVaultMembership: excludeVaultMembership, excludeAppLicensing: excludeAppLicensing, authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve User Permissions
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] id (required):
  ///   The ID of the user. Use the value me to retrieve information for the currently authenticated user.
  ///
  /// * [String] filter:
  ///   Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsUsersIdPermissionsGetWithHttpInfo(String id, { String? filter, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/users/{id}/permissions'
      .replaceAll('{id}', id);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (filter != null) {
      queryParams.addAll(_queryParams('', 'filter', filter));
    }

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve User Permissions
  ///
  /// Parameters:
  ///
  /// * [String] id (required):
  ///   The ID of the user. Use the value me to retrieve information for the currently authenticated user.
  ///
  /// * [String] filter:
  ///   Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsUsersIdPermissionsGet(String id, { String? filter, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsUsersIdPermissionsGetWithHttpInfo(id,  filter: filter, authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Update Single User
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] id (required):
  ///   The user id field value. Use the value me to get information for the currently authenticated user.
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsUsersIdPutWithHttpInfo(String id, { String? authorization, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/users/{id}'
      .replaceAll('{id}', id);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'PUT',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Update Single User
  ///
  /// Parameters:
  ///
  /// * [String] id (required):
  ///   The user id field value. Use the value me to get information for the currently authenticated user.
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsUsersIdPut(String id, { String? authorization, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await objectsUsersIdPutWithHttpInfo(id,  authorization: authorization, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Validate Session User
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] excludeVaultMembership:
  ///   Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response.
  ///
  /// * [String] excludeAppLicensing:
  ///   Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsUsersMeGetWithHttpInfo({ String? excludeVaultMembership, String? excludeAppLicensing, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/users/me';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (excludeVaultMembership != null) {
      queryParams.addAll(_queryParams('', 'exclude_vault_membership', excludeVaultMembership));
    }
    if (excludeAppLicensing != null) {
      queryParams.addAll(_queryParams('', 'exclude_app_licensing', excludeAppLicensing));
    }

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Validate Session User
  ///
  /// Parameters:
  ///
  /// * [String] excludeVaultMembership:
  ///   Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response.
  ///
  /// * [String] excludeAppLicensing:
  ///   Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsUsersMeGet({ String? excludeVaultMembership, String? excludeAppLicensing, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsUsersMeGetWithHttpInfo( excludeVaultMembership: excludeVaultMembership, excludeAppLicensing: excludeAppLicensing, authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Change My Password
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsUsersMePasswordPostWithHttpInfo({ String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/users/me/password';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Change My Password
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsUsersMePasswordPost({ String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsUsersMePasswordPostWithHttpInfo( authorization: authorization, contentType: contentType, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve My User Permissions
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] filter:
  ///   Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsUsersMePermissionsGetWithHttpInfo({ String? filter, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/users/me/permissions';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (filter != null) {
      queryParams.addAll(_queryParams('', 'filter', filter));
    }

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve My User Permissions
  ///
  /// Parameters:
  ///
  /// * [String] filter:
  ///   Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsUsersMePermissionsGet({ String? filter, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsUsersMePermissionsGetWithHttpInfo( filter: filter, authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Update My User
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsUsersMePutWithHttpInfo({ String? authorization, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/users/me';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'PUT',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Update My User
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsUsersMePut({ String? authorization, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await objectsUsersMePutWithHttpInfo( authorization: authorization, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Create Single User
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsUsersPostWithHttpInfo({ String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/users';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Create Single User
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsUsersPost({ String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await objectsUsersPostWithHttpInfo( authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Update Multiple Users
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsUsersPutWithHttpInfo({ String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/users';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'PUT',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Update Multiple Users
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsUsersPut({ String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsUsersPutWithHttpInfo( authorization: authorization, contentType: contentType, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Disable User
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] userId (required):
  ///   The user id field value. 
  ///
  /// * [bool] domain:
  ///   When true, this disables the user account in all vaults in the domain.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsUsersUserIdDeleteWithHttpInfo(String userId, { bool? domain, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/users/{user_id}'
      .replaceAll('{user_id}', userId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (domain != null) {
      queryParams.addAll(_queryParams('', 'domain', domain));
    }

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'DELETE',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Disable User
  ///
  /// Parameters:
  ///
  /// * [String] userId (required):
  ///   The user id field value. 
  ///
  /// * [bool] domain:
  ///   When true, this disables the user account in all vaults in the domain.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsUsersUserIdDelete(String userId, { bool? domain, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsUsersUserIdDeleteWithHttpInfo(userId,  domain: domain, authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Update Vault Membership
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] userId (required):
  ///   The user id field value.
  ///
  /// * [String] vaultId (required):
  ///   The system-managed id field value assigned to each vault in the domain.
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsUsersUserIdVaultMembershipVaultIdPutWithHttpInfo(String userId, String vaultId, { String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/users/{user_id}/vault_membership/{vault_id}'
      .replaceAll('{user_id}', userId)
      .replaceAll('{vault_id}', vaultId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'PUT',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Update Vault Membership
  ///
  /// Parameters:
  ///
  /// * [String] userId (required):
  ///   The user id field value.
  ///
  /// * [String] vaultId (required):
  ///   The system-managed id field value assigned to each vault in the domain.
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsUsersUserIdVaultMembershipVaultIdPut(String userId, String vaultId, { String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    final response = await objectsUsersUserIdVaultMembershipVaultIdPutWithHttpInfo(userId, vaultId,  authorization: authorization, contentType: contentType, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Vault Compare
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsVaultActionsComparePostWithHttpInfo({ String? authorization, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/vault/actions/compare';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Vault Compare
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsVaultActionsComparePost({ String? authorization, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await objectsVaultActionsComparePostWithHttpInfo( authorization: authorization, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Vault Configuration Report
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> objectsVaultActionsConfigreportPostWithHttpInfo({ String? authorization, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/objects/vault/actions/configreport';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Vault Configuration Report
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> objectsVaultActionsConfigreportPost({ String? authorization, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await objectsVaultActionsConfigreportPostWithHttpInfo( authorization: authorization, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Component Definition Query
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> queryComponentsPostWithHttpInfo({ String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/query/components';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Component Definition Query
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> queryComponentsPost({ String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await queryComponentsPostWithHttpInfo( authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Next Page URL
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] nextPage (required):
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [bool] xVaultAPIDescribeQuery:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> queryNextPagePostWithHttpInfo(String nextPage, { String? authorization, String? accept, bool? xVaultAPIDescribeQuery, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/query/{next_page}'
      .replaceAll('{next_page}', nextPage);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIDescribeQuery != null) {
      headerParams[r'X-VaultAPI-DescribeQuery'] = parameterToString(xVaultAPIDescribeQuery);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Next Page URL
  ///
  /// Parameters:
  ///
  /// * [String] nextPage (required):
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [bool] xVaultAPIDescribeQuery:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> queryNextPagePost(String nextPage, { String? authorization, String? accept, bool? xVaultAPIDescribeQuery, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await queryNextPagePostWithHttpInfo(nextPage,  authorization: authorization, accept: accept, xVaultAPIDescribeQuery: xVaultAPIDescribeQuery, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Submitting a Query
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [bool] xVaultAPIDescribeQuery:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> queryPostWithHttpInfo({ String? authorization, String? accept, bool? xVaultAPIDescribeQuery, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/query';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIDescribeQuery != null) {
      headerParams[r'X-VaultAPI-DescribeQuery'] = parameterToString(xVaultAPIDescribeQuery);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Submitting a Query
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [bool] xVaultAPIDescribeQuery:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> queryPost({ String? authorization, String? accept, bool? xVaultAPIDescribeQuery, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await queryPostWithHttpInfo( authorization: authorization, accept: accept, xVaultAPIDescribeQuery: xVaultAPIDescribeQuery, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Previous Page URL
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] previousPage (required):
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [bool] xVaultAPIDescribeQuery:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> queryPreviousPagePostWithHttpInfo(String previousPage, { String? authorization, String? accept, bool? xVaultAPIDescribeQuery, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/query/{previous_page}'
      .replaceAll('{previous_page}', previousPage);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIDescribeQuery != null) {
      headerParams[r'X-VaultAPI-DescribeQuery'] = parameterToString(xVaultAPIDescribeQuery);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Previous Page URL
  ///
  /// Parameters:
  ///
  /// * [String] previousPage (required):
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [bool] xVaultAPIDescribeQuery:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> queryPreviousPagePost(String previousPage, { String? authorization, String? accept, bool? xVaultAPIDescribeQuery, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await queryPreviousPagePostWithHttpInfo(previousPage,  authorization: authorization, accept: accept, xVaultAPIDescribeQuery: xVaultAPIDescribeQuery, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Current User with SCIM
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] attributes:
  ///   Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.
  ///
  /// * [String] excludedAttributes:
  ///   Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> scimV2MeGetWithHttpInfo({ String? attributes, String? excludedAttributes, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/scim/v2/Me';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (attributes != null) {
      queryParams.addAll(_queryParams('', 'attributes', attributes));
    }
    if (excludedAttributes != null) {
      queryParams.addAll(_queryParams('', 'excludedAttributes', excludedAttributes));
    }

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Current User with SCIM
  ///
  /// Parameters:
  ///
  /// * [String] attributes:
  ///   Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.
  ///
  /// * [String] excludedAttributes:
  ///   Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> scimV2MeGet({ String? attributes, String? excludedAttributes, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await scimV2MeGetWithHttpInfo( attributes: attributes, excludedAttributes: excludedAttributes, authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Update Current User with SCIM
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] attributes:
  ///   Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.
  ///
  /// * [String] excludedAttributes:
  ///   Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> scimV2MePutWithHttpInfo({ String? attributes, String? excludedAttributes, String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/scim/v2/Me';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (attributes != null) {
      queryParams.addAll(_queryParams('', 'attributes', attributes));
    }
    if (excludedAttributes != null) {
      queryParams.addAll(_queryParams('', 'excludedAttributes', excludedAttributes));
    }

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'PUT',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Update Current User with SCIM
  ///
  /// Parameters:
  ///
  /// * [String] attributes:
  ///   Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.
  ///
  /// * [String] excludedAttributes:
  ///   Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> scimV2MePut({ String? attributes, String? excludedAttributes, String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await scimV2MePutWithHttpInfo( attributes: attributes, excludedAttributes: excludedAttributes, authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve All SCIM Resource Types
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> scimV2ResourceTypesGetWithHttpInfo({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/scim/v2/ResourceTypes';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve All SCIM Resource Types
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> scimV2ResourceTypesGet({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await scimV2ResourceTypesGetWithHttpInfo( authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Single SCIM Resource Type
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] type (required):
  ///   A specific resource type. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the id value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> scimV2ResourceTypesTypeGetWithHttpInfo(String type, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/scim/v2/ResourceTypes/{type}'
      .replaceAll('{type}', type);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Single SCIM Resource Type
  ///
  /// Parameters:
  ///
  /// * [String] type (required):
  ///   A specific resource type. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the id value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> scimV2ResourceTypesTypeGet(String type, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await scimV2ResourceTypesTypeGetWithHttpInfo(type,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve All SCIM Schema Information
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> scimV2SchemasGetWithHttpInfo({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/scim/v2/Schemas';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve All SCIM Schema Information
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> scimV2SchemasGet({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await scimV2SchemasGetWithHttpInfo( authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Single SCIM Schema Information
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] id (required):
  ///   The ID of a specific schema. For example, urn:ietf:params:scim:schemas:extension:veevavault:2.0:User.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> scimV2SchemasIdGetWithHttpInfo(String id, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/scim/v2/Schemas/{id}'
      .replaceAll('{id}', id);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Single SCIM Schema Information
  ///
  /// Parameters:
  ///
  /// * [String] id (required):
  ///   The ID of a specific schema. For example, urn:ietf:params:scim:schemas:extension:veevavault:2.0:User.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> scimV2SchemasIdGet(String id, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await scimV2SchemasIdGetWithHttpInfo(id,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve SCIM Provider
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> scimV2ServiceProviderConfigGetWithHttpInfo({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/scim/v2/ServiceProviderConfig';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve SCIM Provider
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> scimV2ServiceProviderConfigGet({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await scimV2ServiceProviderConfigGetWithHttpInfo( authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve SCIM Resources
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] type (required):
  ///   The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value.
  ///
  /// * [String] filter:
  ///   Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \"{value}\". For example, to filter for a particular user name, userName eq \"john\". Complex expressions are not supported, and eq is the only supported operator.
  ///
  /// * [String] attributes:
  ///   Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.
  ///
  /// * [String] excludedAttributes:
  ///   Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
  ///
  /// * [String] sortBy:
  ///   Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage
  ///
  /// * [String] sortOrder:
  ///   Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000.
  ///
  /// * [String] startIndex:
  ///   Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> scimV2TypeGetWithHttpInfo(String type, { String? filter, String? attributes, String? excludedAttributes, String? sortBy, String? sortOrder, String? startIndex, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/scim/v2/{type}'
      .replaceAll('{type}', type);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (filter != null) {
      queryParams.addAll(_queryParams('', 'filter', filter));
    }
    if (attributes != null) {
      queryParams.addAll(_queryParams('', 'attributes', attributes));
    }
    if (excludedAttributes != null) {
      queryParams.addAll(_queryParams('', 'excludedAttributes', excludedAttributes));
    }
    if (sortBy != null) {
      queryParams.addAll(_queryParams('', 'sortBy', sortBy));
    }
    if (sortOrder != null) {
      queryParams.addAll(_queryParams('', 'sortOrder', sortOrder));
    }
    if (startIndex != null) {
      queryParams.addAll(_queryParams('', 'startIndex', startIndex));
    }

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve SCIM Resources
  ///
  /// Parameters:
  ///
  /// * [String] type (required):
  ///   The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value.
  ///
  /// * [String] filter:
  ///   Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \"{value}\". For example, to filter for a particular user name, userName eq \"john\". Complex expressions are not supported, and eq is the only supported operator.
  ///
  /// * [String] attributes:
  ///   Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.
  ///
  /// * [String] excludedAttributes:
  ///   Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
  ///
  /// * [String] sortBy:
  ///   Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage
  ///
  /// * [String] sortOrder:
  ///   Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000.
  ///
  /// * [String] startIndex:
  ///   Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> scimV2TypeGet(String type, { String? filter, String? attributes, String? excludedAttributes, String? sortBy, String? sortOrder, String? startIndex, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await scimV2TypeGetWithHttpInfo(type,  filter: filter, attributes: attributes, excludedAttributes: excludedAttributes, sortBy: sortBy, sortOrder: sortOrder, startIndex: startIndex, authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Single SCIM Resource
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] type (required):
  ///   The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value.
  ///
  /// * [String] id (required):
  ///   The ID of the resource to retrieve. You can retrieve all resource IDs from a particular resource type with the Retrieve SCIM Resources endpoint. For example, business_admin__v.
  ///
  /// * [String] attributes:
  ///   Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.
  ///
  /// * [String] excludedAttributes:
  ///   Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> scimV2TypeIdGetWithHttpInfo(String type, String id, { String? attributes, String? excludedAttributes, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/scim/v2/{type}/{id}'
      .replaceAll('{type}', type)
      .replaceAll('{id}', id);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (attributes != null) {
      queryParams.addAll(_queryParams('', 'attributes', attributes));
    }
    if (excludedAttributes != null) {
      queryParams.addAll(_queryParams('', 'excludedAttributes', excludedAttributes));
    }

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Single SCIM Resource
  ///
  /// Parameters:
  ///
  /// * [String] type (required):
  ///   The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value.
  ///
  /// * [String] id (required):
  ///   The ID of the resource to retrieve. You can retrieve all resource IDs from a particular resource type with the Retrieve SCIM Resources endpoint. For example, business_admin__v.
  ///
  /// * [String] attributes:
  ///   Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.
  ///
  /// * [String] excludedAttributes:
  ///   Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> scimV2TypeIdGet(String type, String id, { String? attributes, String? excludedAttributes, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await scimV2TypeIdGetWithHttpInfo(type, id,  attributes: attributes, excludedAttributes: excludedAttributes, authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve All Users with SCIM
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] filter:
  ///   Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \"{value}\". For example, to filter for a particular user name, userName eq \"john\". Complex expressions are not supported, and eq is the only supported operator.
  ///
  /// * [String] attributes:
  ///   Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.
  ///
  /// * [String] excludedAttributes:
  ///   Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
  ///
  /// * [String] sortBy:
  ///   Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage
  ///
  /// * [String] sortOrder:
  ///   Optional: Specify the order in which the sortBy parameter is applied. Allowed values are ascending or descending. If omitted, defaults to ascending.
  ///
  /// * [String] count:
  ///   Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000.
  ///
  /// * [String] startIndex:
  ///   Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> scimV2UsersGetWithHttpInfo({ String? filter, String? attributes, String? excludedAttributes, String? sortBy, String? sortOrder, String? count, String? startIndex, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/scim/v2/Users';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (filter != null) {
      queryParams.addAll(_queryParams('', 'filter', filter));
    }
    if (attributes != null) {
      queryParams.addAll(_queryParams('', 'attributes', attributes));
    }
    if (excludedAttributes != null) {
      queryParams.addAll(_queryParams('', 'excludedAttributes', excludedAttributes));
    }
    if (sortBy != null) {
      queryParams.addAll(_queryParams('', 'sortBy', sortBy));
    }
    if (sortOrder != null) {
      queryParams.addAll(_queryParams('', 'sortOrder', sortOrder));
    }
    if (count != null) {
      queryParams.addAll(_queryParams('', 'count', count));
    }
    if (startIndex != null) {
      queryParams.addAll(_queryParams('', 'startIndex', startIndex));
    }

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve All Users with SCIM
  ///
  /// Parameters:
  ///
  /// * [String] filter:
  ///   Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \"{value}\". For example, to filter for a particular user name, userName eq \"john\". Complex expressions are not supported, and eq is the only supported operator.
  ///
  /// * [String] attributes:
  ///   Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.
  ///
  /// * [String] excludedAttributes:
  ///   Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
  ///
  /// * [String] sortBy:
  ///   Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage
  ///
  /// * [String] sortOrder:
  ///   Optional: Specify the order in which the sortBy parameter is applied. Allowed values are ascending or descending. If omitted, defaults to ascending.
  ///
  /// * [String] count:
  ///   Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000.
  ///
  /// * [String] startIndex:
  ///   Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> scimV2UsersGet({ String? filter, String? attributes, String? excludedAttributes, String? sortBy, String? sortOrder, String? count, String? startIndex, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await scimV2UsersGetWithHttpInfo( filter: filter, attributes: attributes, excludedAttributes: excludedAttributes, sortBy: sortBy, sortOrder: sortOrder, count: count, startIndex: startIndex, authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Single User with SCIM
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] id (required):
  ///   The id of the user you wish to update.
  ///
  /// * [String] filter:
  ///   Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \"{value}\". For example, to filter for a particular user name, userName eq \"john\". Complex expressions are not supported, and eq is the only supported operator.
  ///
  /// * [String] attributes:
  ///   Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.
  ///
  /// * [String] excludedAttributes:
  ///   Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> scimV2UsersIdGetWithHttpInfo(String id, { String? filter, String? attributes, String? excludedAttributes, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/scim/v2/Users/{id}'
      .replaceAll('{id}', id);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (filter != null) {
      queryParams.addAll(_queryParams('', 'filter', filter));
    }
    if (attributes != null) {
      queryParams.addAll(_queryParams('', 'attributes', attributes));
    }
    if (excludedAttributes != null) {
      queryParams.addAll(_queryParams('', 'excludedAttributes', excludedAttributes));
    }

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Single User with SCIM
  ///
  /// Parameters:
  ///
  /// * [String] id (required):
  ///   The id of the user you wish to update.
  ///
  /// * [String] filter:
  ///   Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \"{value}\". For example, to filter for a particular user name, userName eq \"john\". Complex expressions are not supported, and eq is the only supported operator.
  ///
  /// * [String] attributes:
  ///   Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.
  ///
  /// * [String] excludedAttributes:
  ///   Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> scimV2UsersIdGet(String id, { String? filter, String? attributes, String? excludedAttributes, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await scimV2UsersIdGetWithHttpInfo(id,  filter: filter, attributes: attributes, excludedAttributes: excludedAttributes, authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Update User with SCIM
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] id (required):
  ///   The id of the user you wish to update.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> scimV2UsersIdPutWithHttpInfo(String id, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/scim/v2/Users/{id}'
      .replaceAll('{id}', id);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'PUT',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Update User with SCIM
  ///
  /// Parameters:
  ///
  /// * [String] id (required):
  ///   The id of the user you wish to update.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> scimV2UsersIdPut(String id, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await scimV2UsersIdPutWithHttpInfo(id,  authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Create User with SCIM
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> scimV2UsersPostWithHttpInfo({ String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/scim/v2/Users';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Create User with SCIM
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> scimV2UsersPost({ String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await scimV2UsersPostWithHttpInfo( authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Signing Certificate
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] certId (required):
  ///   The cert_id is provided in each Spark message in the X-VaultAPISignature-CertificateId header.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> servicesCertificateCertIdGetWithHttpInfo(String certId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/services/certificate/{cert_id}'
      .replaceAll('{cert_id}', certId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Signing Certificate
  ///
  /// Parameters:
  ///
  /// * [String] certId (required):
  ///   The cert_id is provided in each Spark message in the X-VaultAPISignature-CertificateId header.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> servicesCertificateCertIdGet(String certId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await servicesCertificateCertIdGetWithHttpInfo(certId,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Disable Configuration Mode
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> servicesConfigurationModeActionsDisablePostWithHttpInfo({ String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/services/configuration_mode/actions/disable';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Disable Configuration Mode
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> servicesConfigurationModeActionsDisablePost({ String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await servicesConfigurationModeActionsDisablePostWithHttpInfo( authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Enable Configuration Mode
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> servicesConfigurationModeActionsEnablePostWithHttpInfo({ String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/services/configuration_mode/actions/enable';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Enable Configuration Mode
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> servicesConfigurationModeActionsEnablePost({ String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await servicesConfigurationModeActionsEnablePostWithHttpInfo( authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Available Direct Data Files
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] extractType:
  ///   The Direct Data file type: incremental_directdata, full_directdata, or log_directdata. If omitted, returns all files.
  ///
  /// * [int] startTime:
  ///   Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 7AM on January 15, 2024 would use 2024-01-15T07:00:00Z. If omitted, defaults to the Vault’s creation date and time.
  ///
  /// * [int] stopTime:
  ///   Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 9AM on January 15, 2024 would use 2024-01-15T09:00:00Z. If omitted, defaults to today’s date and current time.
  ///
  /// * [String] accept:
  ///
  /// * [String] authorization:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> servicesDirectdataFilesGetWithHttpInfo({ String? extractType, int? startTime, int? stopTime, String? accept, String? authorization, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/services/directdata/files';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (extractType != null) {
      queryParams.addAll(_queryParams('', 'extract_type', extractType));
    }
    if (startTime != null) {
      queryParams.addAll(_queryParams('', 'start_time', startTime));
    }
    if (stopTime != null) {
      queryParams.addAll(_queryParams('', 'stop_time', stopTime));
    }

    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Available Direct Data Files
  ///
  /// Parameters:
  ///
  /// * [String] extractType:
  ///   The Direct Data file type: incremental_directdata, full_directdata, or log_directdata. If omitted, returns all files.
  ///
  /// * [int] startTime:
  ///   Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 7AM on January 15, 2024 would use 2024-01-15T07:00:00Z. If omitted, defaults to the Vault’s creation date and time.
  ///
  /// * [int] stopTime:
  ///   Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 9AM on January 15, 2024 would use 2024-01-15T09:00:00Z. If omitted, defaults to today’s date and current time.
  ///
  /// * [String] accept:
  ///
  /// * [String] authorization:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> servicesDirectdataFilesGet({ String? extractType, int? startTime, int? stopTime, String? accept, String? authorization, String? xVaultAPIClientID, }) async {
    final response = await servicesDirectdataFilesGetWithHttpInfo( extractType: extractType, startTime: startTime, stopTime: stopTime, accept: accept, authorization: authorization, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Download Direct Data File
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] name (required):
  ///   The name of the Direct Data file part. Obtain this from the Retrieve Available Direct Data Files request. For example, 146478-20240213-0000-F.001.
  ///
  /// * [String] accept:
  ///
  /// * [String] authorization:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> servicesDirectdataFilesNameGetWithHttpInfo(String name, { String? accept, String? authorization, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/services/directdata/files/{name}'
      .replaceAll('{name}', name);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Download Direct Data File
  ///
  /// Parameters:
  ///
  /// * [String] name (required):
  ///   The name of the Direct Data file part. Obtain this from the Retrieve Available Direct Data Files request. For example, 146478-20240213-0000-F.001.
  ///
  /// * [String] accept:
  ///
  /// * [String] authorization:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> servicesDirectdataFilesNameGet(String name, { String? accept, String? authorization, String? xVaultAPIClientID, }) async {
    final response = await servicesDirectdataFilesNameGetWithHttpInfo(name,  accept: accept, authorization: authorization, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Download Item Content
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] item (required):
  ///   The absolute path to a file or folder. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] range:
  ///   Optional: Specifies a partial range of bytes to include in the upload. Maximum 50 MB. Must be in the format `bytes={min}-{max}`. For example, `bytes=0-1000`.
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> servicesFileStagingItemsContentItemGetWithHttpInfo(String item, { String? authorization, String? accept, String? range, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/services/file_staging/items/content/{item}'
      .replaceAll('{item}', item);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (range != null) {
      headerParams[r'Range'] = parameterToString(range);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Download Item Content
  ///
  /// Parameters:
  ///
  /// * [String] item (required):
  ///   The absolute path to a file or folder. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] range:
  ///   Optional: Specifies a partial range of bytes to include in the upload. Maximum 50 MB. Must be in the format `bytes={min}-{max}`. For example, `bytes=0-1000`.
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> servicesFileStagingItemsContentItemGet(String item, { String? authorization, String? accept, String? range, String? xVaultAPIClientID, }) async {
    final response = await servicesFileStagingItemsContentItemGetWithHttpInfo(item,  authorization: authorization, accept: accept, range: range, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Delete File or Folder
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] item (required):
  ///   The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
  ///
  /// * [String] recursive:
  ///   Applicable to deleting folders only. If true, the request will delete the contents of a folder and all subfolders. The default is false.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> servicesFileStagingItemsItemDeleteWithHttpInfo(String item, { String? recursive, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/services/file_staging/items/{item}'
      .replaceAll('{item}', item);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (recursive != null) {
      queryParams.addAll(_queryParams('', 'recursive', recursive));
    }

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'DELETE',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Delete File or Folder
  ///
  /// Parameters:
  ///
  /// * [String] item (required):
  ///   The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
  ///
  /// * [String] recursive:
  ///   Applicable to deleting folders only. If true, the request will delete the contents of a folder and all subfolders. The default is false.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> servicesFileStagingItemsItemDelete(String item, { String? recursive, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await servicesFileStagingItemsItemDeleteWithHttpInfo(item,  recursive: recursive, authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// List Items at a Path
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] item (required):
  ///   The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
  ///
  /// * [String] recursive:
  ///   If true, the response will contain the contents of all subfolders. If not specified, the default value is false.
  ///
  /// * [String] limit:
  ///   Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000.
  ///
  /// * [String] formatResult:
  ///   If set to csv, the response includes a job_id. Use the Job ID value to retrieve the status and results of the request.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> servicesFileStagingItemsItemGetWithHttpInfo(String item, { String? recursive, String? limit, String? formatResult, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/services/file_staging/items/{item}'
      .replaceAll('{item}', item);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (recursive != null) {
      queryParams.addAll(_queryParams('', 'recursive', recursive));
    }
    if (limit != null) {
      queryParams.addAll(_queryParams('', 'limit', limit));
    }
    if (formatResult != null) {
      queryParams.addAll(_queryParams('', 'format_result', formatResult));
    }

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// List Items at a Path
  ///
  /// Parameters:
  ///
  /// * [String] item (required):
  ///   The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
  ///
  /// * [String] recursive:
  ///   If true, the response will contain the contents of all subfolders. If not specified, the default value is false.
  ///
  /// * [String] limit:
  ///   Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000.
  ///
  /// * [String] formatResult:
  ///   If set to csv, the response includes a job_id. Use the Job ID value to retrieve the status and results of the request.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> servicesFileStagingItemsItemGet(String item, { String? recursive, String? limit, String? formatResult, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await servicesFileStagingItemsItemGetWithHttpInfo(item,  recursive: recursive, limit: limit, formatResult: formatResult, authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Update Folder or File
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] item (required):
  ///   The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> servicesFileStagingItemsItemPutWithHttpInfo(String item, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/services/file_staging/items/{item}'
      .replaceAll('{item}', item);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'PUT',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Update Folder or File
  ///
  /// Parameters:
  ///
  /// * [String] item (required):
  ///   The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> servicesFileStagingItemsItemPut(String item, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await servicesFileStagingItemsItemPutWithHttpInfo(item,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Create Folder or File
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentMD5:
  ///   Optional: The MD5 checksum of the file being uploaded.
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> servicesFileStagingItemsPostWithHttpInfo({ String? authorization, String? accept, String? contentMD5, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/services/file_staging/items';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentMD5 != null) {
      headerParams[r'Content-MD5'] = parameterToString(contentMD5);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Create Folder or File
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentMD5:
  ///   Optional: The MD5 checksum of the file being uploaded.
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> servicesFileStagingItemsPost({ String? authorization, String? accept, String? contentMD5, String? xVaultAPIClientID, }) async {
    final response = await servicesFileStagingItemsPostWithHttpInfo( authorization: authorization, accept: accept, contentMD5: contentMD5, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// List Upload Sessions
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> servicesFileStagingUploadGetWithHttpInfo({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/services/file_staging/upload/';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// List Upload Sessions
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> servicesFileStagingUploadGet({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await servicesFileStagingUploadGetWithHttpInfo( authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Create Resumable Upload Session
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> servicesFileStagingUploadPostWithHttpInfo({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/services/file_staging/upload';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Create Resumable Upload Session
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> servicesFileStagingUploadPost({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await servicesFileStagingUploadPostWithHttpInfo( authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Abort Upload Session
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] uploadSessionId (required):
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> servicesFileStagingUploadUploadSessionIdDeleteWithHttpInfo(String uploadSessionId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/services/file_staging/upload/{upload_session_id}'
      .replaceAll('{upload_session_id}', uploadSessionId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'DELETE',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Abort Upload Session
  ///
  /// Parameters:
  ///
  /// * [String] uploadSessionId (required):
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> servicesFileStagingUploadUploadSessionIdDelete(String uploadSessionId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await servicesFileStagingUploadUploadSessionIdDeleteWithHttpInfo(uploadSessionId,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Get Upload Session Details
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] uploadSessionId (required):
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> servicesFileStagingUploadUploadSessionIdGetWithHttpInfo(String uploadSessionId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/services/file_staging/upload/{upload_session_id}'
      .replaceAll('{upload_session_id}', uploadSessionId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Get Upload Session Details
  ///
  /// Parameters:
  ///
  /// * [String] uploadSessionId (required):
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> servicesFileStagingUploadUploadSessionIdGet(String uploadSessionId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await servicesFileStagingUploadUploadSessionIdGetWithHttpInfo(uploadSessionId,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// List File Parts Uploaded to Session
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] uploadSessionId (required):
  ///
  /// * [String] limit:
  ///   Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> servicesFileStagingUploadUploadSessionIdPartsGetWithHttpInfo(String uploadSessionId, { String? limit, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/services/file_staging/upload/{upload_session_id}/parts'
      .replaceAll('{upload_session_id}', uploadSessionId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (limit != null) {
      queryParams.addAll(_queryParams('', 'limit', limit));
    }

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// List File Parts Uploaded to Session
  ///
  /// Parameters:
  ///
  /// * [String] uploadSessionId (required):
  ///
  /// * [String] limit:
  ///   Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> servicesFileStagingUploadUploadSessionIdPartsGet(String uploadSessionId, { String? limit, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await servicesFileStagingUploadUploadSessionIdPartsGetWithHttpInfo(uploadSessionId,  limit: limit, authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Commit Upload Session
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] uploadSessionId (required):
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> servicesFileStagingUploadUploadSessionIdPostWithHttpInfo(String uploadSessionId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/services/file_staging/upload/{upload_session_id}'
      .replaceAll('{upload_session_id}', uploadSessionId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Commit Upload Session
  ///
  /// Parameters:
  ///
  /// * [String] uploadSessionId (required):
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> servicesFileStagingUploadUploadSessionIdPost(String uploadSessionId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await servicesFileStagingUploadUploadSessionIdPostWithHttpInfo(uploadSessionId,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Upload to a Session
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] uploadSessionId (required):
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIFilePartNumber:
  ///   The part number, which uniquely identifies a file part and defines its position within the file as a whole. If a part is uploaded using a part number that has already been used, Vault overwrites the previously uploaded file part. You must upload parts in numerical order. For example, you cannot upload part 3 without first uploading parts 1 and 2.
  ///
  /// * [String] contentMD5:
  ///   Optional: The MD5 checksum of the file part being uploaded.
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> servicesFileStagingUploadUploadSessionIdPutWithHttpInfo(String uploadSessionId, { String? authorization, String? accept, String? contentType, String? xVaultAPIFilePartNumber, String? contentMD5, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/services/file_staging/upload/{upload_session_id}'
      .replaceAll('{upload_session_id}', uploadSessionId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIFilePartNumber != null) {
      headerParams[r'X-VaultAPI-FilePartNumber'] = parameterToString(xVaultAPIFilePartNumber);
    }
    if (contentMD5 != null) {
      headerParams[r'Content-MD5'] = parameterToString(contentMD5);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'PUT',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Upload to a Session
  ///
  /// Parameters:
  ///
  /// * [String] uploadSessionId (required):
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIFilePartNumber:
  ///   The part number, which uniquely identifies a file part and defines its position within the file as a whole. If a part is uploaded using a part number that has already been used, Vault overwrites the previously uploaded file part. You must upload parts in numerical order. For example, you cannot upload part 3 without first uploading parts 1 and 2.
  ///
  /// * [String] contentMD5:
  ///   Optional: The MD5 checksum of the file part being uploaded.
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> servicesFileStagingUploadUploadSessionIdPut(String uploadSessionId, { String? authorization, String? accept, String? contentType, String? xVaultAPIFilePartNumber, String? contentMD5, String? xVaultAPIClientID, }) async {
    final response = await servicesFileStagingUploadUploadSessionIdPutWithHttpInfo(uploadSessionId,  authorization: authorization, accept: accept, contentType: contentType, xVaultAPIFilePartNumber: xVaultAPIFilePartNumber, contentMD5: contentMD5, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Job Histories
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] startDate:
  ///   Sets the date to start retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job.
  ///
  /// * [String] endDate:
  ///   Sets the date to end retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time.
  ///
  /// * [String] status:
  ///   Filter to only retrieve jobs in a certain status. Allowed values are success, errors_encountered, failed_to_run, missed_schedule, cancelled. If omitted, retrieves all statuses.
  ///
  /// * [String] limit:
  ///   Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50.
  ///
  /// * [String] offset:
  ///   Paginate the results displayed per page by specifying the amount of offset from the first job history returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> servicesJobsHistoriesGetWithHttpInfo({ String? startDate, String? endDate, String? status, String? limit, String? offset, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/services/jobs/histories';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (startDate != null) {
      queryParams.addAll(_queryParams('', 'start_date', startDate));
    }
    if (endDate != null) {
      queryParams.addAll(_queryParams('', 'end_date', endDate));
    }
    if (status != null) {
      queryParams.addAll(_queryParams('', 'status', status));
    }
    if (limit != null) {
      queryParams.addAll(_queryParams('', 'limit', limit));
    }
    if (offset != null) {
      queryParams.addAll(_queryParams('', 'offset', offset));
    }

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Job Histories
  ///
  /// Parameters:
  ///
  /// * [String] startDate:
  ///   Sets the date to start retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job.
  ///
  /// * [String] endDate:
  ///   Sets the date to end retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time.
  ///
  /// * [String] status:
  ///   Filter to only retrieve jobs in a certain status. Allowed values are success, errors_encountered, failed_to_run, missed_schedule, cancelled. If omitted, retrieves all statuses.
  ///
  /// * [String] limit:
  ///   Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50.
  ///
  /// * [String] offset:
  ///   Paginate the results displayed per page by specifying the amount of offset from the first job history returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> servicesJobsHistoriesGet({ String? startDate, String? endDate, String? status, String? limit, String? offset, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await servicesJobsHistoriesGetWithHttpInfo( startDate: startDate, endDate: endDate, status: status, limit: limit, offset: offset, authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Import Bulk Translation File Job Errors
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] jobId (required):
  ///   The id value of the requested import job. This was returned from the Import Bulk Translation File request.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> servicesJobsJobIdErrorsGetWithHttpInfo(String jobId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/services/jobs/{job_id}/errors'
      .replaceAll('{job_id}', jobId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Import Bulk Translation File Job Errors
  ///
  /// Parameters:
  ///
  /// * [String] jobId (required):
  ///   The id value of the requested import job. This was returned from the Import Bulk Translation File request.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> servicesJobsJobIdErrorsGet(String jobId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await servicesJobsJobIdErrorsGetWithHttpInfo(jobId,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Job Status
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] jobId (required):
  ///   The ID of the job, returned from the original job request.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> servicesJobsJobIdGetWithHttpInfo(String jobId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/services/jobs/{job_id}'
      .replaceAll('{job_id}', jobId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Job Status
  ///
  /// Parameters:
  ///
  /// * [String] jobId (required):
  ///   The ID of the job, returned from the original job request.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> servicesJobsJobIdGet(String jobId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await servicesJobsJobIdGetWithHttpInfo(jobId,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Import Bulk Translation File Job Summary
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] jobId (required):
  ///   The id value of the requested import job. This was returned from the Import Bulk Translation File request.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> servicesJobsJobIdSummaryGetWithHttpInfo(String jobId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/services/jobs/{job_id}/summary'
      .replaceAll('{job_id}', jobId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Import Bulk Translation File Job Summary
  ///
  /// Parameters:
  ///
  /// * [String] jobId (required):
  ///   The id value of the requested import job. This was returned from the Import Bulk Translation File request.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> servicesJobsJobIdSummaryGet(String jobId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await servicesJobsJobIdSummaryGetWithHttpInfo(jobId,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve SDK Job Tasks
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] jobId (required):
  ///   The ID of the SDK job, returned from the original job request.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> servicesJobsJobIdTasksGetWithHttpInfo(String jobId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/services/jobs/{job_id}/tasks'
      .replaceAll('{job_id}', jobId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve SDK Job Tasks
  ///
  /// Parameters:
  ///
  /// * [String] jobId (required):
  ///   The ID of the SDK job, returned from the original job request.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> servicesJobsJobIdTasksGet(String jobId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await servicesJobsJobIdTasksGetWithHttpInfo(jobId,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Job Monitors
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] startDate:
  ///   Sets the date to start retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job.
  ///
  /// * [String] endDate:
  ///   Sets the date to end retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time.
  ///
  /// * [String] status:
  ///   Filter to only retrieve jobs in a certain status. Allowed values are scheduled, queued, running. If omitted, retrieves all statuses.
  ///
  /// * [String] limit:
  ///   Paginate the results by specifying the maximum number of jobs per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50.
  ///
  /// * [String] offset:
  ///   Paginate the results displayed per page by specifying the amount of offset from the first job instance returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> servicesJobsMonitorsGetWithHttpInfo({ String? startDate, String? endDate, String? status, String? limit, String? offset, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/services/jobs/monitors';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (startDate != null) {
      queryParams.addAll(_queryParams('', 'start_date', startDate));
    }
    if (endDate != null) {
      queryParams.addAll(_queryParams('', 'end_date', endDate));
    }
    if (status != null) {
      queryParams.addAll(_queryParams('', 'status', status));
    }
    if (limit != null) {
      queryParams.addAll(_queryParams('', 'limit', limit));
    }
    if (offset != null) {
      queryParams.addAll(_queryParams('', 'offset', offset));
    }

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Job Monitors
  ///
  /// Parameters:
  ///
  /// * [String] startDate:
  ///   Sets the date to start retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job.
  ///
  /// * [String] endDate:
  ///   Sets the date to end retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time.
  ///
  /// * [String] status:
  ///   Filter to only retrieve jobs in a certain status. Allowed values are scheduled, queued, running. If omitted, retrieves all statuses.
  ///
  /// * [String] limit:
  ///   Paginate the results by specifying the maximum number of jobs per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50.
  ///
  /// * [String] offset:
  ///   Paginate the results displayed per page by specifying the amount of offset from the first job instance returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> servicesJobsMonitorsGet({ String? startDate, String? endDate, String? status, String? limit, String? offset, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await servicesJobsMonitorsGetWithHttpInfo( startDate: startDate, endDate: endDate, status: status, limit: limit, offset: offset, authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Start Job
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] jobId (required):
  ///   The ID of the scheduled job instance to start.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> servicesJobsStartNowJobIdPostWithHttpInfo(String jobId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/services/jobs/start_now/{job_id}'
      .replaceAll('{job_id}', jobId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Start Job
  ///
  /// Parameters:
  ///
  /// * [String] jobId (required):
  ///   The ID of the scheduled job instance to start.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> servicesJobsStartNowJobIdPost(String jobId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await servicesJobsStartNowJobIdPostWithHttpInfo(jobId,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Extract Data Files
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> servicesLoaderExtractPostWithHttpInfo({ String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/services/loader/extract';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Extract Data Files
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> servicesLoaderExtractPost({ String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await servicesLoaderExtractPostWithHttpInfo( authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Load Failure Log Results
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] jobId (required):
  ///   The id value of the requested extract job.
  ///
  /// * [String] taskId (required):
  ///   The id value of the requested extract task.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> servicesLoaderJobIdTasksTaskIdFailurelogGetWithHttpInfo(String jobId, String taskId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/services/loader/{job_id}/tasks/{task_id}/failurelog'
      .replaceAll('{job_id}', jobId)
      .replaceAll('{task_id}', taskId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Load Failure Log Results
  ///
  /// Parameters:
  ///
  /// * [String] jobId (required):
  ///   The id value of the requested extract job.
  ///
  /// * [String] taskId (required):
  ///   The id value of the requested extract task.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> servicesLoaderJobIdTasksTaskIdFailurelogGet(String jobId, String taskId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await servicesLoaderJobIdTasksTaskIdFailurelogGetWithHttpInfo(jobId, taskId,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Loader Extract Results
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] jobId (required):
  ///   The id value of the requested extract job.
  ///
  /// * [String] taskId (required):
  ///   The id value of the requested extract task.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> servicesLoaderJobIdTasksTaskIdResultsGetWithHttpInfo(String jobId, String taskId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/services/loader/{job_id}/tasks/{task_id}/results'
      .replaceAll('{job_id}', jobId)
      .replaceAll('{task_id}', taskId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Loader Extract Results
  ///
  /// Parameters:
  ///
  /// * [String] jobId (required):
  ///   The id value of the requested extract job.
  ///
  /// * [String] taskId (required):
  ///   The id value of the requested extract task.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> servicesLoaderJobIdTasksTaskIdResultsGet(String jobId, String taskId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await servicesLoaderJobIdTasksTaskIdResultsGetWithHttpInfo(jobId, taskId,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Loader Extract Renditions Results
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] jobId (required):
  ///   The id value of the requested extract job.
  ///
  /// * [String] taskId (required):
  ///   The id value of the requested extract task.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> servicesLoaderJobIdTasksTaskIdResultsRenditionsGetWithHttpInfo(String jobId, String taskId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/services/loader/{job_id}/tasks/{task_id}/results/renditions'
      .replaceAll('{job_id}', jobId)
      .replaceAll('{task_id}', taskId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Loader Extract Renditions Results
  ///
  /// Parameters:
  ///
  /// * [String] jobId (required):
  ///   The id value of the requested extract job.
  ///
  /// * [String] taskId (required):
  ///   The id value of the requested extract task.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> servicesLoaderJobIdTasksTaskIdResultsRenditionsGet(String jobId, String taskId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await servicesLoaderJobIdTasksTaskIdResultsRenditionsGetWithHttpInfo(jobId, taskId,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Load Success Log Results
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] jobId (required):
  ///   The id value of the requested extract job.
  ///
  /// * [String] taskId (required):
  ///   The id value of the requested extract task.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> servicesLoaderJobIdTasksTaskIdSuccesslogGetWithHttpInfo(String jobId, String taskId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/services/loader/{job_id}/tasks/{task_id}/successlog'
      .replaceAll('{job_id}', jobId)
      .replaceAll('{task_id}', taskId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Load Success Log Results
  ///
  /// Parameters:
  ///
  /// * [String] jobId (required):
  ///   The id value of the requested extract job.
  ///
  /// * [String] taskId (required):
  ///   The id value of the requested extract task.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> servicesLoaderJobIdTasksTaskIdSuccesslogGet(String jobId, String taskId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await servicesLoaderJobIdTasksTaskIdSuccesslogGetWithHttpInfo(jobId, taskId,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Load Data Objects
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> servicesLoaderLoadPostWithHttpInfo({ String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/services/loader/load';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Load Data Objects
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> servicesLoaderLoadPost({ String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    final response = await servicesLoaderLoadPostWithHttpInfo( authorization: authorization, contentType: contentType, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Validate Package
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> servicesPackageActionsValidatePostWithHttpInfo({ String? authorization, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/services/package/actions/validate';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Validate Package
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> servicesPackageActionsValidatePost({ String? authorization, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await servicesPackageActionsValidatePostWithHttpInfo( authorization: authorization, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Export Package
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> servicesPackagePostWithHttpInfo({ String? authorization, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/services/package';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Export Package
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> servicesPackagePost({ String? authorization, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await servicesPackagePostWithHttpInfo( authorization: authorization, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Import Package
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> servicesPackagePutWithHttpInfo({ String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/services/package';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'PUT',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Import Package
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> servicesPackagePut({ String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    final response = await servicesPackagePutWithHttpInfo( authorization: authorization, contentType: contentType, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve All Queues
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> servicesQueuesGetWithHttpInfo({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/services/queues';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve All Queues
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> servicesQueuesGet({ String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await servicesQueuesGetWithHttpInfo( authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Disable Delivery
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] queueName (required):
  ///   The name of a specific Queue.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> servicesQueuesQueueNameActionsDisableDeliveryPutWithHttpInfo(String queueName, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/services/queues/{queue_name}/actions/disable_delivery'
      .replaceAll('{queue_name}', queueName);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'PUT',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Disable Delivery
  ///
  /// Parameters:
  ///
  /// * [String] queueName (required):
  ///   The name of a specific Queue.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> servicesQueuesQueueNameActionsDisableDeliveryPut(String queueName, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await servicesQueuesQueueNameActionsDisableDeliveryPutWithHttpInfo(queueName,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Enable Delivery
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] queueName (required):
  ///   The name of a specific Queue.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> servicesQueuesQueueNameActionsEnableDeliveryPutWithHttpInfo(String queueName, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/services/queues/{queue_name}/actions/enable_delivery'
      .replaceAll('{queue_name}', queueName);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'PUT',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Enable Delivery
  ///
  /// Parameters:
  ///
  /// * [String] queueName (required):
  ///   The name of a specific Queue.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> servicesQueuesQueueNameActionsEnableDeliveryPut(String queueName, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await servicesQueuesQueueNameActionsEnableDeliveryPutWithHttpInfo(queueName,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Reset Queue
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] queueName (required):
  ///   The name of a specific Queue.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> servicesQueuesQueueNameActionsResetPutWithHttpInfo(String queueName, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/services/queues/{queue_name}/actions/reset'
      .replaceAll('{queue_name}', queueName);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'PUT',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Reset Queue
  ///
  /// Parameters:
  ///
  /// * [String] queueName (required):
  ///   The name of a specific Queue.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> servicesQueuesQueueNameActionsResetPut(String queueName, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await servicesQueuesQueueNameActionsResetPutWithHttpInfo(queueName,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Queue Status
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] queueName (required):
  ///   The name of a specific queue. For example, queue__c.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> servicesQueuesQueueNameGetWithHttpInfo(String queueName, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/services/queues/{queue_name}'
      .replaceAll('{queue_name}', queueName);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Queue Status
  ///
  /// Parameters:
  ///
  /// * [String] queueName (required):
  ///   The name of a specific queue. For example, queue__c.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> servicesQueuesQueueNameGet(String queueName, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await servicesQueuesQueueNameGetWithHttpInfo(queueName,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Validate Imported Package
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] packageId (required):
  ///   The ID of the package to validate. You can find this in the API response of a package import, or in the URL of package in the Vault UI.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> servicesVobjectVaultPackageVPackageIdActionsValidatePostWithHttpInfo(String packageId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/services/vobject/vault_package__v/{package_id}/actions/validate'
      .replaceAll('{package_id}', packageId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Validate Imported Package
  ///
  /// Parameters:
  ///
  /// * [String] packageId (required):
  ///   The ID of the package to validate. You can find this in the API response of a package import, or in the URL of package in the Vault UI.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> servicesVobjectVaultPackageVPackageIdActionsValidatePost(String packageId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await servicesVobjectVaultPackageVPackageIdActionsValidatePostWithHttpInfo(packageId,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// End Session
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] accept:
  ///
  /// * [String] authorization:
  ///   The Vault sessionId to end.
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> sessionDeleteWithHttpInfo({ String? accept, String? authorization, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/session';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'DELETE',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// End Session
  ///
  /// Parameters:
  ///
  /// * [String] accept:
  ///
  /// * [String] authorization:
  ///   The Vault sessionId to end.
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> sessionDelete({ String? accept, String? authorization, String? xVaultAPIClientID, }) async {
    final response = await sessionDeleteWithHttpInfo( accept: accept, authorization: authorization, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Download Single Client Code Distribution
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] distributionName (required):
  ///   The name attribute of the client code distribution to download.
  ///
  /// * [String] accept:
  ///
  /// * [String] authorization:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> uicodeDistributionsDistributionNameCodeGetWithHttpInfo(String distributionName, { String? accept, String? authorization, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/uicode/distributions/{distribution_name}/code'
      .replaceAll('{distribution_name}', distributionName);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Download Single Client Code Distribution
  ///
  /// Parameters:
  ///
  /// * [String] distributionName (required):
  ///   The name attribute of the client code distribution to download.
  ///
  /// * [String] accept:
  ///
  /// * [String] authorization:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> uicodeDistributionsDistributionNameCodeGet(String distributionName, { String? accept, String? authorization, String? xVaultAPIClientID, }) async {
    final response = await uicodeDistributionsDistributionNameCodeGetWithHttpInfo(distributionName,  accept: accept, authorization: authorization, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Delete Single Client Code Distribution
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] distributionName (required):
  ///   The name attribute of the client code distribution to delete.
  ///
  /// * [String] accept:
  ///
  /// * [String] authorization:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> uicodeDistributionsDistributionNameDeleteWithHttpInfo(String distributionName, { String? accept, String? authorization, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/uicode/distributions/{distribution_name}'
      .replaceAll('{distribution_name}', distributionName);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'DELETE',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Delete Single Client Code Distribution
  ///
  /// Parameters:
  ///
  /// * [String] distributionName (required):
  ///   The name attribute of the client code distribution to delete.
  ///
  /// * [String] accept:
  ///
  /// * [String] authorization:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> uicodeDistributionsDistributionNameDelete(String distributionName, { String? accept, String? authorization, String? xVaultAPIClientID, }) async {
    final response = await uicodeDistributionsDistributionNameDeleteWithHttpInfo(distributionName,  accept: accept, authorization: authorization, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Single Client Code Distribution Metadata
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] distributionName (required):
  ///   The name attribute of the client code distribution to delete.
  ///
  /// * [String] accept:
  ///
  /// * [String] authorization:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> uicodeDistributionsDistributionNameGetWithHttpInfo(String distributionName, { String? accept, String? authorization, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/uicode/distributions/{distribution_name}'
      .replaceAll('{distribution_name}', distributionName);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Single Client Code Distribution Metadata
  ///
  /// Parameters:
  ///
  /// * [String] distributionName (required):
  ///   The name attribute of the client code distribution to delete.
  ///
  /// * [String] accept:
  ///
  /// * [String] authorization:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> uicodeDistributionsDistributionNameGet(String distributionName, { String? accept, String? authorization, String? xVaultAPIClientID, }) async {
    final response = await uicodeDistributionsDistributionNameGetWithHttpInfo(distributionName,  accept: accept, authorization: authorization, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve All Client Code Distribution Metadata
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] accept:
  ///
  /// * [String] authorization:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> uicodeDistributionsGetWithHttpInfo({ String? accept, String? authorization, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/uicode/distributions';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve All Client Code Distribution Metadata
  ///
  /// Parameters:
  ///
  /// * [String] accept:
  ///
  /// * [String] authorization:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> uicodeDistributionsGet({ String? accept, String? authorization, String? xVaultAPIClientID, }) async {
    final response = await uicodeDistributionsGetWithHttpInfo( accept: accept, authorization: authorization, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Add or Replace Single Client Code Distribution
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] accept:
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> uicodeDistributionsPostWithHttpInfo({ String? accept, String? authorization, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/uicode/distributions';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Add or Replace Single Client Code Distribution
  ///
  /// Parameters:
  ///
  /// * [String] accept:
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> uicodeDistributionsPost({ String? accept, String? authorization, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await uicodeDistributionsPostWithHttpInfo( accept: accept, authorization: authorization, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Deploy Package
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] packageId (required):
  ///   The id field value of the vault_package__v object record used for deployment. See Import Package.
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> vobjectVaultPackageVPackageIdActionsDeployPostWithHttpInfo(String packageId, { String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/vobject/vault_package__v/{package_id}/actions/deploy'
      .replaceAll('{package_id}', packageId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Deploy Package
  ///
  /// Parameters:
  ///
  /// * [String] packageId (required):
  ///   The id field value of the vault_package__v object record used for deployment. See Import Package.
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> vobjectVaultPackageVPackageIdActionsDeployPost(String packageId, { String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    final response = await vobjectVaultPackageVPackageIdActionsDeployPostWithHttpInfo(packageId,  authorization: authorization, contentType: contentType, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Package Deploy Results
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] packageId (required):
  ///   The id field value of the vault_package__v object record used for deployment. See Deploy Package.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> vobjectVaultPackageVPackageIdActionsDeployResultsGetWithHttpInfo(String packageId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/vobject/vault_package__v/{package_id}/actions/deploy/results'
      .replaceAll('{package_id}', packageId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Package Deploy Results
  ///
  /// Parameters:
  ///
  /// * [String] packageId (required):
  ///   The id field value of the vault_package__v object record used for deployment. See Deploy Package.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> vobjectVaultPackageVPackageIdActionsDeployResultsGet(String packageId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await vobjectVaultPackageVPackageIdActionsDeployResultsGetWithHttpInfo(packageId,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Results of Cascade Delete Job
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The object name__v field value (product__v, country__v, custom_object__c, etc.).
  ///
  /// * [String] jobStatus (required):
  ///
  /// * [String] jobId (required):
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGetWithHttpInfo(String objectName, String jobStatus, String jobId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/vobjects/cascadedelete/results/{object_name}/{job_status}/{job_id}'
      .replaceAll('{object_name}', objectName)
      .replaceAll('{job_status}', jobStatus)
      .replaceAll('{job_id}', jobId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Results of Cascade Delete Job
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The object name__v field value (product__v, country__v, custom_object__c, etc.).
  ///
  /// * [String] jobStatus (required):
  ///
  /// * [String] jobId (required):
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet(String objectName, String jobStatus, String jobId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGetWithHttpInfo(objectName, jobStatus, jobId,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Results of Deep Copy Job
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The object name__v field value (product__v, country__v, custom_object__c, etc.).
  ///
  /// * [String] jobStatus (required):
  ///   The ID of the job, retrieved from the response of the job request.
  ///
  /// * [String] jobId (required):
  ///   Possible values are success or failure. Find if your job succeeded or failed by retrieving the job status.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> vobjectsDeepcopyResultsObjectNameJobStatusJobIdGetWithHttpInfo(String objectName, String jobStatus, String jobId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/vobjects/deepcopy/results/{object_name}/{job_status}/{job_id}'
      .replaceAll('{object_name}', objectName)
      .replaceAll('{job_status}', jobStatus)
      .replaceAll('{job_id}', jobId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Results of Deep Copy Job
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The object name__v field value (product__v, country__v, custom_object__c, etc.).
  ///
  /// * [String] jobStatus (required):
  ///   The ID of the job, retrieved from the response of the job request.
  ///
  /// * [String] jobId (required):
  ///   Possible values are success or failure. Find if your job succeeded or failed by retrieving the job status.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet(String objectName, String jobStatus, String jobId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await vobjectsDeepcopyResultsObjectNameJobStatusJobIdGetWithHttpInfo(objectName, jobStatus, jobId,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Create a Placeholder from an EDL Item
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> vobjectsEdlItemVActionsCreateplaceholderPostWithHttpInfo({ String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/vobjects/edl_item__v/actions/createplaceholder';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Create a Placeholder from an EDL Item
  ///
  /// Parameters:
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> vobjectsEdlItemVActionsCreateplaceholderPost({ String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    final response = await vobjectsEdlItemVActionsCreateplaceholderPostWithHttpInfo( authorization: authorization, contentType: contentType, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Download Merge Records Job Log
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] jobId (required):
  ///   The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> vobjectsMergesJobIdLogGetWithHttpInfo(String jobId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/vobjects/merges/{job_id}/log'
      .replaceAll('{job_id}', jobId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Download Merge Records Job Log
  ///
  /// Parameters:
  ///
  /// * [String] jobId (required):
  ///   The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> vobjectsMergesJobIdLogGet(String jobId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await vobjectsMergesJobIdLogGetWithHttpInfo(jobId,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Record Merge Results
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] jobId (required):
  ///   The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> vobjectsMergesJobIdResultsGetWithHttpInfo(String jobId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/vobjects/merges/{job_id}/results'
      .replaceAll('{job_id}', jobId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Record Merge Results
  ///
  /// Parameters:
  ///
  /// * [String] jobId (required):
  ///   The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> vobjectsMergesJobIdResultsGet(String jobId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await vobjectsMergesJobIdResultsGetWithHttpInfo(jobId,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Record Merge Status
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] jobId (required):
  ///   The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> vobjectsMergesJobIdStatusGetWithHttpInfo(String jobId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/vobjects/merges/{job_id}/status'
      .replaceAll('{job_id}', jobId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Record Merge Status
  ///
  /// Parameters:
  ///
  /// * [String] jobId (required):
  ///   The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> vobjectsMergesJobIdStatusGet(String jobId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await vobjectsMergesJobIdStatusGetWithHttpInfo(jobId,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Initiate Object Action on Multiple Records
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The object name__v field value.
  ///
  /// * [String] actionName (required):
  ///   Either the name of the Objectaction or Objectlifecyclestateuseraction to initiate. This is obtained from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> vobjectsObjectNameActionsActionNamePostWithHttpInfo(String objectName, String actionName, { String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/vobjects/{object_name}/actions/{action_name}'
      .replaceAll('{object_name}', objectName)
      .replaceAll('{action_name}', actionName);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Initiate Object Action on Multiple Records
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The object name__v field value.
  ///
  /// * [String] actionName (required):
  ///   Either the name of the Objectaction or Objectlifecyclestateuseraction to initiate. This is obtained from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> vobjectsObjectNameActionsActionNamePost(String objectName, String actionName, { String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    final response = await vobjectsObjectNameActionsActionNamePostWithHttpInfo(objectName, actionName,  authorization: authorization, contentType: contentType, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Change Object Type
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The name of the object.
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> vobjectsObjectNameActionsChangetypePostWithHttpInfo(String objectName, { String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/vobjects/{object_name}/actions/changetype'
      .replaceAll('{object_name}', objectName);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Change Object Type
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The name of the object.
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> vobjectsObjectNameActionsChangetypePost(String objectName, { String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    final response = await vobjectsObjectNameActionsChangetypePostWithHttpInfo(objectName,  authorization: authorization, contentType: contentType, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Initiate Record Merge
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The object name__v field value. For example, account__v. This object must have Enable Merges configured.
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  ///
  /// * [List<VobjectsObjectNameActionsMergePostRequestInner>] vobjectsObjectNameActionsMergePostRequestInner:
  Future<Response> vobjectsObjectNameActionsMergePostWithHttpInfo(String objectName, { String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, List<VobjectsObjectNameActionsMergePostRequestInner>? vobjectsObjectNameActionsMergePostRequestInner, }) async {
    // ignore: prefer_const_declarations
    final path = r'/vobjects/{object_name}/actions/merge'
      .replaceAll('{object_name}', objectName);

    // ignore: prefer_final_locals
    Object? postBody = vobjectsObjectNameActionsMergePostRequestInner;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>['application/json'];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Initiate Record Merge
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The object name__v field value. For example, account__v. This object must have Enable Merges configured.
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  ///
  /// * [List<VobjectsObjectNameActionsMergePostRequestInner>] vobjectsObjectNameActionsMergePostRequestInner:
  Future<void> vobjectsObjectNameActionsMergePost(String objectName, { String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, List<VobjectsObjectNameActionsMergePostRequestInner>? vobjectsObjectNameActionsMergePostRequestInner, }) async {
    final response = await vobjectsObjectNameActionsMergePostWithHttpInfo(objectName,  authorization: authorization, contentType: contentType, accept: accept, xVaultAPIClientID: xVaultAPIClientID, vobjectsObjectNameActionsMergePostRequestInner: vobjectsObjectNameActionsMergePostRequestInner, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Roll-up Field Recalculation Status
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The name of the object for which to check the status of a Roll-up field recalculation.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> vobjectsObjectNameActionsRecalculaterollupsGetWithHttpInfo(String objectName, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/vobjects/{object_name}/actions/recalculaterollups'
      .replaceAll('{object_name}', objectName);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Roll-up Field Recalculation Status
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The name of the object for which to check the status of a Roll-up field recalculation.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> vobjectsObjectNameActionsRecalculaterollupsGet(String objectName, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await vobjectsObjectNameActionsRecalculaterollupsGetWithHttpInfo(objectName,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Recalculate Roll-up Fields
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The name of the object for which to check the status of a Roll-up field recalculation.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> vobjectsObjectNameActionsRecalculaterollupsPostWithHttpInfo(String objectName, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/vobjects/{object_name}/actions/recalculaterollups'
      .replaceAll('{object_name}', objectName);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Recalculate Roll-up Fields
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The name of the object for which to check the status of a Roll-up field recalculation.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> vobjectsObjectNameActionsRecalculaterollupsPost(String objectName, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await vobjectsObjectNameActionsRecalculaterollupsPostWithHttpInfo(objectName,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Update Corporate Currency Fields
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The object name__v field value (product__v, country__v, custom_object__c, etc.).
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> vobjectsObjectNameActionsUpdatecorporatecurrencyPutWithHttpInfo(String objectName, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/vobjects/{object_name}/actions/updatecorporatecurrency'
      .replaceAll('{object_name}', objectName);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'PUT',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Update Corporate Currency Fields
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The object name__v field value (product__v, country__v, custom_object__c, etc.).
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> vobjectsObjectNameActionsUpdatecorporatecurrencyPut(String objectName, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await vobjectsObjectNameActionsUpdatecorporatecurrencyPutWithHttpInfo(objectName,  authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Delete Multiple Object Record Attachments
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The object name__v field value (product__v, country__v, custom_object__c, etc.).
  ///
  /// * [String] idParam:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> vobjectsObjectNameAttachmentsBatchDeleteWithHttpInfo(String objectName, { String? idParam, String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/vobjects/{object_name}/attachments/batch'
      .replaceAll('{object_name}', objectName);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (idParam != null) {
      queryParams.addAll(_queryParams('', 'idParam', idParam));
    }

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'DELETE',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Delete Multiple Object Record Attachments
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The object name__v field value (product__v, country__v, custom_object__c, etc.).
  ///
  /// * [String] idParam:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> vobjectsObjectNameAttachmentsBatchDelete(String objectName, { String? idParam, String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await vobjectsObjectNameAttachmentsBatchDeleteWithHttpInfo(objectName,  idParam: idParam, authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Create Multiple Object Record Attachments
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The object name__v field value (product__v, country__v, custom_object__c, etc.).
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> vobjectsObjectNameAttachmentsBatchPostWithHttpInfo(String objectName, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/vobjects/{object_name}/attachments/batch'
      .replaceAll('{object_name}', objectName);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Create Multiple Object Record Attachments
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The object name__v field value (product__v, country__v, custom_object__c, etc.).
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> vobjectsObjectNameAttachmentsBatchPost(String objectName, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await vobjectsObjectNameAttachmentsBatchPostWithHttpInfo(objectName,  authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Update Multiple Object Record Attachment Descriptions
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The object name__v field value (product__v, country__v, custom_object__c, etc.).
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> vobjectsObjectNameAttachmentsBatchPutWithHttpInfo(String objectName, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/vobjects/{object_name}/attachments/batch'
      .replaceAll('{object_name}', objectName);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'PUT',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Update Multiple Object Record Attachment Descriptions
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The object name__v field value (product__v, country__v, custom_object__c, etc.).
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> vobjectsObjectNameAttachmentsBatchPut(String objectName, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await vobjectsObjectNameAttachmentsBatchPutWithHttpInfo(objectName,  authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Delete Object Records
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The object name__v field value (product__v, country__v, custom_object__c, etc.).
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///   Can be text/csv or application/json
  ///
  /// * [String] accept:
  ///   Can be text/csv or application/json
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> vobjectsObjectNameDeleteWithHttpInfo(String objectName, { String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/vobjects/{object_name}'
      .replaceAll('{object_name}', objectName);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'DELETE',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Delete Object Records
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The object name__v field value (product__v, country__v, custom_object__c, etc.).
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///   Can be text/csv or application/json
  ///
  /// * [String] accept:
  ///   Can be text/csv or application/json
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> vobjectsObjectNameDelete(String objectName, { String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    final response = await vobjectsObjectNameDeleteWithHttpInfo(objectName,  authorization: authorization, contentType: contentType, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Object Record Roles
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The object name.
  ///
  /// * [String] id (required):
  ///   The id of the document, binder, or object record.
  ///
  /// * [String] roleName (required):
  ///   Optional: Include a role name to filter for a specific role. For example, owner__v.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> vobjectsObjectNameIdRolesRoleNameGetWithHttpInfo(String objectName, String id, String roleName, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/vobjects/{object_name}/{id}/roles/{role_name}'
      .replaceAll('{object_name}', objectName)
      .replaceAll('{id}', id)
      .replaceAll('{role_name}', roleName);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Object Record Roles
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The object name.
  ///
  /// * [String] id (required):
  ///   The id of the document, binder, or object record.
  ///
  /// * [String] roleName (required):
  ///   Optional: Include a role name to filter for a specific role. For example, owner__v.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> vobjectsObjectNameIdRolesRoleNameGet(String objectName, String id, String roleName, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await vobjectsObjectNameIdRolesRoleNameGetWithHttpInfo(objectName, id, roleName,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Object User Actions Details
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The object name__v field value.
  ///
  /// * [String] objectRecordId (required):
  ///   The object record id field value from which to retrieve user actions.
  ///
  /// * [String] actionName (required):
  ///   The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> vobjectsObjectNameObjectRecordIdActionsActionNameGetWithHttpInfo(String objectName, String objectRecordId, String actionName, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/vobjects/{object_name}/{object_record_id}/actions/{action_name}'
      .replaceAll('{object_name}', objectName)
      .replaceAll('{object_record_id}', objectRecordId)
      .replaceAll('{action_name}', actionName);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Object User Actions Details
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The object name__v field value.
  ///
  /// * [String] objectRecordId (required):
  ///   The object record id field value from which to retrieve user actions.
  ///
  /// * [String] actionName (required):
  ///   The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> vobjectsObjectNameObjectRecordIdActionsActionNameGet(String objectName, String objectRecordId, String actionName, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await vobjectsObjectNameObjectRecordIdActionsActionNameGetWithHttpInfo(objectName, objectRecordId, actionName,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Initiate Object Action on a Single Record
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The object name__v field value.
  ///
  /// * [String] objectRecordId (required):
  ///   The object record id field value from which to retrieve user actions.
  ///
  /// * [String] actionName (required):
  ///   The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> vobjectsObjectNameObjectRecordIdActionsActionNamePostWithHttpInfo(String objectName, String objectRecordId, String actionName, { String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/vobjects/{object_name}/{object_record_id}/actions/{action_name}'
      .replaceAll('{object_name}', objectName)
      .replaceAll('{object_record_id}', objectRecordId)
      .replaceAll('{action_name}', actionName);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Initiate Object Action on a Single Record
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The object name__v field value.
  ///
  /// * [String] objectRecordId (required):
  ///   The object record id field value from which to retrieve user actions.
  ///
  /// * [String] actionName (required):
  ///   The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> vobjectsObjectNameObjectRecordIdActionsActionNamePost(String objectName, String objectRecordId, String actionName, { String? authorization, String? contentType, String? accept, String? xVaultAPIClientID, }) async {
    final response = await vobjectsObjectNameObjectRecordIdActionsActionNamePostWithHttpInfo(objectName, objectRecordId, actionName,  authorization: authorization, contentType: contentType, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Cascade Delete Object Record
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The object name__v field value (product__v, country__v, custom_object__c, etc.).
  ///
  /// * [String] objectRecordId (required):
  ///   The object record id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> vobjectsObjectNameObjectRecordIdActionsCascadedeletePostWithHttpInfo(String objectName, String objectRecordId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/vobjects/{object_name}/{object_record_id}/actions/cascadedelete'
      .replaceAll('{object_name}', objectName)
      .replaceAll('{object_record_id}', objectRecordId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Cascade Delete Object Record
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The object name__v field value (product__v, country__v, custom_object__c, etc.).
  ///
  /// * [String] objectRecordId (required):
  ///   The object record id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> vobjectsObjectNameObjectRecordIdActionsCascadedeletePost(String objectName, String objectRecordId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await vobjectsObjectNameObjectRecordIdActionsCascadedeletePostWithHttpInfo(objectName, objectRecordId,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Deep Copy Object Record
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The object name__v field value (product__v, country__v, custom_object__c, etc.).
  ///
  /// * [String] objectRecordId (required):
  ///   The object record id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> vobjectsObjectNameObjectRecordIdActionsDeepcopyPostWithHttpInfo(String objectName, String objectRecordId, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/vobjects/{object_name}/{object_record_id}/actions/deepcopy'
      .replaceAll('{object_name}', objectName)
      .replaceAll('{object_record_id}', objectRecordId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Deep Copy Object Record
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The object name__v field value (product__v, country__v, custom_object__c, etc.).
  ///
  /// * [String] objectRecordId (required):
  ///   The object record id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> vobjectsObjectNameObjectRecordIdActionsDeepcopyPost(String objectName, String objectRecordId, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await vobjectsObjectNameObjectRecordIdActionsDeepcopyPostWithHttpInfo(objectName, objectRecordId,  authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Object Record User Actions
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The object name__v field value.
  ///
  /// * [String] objectRecordId (required):
  ///   The object record id field value.
  ///
  /// * [bool] loc:
  ///   Optional: When true, retrieves localized (translated) strings for the label. 
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> vobjectsObjectNameObjectRecordIdActionsGetWithHttpInfo(String objectName, String objectRecordId, { bool? loc, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/vobjects/{object_name}/{object_record_id}/actions'
      .replaceAll('{object_name}', objectName)
      .replaceAll('{object_record_id}', objectRecordId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (loc != null) {
      queryParams.addAll(_queryParams('', 'loc', loc));
    }

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Object Record User Actions
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The object name__v field value.
  ///
  /// * [String] objectRecordId (required):
  ///   The object record id field value.
  ///
  /// * [bool] loc:
  ///   Optional: When true, retrieves localized (translated) strings for the label. 
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> vobjectsObjectNameObjectRecordIdActionsGet(String objectName, String objectRecordId, { bool? loc, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await vobjectsObjectNameObjectRecordIdActionsGetWithHttpInfo(objectName, objectRecordId,  loc: loc, authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Download Attachment Field File
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The object name__v field value. For example, product__v.
  ///
  /// * [String] objectRecordId (required):
  ///   The object record id field value.
  ///
  /// * [String] attachmentFieldName (required):
  ///   The name of the Attachment field to update.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGetWithHttpInfo(String objectName, String objectRecordId, String attachmentFieldName, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/vobjects/{object_name}/{object_record_id}/attachment_fields/{attachment_field_name}/file'
      .replaceAll('{object_name}', objectName)
      .replaceAll('{object_record_id}', objectRecordId)
      .replaceAll('{attachment_field_name}', attachmentFieldName);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Download Attachment Field File
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The object name__v field value. For example, product__v.
  ///
  /// * [String] objectRecordId (required):
  ///   The object record id field value.
  ///
  /// * [String] attachmentFieldName (required):
  ///   The name of the Attachment field to update.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet(String objectName, String objectRecordId, String attachmentFieldName, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGetWithHttpInfo(objectName, objectRecordId, attachmentFieldName,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Update Attachment Field File
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The object name__v field value. For example, product__v.
  ///
  /// * [String] objectRecordId (required):
  ///   The object record id field value.
  ///
  /// * [String] attachmentFieldName (required):
  ///   The name of the Attachment field to update.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePostWithHttpInfo(String objectName, String objectRecordId, String attachmentFieldName, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/vobjects/{object_name}/{object_record_id}/attachment_fields/{attachment_field_name}/file'
      .replaceAll('{object_name}', objectName)
      .replaceAll('{object_record_id}', objectRecordId)
      .replaceAll('{attachment_field_name}', attachmentFieldName);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Update Attachment Field File
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The object name__v field value. For example, product__v.
  ///
  /// * [String] objectRecordId (required):
  ///   The object record id field value.
  ///
  /// * [String] attachmentFieldName (required):
  ///   The name of the Attachment field to update.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost(String objectName, String objectRecordId, String attachmentFieldName, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePostWithHttpInfo(objectName, objectRecordId, attachmentFieldName,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Download All Attachment Field Files
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The object name__v field value. For example, product__v.
  ///
  /// * [String] objectRecordId (required):
  ///   The object record id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGetWithHttpInfo(String objectName, String objectRecordId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/vobjects/{object_name}/{object_record_id}/attachment_fields/file'
      .replaceAll('{object_name}', objectName)
      .replaceAll('{object_record_id}', objectRecordId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Download All Attachment Field Files
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The object name__v field value. For example, product__v.
  ///
  /// * [String] objectRecordId (required):
  ///   The object record id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet(String objectName, String objectRecordId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGetWithHttpInfo(objectName, objectRecordId,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Delete Object Record Attachment
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The object name__v field value (product__v, country__v, custom_object__c, etc.).
  ///
  /// * [String] objectRecordId (required):
  ///   The object record id field value.
  ///
  /// * [String] attachmentId (required):
  ///   The attachment id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDeleteWithHttpInfo(String objectName, String objectRecordId, String attachmentId, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}'
      .replaceAll('{object_name}', objectName)
      .replaceAll('{object_record_id}', objectRecordId)
      .replaceAll('{attachment_id}', attachmentId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'DELETE',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Delete Object Record Attachment
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The object name__v field value (product__v, country__v, custom_object__c, etc.).
  ///
  /// * [String] objectRecordId (required):
  ///   The object record id field value.
  ///
  /// * [String] attachmentId (required):
  ///   The attachment id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete(String objectName, String objectRecordId, String attachmentId, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDeleteWithHttpInfo(objectName, objectRecordId, attachmentId,  authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Object Record Attachment Metadata
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The object name__v field value (product__v, country__v, custom_object__c, etc.).
  ///
  /// * [String] objectRecordId (required):
  ///   The object record id field value.
  ///
  /// * [String] attachmentId (required):
  ///   The attachment id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGetWithHttpInfo(String objectName, String objectRecordId, String attachmentId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}'
      .replaceAll('{object_name}', objectName)
      .replaceAll('{object_record_id}', objectRecordId)
      .replaceAll('{attachment_id}', attachmentId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Object Record Attachment Metadata
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The object name__v field value (product__v, country__v, custom_object__c, etc.).
  ///
  /// * [String] objectRecordId (required):
  ///   The object record id field value.
  ///
  /// * [String] attachmentId (required):
  ///   The attachment id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet(String objectName, String objectRecordId, String attachmentId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGetWithHttpInfo(objectName, objectRecordId, attachmentId,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Update Object Record Attachment Description
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The object name__v field value (product__v, country__v, custom_object__c, etc.).
  ///
  /// * [String] objectRecordId (required):
  ///   The object record id field value.
  ///
  /// * [String] attachmentId (required):
  ///   The attachment id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPutWithHttpInfo(String objectName, String objectRecordId, String attachmentId, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}'
      .replaceAll('{object_name}', objectName)
      .replaceAll('{object_record_id}', objectRecordId)
      .replaceAll('{attachment_id}', attachmentId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'PUT',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Update Object Record Attachment Description
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The object name__v field value (product__v, country__v, custom_object__c, etc.).
  ///
  /// * [String] objectRecordId (required):
  ///   The object record id field value.
  ///
  /// * [String] attachmentId (required):
  ///   The attachment id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut(String objectName, String objectRecordId, String attachmentId, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPutWithHttpInfo(objectName, objectRecordId, attachmentId,  authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Delete Object Record Attachment Version
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The object name__v field value (product__v, country__v, custom_object__c, etc.).
  ///
  /// * [String] objectRecordId (required):
  ///   The object record id field value.
  ///
  /// * [String] attachmentId (required):
  ///   The attachment id field value.
  ///
  /// * [String] attachmentVersion (required):
  ///   The attachment version__v field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteWithHttpInfo(String objectName, String objectRecordId, String attachmentId, String attachmentVersion, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}'
      .replaceAll('{object_name}', objectName)
      .replaceAll('{object_record_id}', objectRecordId)
      .replaceAll('{attachment_id}', attachmentId)
      .replaceAll('{attachment_version}', attachmentVersion);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'DELETE',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Delete Object Record Attachment Version
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The object name__v field value (product__v, country__v, custom_object__c, etc.).
  ///
  /// * [String] objectRecordId (required):
  ///   The object record id field value.
  ///
  /// * [String] attachmentId (required):
  ///   The attachment id field value.
  ///
  /// * [String] attachmentVersion (required):
  ///   The attachment version__v field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete(String objectName, String objectRecordId, String attachmentId, String attachmentVersion, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteWithHttpInfo(objectName, objectRecordId, attachmentId, attachmentVersion,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Download Object Record Attachment File
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The object name__v field value (product__v, country__v, custom_object__c, etc.).
  ///
  /// * [String] objectRecordId (required):
  ///   The object record id field value.
  ///
  /// * [String] attachmentId (required):
  ///   The attachment id field value.
  ///
  /// * [String] attachmentVersion (required):
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetWithHttpInfo(String objectName, String objectRecordId, String attachmentId, String attachmentVersion, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}/file'
      .replaceAll('{object_name}', objectName)
      .replaceAll('{object_record_id}', objectRecordId)
      .replaceAll('{attachment_id}', attachmentId)
      .replaceAll('{attachment_version}', attachmentVersion);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Download Object Record Attachment File
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The object name__v field value (product__v, country__v, custom_object__c, etc.).
  ///
  /// * [String] objectRecordId (required):
  ///   The object record id field value.
  ///
  /// * [String] attachmentId (required):
  ///   The attachment id field value.
  ///
  /// * [String] attachmentVersion (required):
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(String objectName, String objectRecordId, String attachmentId, String attachmentVersion, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetWithHttpInfo(objectName, objectRecordId, attachmentId, attachmentVersion,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Object Record Attachment Version Metadata
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The object name__v field value (product__v, country__v, custom_object__c, etc.).
  ///
  /// * [String] objectRecordId (required):
  ///   The object record id field value.
  ///
  /// * [String] attachmentId (required):
  ///   The attachment id field value.
  ///
  /// * [String] attachmentVersion (required):
  ///   The attachment version__v field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGetWithHttpInfo(String objectName, String objectRecordId, String attachmentId, String attachmentVersion, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}'
      .replaceAll('{object_name}', objectName)
      .replaceAll('{object_record_id}', objectRecordId)
      .replaceAll('{attachment_id}', attachmentId)
      .replaceAll('{attachment_version}', attachmentVersion);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Object Record Attachment Version Metadata
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The object name__v field value (product__v, country__v, custom_object__c, etc.).
  ///
  /// * [String] objectRecordId (required):
  ///   The object record id field value.
  ///
  /// * [String] attachmentId (required):
  ///   The attachment id field value.
  ///
  /// * [String] attachmentVersion (required):
  ///   The attachment version__v field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet(String objectName, String objectRecordId, String attachmentId, String attachmentVersion, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGetWithHttpInfo(objectName, objectRecordId, attachmentId, attachmentVersion,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Restore Object Record Attachment Version
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The object name__v field value (product__v, country__v, custom_object__c, etc.).
  ///
  /// * [String] objectRecordId (required):
  ///   The object record id field value.
  ///
  /// * [String] attachmentId (required):
  ///   The attachment id field value.
  ///
  /// * [String] attachmentVersion (required):
  ///   The attachment version__v field value.
  ///
  /// * [bool] restore:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPostWithHttpInfo(String objectName, String objectRecordId, String attachmentId, String attachmentVersion, { bool? restore, String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}'
      .replaceAll('{object_name}', objectName)
      .replaceAll('{object_record_id}', objectRecordId)
      .replaceAll('{attachment_id}', attachmentId)
      .replaceAll('{attachment_version}', attachmentVersion);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (restore != null) {
      queryParams.addAll(_queryParams('', 'restore', restore));
    }

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Restore Object Record Attachment Version
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The object name__v field value (product__v, country__v, custom_object__c, etc.).
  ///
  /// * [String] objectRecordId (required):
  ///   The object record id field value.
  ///
  /// * [String] attachmentId (required):
  ///   The attachment id field value.
  ///
  /// * [String] attachmentVersion (required):
  ///   The attachment version__v field value.
  ///
  /// * [bool] restore:
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost(String objectName, String objectRecordId, String attachmentId, String attachmentVersion, { bool? restore, String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPostWithHttpInfo(objectName, objectRecordId, attachmentId, attachmentVersion,  restore: restore, authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Object Record Attachment Versions
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The object name__v field value (product__v, country__v, custom_object__c, etc.).
  ///
  /// * [String] objectRecordId (required):
  ///   The object record id field value.
  ///
  /// * [String] attachmentId (required):
  ///   The attachment id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGetWithHttpInfo(String objectName, String objectRecordId, String attachmentId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions'
      .replaceAll('{object_name}', objectName)
      .replaceAll('{object_record_id}', objectRecordId)
      .replaceAll('{attachment_id}', attachmentId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Object Record Attachment Versions
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The object name__v field value (product__v, country__v, custom_object__c, etc.).
  ///
  /// * [String] objectRecordId (required):
  ///   The object record id field value.
  ///
  /// * [String] attachmentId (required):
  ///   The attachment id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet(String objectName, String objectRecordId, String attachmentId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGetWithHttpInfo(objectName, objectRecordId, attachmentId,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Download All Object Record Attachment Files
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The object name__v field value (product__v, country__v, custom_object__c, etc.).
  ///
  /// * [String] objectRecordId (required):
  ///   The object record id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> vobjectsObjectNameObjectRecordIdAttachmentsFileGetWithHttpInfo(String objectName, String objectRecordId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/vobjects/{object_name}/{object_record_id}/attachments/file'
      .replaceAll('{object_name}', objectName)
      .replaceAll('{object_record_id}', objectRecordId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Download All Object Record Attachment Files
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The object name__v field value (product__v, country__v, custom_object__c, etc.).
  ///
  /// * [String] objectRecordId (required):
  ///   The object record id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> vobjectsObjectNameObjectRecordIdAttachmentsFileGet(String objectName, String objectRecordId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await vobjectsObjectNameObjectRecordIdAttachmentsFileGetWithHttpInfo(objectName, objectRecordId,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Object Record Attachments
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The object name__v field value (product__v, country__v, custom_object__c, etc.).
  ///
  /// * [String] objectRecordId (required):
  ///   The object record id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> vobjectsObjectNameObjectRecordIdAttachmentsGetWithHttpInfo(String objectName, String objectRecordId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/vobjects/{object_name}/{object_record_id}/attachments'
      .replaceAll('{object_name}', objectName)
      .replaceAll('{object_record_id}', objectRecordId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Object Record Attachments
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The object name__v field value (product__v, country__v, custom_object__c, etc.).
  ///
  /// * [String] objectRecordId (required):
  ///   The object record id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> vobjectsObjectNameObjectRecordIdAttachmentsGet(String objectName, String objectRecordId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await vobjectsObjectNameObjectRecordIdAttachmentsGetWithHttpInfo(objectName, objectRecordId,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Create Object Record Attachment
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The object name__v field value (product__v, country__v, custom_object__c, etc.).
  ///
  /// * [String] objectRecordId (required):
  ///   The object record id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> vobjectsObjectNameObjectRecordIdAttachmentsPostWithHttpInfo(String objectName, String objectRecordId, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/vobjects/{object_name}/{object_record_id}/attachments'
      .replaceAll('{object_name}', objectName)
      .replaceAll('{object_record_id}', objectRecordId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Create Object Record Attachment
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The object name__v field value (product__v, country__v, custom_object__c, etc.).
  ///
  /// * [String] objectRecordId (required):
  ///   The object record id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> vobjectsObjectNameObjectRecordIdAttachmentsPost(String objectName, String objectRecordId, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await vobjectsObjectNameObjectRecordIdAttachmentsPostWithHttpInfo(objectName, objectRecordId,  authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Complete Audit History for a Single Object Record
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The object name__v field value.
  ///
  /// * [String] objectRecordId (required):
  ///   The object record id field value from which to retrieve user actions.
  ///
  /// * [String] startDate:
  ///   Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vVault’s creation date. 
  ///
  /// * [String] endDate:
  ///   Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date. 
  ///
  /// * [String] formatResult:
  ///   To request a CSV file of your audit history, use csv. 
  ///
  /// * [String] limit:
  ///   Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
  ///
  /// * [String] offset:
  ///   Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51. If omitted, defaults to 0.
  ///
  /// * [String] events:
  ///   Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of object audit events. The values passed to this parameter are case sensitive. For example, events=Copy,Edit,Delete. If omitted, defaults to all audit events.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> vobjectsObjectNameObjectRecordIdAudittrailGetWithHttpInfo(String objectName, String objectRecordId, { String? startDate, String? endDate, String? formatResult, String? limit, String? offset, String? events, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/vobjects/{object_name}/{object_record_id}/audittrail'
      .replaceAll('{object_name}', objectName)
      .replaceAll('{object_record_id}', objectRecordId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (startDate != null) {
      queryParams.addAll(_queryParams('', 'start_date', startDate));
    }
    if (endDate != null) {
      queryParams.addAll(_queryParams('', 'end_date', endDate));
    }
    if (formatResult != null) {
      queryParams.addAll(_queryParams('', 'format_result', formatResult));
    }
    if (limit != null) {
      queryParams.addAll(_queryParams('', 'limit', limit));
    }
    if (offset != null) {
      queryParams.addAll(_queryParams('', 'offset', offset));
    }
    if (events != null) {
      queryParams.addAll(_queryParams('', 'events', events));
    }

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Complete Audit History for a Single Object Record
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The object name__v field value.
  ///
  /// * [String] objectRecordId (required):
  ///   The object record id field value from which to retrieve user actions.
  ///
  /// * [String] startDate:
  ///   Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vVault’s creation date. 
  ///
  /// * [String] endDate:
  ///   Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date. 
  ///
  /// * [String] formatResult:
  ///   To request a CSV file of your audit history, use csv. 
  ///
  /// * [String] limit:
  ///   Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
  ///
  /// * [String] offset:
  ///   Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51. If omitted, defaults to 0.
  ///
  /// * [String] events:
  ///   Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of object audit events. The values passed to this parameter are case sensitive. For example, events=Copy,Edit,Delete. If omitted, defaults to all audit events.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> vobjectsObjectNameObjectRecordIdAudittrailGet(String objectName, String objectRecordId, { String? startDate, String? endDate, String? formatResult, String? limit, String? offset, String? events, String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await vobjectsObjectNameObjectRecordIdAudittrailGetWithHttpInfo(objectName, objectRecordId,  startDate: startDate, endDate: endDate, formatResult: formatResult, limit: limit, offset: offset, events: events, authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Object Record
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The object name__v field value (product__v, country__v, custom_object__c, etc.).
  ///
  /// * [String] objectRecordId (required):
  ///   The object record id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> vobjectsObjectNameObjectRecordIdGetWithHttpInfo(String objectName, String objectRecordId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/vobjects/{object_name}/{object_record_id}'
      .replaceAll('{object_name}', objectName)
      .replaceAll('{object_record_id}', objectRecordId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Object Record
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The object name__v field value (product__v, country__v, custom_object__c, etc.).
  ///
  /// * [String] objectRecordId (required):
  ///   The object record id field value.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> vobjectsObjectNameObjectRecordIdGet(String objectName, String objectRecordId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await vobjectsObjectNameObjectRecordIdGetWithHttpInfo(objectName, objectRecordId,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Create & Upsert Object Records
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The object name__v field value (product__v, country__v, custom_object__c, etc.).
  ///
  /// * [String] idParam:
  ///   To upsert object records, add `idParam={field_name}` to the request endpoint. You can use any object field which has `unique` set to `true` in the object metadata. For example, `idParam=external_id__v`.
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///   Can be text/csv or application/json
  ///
  /// * [String] accept:
  ///   Can be text/csv or application/json
  ///
  /// * [bool] xVaultAPIMigrationMode:
  ///   If set to `true`, Vault allows you to create or update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as `created_by__v`. Does not bypass record triggers. Use the `X-VaultAPI-NoTriggers` header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header.
  ///
  /// * [bool] xVaultAPINoTriggers:
  ///   If set to `true` and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers.
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> vobjectsObjectNamePostWithHttpInfo(String objectName, { String? idParam, String? authorization, String? contentType, String? accept, bool? xVaultAPIMigrationMode, bool? xVaultAPINoTriggers, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/vobjects/{object_name}'
      .replaceAll('{object_name}', objectName);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (idParam != null) {
      queryParams.addAll(_queryParams('', 'idParam', idParam));
    }

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIMigrationMode != null) {
      headerParams[r'X-VaultAPI-MigrationMode'] = parameterToString(xVaultAPIMigrationMode);
    }
    if (xVaultAPINoTriggers != null) {
      headerParams[r'X-VaultAPI-NoTriggers'] = parameterToString(xVaultAPINoTriggers);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Create & Upsert Object Records
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The object name__v field value (product__v, country__v, custom_object__c, etc.).
  ///
  /// * [String] idParam:
  ///   To upsert object records, add `idParam={field_name}` to the request endpoint. You can use any object field which has `unique` set to `true` in the object metadata. For example, `idParam=external_id__v`.
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///   Can be text/csv or application/json
  ///
  /// * [String] accept:
  ///   Can be text/csv or application/json
  ///
  /// * [bool] xVaultAPIMigrationMode:
  ///   If set to `true`, Vault allows you to create or update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as `created_by__v`. Does not bypass record triggers. Use the `X-VaultAPI-NoTriggers` header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header.
  ///
  /// * [bool] xVaultAPINoTriggers:
  ///   If set to `true` and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers.
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> vobjectsObjectNamePost(String objectName, { String? idParam, String? authorization, String? contentType, String? accept, bool? xVaultAPIMigrationMode, bool? xVaultAPINoTriggers, String? xVaultAPIClientID, }) async {
    final response = await vobjectsObjectNamePostWithHttpInfo(objectName,  idParam: idParam, authorization: authorization, contentType: contentType, accept: accept, xVaultAPIMigrationMode: xVaultAPIMigrationMode, xVaultAPINoTriggers: xVaultAPINoTriggers, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Update Object Records
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The object name__v field value (product__v, country__v, custom_object__c, etc.).
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///   Can be text/csv or application/json
  ///
  /// * [String] accept:
  ///   Can be text/csv or application/json
  ///
  /// * [bool] xVaultAPIMigrationMode:
  ///   If set to `true`, Vault allows you to update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as `created_by__v`. Does not bypass record triggers. Use the `X-VaultAPI-NoTriggers` header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header.
  ///
  /// * [bool] xVaultAPINoTriggers:
  ///   If set to `true` and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers.
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> vobjectsObjectNamePutWithHttpInfo(String objectName, { String? authorization, String? contentType, String? accept, bool? xVaultAPIMigrationMode, bool? xVaultAPINoTriggers, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/vobjects/{object_name}'
      .replaceAll('{object_name}', objectName);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIMigrationMode != null) {
      headerParams[r'X-VaultAPI-MigrationMode'] = parameterToString(xVaultAPIMigrationMode);
    }
    if (xVaultAPINoTriggers != null) {
      headerParams[r'X-VaultAPI-NoTriggers'] = parameterToString(xVaultAPINoTriggers);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'PUT',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Update Object Records
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The object name__v field value (product__v, country__v, custom_object__c, etc.).
  ///
  /// * [String] authorization:
  ///
  /// * [String] contentType:
  ///   Can be text/csv or application/json
  ///
  /// * [String] accept:
  ///   Can be text/csv or application/json
  ///
  /// * [bool] xVaultAPIMigrationMode:
  ///   If set to `true`, Vault allows you to update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as `created_by__v`. Does not bypass record triggers. Use the `X-VaultAPI-NoTriggers` header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header.
  ///
  /// * [bool] xVaultAPINoTriggers:
  ///   If set to `true` and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers.
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> vobjectsObjectNamePut(String objectName, { String? authorization, String? contentType, String? accept, bool? xVaultAPIMigrationMode, bool? xVaultAPINoTriggers, String? xVaultAPIClientID, }) async {
    final response = await vobjectsObjectNamePutWithHttpInfo(objectName,  authorization: authorization, contentType: contentType, accept: accept, xVaultAPIMigrationMode: xVaultAPIMigrationMode, xVaultAPINoTriggers: xVaultAPINoTriggers, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Remove Users & Groups from Roles on Object Records
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The name of the object where you want to remove roles.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> vobjectsObjectNameRolesDeleteWithHttpInfo(String objectName, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/vobjects/{object_name}/roles'
      .replaceAll('{object_name}', objectName);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'DELETE',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Remove Users & Groups from Roles on Object Records
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The name of the object where you want to remove roles.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> vobjectsObjectNameRolesDelete(String objectName, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await vobjectsObjectNameRolesDeleteWithHttpInfo(objectName,  authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Assign Users & Groups to Roles on Object Records
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The name of the object where you want to remove roles.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> vobjectsObjectNameRolesPostWithHttpInfo(String objectName, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/vobjects/{object_name}/roles'
      .replaceAll('{object_name}', objectName);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (contentType != null) {
      headerParams[r'Content-Type'] = parameterToString(contentType);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Assign Users & Groups to Roles on Object Records
  ///
  /// Parameters:
  ///
  /// * [String] objectName (required):
  ///   The name of the object where you want to remove roles.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] contentType:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> vobjectsObjectNameRolesPost(String objectName, { String? authorization, String? accept, String? contentType, String? xVaultAPIClientID, }) async {
    final response = await vobjectsObjectNameRolesPostWithHttpInfo(objectName,  authorization: authorization, accept: accept, contentType: contentType, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Retrieve Outbound Package Dependencies
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] packageId (required):
  ///   The ID of the outbound_package__v record from which to retrieve dependencies.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<Response> vobjectsOutboundPackageVPackageIdDependenciesGetWithHttpInfo(String packageId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    // ignore: prefer_const_declarations
    final path = r'/vobjects/outbound_package__v/{package_id}/dependencies'
      .replaceAll('{package_id}', packageId);

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (authorization != null) {
      headerParams[r'Authorization'] = parameterToString(authorization);
    }
    if (accept != null) {
      headerParams[r'Accept'] = parameterToString(accept);
    }
    if (xVaultAPIClientID != null) {
      headerParams[r'X-VaultAPI-ClientID'] = parameterToString(xVaultAPIClientID);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'GET',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Retrieve Outbound Package Dependencies
  ///
  /// Parameters:
  ///
  /// * [String] packageId (required):
  ///   The ID of the outbound_package__v record from which to retrieve dependencies.
  ///
  /// * [String] authorization:
  ///
  /// * [String] accept:
  ///
  /// * [String] xVaultAPIClientID:
  ///   Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  Future<void> vobjectsOutboundPackageVPackageIdDependenciesGet(String packageId, { String? authorization, String? accept, String? xVaultAPIClientID, }) async {
    final response = await vobjectsOutboundPackageVPackageIdDependenciesGetWithHttpInfo(packageId,  authorization: authorization, accept: accept, xVaultAPIClientID: xVaultAPIClientID, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }
}
