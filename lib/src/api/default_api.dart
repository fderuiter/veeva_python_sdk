//
// AUTO-GENERATED FILE, DO NOT MODIFY!
//

import 'dart:async';

import 'package:built_value/json_object.dart';
import 'package:built_value/serializer.dart';
import 'package:dio/dio.dart';

import 'package:built_collection/built_collection.dart';
import 'package:openapi/src/api_util.dart';
import 'package:openapi/src/model/vobjects_object_name_actions_merge_post_request_inner.dart';

class DefaultApi {

  final Dio _dio;

  final Serializers _serializers;

  const DefaultApi(this._dio, this._serializers);

  /// Retrieve API Versions
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> apiGet({ 
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/api/';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Content File
  /// 
  ///
  /// Parameters:
  /// * [componentTypeAndRecordName] - The component type of the record followed by the name of the record from which to retrieve the content file. The format is `{Componenttype}.{record_name}`. For example, `Formattedoutput.my_formatted_output__c`.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> apiMdlComponentsComponentTypeAndRecordNameFilesGet({ 
    required String componentTypeAndRecordName,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/api/mdl/components/{component_type_and_record_name}/files'.replaceAll('{' r'component_type_and_record_name' '}', encodeQueryParameter(_serializers, componentTypeAndRecordName, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Component Record (MDL)
  /// 
  ///
  /// Parameters:
  /// * [componentTypeAndRecordName] - The component type name (`Picklist`, `Docfield`, `Doctype`, etc.) followed by the name of the record from which to retrieve metadata. The format is `{Componenttype}.{record_name}`. For example, `Picklist.color__c`. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> apiMdlComponentsComponentTypeAndRecordNameGet({ 
    required String componentTypeAndRecordName,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/api/mdl/components/{component_type_and_record_name}'.replaceAll('{' r'component_type_and_record_name' '}', encodeQueryParameter(_serializers, componentTypeAndRecordName, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Asynchronous MDL Script Results
  /// 
  ///
  /// Parameters:
  /// * [jobId] 
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> apiMdlExecuteAsyncJobIdResultsGet({ 
    required String jobId,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/api/mdl/execute_async/{job_id}/results'.replaceAll('{' r'job_id' '}', encodeQueryParameter(_serializers, jobId, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Execute MDL Script Asynchronously
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> apiMdlExecuteAsyncPost({ 
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/api/mdl/execute_async';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Execute MDL Script
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> apiMdlExecutePost({ 
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/api/mdl/execute';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Upload Content File
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> apiMdlFilesPost({ 
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/api/mdl/files';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Audit Details
  /// 
  ///
  /// Parameters:
  /// * [auditTrailType] - The name of the specified audit type (document_audit_trail, object_audit_trail, etc). Use the Retrieve Audit Types API to retrieve types available in your Vault. Requests for login_audit_trail only accept one request per user at a time.
  /// * [startDate] - Specify a start date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days.
  /// * [endDate] - Specify an end date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days.
  /// * [allDates] - Set to true to request audit information for all dates. You must leave start_date and end_date blank when requesting an export of a full audit trail.
  /// * [formatResult] - To request a downloadable CSV file of your audit details, use csv. The response contains a jobId to retrieve the job status, which contains a link to download the CSV file. If omitted, the API returns a JSON response and does not start a job. If all_dates is true, this parameter is required.
  /// * [limit] - Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
  /// * [offset] - Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51. If omitted, defaults to 0.
  /// * [objects] - This is an optional parameter when specifying object_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more object names to retrieve their audit details. For example, objects=product__v,country__v. If omitted, defaults to all objects.
  /// * [events] - This is an optional parameter when specifying object_audit_trail or document_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more audit events to retrieve their audit details. For example, events=Edit,Delete,TaskAssignment. If omitted, defaults to all audit events. See Vault Help for full lists of object audit events and document audit events.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> audittrailAuditTrailTypeGet({ 
    required String auditTrailType,
    String? startDate,
    String? endDate,
    String? allDates,
    String? formatResult,
    String? limit,
    String? offset,
    String? objects,
    String? events,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/audittrail/{audit_trail_type}'.replaceAll('{' r'audit_trail_type' '}', encodeQueryParameter(_serializers, auditTrailType, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (startDate != null) r'start_date': encodeQueryParameter(_serializers, startDate, const FullType(String)),
      if (endDate != null) r'end_date': encodeQueryParameter(_serializers, endDate, const FullType(String)),
      if (allDates != null) r'all_dates': encodeQueryParameter(_serializers, allDates, const FullType(String)),
      if (formatResult != null) r'format_result': encodeQueryParameter(_serializers, formatResult, const FullType(String)),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(String)),
      if (offset != null) r'offset': encodeQueryParameter(_serializers, offset, const FullType(String)),
      if (objects != null) r'objects': encodeQueryParameter(_serializers, objects, const FullType(String)),
      if (events != null) r'events': encodeQueryParameter(_serializers, events, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Authentication Type Discovery
  /// 
  ///
  /// Parameters:
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> authDiscoveryPost({ 
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/auth/discovery';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// OAuth 2.0 / OpenID Connect
  /// 
  ///
  /// Parameters:
  /// * [oathOidcProfileId] 
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> authOauthSessionOathOidcProfileIdPost({ 
    required String oathOidcProfileId,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/auth/oauth/session/{oath_oidc_profile_id}'.replaceAll('{' r'oath_oidc_profile_id' '}', encodeQueryParameter(_serializers, oathOidcProfileId, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// User Name and Password
  /// 
  ///
  /// Parameters:
  /// * [contentType] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> authPost({ 
    String? contentType,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/auth';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (contentType != null) r'Content-Type': contentType,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Delete Single Source Code File
  /// 
  ///
  /// Parameters:
  /// * [className] - The fully qualified class name of your file.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> codeClassNameDelete({ 
    required String className,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/code/{class_name}'.replaceAll('{' r'class_name' '}', encodeQueryParameter(_serializers, className, const FullType(String)).toString());
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Disable Vault Extension
  /// 
  ///
  /// Parameters:
  /// * [className] - The fully qualified class name of your file.
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> codeClassNameDisablePut({ 
    required String className,
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/code/{class_name}/disable'.replaceAll('{' r'class_name' '}', encodeQueryParameter(_serializers, className, const FullType(String)).toString());
    final _options = Options(
      method: r'PUT',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Enable Vault Extension
  /// 
  ///
  /// Parameters:
  /// * [className] - The fully qualified class name of your file.
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> codeClassNameEnablePut({ 
    required String className,
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/code/{class_name}/enable'.replaceAll('{' r'class_name' '}', encodeQueryParameter(_serializers, className, const FullType(String)).toString());
    final _options = Options(
      method: r'PUT',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Single Source Code File
  /// 
  ///
  /// Parameters:
  /// * [className] - The fully qualified class name of your file.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> codeClassNameGet({ 
    required String className,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/code/{class_name}'.replaceAll('{' r'class_name' '}', encodeQueryParameter(_serializers, className, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve All Profiling Sessions
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> codeProfilerGet({ 
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/code/profiler';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Create Profiling Session
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [contentType] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> codeProfilerPost({ 
    String? authorization,
    String? contentType,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/code/profiler';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (contentType != null) r'Content-Type': contentType,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// End Profiling Session
  /// 
  ///
  /// Parameters:
  /// * [sessionName] - The name of the session, for example,  baseline__c.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> codeProfilerSessionNameActionsEndPost({ 
    required String sessionName,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/code/profiler/{session_name}/actions/end'.replaceAll('{' r'session_name' '}', encodeQueryParameter(_serializers, sessionName, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Delete Profiling Session
  /// 
  ///
  /// Parameters:
  /// * [sessionName] - The name of the session, for example,  baseline__c.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> codeProfilerSessionNameDelete({ 
    required String sessionName,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/code/profiler/{session_name}'.replaceAll('{' r'session_name' '}', encodeQueryParameter(_serializers, sessionName, const FullType(String)).toString());
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Profiling Session
  /// 
  ///
  /// Parameters:
  /// * [sessionName] - The name of the session, for example,  baseline__c.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> codeProfilerSessionNameGet({ 
    required String sessionName,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/code/profiler/{session_name}'.replaceAll('{' r'session_name' '}', encodeQueryParameter(_serializers, sessionName, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Download Profiling Session Results
  /// 
  ///
  /// Parameters:
  /// * [sessionName] - The name of the session, for example,  baseline__c.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> codeProfilerSessionNameResultsGet({ 
    required String sessionName,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/code/profiler/{session_name}/results'.replaceAll('{' r'session_name' '}', encodeQueryParameter(_serializers, sessionName, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Add or Replace Single Source Code File
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> codePut({ 
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/code';
    final _options = Options(
      method: r'PUT',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Specific Root Nodes
  /// 
  ///
  /// Parameters:
  /// * [edlHierarchyOrTemplate] - Choose to retrieve either edl_hierarchy__v or edl_template__v
  /// * [authorization] 
  /// * [contentType] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> compositesTreesEdlHierarchyOrTemplateActionsListnodesPost({ 
    required String edlHierarchyOrTemplate,
    String? authorization,
    String? contentType,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/composites/trees/{edl_hierarchy_or_template}/actions/listnodes'.replaceAll('{' r'edl_hierarchy_or_template' '}', encodeQueryParameter(_serializers, edlHierarchyOrTemplate, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (contentType != null) r'Content-Type': contentType,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve All Root Nodes
  /// 
  ///
  /// Parameters:
  /// * [edlHierarchyOrTemplate] 
  /// * [authorization] 
  /// * [contentType] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> compositesTreesEdlHierarchyOrTemplateGet({ 
    required String edlHierarchyOrTemplate,
    String? authorization,
    String? contentType,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/composites/trees/{edl_hierarchy_or_template}'.replaceAll('{' r'edl_hierarchy_or_template' '}', encodeQueryParameter(_serializers, edlHierarchyOrTemplate, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (contentType != null) r'Content-Type': contentType,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve a Node&#39;s Children
  /// 
  ///
  /// Parameters:
  /// * [parentNodeId] - The ID of a parent node in the hierarchy.
  /// * [authorization] 
  /// * [contentType] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> compositesTreesEdlHierarchyVParentNodeIdChildrenGet({ 
    required String parentNodeId,
    String? authorization,
    String? contentType,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/composites/trees/edl_hierarchy__v/{parent_node_id}/children'.replaceAll('{' r'parent_node_id' '}', encodeQueryParameter(_serializers, parentNodeId, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (contentType != null) r'Content-Type': contentType,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Update Node Order
  /// 
  ///
  /// Parameters:
  /// * [parentNodeId] - The ID of a parent node in the hierarchy.
  /// * [authorization] 
  /// * [contentType] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> compositesTreesEdlHierarchyVParentNodeIdChildrenPut({ 
    required String parentNodeId,
    String? authorization,
    String? contentType,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/composites/trees/edl_hierarchy__v/{parent_node_id}/children'.replaceAll('{' r'parent_node_id' '}', encodeQueryParameter(_serializers, parentNodeId, const FullType(String)).toString());
    final _options = Options(
      method: r'PUT',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (contentType != null) r'Content-Type': contentType,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Component Record (XML/JSON)
  /// 
  ///
  /// Parameters:
  /// * [componentTypeAndRecordName] - The component type name (`Picklist`, `Docfield`, `Doctype`, etc.) followed by the name of the record from which to retrieve metadata. The format is `{Componenttype}.{record_name}`. For example, `Picklist.color__c`. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint.
  /// * [loc] - When localized (translated) strings are available, retrieve them by setting loc to true.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> configurationComponentTypeAndRecordNameGet({ 
    required String componentTypeAndRecordName,
    String? loc,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/configuration/{component_type_and_record_name}'.replaceAll('{' r'component_type_and_record_name' '}', encodeQueryParameter(_serializers, componentTypeAndRecordName, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (loc != null) r'loc': encodeQueryParameter(_serializers, loc, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Component Record Collection
  /// 
  ///
  /// Parameters:
  /// * [componentType] 
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> configurationComponentTypeGet({ 
    required String componentType,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/configuration/{component_type}'.replaceAll('{' r'component_type' '}', encodeQueryParameter(_serializers, componentType, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Details from a Specific Object
  /// 
  ///
  /// Parameters:
  /// * [objectNameAndObjectType] - The object name followed by the object type in the format `Objecttype.{object_name}.{object_type}`. For example, `Objecttype.product__v.base__v`.
  /// * [loc] - When localized (translated) strings are available, retrieve them by setting loc to true.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> configurationObjectNameAndObjectTypeGet({ 
    required String objectNameAndObjectType,
    String? loc,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/configuration/{object_name_and_object_type}'.replaceAll('{' r'object_name_and_object_type' '}', encodeQueryParameter(_serializers, objectNameAndObjectType, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (loc != null) r'loc': encodeQueryParameter(_serializers, loc, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Details from All Object Types
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> configurationObjecttypeGet({ 
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/configuration/Objecttype';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Delete Lifecycle Role Assignment Override Rules
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> configurationRoleAssignmentRuleDelete({ 
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/configuration/role_assignment_rule';
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Lifecycle Role Assignment Rules (Default &amp; Override)
  /// 
  ///
  /// Parameters:
  /// * [lifecycleV] - Include the name of the lifecycle from which to retrieve information. For example: lifecycle_v=general_lifecycle__c
  /// * [roleV] - Include the name of the role from which to retrieve information. For example: role__v=editor__c
  /// * [productV] - Include the ID/name of a specific product to see product-based override rules to default users/allowed users for the lifecycle role. For example: product__v=0PR0011001 or product__v.name__v=CholeCap
  /// * [countryV] - Include the ID/name of a specific country to see country-based override rules to default users/allowed users for the lifecycle role. For example: country__v=0CR0022002 or country__v.name__v=United States
  /// * [studyV] - In eTMF Vaults only. Include the ID/name of a specific study to see study-based override rules to default users/allowed users for the lifecycle role. For example: study__v=0ST0021J01 or study__v.name__v=CholeCap Study
  /// * [studyCountryV] - In eTMF Vaults only. Include the ID/name of a specific study country to see study country-based override rules to default users/allowed users for the lifecycle role. For example: study_country__v=0SC0001001 or study_country__v.name__v=Germany
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> configurationRoleAssignmentRuleGet({ 
    String? lifecycleV,
    String? roleV,
    String? productV,
    String? countryV,
    String? studyV,
    String? studyCountryV,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/configuration/role_assignment_rule';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (lifecycleV != null) r'lifecycle__v': encodeQueryParameter(_serializers, lifecycleV, const FullType(String)),
      if (roleV != null) r'role__v': encodeQueryParameter(_serializers, roleV, const FullType(String)),
      if (productV != null) r'product__v': encodeQueryParameter(_serializers, productV, const FullType(String)),
      if (countryV != null) r'country__v': encodeQueryParameter(_serializers, countryV, const FullType(String)),
      if (studyV != null) r'study__v': encodeQueryParameter(_serializers, studyV, const FullType(String)),
      if (studyCountryV != null) r'study_country__v': encodeQueryParameter(_serializers, studyCountryV, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Create Lifecycle Role Assignment Override Rules
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> configurationRoleAssignmentRulePost({ 
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/configuration/role_assignment_rule';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Update Lifecycle Role Assignment Rules (Default &amp; Override)
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> configurationRoleAssignmentRulePut({ 
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/configuration/role_assignment_rule';
    final _options = Options(
      method: r'PUT',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Initiate Delegated Session
  /// 
  ///
  /// Parameters:
  /// * [authorization] - The sessionId of the currently authenticated user who will initiate the delegated session. Cannot be a delegated_sessionid.
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> delegationLoginPost({ 
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/delegation/login';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Delegations
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> delegationVaultsGet({ 
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/delegation/vaults';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Session Keep Alive
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> keepAlivePost({ 
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/keep-alive';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Limits on Objects
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> limitsGet({ 
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/limits';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Download Daily API Usage
  /// 
  ///
  /// Parameters:
  /// * [date] - The day to retrieve the API Usage log. Date is in UTC and follows the format YYYY-MM-DD. Date cannot be more than 30 days in the past.
  /// * [logFormat] - Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP. 
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> logsApiUsageGet({ 
    String? date,
    String? logFormat,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/logs/api_usage';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (date != null) r'date': encodeQueryParameter(_serializers, date, const FullType(String)),
      if (logFormat != null) r'log_format': encodeQueryParameter(_serializers, logFormat, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve All Debug Logs
  /// 
  ///
  /// Parameters:
  /// * [userId] - Filter results to retrieve the debug log for this user ID only. If omitted, this request retrieves debug logs for all users in the Vault.
  /// * [includeInactive] - Set to `true` to include debug log sessions with a status of `inactive__sys` in the response. If omitted, defaults to `false` and inactive sessions are not included in the response.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> logsCodeDebugGet({ 
    String? userId,
    bool? includeInactive,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/logs/code/debug';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (userId != null) r'user_id': encodeQueryParameter(_serializers, userId, const FullType(String)),
      if (includeInactive != null) r'include_inactive': encodeQueryParameter(_serializers, includeInactive, const FullType(bool)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Delete Debug Log
  /// 
  ///
  /// Parameters:
  /// * [id] - The ID of the debug log to delete.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> logsCodeDebugIdActionsResetDelete({ 
    required String id,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/logs/code/debug/{id}/actions/reset'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Reset Debug Log
  /// 
  ///
  /// Parameters:
  /// * [id] - The ID of the debug log to delete.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> logsCodeDebugIdActionsResetPost({ 
    required String id,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/logs/code/debug/{id}/actions/reset'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Download Debug Log Files
  /// 
  ///
  /// Parameters:
  /// * [id] - The ID of the debug log to download.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> logsCodeDebugIdFilesGet({ 
    required String id,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/logs/code/debug/{id}/files'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Single Debug Log
  /// 
  ///
  /// Parameters:
  /// * [id] - The ID of the debug log to retrieve.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> logsCodeDebugIdGet({ 
    required String id,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/logs/code/debug/{id}'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Create Debug Log
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> logsCodeDebugPost({ 
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/logs/code/debug';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Download SDK Runtime Log
  /// 
  ///
  /// Parameters:
  /// * [date] 
  /// * [logFormat] - Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP. 
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> logsCodeRuntimeGet({ 
    String? date,
    String? logFormat,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/logs/code/runtime';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (date != null) r'date': encodeQueryParameter(_serializers, date, const FullType(String)),
      if (logFormat != null) r'log_format': encodeQueryParameter(_serializers, logFormat, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Import Bulk Translation File
  /// 
  ///
  /// Parameters:
  /// * [messageType] - The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> messagesMessageTypeActionsImportPost({ 
    required String messageType,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/messages/{message_type}/actions/import'.replaceAll('{' r'message_type' '}', encodeQueryParameter(_serializers, messageType, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Export Bulk Translation File
  /// 
  ///
  /// Parameters:
  /// * [messageType] - The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys.
  /// * [lang] - A valid language code value, for example, en. Retrieve available values from the Admin Key (admin_key__sys) field on the Language (language__sys) object. Active and Inactive languages are both valid. 
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> messagesMessageTypeLanguageLangActionsExportPost({ 
    required String messageType,
    required String lang,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/messages/{message_type}/language/{lang}/actions/export'.replaceAll('{' r'message_type' '}', encodeQueryParameter(_serializers, messageType, const FullType(String)).toString()).replaceAll('{' r'lang' '}', encodeQueryParameter(_serializers, lang, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Audit Metadata
  /// 
  ///
  /// Parameters:
  /// * [auditTrailType] - The name of the specified audit type (document_audit_trail, object_audit_trail, etc).
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> metadataAudittrailAuditTrailTypeGet({ 
    required String auditTrailType,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/metadata/audittrail/{audit_trail_type}'.replaceAll('{' r'audit_trail_type' '}', encodeQueryParameter(_serializers, auditTrailType, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Audit Types
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> metadataAudittrailGet({ 
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/metadata/audittrail';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Component Type Metadata
  /// 
  ///
  /// Parameters:
  /// * [componentType] - The component type name (Picklist, Docfield, Doctype, etc.).
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> metadataComponentsComponentTypeGet({ 
    required String componentType,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/metadata/components/{component_type}'.replaceAll('{' r'component_type' '}', encodeQueryParameter(_serializers, componentType, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve All Component Metadata
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> metadataComponentsGet({ 
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/metadata/components';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Binder Template Node Metadata
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> metadataObjectsBindersTemplatesBindernodesGet({ 
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/metadata/objects/binders/templates/bindernodes';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Binder Template Metadata
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> metadataObjectsBindersTemplatesGet({ 
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/metadata/objects/binders/templates';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Annotation Placemark Type Metadata
  /// 
  ///
  /// Parameters:
  /// * [placemarkType] - The name of the placemark type. For example, sticky__sys.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGet({ 
    required String placemarkType,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/metadata/objects/documents/annotations/placemarks/types/{placemark_type}'.replaceAll('{' r'placemark_type' '}', encodeQueryParameter(_serializers, placemarkType, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Annotation Reference Type Metadata
  /// 
  ///
  /// Parameters:
  /// * [referenceType] 
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGet({ 
    required String referenceType,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/metadata/objects/documents/annotations/references/types/{reference_type}'.replaceAll('{' r'reference_type' '}', encodeQueryParameter(_serializers, referenceType, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Annotation Type Metadata
  /// 
  ///
  /// Parameters:
  /// * [annotationType] - The name of the annotation type. Valid annotation types include: `note__sys` `line__sys` `document_link__sys` `permalink_link__sys` `anchor__sys` `reply__sys` `external_link__sys`  The following annotation types are only valid in Medical and PromoMats Vaults:  `suggested_link__sys` `approved_link__sys` `auto_link__sys` `keyword_link__sys`
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGet({ 
    required String annotationType,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/metadata/objects/documents/annotations/types/{annotation_type}'.replaceAll('{' r'annotation_type' '}', encodeQueryParameter(_serializers, annotationType, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Document Event SubType Metadata
  /// 
  ///
  /// Parameters:
  /// * [eventType] - The event type. For example, distribution__v.
  /// * [eventSubtype] - The event subtype. For example, approved_email__v.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet({ 
    required String eventType,
    required String eventSubtype,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/metadata/objects/documents/events/{event_type}/types/{event_subtype}'.replaceAll('{' r'event_type' '}', encodeQueryParameter(_serializers, eventType, const FullType(String)).toString()).replaceAll('{' r'event_subtype' '}', encodeQueryParameter(_serializers, eventSubtype, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Document Event Types and Subtypes
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> metadataObjectsDocumentsEventsGet({ 
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/metadata/objects/documents/events';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Document Lock Metadata
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> metadataObjectsDocumentsLockGet({ 
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/metadata/objects/documents/lock';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Common Document Fields
  /// 
  ///
  /// Parameters:
  /// * [contentType] 
  /// * [accept] 
  /// * [authorization] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> metadataObjectsDocumentsPropertiesFindCommonPost({ 
    String? contentType,
    String? accept,
    String? authorization,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/metadata/objects/documents/properties/find_common';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (contentType != null) r'Content-Type': contentType,
        if (accept != null) r'Accept': accept,
        if (authorization != null) r'Authorization': authorization,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve All Document Fields
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> metadataObjectsDocumentsPropertiesGet({ 
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/metadata/objects/documents/properties';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Document Template Metadata
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> metadataObjectsDocumentsTemplatesGet({ 
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/metadata/objects/documents/templates';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve All Document Types
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> metadataObjectsDocumentsTypesGet({ 
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/metadata/objects/documents/types';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Document Type
  /// 
  ///
  /// Parameters:
  /// * [type] - The document type. See Retrieve Document Types.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> metadataObjectsDocumentsTypesTypeGet({ 
    required String type,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/metadata/objects/documents/types/{type}'.replaceAll('{' r'type' '}', encodeQueryParameter(_serializers, type, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Document Type Relationships
  /// 
  ///
  /// Parameters:
  /// * [type] - The document type. See Retrieve Document Types.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> metadataObjectsDocumentsTypesTypeRelationshipsGet({ 
    required String type,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/metadata/objects/documents/types/{type}/relationships'.replaceAll('{' r'type' '}', encodeQueryParameter(_serializers, type, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Document Classification
  /// 
  ///
  /// Parameters:
  /// * [type] - The document type. See Retrieve Document Types.
  /// * [subtype] - The document subtype. See Retrieve Document Types.
  /// * [classification] - The document classification. See Retrieve Document Types.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet({ 
    required String type,
    required String subtype,
    required String classification,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/metadata/objects/documents/types/{type}/subtypes/{subtype}/classifications/{classification}'.replaceAll('{' r'type' '}', encodeQueryParameter(_serializers, type, const FullType(String)).toString()).replaceAll('{' r'subtype' '}', encodeQueryParameter(_serializers, subtype, const FullType(String)).toString()).replaceAll('{' r'classification' '}', encodeQueryParameter(_serializers, classification, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Document Subtype
  /// 
  ///
  /// Parameters:
  /// * [type] - The document type. See Retrieve Document Types.
  /// * [subtype] - The document subtype. See Retrieve Document Types.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet({ 
    required String type,
    required String subtype,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/metadata/objects/documents/types/{type}/subtypes/{subtype}'.replaceAll('{' r'type' '}', encodeQueryParameter(_serializers, type, const FullType(String)).toString()).replaceAll('{' r'subtype' '}', encodeQueryParameter(_serializers, subtype, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Group Metadata
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> metadataObjectsGroupsGet({ 
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/metadata/objects/groups';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Security Policy Metadata
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> metadataObjectsSecuritypoliciesGet({ 
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/metadata/objects/securitypolicies';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve User Metadata
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> metadataObjectsUsersGet({ 
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/metadata/objects/users';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Archived Document Signature Metadata
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGet({ 
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/metadata/query/archived_documents/relationships/document_signature__sysr';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Document Signature Metadata
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> metadataQueryDocumentsRelationshipsDocumentSignatureSysrGet({ 
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/metadata/query/documents/relationships/document_signature__sysr';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Object Collection
  /// 
  ///
  /// Parameters:
  /// * [loc] - To retrieve localized (translated) strings, include the parameter loc=true. See the next request below for details.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> metadataVobjectsGet({ 
    bool? loc,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/metadata/vobjects';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (loc != null) r'loc': encodeQueryParameter(_serializers, loc, const FullType(bool)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Cancel Raw Object Deployment
  /// 
  ///
  /// Parameters:
  /// * [objectName] 
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> metadataVobjectsObjectNameActionsCanceldeploymentPost({ 
    required String objectName,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/metadata/vobjects/{object_name}/actions/canceldeployment'.replaceAll('{' r'object_name' '}', encodeQueryParameter(_serializers, objectName, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Object Field Metadata
  /// 
  ///
  /// Parameters:
  /// * [objectName] - The object name__v field value (product__v, country__v, custom_object__c, etc.).
  /// * [objectFieldName] - The object field name value (id, name__v, external_id__v, etc.).
  /// * [loc] - To retrieve localized (translated) strings, include the parameter loc=true. See the next request below for details.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> metadataVobjectsObjectNameFieldsObjectFieldNameGet({ 
    required String objectName,
    required String objectFieldName,
    bool? loc,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/metadata/vobjects/{object_name}/fields/{object_field_name}'.replaceAll('{' r'object_name' '}', encodeQueryParameter(_serializers, objectName, const FullType(String)).toString()).replaceAll('{' r'object_field_name' '}', encodeQueryParameter(_serializers, objectFieldName, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (loc != null) r'loc': encodeQueryParameter(_serializers, loc, const FullType(bool)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Object Metadata
  /// 
  ///
  /// Parameters:
  /// * [objectName] - The object name__v field value (product__v, country__v, custom_object__c, etc.).
  /// * [loc] - To retrieve localized (translated) strings, include the parameter loc=true. See the next request below for details.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> metadataVobjectsObjectNameGet({ 
    required String objectName,
    bool? loc,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/metadata/vobjects/{object_name}'.replaceAll('{' r'object_name' '}', encodeQueryParameter(_serializers, objectName, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (loc != null) r'loc': encodeQueryParameter(_serializers, loc, const FullType(bool)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Page Layouts
  /// 
  ///
  /// Parameters:
  /// * [objectName] 
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> metadataVobjectsObjectNamePageLayoutsGet({ 
    required String objectName,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/metadata/vobjects/{object_name}/page_layouts'.replaceAll('{' r'object_name' '}', encodeQueryParameter(_serializers, objectName, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Page Layout Metadata
  /// 
  ///
  /// Parameters:
  /// * [objectName] - The name of the object from which to retrieve page layout metadata.
  /// * [layoutName] - The name of the page layout from which to retrieve metadata.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> metadataVobjectsObjectNamePageLayoutsLayoutNameGet({ 
    required String objectName,
    required String layoutName,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/metadata/vobjects/{object_name}/page_layouts/{layout_name}'.replaceAll('{' r'object_name' '}', encodeQueryParameter(_serializers, objectName, const FullType(String)).toString()).replaceAll('{' r'layout_name' '}', encodeQueryParameter(_serializers, layoutName, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Email Notification Histories
  /// 
  ///
  /// Parameters:
  /// * [startDate] - Specify a start date to retrieve notification history. This date cannot be more than 2 years ago. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the start of the day. If start_date is omitted entirely, defaults to the start of the previous day. If you’ve specified a start_date, you must also specify an end_date.
  /// * [endDate] - Specify an end date to retrieve notification history. This date cannot be more than 30 days away from the specified start_date. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the time of the API request. If you’ve specified an end_date, you must also specify a start_date.
  /// * [allDates] - Set to true to request notification history for all dates. This is the same as requesting a full CSV export from the Vault UI. When requesting a full notification history, you must leave start_date and end_date blank and set format_result to csv. You can request an export of notification history for all_dates once every 24 hours.
  /// * [formatResult] - To request a downloadable CSV file of your notification history, set this parameter to csv. The response contains a jobId to retrieve the job status, which provides a link to download the CSV file. If omitted, the API returns a JSON response with notification history and does not start a job. If all_dates is true, this parameter must be csv.
  /// * [limit] - Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
  /// * [offset] - Paginate the results displayed per page by specifying the amount of offset from the entry returned. If omitted, defaults to 0.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> notificationsHistoriesGet({ 
    String? startDate,
    String? endDate,
    bool? allDates,
    String? formatResult,
    String? limit,
    String? offset,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/notifications/histories';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (startDate != null) r'start_date': encodeQueryParameter(_serializers, startDate, const FullType(String)),
      if (endDate != null) r'end_date': encodeQueryParameter(_serializers, endDate, const FullType(String)),
      if (allDates != null) r'all_dates': encodeQueryParameter(_serializers, allDates, const FullType(bool)),
      if (formatResult != null) r'format_result': encodeQueryParameter(_serializers, formatResult, const FullType(String)),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(String)),
      if (offset != null) r'offset': encodeQueryParameter(_serializers, offset, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Bulk Workflow Action Details
  /// 
  ///
  /// Parameters:
  /// * [action] 
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectWorkflowActionsActionGet({ 
    required String action,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/object/workflow/actions/{action}'.replaceAll('{' r'action' '}', encodeQueryParameter(_serializers, action, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Initiate Workflow Actions on Multiple Workflows
  /// 
  ///
  /// Parameters:
  /// * [action] 
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectWorkflowActionsActionPost({ 
    required String action,
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/object/workflow/actions/{action}'.replaceAll('{' r'action' '}', encodeQueryParameter(_serializers, action, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Cancel Workflow Tasks
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectWorkflowActionsCanceltasksPost({ 
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/object/workflow/actions/canceltasks';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Cancel Workflows
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectWorkflowActionsCancelworkflowsPost({ 
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/object/workflow/actions/cancelworkflows';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Bulk Workflow Actions
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectWorkflowActionsGet({ 
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/object/workflow/actions';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Reassign Workflow Tasks
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectWorkflowActionsReassigntasksPost({ 
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/object/workflow/actions/reassigntasks';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Replace Workflow Owner
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectWorkflowActionsReplaceworkflowownerPost({ 
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/object/workflow/actions/replaceworkflowowner';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Binder Export Results
  /// 
  ///
  /// Parameters:
  /// * [jobId] - The id value of the requested export job. This is returned with the export binder requests above.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsBindersActionsExportJobIdResultsGet({ 
    required String jobId,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/binders/actions/export/{job_id}/results'.replaceAll('{' r'job_id' '}', encodeQueryParameter(_serializers, jobId, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Export Binder (Latest Version)
  /// 
  ///
  /// Parameters:
  /// * [binderId] - The binder id field value.
  /// * [source_] - to include source content or not
  /// * [renditiontype] - to include viewable renditions
  /// * [docversion] - to include all major versions
  /// * [attachments] - to include all versions of attachments
  /// * [export_] - configurable filename metadata
  /// * [docfield] - to exclude document metadata csv
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsBindersBinderIdActionsExportPost({ 
    required String binderId,
    bool? source_,
    String? renditiontype,
    String? docversion,
    String? attachments,
    String? export_,
    bool? docfield,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/binders/{binder_id}/actions/export'.replaceAll('{' r'binder_id' '}', encodeQueryParameter(_serializers, binderId, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (source_ != null) r'source': encodeQueryParameter(_serializers, source_, const FullType(bool)),
      if (renditiontype != null) r'renditiontype': encodeQueryParameter(_serializers, renditiontype, const FullType(String)),
      if (docversion != null) r'docversion': encodeQueryParameter(_serializers, docversion, const FullType(String)),
      if (attachments != null) r'attachments': encodeQueryParameter(_serializers, attachments, const FullType(String)),
      if (export_ != null) r'export': encodeQueryParameter(_serializers, export_, const FullType(String)),
      if (docfield != null) r'docfield': encodeQueryParameter(_serializers, docfield, const FullType(bool)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Refresh Binder Auto-Filing
  /// 
  ///
  /// Parameters:
  /// * [binderId] - The binder id field value.
  /// * [authorization] 
  /// * [contentType] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsBindersBinderIdActionsPost({ 
    required String binderId,
    String? authorization,
    String? contentType,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/binders/{binder_id}/actions'.replaceAll('{' r'binder_id' '}', encodeQueryParameter(_serializers, binderId, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (contentType != null) r'Content-Type': contentType,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Update Binding Rule
  /// 
  ///
  /// Parameters:
  /// * [binderId] - The binder id field value.
  /// * [contentType] 
  /// * [accept] 
  /// * [authorization] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsBindersBinderIdBindingRulePut({ 
    required String binderId,
    String? contentType,
    String? accept,
    String? authorization,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/binders/{binder_id}/binding_rule'.replaceAll('{' r'binder_id' '}', encodeQueryParameter(_serializers, binderId, const FullType(String)).toString());
    final _options = Options(
      method: r'PUT',
      headers: <String, dynamic>{
        if (contentType != null) r'Content-Type': contentType,
        if (accept != null) r'Accept': accept,
        if (authorization != null) r'Authorization': authorization,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Delete Binder
  /// 
  ///
  /// Parameters:
  /// * [binderId] - The binder id field value.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsBindersBinderIdDelete({ 
    required String binderId,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/binders/{binder_id}'.replaceAll('{' r'binder_id' '}', encodeQueryParameter(_serializers, binderId, const FullType(String)).toString());
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Update Binder Document Binding Rule
  /// 
  ///
  /// Parameters:
  /// * [binderId] - The binder id field value.
  /// * [nodeId] - The binder node id field value.
  /// * [authorization] 
  /// * [contentType] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsBindersBinderIdDocumentsNodeIdBindingRulePut({ 
    required String binderId,
    required String nodeId,
    String? authorization,
    String? contentType,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/binders/{binder_id}/documents/{node_id}/binding_rule'.replaceAll('{' r'binder_id' '}', encodeQueryParameter(_serializers, binderId, const FullType(String)).toString()).replaceAll('{' r'node_id' '}', encodeQueryParameter(_serializers, nodeId, const FullType(String)).toString());
    final _options = Options(
      method: r'PUT',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (contentType != null) r'Content-Type': contentType,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Add Document to Binder
  /// 
  ///
  /// Parameters:
  /// * [binderId] - The binder id field value.
  /// * [authorization] 
  /// * [contentType] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsBindersBinderIdDocumentsPost({ 
    required String binderId,
    String? authorization,
    String? contentType,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/binders/{binder_id}/documents'.replaceAll('{' r'binder_id' '}', encodeQueryParameter(_serializers, binderId, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (contentType != null) r'Content-Type': contentType,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Remove Document from Binder
  /// 
  ///
  /// Parameters:
  /// * [binderId] - The binder id field value.
  /// * [sectionId] - The binder node id field value.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsBindersBinderIdDocumentsSectionIdDelete({ 
    required String binderId,
    required String sectionId,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/binders/{binder_id}/documents/{section_id}'.replaceAll('{' r'binder_id' '}', encodeQueryParameter(_serializers, binderId, const FullType(String)).toString()).replaceAll('{' r'section_id' '}', encodeQueryParameter(_serializers, sectionId, const FullType(String)).toString());
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Move Document in Binder
  /// 
  ///
  /// Parameters:
  /// * [binderId] - The binder id field value.
  /// * [sectionId] - The binder node id field value.
  /// * [authorization] 
  /// * [contentType] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsBindersBinderIdDocumentsSectionIdPut({ 
    required String binderId,
    required String sectionId,
    String? authorization,
    String? contentType,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/binders/{binder_id}/documents/{section_id}'.replaceAll('{' r'binder_id' '}', encodeQueryParameter(_serializers, binderId, const FullType(String)).toString()).replaceAll('{' r'section_id' '}', encodeQueryParameter(_serializers, sectionId, const FullType(String)).toString());
    final _options = Options(
      method: r'PUT',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (contentType != null) r'Content-Type': contentType,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Binder
  /// 
  ///
  /// Parameters:
  /// * [binderId] - The binder id field value.
  /// * [depth] - To retrieve all information in all levels of the binder, set this to all. By default, only one level is returned.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsBindersBinderIdGet({ 
    required String binderId,
    String? depth,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/binders/{binder_id}'.replaceAll('{' r'binder_id' '}', encodeQueryParameter(_serializers, binderId, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (depth != null) r'depth': encodeQueryParameter(_serializers, depth, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Create Binder Version
  /// 
  ///
  /// Parameters:
  /// * [binderId] - The binder id field value.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsBindersBinderIdPost({ 
    required String binderId,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/binders/{binder_id}'.replaceAll('{' r'binder_id' '}', encodeQueryParameter(_serializers, binderId, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Update Binder
  /// 
  ///
  /// Parameters:
  /// * [binderId] - The binder id field value.
  /// * [authorization] 
  /// * [contentType] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsBindersBinderIdPut({ 
    required String binderId,
    String? authorization,
    String? contentType,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/binders/{binder_id}'.replaceAll('{' r'binder_id' '}', encodeQueryParameter(_serializers, binderId, const FullType(String)).toString());
    final _options = Options(
      method: r'PUT',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (contentType != null) r'Content-Type': contentType,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Remove Users &amp; Groups from Roles on a Single Binder
  /// 
  ///
  /// Parameters:
  /// * [binderId] - The id value of the binder from which to remove roles.
  /// * [roleNameAndUserOrGroup] - The name of the role from which to remove the user or group followed by either `user` or `group`. The format is `{role_name}.{user_or_group}`. For example, `consumer__v.user`.
  /// * [id] - The id value of the user or group to remove from the role.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete({ 
    required String binderId,
    required String roleNameAndUserOrGroup,
    required String id,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/binders/{binder_id}/roles/{role_name_and_user_or_group}/{id}'.replaceAll('{' r'binder_id' '}', encodeQueryParameter(_serializers, binderId, const FullType(String)).toString()).replaceAll('{' r'role_name_and_user_or_group' '}', encodeQueryParameter(_serializers, roleNameAndUserOrGroup, const FullType(String)).toString()).replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Update Binder Section Binding Rule
  /// 
  ///
  /// Parameters:
  /// * [binderId] - The binder id field value.
  /// * [nodeId] - The binder node id field value.
  /// * [contentType] 
  /// * [accept] 
  /// * [authorization] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsBindersBinderIdSectionsNodeIdBindingRulePut({ 
    required String binderId,
    required String nodeId,
    String? contentType,
    String? accept,
    String? authorization,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/binders/{binder_id}/sections/{node_id}/binding_rule'.replaceAll('{' r'binder_id' '}', encodeQueryParameter(_serializers, binderId, const FullType(String)).toString()).replaceAll('{' r'node_id' '}', encodeQueryParameter(_serializers, nodeId, const FullType(String)).toString());
    final _options = Options(
      method: r'PUT',
      headers: <String, dynamic>{
        if (contentType != null) r'Content-Type': contentType,
        if (accept != null) r'Accept': accept,
        if (authorization != null) r'Authorization': authorization,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Update Binder Section
  /// 
  ///
  /// Parameters:
  /// * [binderId] - The binder id field value.
  /// * [nodeId] - The binder node id of the section.
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsBindersBinderIdSectionsNodeIdPut({ 
    required String binderId,
    required String nodeId,
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/binders/{binder_id}/sections/{node_id}'.replaceAll('{' r'binder_id' '}', encodeQueryParameter(_serializers, binderId, const FullType(String)).toString()).replaceAll('{' r'node_id' '}', encodeQueryParameter(_serializers, nodeId, const FullType(String)).toString());
    final _options = Options(
      method: r'PUT',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Create Binder Section
  /// 
  ///
  /// Parameters:
  /// * [binderId] - The binder id field value.
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsBindersBinderIdSectionsPost({ 
    required String binderId,
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/binders/{binder_id}/sections'.replaceAll('{' r'binder_id' '}', encodeQueryParameter(_serializers, binderId, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Delete Binder Section
  /// 
  ///
  /// Parameters:
  /// * [binderId] - The binder id field value.
  /// * [sectionId] - The binder node id field value.
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsBindersBinderIdSectionsSectionIdDelete({ 
    required String binderId,
    required String sectionId,
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/binders/{binder_id}/sections/{section_id}'.replaceAll('{' r'binder_id' '}', encodeQueryParameter(_serializers, binderId, const FullType(String)).toString()).replaceAll('{' r'section_id' '}', encodeQueryParameter(_serializers, sectionId, const FullType(String)).toString());
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Binder Sections
  /// 
  ///
  /// Parameters:
  /// * [binderId] - The binder id field value.
  /// * [sectionId] - The binder node id field value.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsBindersBinderIdSectionsSectionIdGet({ 
    required String binderId,
    required String sectionId,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/binders/{binder_id}/sections/{section_id}'.replaceAll('{' r'binder_id' '}', encodeQueryParameter(_serializers, binderId, const FullType(String)).toString()).replaceAll('{' r'section_id' '}', encodeQueryParameter(_serializers, sectionId, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve All Binder Versions
  /// 
  ///
  /// Parameters:
  /// * [binderId] - The binder id field value.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsBindersBinderIdVersionsGet({ 
    required String binderId,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/binders/{binder_id}/versions'.replaceAll('{' r'binder_id' '}', encodeQueryParameter(_serializers, binderId, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Export Binder (Specific Version)
  /// 
  ///
  /// Parameters:
  /// * [binderId] - The binder id field value.
  /// * [majorVersion] - The binder major_version_number__v field value.
  /// * [minorVersion] - The binder minor_version_number__v field value.
  /// * [source_] - to include source content or not
  /// * [renditiontype] - to include viewable renditions
  /// * [docversion] - to include all major versions
  /// * [attachments] - to include all versions of attachments
  /// * [export_] - configurable filename metadata
  /// * [docfield] - to exclude document metadata csv
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost({ 
    required String binderId,
    required String majorVersion,
    required String minorVersion,
    bool? source_,
    String? renditiontype,
    String? docversion,
    String? attachments,
    String? export_,
    bool? docfield,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/actions/export'.replaceAll('{' r'binder_id' '}', encodeQueryParameter(_serializers, binderId, const FullType(String)).toString()).replaceAll('{' r'major_version' '}', encodeQueryParameter(_serializers, majorVersion, const FullType(String)).toString()).replaceAll('{' r'minor_version' '}', encodeQueryParameter(_serializers, minorVersion, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (source_ != null) r'source': encodeQueryParameter(_serializers, source_, const FullType(bool)),
      if (renditiontype != null) r'renditiontype': encodeQueryParameter(_serializers, renditiontype, const FullType(String)),
      if (docversion != null) r'docversion': encodeQueryParameter(_serializers, docversion, const FullType(String)),
      if (attachments != null) r'attachments': encodeQueryParameter(_serializers, attachments, const FullType(String)),
      if (export_ != null) r'export': encodeQueryParameter(_serializers, export_, const FullType(String)),
      if (docfield != null) r'docfield': encodeQueryParameter(_serializers, docfield, const FullType(bool)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Delete Binder Version
  /// 
  ///
  /// Parameters:
  /// * [binderId] - The binder id field value.
  /// * [majorVersion] - The binder major_version_number__v field value.
  /// * [minorVersion] - The binder minor_version_number__v field value.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete({ 
    required String binderId,
    required String majorVersion,
    required String minorVersion,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/binders/{binder_id}/versions/{major_version}/{minor_version}'.replaceAll('{' r'binder_id' '}', encodeQueryParameter(_serializers, binderId, const FullType(String)).toString()).replaceAll('{' r'major_version' '}', encodeQueryParameter(_serializers, majorVersion, const FullType(String)).toString()).replaceAll('{' r'minor_version' '}', encodeQueryParameter(_serializers, minorVersion, const FullType(String)).toString());
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Binder Version
  /// 
  ///
  /// Parameters:
  /// * [binderId] - The binder id field value.
  /// * [majorVersion] - The binder major_version_number__v field value.
  /// * [minorVersion] - The binder minor_version_number__v field value.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsBindersBinderIdVersionsMajorVersionMinorVersionGet({ 
    required String binderId,
    required String majorVersion,
    required String minorVersion,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/binders/{binder_id}/versions/{major_version}/{minor_version}'.replaceAll('{' r'binder_id' '}', encodeQueryParameter(_serializers, binderId, const FullType(String)).toString()).replaceAll('{' r'major_version' '}', encodeQueryParameter(_serializers, majorVersion, const FullType(String)).toString()).replaceAll('{' r'minor_version' '}', encodeQueryParameter(_serializers, minorVersion, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Update Binder Version
  /// 
  ///
  /// Parameters:
  /// * [binderId] - The binder id field value.
  /// * [majorVersion] - The binder major_version_number__v field value.
  /// * [minorVersion] - The binder minor_version_number__v field value.
  /// * [authorization] 
  /// * [contentType] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsBindersBinderIdVersionsMajorVersionMinorVersionPut({ 
    required String binderId,
    required String majorVersion,
    required String minorVersion,
    String? authorization,
    String? contentType,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/binders/{binder_id}/versions/{major_version}/{minor_version}'.replaceAll('{' r'binder_id' '}', encodeQueryParameter(_serializers, binderId, const FullType(String)).toString()).replaceAll('{' r'major_version' '}', encodeQueryParameter(_serializers, majorVersion, const FullType(String)).toString()).replaceAll('{' r'minor_version' '}', encodeQueryParameter(_serializers, minorVersion, const FullType(String)).toString());
    final _options = Options(
      method: r'PUT',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (contentType != null) r'Content-Type': contentType,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Create Binder Relationship
  /// 
  ///
  /// Parameters:
  /// * [binderId] - The binder id field value.
  /// * [majorVersion] - The binder major_version_number__v field value.
  /// * [minorVersion] - The binder minor_version_number__v field value.
  /// * [authorization] 
  /// * [contentType] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost({ 
    required String binderId,
    required String majorVersion,
    required String minorVersion,
    String? authorization,
    String? contentType,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships'.replaceAll('{' r'binder_id' '}', encodeQueryParameter(_serializers, binderId, const FullType(String)).toString()).replaceAll('{' r'major_version' '}', encodeQueryParameter(_serializers, majorVersion, const FullType(String)).toString()).replaceAll('{' r'minor_version' '}', encodeQueryParameter(_serializers, minorVersion, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (contentType != null) r'Content-Type': contentType,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Delete Binder Relationship
  /// 
  ///
  /// Parameters:
  /// * [binderId] - The binder id field value.
  /// * [majorVersion] - The binder major_version_number__v field value.
  /// * [minorVersion] - The binder minor_version_number__v field value.
  /// * [relationshipId] - The binder relationship id field value.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete({ 
    required String binderId,
    required String majorVersion,
    required String minorVersion,
    required String relationshipId,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}'.replaceAll('{' r'binder_id' '}', encodeQueryParameter(_serializers, binderId, const FullType(String)).toString()).replaceAll('{' r'major_version' '}', encodeQueryParameter(_serializers, majorVersion, const FullType(String)).toString()).replaceAll('{' r'minor_version' '}', encodeQueryParameter(_serializers, minorVersion, const FullType(String)).toString()).replaceAll('{' r'relationship_id' '}', encodeQueryParameter(_serializers, relationshipId, const FullType(String)).toString());
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Binder Relationship
  /// 
  ///
  /// Parameters:
  /// * [binderId] - The binder id field value.
  /// * [majorVersion] - The binder major_version_number__v field value.
  /// * [minorVersion] - The binder minor_version_number__v field value.
  /// * [relationshipId] - The binder relationship id field value.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet({ 
    required String binderId,
    required String majorVersion,
    required String minorVersion,
    required String relationshipId,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}'.replaceAll('{' r'binder_id' '}', encodeQueryParameter(_serializers, binderId, const FullType(String)).toString()).replaceAll('{' r'major_version' '}', encodeQueryParameter(_serializers, majorVersion, const FullType(String)).toString()).replaceAll('{' r'minor_version' '}', encodeQueryParameter(_serializers, minorVersion, const FullType(String)).toString()).replaceAll('{' r'relationship_id' '}', encodeQueryParameter(_serializers, relationshipId, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Binder Version Section
  /// 
  ///
  /// Parameters:
  /// * [binderId] - The binder id field value.
  /// * [majorVersion] - The binder major_version_number__v field value.
  /// * [minorVersion] - The binder minor_version_number__v field value.
  /// * [sectionId] - Retrieve all sections (documents and subsections) in a binder’s sub-level node. If not included, all sections from the binder’s top-level root node will be returned.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet({ 
    required String binderId,
    required String majorVersion,
    required String minorVersion,
    required String sectionId,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/sections/{section_id}'.replaceAll('{' r'binder_id' '}', encodeQueryParameter(_serializers, binderId, const FullType(String)).toString()).replaceAll('{' r'major_version' '}', encodeQueryParameter(_serializers, majorVersion, const FullType(String)).toString()).replaceAll('{' r'minor_version' '}', encodeQueryParameter(_serializers, minorVersion, const FullType(String)).toString()).replaceAll('{' r'section_id' '}', encodeQueryParameter(_serializers, sectionId, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve All Binder Roles
  /// 
  ///
  /// Parameters:
  /// * [id] 
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsBindersIdRolesGet({ 
    required String id,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/binders/{id}/roles'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Assign Users &amp; Groups to Roles on a Single Binder
  /// 
  ///
  /// Parameters:
  /// * [id] 
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsBindersIdRolesPost({ 
    required String id,
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/binders/{id}/roles'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Document Role
  /// 
  ///
  /// Parameters:
  /// * [id] - The binder `id`.
  /// * [roleName] - The name of the role to retrieve. For example, `owner__v`.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsBindersIdRolesRoleNameGet({ 
    required String id,
    required String roleName,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/binders/{id}/roles/{role_name}'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString()).replaceAll('{' r'role_name' '}', encodeQueryParameter(_serializers, roleName, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Binder User Actions
  /// 
  ///
  /// Parameters:
  /// * [id] - The binder id field value from which to retrieve available user actions.
  /// * [majorVersion] - The major version number of the binder.
  /// * [minorVersion] - The minor version number of the binder.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet({ 
    required String id,
    required String majorVersion,
    required String minorVersion,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString()).replaceAll('{' r'major_version' '}', encodeQueryParameter(_serializers, majorVersion, const FullType(String)).toString()).replaceAll('{' r'minor_version' '}', encodeQueryParameter(_serializers, minorVersion, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Binder Entry Criteria
  /// 
  ///
  /// Parameters:
  /// * [id] - The binder id field value from which to retrieve available user actions.
  /// * [majorVersion] - The major version number of the binder.
  /// * [minorVersion] - The minor version number of the binder.
  /// * [nameV] - The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet({ 
    required String id,
    required String majorVersion,
    required String minorVersion,
    required String nameV,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}/entry_requirements'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString()).replaceAll('{' r'major_version' '}', encodeQueryParameter(_serializers, majorVersion, const FullType(String)).toString()).replaceAll('{' r'minor_version' '}', encodeQueryParameter(_serializers, minorVersion, const FullType(String)).toString()).replaceAll('{' r'name__v' '}', encodeQueryParameter(_serializers, nameV, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Initiate Binder User Action
  /// 
  ///
  /// Parameters:
  /// * [id] - The binder id field value from which to retrieve available user actions.
  /// * [majorVersion] - The major version number of the binder.
  /// * [minorVersion] - The minor version number of the binder.
  /// * [nameV] - The action name__v field value to initiate. This is retrieved from the Retrieve User Action request.
  /// * [authorization] 
  /// * [contentType] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut({ 
    required String id,
    required String majorVersion,
    required String minorVersion,
    required String nameV,
    String? authorization,
    String? contentType,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString()).replaceAll('{' r'major_version' '}', encodeQueryParameter(_serializers, majorVersion, const FullType(String)).toString()).replaceAll('{' r'minor_version' '}', encodeQueryParameter(_serializers, minorVersion, const FullType(String)).toString()).replaceAll('{' r'name__v' '}', encodeQueryParameter(_serializers, nameV, const FullType(String)).toString());
    final _options = Options(
      method: r'PUT',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (contentType != null) r'Content-Type': contentType,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve User Actions on Multiple Binders
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsBindersLifecycleActionsPost({ 
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/binders/lifecycle_actions';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Initiate Bulk Binder User Actions
  /// 
  ///
  /// Parameters:
  /// * [userActionName] - The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Binders endpoint.
  /// * [authorization] 
  /// * [contentType] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsBindersLifecycleActionsUserActionNamePut({ 
    required String userActionName,
    String? authorization,
    String? contentType,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/binders/lifecycle_actions/{user_action_name}'.replaceAll('{' r'user_action_name' '}', encodeQueryParameter(_serializers, userActionName, const FullType(String)).toString());
    final _options = Options(
      method: r'PUT',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (contentType != null) r'Content-Type': contentType,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Create Binder
  /// 
  ///
  /// Parameters:
  /// * [async_] - When creating a binder, the binder metadata is indexed synchronously by default. To process the indexing asynchronously, include a query parameter async set to true (objects/binders?async=true). This helps speed up the response time from Vault when processing large amounts of data. 
  /// * [authorization] 
  /// * [contentType] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsBindersPost({ 
    bool? async_,
    String? authorization,
    String? contentType,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/binders';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (contentType != null) r'Content-Type': contentType,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (async_ != null) r'async': encodeQueryParameter(_serializers, async_, const FullType(bool)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Binder Template Collection
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsBindersTemplatesGet({ 
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/binders/templates';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Create Binder Template
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsBindersTemplatesPost({ 
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/binders/templates';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Update Binder Template
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsBindersTemplatesPut({ 
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/binders/templates';
    final _options = Options(
      method: r'PUT',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Binder Template Node Attributes
  /// 
  ///
  /// Parameters:
  /// * [templateName] - The binder template name__v field value.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsBindersTemplatesTemplateNameBindernodesGet({ 
    required String templateName,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/binders/templates/{template_name}/bindernodes'.replaceAll('{' r'template_name' '}', encodeQueryParameter(_serializers, templateName, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Create Binder Template Node
  /// 
  ///
  /// Parameters:
  /// * [templateName] - The binder template name__v field value.
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsBindersTemplatesTemplateNameBindernodesPost({ 
    required String templateName,
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/binders/templates/{template_name}/bindernodes'.replaceAll('{' r'template_name' '}', encodeQueryParameter(_serializers, templateName, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Replace Binder Template Nodes
  /// 
  ///
  /// Parameters:
  /// * [templateName] - The binder template name__v field value.
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsBindersTemplatesTemplateNameBindernodesPut({ 
    required String templateName,
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/binders/templates/{template_name}/bindernodes'.replaceAll('{' r'template_name' '}', encodeQueryParameter(_serializers, templateName, const FullType(String)).toString());
    final _options = Options(
      method: r'PUT',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Delete Binder Template
  /// 
  ///
  /// Parameters:
  /// * [templateName] - The binder template name__v field value.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsBindersTemplatesTemplateNameDelete({ 
    required String templateName,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/binders/templates/{template_name}'.replaceAll('{' r'template_name' '}', encodeQueryParameter(_serializers, templateName, const FullType(String)).toString());
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Binder Template Attributes
  /// 
  ///
  /// Parameters:
  /// * [templateName] - The binder template name__v field value.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsBindersTemplatesTemplateNameGet({ 
    required String templateName,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/binders/templates/{template_name}'.replaceAll('{' r'template_name' '}', encodeQueryParameter(_serializers, templateName, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Deleted Document IDs
  /// 
  ///
  /// Parameters:
  /// * [startDate] - Specify a date (no more than 30 days past) after which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z
  /// * [endDate] - Specify a date (no more than 30 days past) before which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z 
  /// * [authorization] 
  /// * [contentType] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDeletionsDocumentsGet({ 
    String? startDate,
    String? endDate,
    String? authorization,
    String? contentType,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/deletions/documents';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (contentType != null) r'Content-Type': contentType,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (startDate != null) r'start_date': encodeQueryParameter(_serializers, startDate, const FullType(String)),
      if (endDate != null) r'end_date': encodeQueryParameter(_serializers, endDate, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Deleted Object Record ID
  /// 
  ///
  /// Parameters:
  /// * [objectName] - The object name__v field value (product__v, country__v, custom_object__c, etc.).
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDeletionsVobjectsObjectNameGet({ 
    required String objectName,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/deletions/vobjects/{object_name}'.replaceAll('{' r'object_name' '}', encodeQueryParameter(_serializers, objectName, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve All Document Workflows
  /// 
  ///
  /// Parameters:
  /// * [loc] - When localized (translated) strings are available, retrieve them by setting loc to true.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsActionsGet({ 
    bool? loc,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/actions';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (loc != null) r'loc': encodeQueryParameter(_serializers, loc, const FullType(bool)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Download Controlled Copy Job Results
  /// 
  ///
  /// Parameters:
  /// * [lifecycleAndStateAndAction] - The `name__v` values for the lifecycle, state, and action in the format `{lifecycle_name}.{state_name}.{action_name}`. To get this value, [Retrieve the Job Status](https://developer.veevavault.com/api/24.3#RetrieveJobStatus) and find the `href` under the `artifacts` link.
  /// * [jobId] 
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet({ 
    required String lifecycleAndStateAndAction,
    required String jobId,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/actions/{lifecycle_and_state_and_action}/{job_id}/results'.replaceAll('{' r'lifecycle_and_state_and_action' '}', encodeQueryParameter(_serializers, lifecycleAndStateAndAction, const FullType(String)).toString()).replaceAll('{' r'job_id' '}', encodeQueryParameter(_serializers, jobId, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Document Workflow Details
  /// 
  ///
  /// Parameters:
  /// * [workflowName] - The document workflow name value.
  /// * [loc] - When localized (translated) strings are available, retrieve them by setting loc to true.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsActionsWorkflowNameGet({ 
    required String workflowName,
    bool? loc,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/actions/{workflow_name}'.replaceAll('{' r'workflow_name' '}', encodeQueryParameter(_serializers, workflowName, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (loc != null) r'loc': encodeQueryParameter(_serializers, loc, const FullType(bool)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Initiate Document Workflow
  /// 
  ///
  /// Parameters:
  /// * [workflowName] - The document workflow name value.
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsActionsWorkflowNamePost({ 
    required String workflowName,
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/actions/{workflow_name}'.replaceAll('{' r'workflow_name' '}', encodeQueryParameter(_serializers, workflowName, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Delete Annotations
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsAnnotationsBatchDelete({ 
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/annotations/batch';
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Create Multiple Annotations
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [contentType] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsAnnotationsBatchPost({ 
    required String authorization,
    required String contentType,
    required String accept,
    required String xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/annotations/batch';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        r'Authorization': authorization,
        r'Content-Type': contentType,
        r'Accept': accept,
        r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Update Annotations
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [contentType] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsAnnotationsBatchPut({ 
    String? authorization,
    String? contentType,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/annotations/batch';
    final _options = Options(
      method: r'PUT',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (contentType != null) r'Content-Type': contentType,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Add Annotation Replies
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [contentType] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsAnnotationsRepliesBatchPost({ 
    String? authorization,
    String? contentType,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/annotations/replies/batch';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (contentType != null) r'Content-Type': contentType,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Delete Multiple Document Attachments
  /// 
  ///
  /// Parameters:
  /// * [accept] 
  /// * [authorization] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsAttachmentsBatchDelete({ 
    String? accept,
    String? authorization,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/attachments/batch';
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        if (accept != null) r'Accept': accept,
        if (authorization != null) r'Authorization': authorization,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Create Multiple Document Attachments
  /// 
  ///
  /// Parameters:
  /// * [accept] 
  /// * [authorization] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsAttachmentsBatchPost({ 
    String? accept,
    String? authorization,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/attachments/batch';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (accept != null) r'Accept': accept,
        if (authorization != null) r'Authorization': authorization,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Update Multiple Document Attachment Descriptions
  /// 
  ///
  /// Parameters:
  /// * [accept] 
  /// * [authorization] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsAttachmentsBatchPut({ 
    String? accept,
    String? authorization,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/attachments/batch';
    final _options = Options(
      method: r'PUT',
      headers: <String, dynamic>{
        if (accept != null) r'Accept': accept,
        if (authorization != null) r'Authorization': authorization,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Document Export Results
  /// 
  ///
  /// Parameters:
  /// * [jobId] - The id value of the requested export job. This is returned with the export document requests.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsBatchActionsFileextractJobIdResultsGet({ 
    required String jobId,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/batch/actions/fileextract/{job_id}/results'.replaceAll('{' r'job_id' '}', encodeQueryParameter(_serializers, jobId, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Export Documents
  /// 
  ///
  /// Parameters:
  /// * [source_] - Optional: To exclude source files, include a query parameter source=false. If omitted, defaults to true.
  /// * [renditions] - Optional: To include renditions, include a query parameter renditions=true. If omitted, defaults to false.
  /// * [allversions] - Optional: To include all versions or latest version, include a query parameter allversions=true. If omitted, defaults to false.
  /// * [authorization] 
  /// * [contentType] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsBatchActionsFileextractPost({ 
    bool? source_,
    bool? renditions,
    bool? allversions,
    String? authorization,
    String? contentType,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/batch/actions/fileextract';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (contentType != null) r'Content-Type': contentType,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (source_ != null) r'source': encodeQueryParameter(_serializers, source_, const FullType(bool)),
      if (renditions != null) r'renditions': encodeQueryParameter(_serializers, renditions, const FullType(bool)),
      if (allversions != null) r'allversions': encodeQueryParameter(_serializers, allversions, const FullType(bool)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Reclassify Multiple Documents
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [contentType] 
  /// * [accept] 
  /// * [xVaultAPIMigrationMode] - When set to true, Vault allows you to manually set the document number and to update documents to any lifecycle state using the status__v field. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message.  You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsBatchActionsReclassifyPut({ 
    String? authorization,
    String? contentType,
    String? accept,
    bool? xVaultAPIMigrationMode,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/batch/actions/reclassify';
    final _options = Options(
      method: r'PUT',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (contentType != null) r'Content-Type': contentType,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIMigrationMode != null) r'X-VaultAPI-MigrationMode': xVaultAPIMigrationMode,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Update Multiple Document Renditions
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsBatchActionsRerenderPost({ 
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/batch/actions/rerender';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Delete Multiple Documents
  /// 
  ///
  /// Parameters:
  /// * [idParam] - If you’re identifying documents in your input by their external ID
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsBatchDelete({ 
    String? idParam,
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/batch';
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (idParam != null) r'idParam': encodeQueryParameter(_serializers, idParam, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Undo Collaborative Authoring Checkout
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsBatchLockDelete({ 
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/batch/lock';
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Create Multiple Documents
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIMigrationMode] - When set to true, Vault allows you to create documents in any lifecycle state using the status__v field, and to manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsBatchPost({ 
    String? authorization,
    String? accept,
    String? contentType,
    bool? xVaultAPIMigrationMode,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/batch';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIMigrationMode != null) r'X-VaultAPI-MigrationMode': xVaultAPIMigrationMode,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Update Multiple Documents
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIMigrationMode] - When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header.Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsBatchPut({ 
    String? authorization,
    String? accept,
    String? contentType,
    bool? xVaultAPIMigrationMode,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/batch';
    final _options = Options(
      method: r'PUT',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIMigrationMode != null) r'X-VaultAPI-MigrationMode': xVaultAPIMigrationMode,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Anchor IDs
  /// 
  ///
  /// Parameters:
  /// * [docId] - The document id field value.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsDocIdAnchorsGet({ 
    required String docId,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/{doc_id}/anchors'.replaceAll('{' r'doc_id' '}', encodeQueryParameter(_serializers, docId, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Export Document Annotations to PDF
  /// 
  ///
  /// Parameters:
  /// * [docId] - The document id field value.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsDocIdAnnotationsFileGet({ 
    required String docId,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/{doc_id}/annotations/file'.replaceAll('{' r'doc_id' '}', encodeQueryParameter(_serializers, docId, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Import Document Annotations from PDF
  /// 
  ///
  /// Parameters:
  /// * [docId] - The document id field value.
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsDocIdAnnotationsFilePost({ 
    required String docId,
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/{doc_id}/annotations/file'.replaceAll('{' r'doc_id' '}', encodeQueryParameter(_serializers, docId, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Delete Single Document Attachment
  /// 
  ///
  /// Parameters:
  /// * [docId] - The document id field value.
  /// * [attachmentId] - The attachment id field value.
  /// * [accept] 
  /// * [authorization] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsDocIdAttachmentsAttachmentIdDelete({ 
    required String docId,
    required String attachmentId,
    String? accept,
    String? authorization,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/{doc_id}/attachments/{attachment_id}'.replaceAll('{' r'doc_id' '}', encodeQueryParameter(_serializers, docId, const FullType(String)).toString()).replaceAll('{' r'attachment_id' '}', encodeQueryParameter(_serializers, attachmentId, const FullType(String)).toString());
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        if (accept != null) r'Accept': accept,
        if (authorization != null) r'Authorization': authorization,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Download Document Attachment
  /// 
  ///
  /// Parameters:
  /// * [docId] - The document id field value.
  /// * [attachmentId] - The attachment id field value.
  /// * [accept] 
  /// * [authorization] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsDocIdAttachmentsAttachmentIdFileGet({ 
    required String docId,
    required String attachmentId,
    String? accept,
    String? authorization,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/{doc_id}/attachments/{attachment_id}/file'.replaceAll('{' r'doc_id' '}', encodeQueryParameter(_serializers, docId, const FullType(String)).toString()).replaceAll('{' r'attachment_id' '}', encodeQueryParameter(_serializers, attachmentId, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (accept != null) r'Accept': accept,
        if (authorization != null) r'Authorization': authorization,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Document Attachment Metadata
  /// 
  ///
  /// Parameters:
  /// * [docId] - The document id field value.
  /// * [attachmentId] - The attachment id field value.
  /// * [accept] 
  /// * [authorization] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsDocIdAttachmentsAttachmentIdGet({ 
    required String docId,
    required String attachmentId,
    String? accept,
    String? authorization,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/{doc_id}/attachments/{attachment_id}'.replaceAll('{' r'doc_id' '}', encodeQueryParameter(_serializers, docId, const FullType(String)).toString()).replaceAll('{' r'attachment_id' '}', encodeQueryParameter(_serializers, attachmentId, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (accept != null) r'Accept': accept,
        if (authorization != null) r'Authorization': authorization,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Update Document Attachment Description
  /// 
  ///
  /// Parameters:
  /// * [docId] - The document id field value.
  /// * [attachmentId] - The attachment id field value.
  /// * [accept] 
  /// * [authorization] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsDocIdAttachmentsAttachmentIdPut({ 
    required String docId,
    required String attachmentId,
    String? accept,
    String? authorization,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/{doc_id}/attachments/{attachment_id}'.replaceAll('{' r'doc_id' '}', encodeQueryParameter(_serializers, docId, const FullType(String)).toString()).replaceAll('{' r'attachment_id' '}', encodeQueryParameter(_serializers, attachmentId, const FullType(String)).toString());
    final _options = Options(
      method: r'PUT',
      headers: <String, dynamic>{
        if (accept != null) r'Accept': accept,
        if (authorization != null) r'Authorization': authorization,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Delete Single Document Attachment Version
  /// 
  ///
  /// Parameters:
  /// * [docId] - The document id field value.
  /// * [attachmentId] - The attachment id field value.
  /// * [attachmentVersion] - The attachment version__v field value.
  /// * [accept] 
  /// * [authorization] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete({ 
    required String docId,
    required String attachmentId,
    required String attachmentVersion,
    String? accept,
    String? authorization,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}'.replaceAll('{' r'doc_id' '}', encodeQueryParameter(_serializers, docId, const FullType(String)).toString()).replaceAll('{' r'attachment_id' '}', encodeQueryParameter(_serializers, attachmentId, const FullType(String)).toString()).replaceAll('{' r'attachment_version' '}', encodeQueryParameter(_serializers, attachmentVersion, const FullType(String)).toString());
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        if (accept != null) r'Accept': accept,
        if (authorization != null) r'Authorization': authorization,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Download Document Attachment Version
  /// 
  ///
  /// Parameters:
  /// * [docId] - The document id field value.
  /// * [attachmentId] - The attachment id field value.
  /// * [attachmentVersion] - The attachment version__v field value.
  /// * [accept] 
  /// * [authorization] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet({ 
    required String docId,
    required String attachmentId,
    required String attachmentVersion,
    String? accept,
    String? authorization,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}/file'.replaceAll('{' r'doc_id' '}', encodeQueryParameter(_serializers, docId, const FullType(String)).toString()).replaceAll('{' r'attachment_id' '}', encodeQueryParameter(_serializers, attachmentId, const FullType(String)).toString()).replaceAll('{' r'attachment_version' '}', encodeQueryParameter(_serializers, attachmentVersion, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (accept != null) r'Accept': accept,
        if (authorization != null) r'Authorization': authorization,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Document Attachment Version Metadata
  /// 
  ///
  /// Parameters:
  /// * [docId] - The document id field value.
  /// * [attachmentId] - The attachment id field value.
  /// * [attachmentVersion] - The attachment version__v field value.
  /// * [accept] 
  /// * [authorization] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet({ 
    required String docId,
    required String attachmentId,
    required String attachmentVersion,
    String? accept,
    String? authorization,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}'.replaceAll('{' r'doc_id' '}', encodeQueryParameter(_serializers, docId, const FullType(String)).toString()).replaceAll('{' r'attachment_id' '}', encodeQueryParameter(_serializers, attachmentId, const FullType(String)).toString()).replaceAll('{' r'attachment_version' '}', encodeQueryParameter(_serializers, attachmentVersion, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (accept != null) r'Accept': accept,
        if (authorization != null) r'Authorization': authorization,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Restore Document Attachment Version
  /// 
  ///
  /// Parameters:
  /// * [docId] - The document id field value.
  /// * [attachmentId] - The attachment id field value.
  /// * [attachmentVersion] - The attachment version__v field value.
  /// * [restore] - The parameter restore must be set to true. 
  /// * [accept] 
  /// * [authorization] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost({ 
    required String docId,
    required String attachmentId,
    required String attachmentVersion,
    bool? restore,
    String? accept,
    String? authorization,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}'.replaceAll('{' r'doc_id' '}', encodeQueryParameter(_serializers, docId, const FullType(String)).toString()).replaceAll('{' r'attachment_id' '}', encodeQueryParameter(_serializers, attachmentId, const FullType(String)).toString()).replaceAll('{' r'attachment_version' '}', encodeQueryParameter(_serializers, attachmentVersion, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (accept != null) r'Accept': accept,
        if (authorization != null) r'Authorization': authorization,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (restore != null) r'restore': encodeQueryParameter(_serializers, restore, const FullType(bool)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Document Attachment Versions
  /// 
  ///
  /// Parameters:
  /// * [docId] - The document id field value.
  /// * [attachmentId] - The attachment id field value.
  /// * [accept] 
  /// * [authorization] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet({ 
    required String docId,
    required String attachmentId,
    String? accept,
    String? authorization,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/{doc_id}/attachments/{attachment_id}/versions'.replaceAll('{' r'doc_id' '}', encodeQueryParameter(_serializers, docId, const FullType(String)).toString()).replaceAll('{' r'attachment_id' '}', encodeQueryParameter(_serializers, attachmentId, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (accept != null) r'Accept': accept,
        if (authorization != null) r'Authorization': authorization,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Download All Document Attachments
  /// 
  ///
  /// Parameters:
  /// * [docId] - The document id field value.
  /// * [accept] 
  /// * [authorization] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsDocIdAttachmentsFileGet({ 
    required String docId,
    String? accept,
    String? authorization,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/{doc_id}/attachments/file'.replaceAll('{' r'doc_id' '}', encodeQueryParameter(_serializers, docId, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (accept != null) r'Accept': accept,
        if (authorization != null) r'Authorization': authorization,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Document Attachments
  /// 
  ///
  /// Parameters:
  /// * [docId] - The document id field value.
  /// * [accept] 
  /// * [authorization] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsDocIdAttachmentsGet({ 
    required String docId,
    String? accept,
    String? authorization,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/{doc_id}/attachments'.replaceAll('{' r'doc_id' '}', encodeQueryParameter(_serializers, docId, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (accept != null) r'Accept': accept,
        if (authorization != null) r'Authorization': authorization,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Create Document Attachment
  /// 
  ///
  /// Parameters:
  /// * [docId] - The document id field value.
  /// * [accept] 
  /// * [authorization] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsDocIdAttachmentsPost({ 
    required String docId,
    String? accept,
    String? authorization,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/{doc_id}/attachments'.replaceAll('{' r'doc_id' '}', encodeQueryParameter(_serializers, docId, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (accept != null) r'Accept': accept,
        if (authorization != null) r'Authorization': authorization,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Complete Audit History for a Single Document
  /// 
  ///
  /// Parameters:
  /// * [docId] - The document ID for which to retrieve audit history.
  /// * [startDate] - Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vault’s creation date. 
  /// * [endDate] - Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date. 
  /// * [formatResult] - To request a CSV file of your audit history, use csv. 
  /// * [limit] - Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
  /// * [offset] - Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51. If omitted, defaults to 0.
  /// * [events] - Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of document audit events. The values passed to this parameter are case sensitive. For example, events=WorkflowCompletion,TaskAssignment. If omitted, defaults to all audit events.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsDocIdAudittrailGet({ 
    required String docId,
    String? startDate,
    String? endDate,
    String? formatResult,
    String? limit,
    String? offset,
    String? events,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/{doc_id}/audittrail'.replaceAll('{' r'doc_id' '}', encodeQueryParameter(_serializers, docId, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (startDate != null) r'start_date': encodeQueryParameter(_serializers, startDate, const FullType(String)),
      if (endDate != null) r'end_date': encodeQueryParameter(_serializers, endDate, const FullType(String)),
      if (formatResult != null) r'format_result': encodeQueryParameter(_serializers, formatResult, const FullType(String)),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(String)),
      if (offset != null) r'offset': encodeQueryParameter(_serializers, offset, const FullType(String)),
      if (events != null) r'events': encodeQueryParameter(_serializers, events, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Delete Single Document
  /// 
  ///
  /// Parameters:
  /// * [docId] - The document id field value.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsDocIdDelete({ 
    required String docId,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/{doc_id}'.replaceAll('{' r'doc_id' '}', encodeQueryParameter(_serializers, docId, const FullType(String)).toString());
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Document Events
  /// 
  ///
  /// Parameters:
  /// * [docId] - The document id field value.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsDocIdEventsGet({ 
    required String docId,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/{doc_id}/events'.replaceAll('{' r'doc_id' '}', encodeQueryParameter(_serializers, docId, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Download Document File
  /// 
  ///
  /// Parameters:
  /// * [docId] - The document id field value.
  /// * [lockDocument] - Set to true to Check Out this document before retrieval. If omitted, defaults to false.
  /// * [accept] 
  /// * [authorization] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsDocIdFileGet({ 
    required String docId,
    bool? lockDocument,
    String? accept,
    String? authorization,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/{doc_id}/file'.replaceAll('{' r'doc_id' '}', encodeQueryParameter(_serializers, docId, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (accept != null) r'Accept': accept,
        if (authorization != null) r'Authorization': authorization,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (lockDocument != null) r'lockDocument': encodeQueryParameter(_serializers, lockDocument, const FullType(bool)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Document
  /// 
  ///
  /// Parameters:
  /// * [docId] - The document id field value.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsDocIdGet({ 
    required String docId,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/{doc_id}'.replaceAll('{' r'doc_id' '}', encodeQueryParameter(_serializers, docId, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Delete Document Lock
  /// 
  ///
  /// Parameters:
  /// * [docId] - The document id field value.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsDocIdLockDelete({ 
    required String docId,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/{doc_id}/lock'.replaceAll('{' r'doc_id' '}', encodeQueryParameter(_serializers, docId, const FullType(String)).toString());
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Document Lock
  /// 
  ///
  /// Parameters:
  /// * [docId] - The document id field value.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsDocIdLockGet({ 
    required String docId,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/{doc_id}/lock'.replaceAll('{' r'doc_id' '}', encodeQueryParameter(_serializers, docId, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Create Document Lock
  /// 
  ///
  /// Parameters:
  /// * [docId] - The document id field value.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsDocIdLockPost({ 
    required String docId,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/{doc_id}/lock'.replaceAll('{' r'doc_id' '}', encodeQueryParameter(_serializers, docId, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Download All Document Version Attachments
  /// 
  ///
  /// Parameters:
  /// * [docId] - The document id field value.
  /// * [majorVersion] - The document major_version_number__v field value.
  /// * [minorVersion] - The document minor_version_number__v field value.
  /// * [accept] 
  /// * [authorization] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet({ 
    required String docId,
    required String majorVersion,
    required String minorVersion,
    String? accept,
    String? authorization,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/{doc_id}/{major_version}/{minor_version}/attachments/file'.replaceAll('{' r'doc_id' '}', encodeQueryParameter(_serializers, docId, const FullType(String)).toString()).replaceAll('{' r'major_version' '}', encodeQueryParameter(_serializers, majorVersion, const FullType(String)).toString()).replaceAll('{' r'minor_version' '}', encodeQueryParameter(_serializers, minorVersion, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (accept != null) r'Accept': accept,
        if (authorization != null) r'Authorization': authorization,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Create Single Document Version
  /// 
  ///
  /// Parameters:
  /// * [docId] - The document id field value.
  /// * [suppressRendition] - Set to true to suppress automatic generation of the viewable rendition. If omitted, defaults to false
  /// * [authorization] 
  /// * [contentType] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsDocIdPost({ 
    required String docId,
    String? suppressRendition,
    String? authorization,
    String? contentType,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/{doc_id}'.replaceAll('{' r'doc_id' '}', encodeQueryParameter(_serializers, docId, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (contentType != null) r'Content-Type': contentType,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (suppressRendition != null) r'suppressRendition': encodeQueryParameter(_serializers, suppressRendition, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Update Single Document
  /// 
  ///
  /// Parameters:
  /// * [docId] - The document id field value.
  /// * [authorization] 
  /// * [contentType] 
  /// * [accept] 
  /// * [xVaultAPIMigrationMode] - When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsDocIdPut({ 
    required String docId,
    String? authorization,
    String? contentType,
    String? accept,
    bool? xVaultAPIMigrationMode,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/{doc_id}'.replaceAll('{' r'doc_id' '}', encodeQueryParameter(_serializers, docId, const FullType(String)).toString());
    final _options = Options(
      method: r'PUT',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (contentType != null) r'Content-Type': contentType,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIMigrationMode != null) r'X-VaultAPI-MigrationMode': xVaultAPIMigrationMode,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Document Renditions
  /// 
  ///
  /// Parameters:
  /// * [docId] - The document id field value.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsDocIdRenditionsGet({ 
    required String docId,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/{doc_id}/renditions'.replaceAll('{' r'doc_id' '}', encodeQueryParameter(_serializers, docId, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Delete Single Document Rendition
  /// 
  ///
  /// Parameters:
  /// * [docId] - The document id field value.
  /// * [renditionType] - The document rendition type.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsDocIdRenditionsRenditionTypeDelete({ 
    required String docId,
    required String renditionType,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/{doc_id}/renditions/{rendition_type}'.replaceAll('{' r'doc_id' '}', encodeQueryParameter(_serializers, docId, const FullType(String)).toString()).replaceAll('{' r'rendition_type' '}', encodeQueryParameter(_serializers, renditionType, const FullType(String)).toString());
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Download Document Rendition File
  /// 
  ///
  /// Parameters:
  /// * [docId] - The document id field value.
  /// * [renditionType] - The document rendition type.
  /// * [steadyState] - Set to true to download a rendition (file) from the latest steady state version (1.0, 2.0, etc.) of a document. 
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsDocIdRenditionsRenditionTypeGet({ 
    required String docId,
    required String renditionType,
    String? steadyState,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/{doc_id}/renditions/{rendition_type}'.replaceAll('{' r'doc_id' '}', encodeQueryParameter(_serializers, docId, const FullType(String)).toString()).replaceAll('{' r'rendition_type' '}', encodeQueryParameter(_serializers, renditionType, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (steadyState != null) r'steadyState': encodeQueryParameter(_serializers, steadyState, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Add Single Document Rendition
  /// 
  ///
  /// Parameters:
  /// * [docId] - The document id field value.
  /// * [renditionType] - The document rendition type.
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsDocIdRenditionsRenditionTypePost({ 
    required String docId,
    required String renditionType,
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/{doc_id}/renditions/{rendition_type}'.replaceAll('{' r'doc_id' '}', encodeQueryParameter(_serializers, docId, const FullType(String)).toString()).replaceAll('{' r'rendition_type' '}', encodeQueryParameter(_serializers, renditionType, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Replace Document Rendition
  /// 
  ///
  /// Parameters:
  /// * [docId] - The document id field value.
  /// * [renditionType] - The document rendition type.
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsDocIdRenditionsRenditionTypePut({ 
    required String docId,
    required String renditionType,
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/{doc_id}/renditions/{rendition_type}'.replaceAll('{' r'doc_id' '}', encodeQueryParameter(_serializers, docId, const FullType(String)).toString()).replaceAll('{' r'rendition_type' '}', encodeQueryParameter(_serializers, renditionType, const FullType(String)).toString());
    final _options = Options(
      method: r'PUT',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Remove Users &amp; Groups from Roles on a Single Document
  /// 
  ///
  /// Parameters:
  /// * [docId] - The id value of the document from which to remove roles.
  /// * [roleNameAndUserOrGroup] - The name of the role from which to remove the user or group followed by either `user` or `group`. The format is `{role_name}.{user_or_group}`. For example, `consumer__v.user`.
  /// * [id] - The id value of the user or group to remove from the role.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete({ 
    required String docId,
    required String roleNameAndUserOrGroup,
    required String id,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/{doc_id}/roles/{role_name_and_user_or_group}/{id}'.replaceAll('{' r'doc_id' '}', encodeQueryParameter(_serializers, docId, const FullType(String)).toString()).replaceAll('{' r'role_name_and_user_or_group' '}', encodeQueryParameter(_serializers, roleNameAndUserOrGroup, const FullType(String)).toString()).replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Document Version Attachments
  /// 
  ///
  /// Parameters:
  /// * [docId] - The document id field value.
  /// * [majorVersion] - The document major_version_number__v field value.
  /// * [minorVersion] - The document minor_version_number__v field value.
  /// * [accept] 
  /// * [authorization] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet({ 
    required String docId,
    required String majorVersion,
    required String minorVersion,
    String? accept,
    String? authorization,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/{doc_id}/version/{major_version}/{minor_version}/attachments'.replaceAll('{' r'doc_id' '}', encodeQueryParameter(_serializers, docId, const FullType(String)).toString()).replaceAll('{' r'major_version' '}', encodeQueryParameter(_serializers, majorVersion, const FullType(String)).toString()).replaceAll('{' r'minor_version' '}', encodeQueryParameter(_serializers, minorVersion, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (accept != null) r'Accept': accept,
        if (authorization != null) r'Authorization': authorization,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Document Versions
  /// 
  ///
  /// Parameters:
  /// * [docId] - The document id field value.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsDocIdVersionsGet({ 
    required String docId,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/{doc_id}/versions'.replaceAll('{' r'doc_id' '}', encodeQueryParameter(_serializers, docId, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Read Annotations by ID
  /// 
  ///
  /// Parameters:
  /// * [docId] - The document id field value.
  /// * [majorVersion] - The document major_version_number__v field value.
  /// * [minorVersion] - The document minor_version_number__v field value.
  /// * [annotationId] - The annotation ID, which can be retrieved with Read Annotations by Document Version and Type.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet({ 
    required String docId,
    required String majorVersion,
    required String minorVersion,
    required String annotationId,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/{annotation_id}'.replaceAll('{' r'doc_id' '}', encodeQueryParameter(_serializers, docId, const FullType(String)).toString()).replaceAll('{' r'major_version' '}', encodeQueryParameter(_serializers, majorVersion, const FullType(String)).toString()).replaceAll('{' r'minor_version' '}', encodeQueryParameter(_serializers, minorVersion, const FullType(String)).toString()).replaceAll('{' r'annotation_id' '}', encodeQueryParameter(_serializers, annotationId, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Read Replies of Parent Annotation
  /// 
  ///
  /// Parameters:
  /// * [docId] - The document id field value.
  /// * [majorVersion] - The document major_version_number__v field value.
  /// * [minorVersion] - The document minor_version_number__v field value.
  /// * [annotationId] - The parent annotation ID, which can be retrieved with Read Annotations by Document Version and Type.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet({ 
    required String docId,
    required String majorVersion,
    required String minorVersion,
    required String annotationId,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/{annotation_id}/replies'.replaceAll('{' r'doc_id' '}', encodeQueryParameter(_serializers, docId, const FullType(String)).toString()).replaceAll('{' r'major_version' '}', encodeQueryParameter(_serializers, majorVersion, const FullType(String)).toString()).replaceAll('{' r'minor_version' '}', encodeQueryParameter(_serializers, minorVersion, const FullType(String)).toString()).replaceAll('{' r'annotation_id' '}', encodeQueryParameter(_serializers, annotationId, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Export Document Version Annotations to PDF
  /// 
  ///
  /// Parameters:
  /// * [docId] - The document id field value.
  /// * [majorVersion] - The document major_version_number__v field value.
  /// * [minorVersion] - The document minor_version_number__v field value.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet({ 
    required String docId,
    required String majorVersion,
    required String minorVersion,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/file'.replaceAll('{' r'doc_id' '}', encodeQueryParameter(_serializers, docId, const FullType(String)).toString()).replaceAll('{' r'major_version' '}', encodeQueryParameter(_serializers, majorVersion, const FullType(String)).toString()).replaceAll('{' r'minor_version' '}', encodeQueryParameter(_serializers, minorVersion, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Import Document Version Annotations from PDF
  /// 
  ///
  /// Parameters:
  /// * [docId] - The document id field value.
  /// * [majorVersion] - The document major_version_number__v field value.
  /// * [minorVersion] - The document minor_version_number__v field value.
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost({ 
    required String docId,
    required String majorVersion,
    required String minorVersion,
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/file'.replaceAll('{' r'doc_id' '}', encodeQueryParameter(_serializers, docId, const FullType(String)).toString()).replaceAll('{' r'major_version' '}', encodeQueryParameter(_serializers, majorVersion, const FullType(String)).toString()).replaceAll('{' r'minor_version' '}', encodeQueryParameter(_serializers, minorVersion, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Read Annotations by Document Version and Type
  /// 
  ///
  /// Parameters:
  /// * [docId] - The document id field value.
  /// * [majorVersion] - The document major_version_number__v field value.
  /// * [minorVersion] - The document minor_version_number__v field value.
  /// * [limit] - Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 500. If omitted, defaults to 500. Values greater than 500 are ignored.
  /// * [offset] - This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to offset=201.
  /// * [annotationTypes] - The type(s) of annotations to retrieve. For example, note__sys,anchor__sys. If omitted, Vault returns all annotations. Valid annotation types include: `note__sys` `line__sys` `document_link__sys` `permalink_link__sys` `anchor__sys` `reply__sys` `external_link__sys`  The following annotation types are only valid in PromoMats Vaults:  `suggested_link__sys` `approved_link__sys` `auto_link__sys` `keyword_link__sys` 
  /// * [paginationId] - A unique identifier used to load requests with paginated results.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet({ 
    required String docId,
    required String majorVersion,
    required String minorVersion,
    String? limit,
    String? offset,
    String? annotationTypes,
    String? paginationId,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations'.replaceAll('{' r'doc_id' '}', encodeQueryParameter(_serializers, docId, const FullType(String)).toString()).replaceAll('{' r'major_version' '}', encodeQueryParameter(_serializers, majorVersion, const FullType(String)).toString()).replaceAll('{' r'minor_version' '}', encodeQueryParameter(_serializers, minorVersion, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(String)),
      if (offset != null) r'offset': encodeQueryParameter(_serializers, offset, const FullType(String)),
      if (annotationTypes != null) r'annotation_types': encodeQueryParameter(_serializers, annotationTypes, const FullType(String)),
      if (paginationId != null) r'pagination_id': encodeQueryParameter(_serializers, paginationId, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Download Document Version Attachment Version
  /// 
  ///
  /// Parameters:
  /// * [docId] - The document id field value.
  /// * [majorVersion] - The document major_version_number__v field value.
  /// * [minorVersion] - The document minor_version_number__v field value.
  /// * [attachmentId] - The id field value of the attachment.
  /// * [attachmentVersion] - The version of the attachment.
  /// * [accept] 
  /// * [authorization] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet({ 
    required String docId,
    required String majorVersion,
    required String minorVersion,
    required String attachmentId,
    required String attachmentVersion,
    String? accept,
    String? authorization,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/attachments/{attachment_id}/versions/{attachment_version}/file'.replaceAll('{' r'doc_id' '}', encodeQueryParameter(_serializers, docId, const FullType(String)).toString()).replaceAll('{' r'major_version' '}', encodeQueryParameter(_serializers, majorVersion, const FullType(String)).toString()).replaceAll('{' r'minor_version' '}', encodeQueryParameter(_serializers, minorVersion, const FullType(String)).toString()).replaceAll('{' r'attachment_id' '}', encodeQueryParameter(_serializers, attachmentId, const FullType(String)).toString()).replaceAll('{' r'attachment_version' '}', encodeQueryParameter(_serializers, attachmentVersion, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (accept != null) r'Accept': accept,
        if (authorization != null) r'Authorization': authorization,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Document Version Attachment Versions
  /// 
  ///
  /// Parameters:
  /// * [docId] - The document id field value.
  /// * [majorVersion] - The document major_version_number__v field value.
  /// * [minorVersion] - The document minor_version_number__v field value.
  /// * [attachmentId] - The id of the document attachment to retrieve.
  /// * [attachmentVersion] - Optional: The version of the attachment to retrieve. If omitted, the endpoint retrieves all versions of the specified attachment.
  /// * [accept] 
  /// * [authorization] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet({ 
    required String docId,
    required String majorVersion,
    required String minorVersion,
    required String attachmentId,
    required String attachmentVersion,
    String? accept,
    String? authorization,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/attachments/{attachment_id}/versions/{attachment_version}'.replaceAll('{' r'doc_id' '}', encodeQueryParameter(_serializers, docId, const FullType(String)).toString()).replaceAll('{' r'major_version' '}', encodeQueryParameter(_serializers, majorVersion, const FullType(String)).toString()).replaceAll('{' r'minor_version' '}', encodeQueryParameter(_serializers, minorVersion, const FullType(String)).toString()).replaceAll('{' r'attachment_id' '}', encodeQueryParameter(_serializers, attachmentId, const FullType(String)).toString()).replaceAll('{' r'attachment_version' '}', encodeQueryParameter(_serializers, attachmentVersion, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (accept != null) r'Accept': accept,
        if (authorization != null) r'Authorization': authorization,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Delete Single Document Version
  /// 
  ///
  /// Parameters:
  /// * [docId] - The document id field value.
  /// * [majorVersion] - The document major_version_number__v field value.
  /// * [minorVersion] - The document minor_version_number__v field value.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete({ 
    required String docId,
    required String majorVersion,
    required String minorVersion,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/{doc_id}/versions/{major_version}/{minor_version}'.replaceAll('{' r'doc_id' '}', encodeQueryParameter(_serializers, docId, const FullType(String)).toString()).replaceAll('{' r'major_version' '}', encodeQueryParameter(_serializers, majorVersion, const FullType(String)).toString()).replaceAll('{' r'minor_version' '}', encodeQueryParameter(_serializers, minorVersion, const FullType(String)).toString());
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Document Version Notes as CSV
  /// 
  ///
  /// Parameters:
  /// * [docId] - The document id field value.
  /// * [majorVersion] - The document major_version_number__v field value.
  /// * [minorVersion] - The document minor_version_number__v field value.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet({ 
    required String docId,
    required String majorVersion,
    required String minorVersion,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/doc-export-annotations-to-csv'.replaceAll('{' r'doc_id' '}', encodeQueryParameter(_serializers, docId, const FullType(String)).toString()).replaceAll('{' r'major_version' '}', encodeQueryParameter(_serializers, majorVersion, const FullType(String)).toString()).replaceAll('{' r'minor_version' '}', encodeQueryParameter(_serializers, minorVersion, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Create Document Event
  /// 
  ///
  /// Parameters:
  /// * [docId] - The document id field value.
  /// * [majorVersion] - The document major_version_number__v field value.
  /// * [minorVersion] - The document minor_version_number__v field value.
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost({ 
    required String docId,
    required String majorVersion,
    required String minorVersion,
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/events'.replaceAll('{' r'doc_id' '}', encodeQueryParameter(_serializers, docId, const FullType(String)).toString()).replaceAll('{' r'major_version' '}', encodeQueryParameter(_serializers, majorVersion, const FullType(String)).toString()).replaceAll('{' r'minor_version' '}', encodeQueryParameter(_serializers, minorVersion, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Video Annotations
  /// 
  ///
  /// Parameters:
  /// * [docId] - The video document id field value.
  /// * [majorVersion] - The video document major_version_number__v field value.
  /// * [minorVersion] - The video document minor_version_number__v field value.
  /// * [authorization] 
  /// * [accept] - This `Accept` header only changes the format of the response in the case of an error. On `SUCCESS`, the HTTP Response Header `Content-Type` is set to `text/plain;charset=UnicodeLittle`.
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet({ 
    required String docId,
    required String majorVersion,
    required String minorVersion,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/export-video-annotations'.replaceAll('{' r'doc_id' '}', encodeQueryParameter(_serializers, docId, const FullType(String)).toString()).replaceAll('{' r'major_version' '}', encodeQueryParameter(_serializers, majorVersion, const FullType(String)).toString()).replaceAll('{' r'minor_version' '}', encodeQueryParameter(_serializers, minorVersion, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Download Document Version File
  /// 
  ///
  /// Parameters:
  /// * [docId] - The document id field value.
  /// * [majorVersion] - The document major_version_number__v field value.
  /// * [minorVersion] - The document minor_version_number__v field value.
  /// * [accept] 
  /// * [authorization] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet({ 
    required String docId,
    required String majorVersion,
    required String minorVersion,
    String? accept,
    String? authorization,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/file'.replaceAll('{' r'doc_id' '}', encodeQueryParameter(_serializers, docId, const FullType(String)).toString()).replaceAll('{' r'major_version' '}', encodeQueryParameter(_serializers, majorVersion, const FullType(String)).toString()).replaceAll('{' r'minor_version' '}', encodeQueryParameter(_serializers, minorVersion, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (accept != null) r'Accept': accept,
        if (authorization != null) r'Authorization': authorization,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Document Version
  /// 
  ///
  /// Parameters:
  /// * [docId] - The document id field value.
  /// * [majorVersion] - The document major_version_number__v field value.
  /// * [minorVersion] - The document minor_version_number__v field value.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet({ 
    required String docId,
    required String majorVersion,
    required String minorVersion,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/{doc_id}/versions/{major_version}/{minor_version}'.replaceAll('{' r'doc_id' '}', encodeQueryParameter(_serializers, docId, const FullType(String)).toString()).replaceAll('{' r'major_version' '}', encodeQueryParameter(_serializers, majorVersion, const FullType(String)).toString()).replaceAll('{' r'minor_version' '}', encodeQueryParameter(_serializers, minorVersion, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Update Document Version
  /// 
  ///
  /// Parameters:
  /// * [docId] - The document id field value.
  /// * [majorVersion] - The document major_version_number__v field value.
  /// * [minorVersion] - The document minor_version_number__v field value.
  /// * [authorization] 
  /// * [contentType] 
  /// * [accept] 
  /// * [xVaultAPIMigrationMode] - When set to true, Vault allows you to manually set the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut({ 
    required String docId,
    required String majorVersion,
    required String minorVersion,
    String? authorization,
    String? contentType,
    String? accept,
    bool? xVaultAPIMigrationMode,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/{doc_id}/versions/{major_version}/{minor_version}'.replaceAll('{' r'doc_id' '}', encodeQueryParameter(_serializers, docId, const FullType(String)).toString()).replaceAll('{' r'major_version' '}', encodeQueryParameter(_serializers, majorVersion, const FullType(String)).toString()).replaceAll('{' r'minor_version' '}', encodeQueryParameter(_serializers, minorVersion, const FullType(String)).toString());
    final _options = Options(
      method: r'PUT',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (contentType != null) r'Content-Type': contentType,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIMigrationMode != null) r'X-VaultAPI-MigrationMode': xVaultAPIMigrationMode,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Document Relationships
  /// 
  ///
  /// Parameters:
  /// * [docId] - The document id field value.
  /// * [majorVersion] - The document major_version_number__v field value.
  /// * [minorVersion] - The document minor_version_number__v field value.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet({ 
    required String docId,
    required String majorVersion,
    required String minorVersion,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships'.replaceAll('{' r'doc_id' '}', encodeQueryParameter(_serializers, docId, const FullType(String)).toString()).replaceAll('{' r'major_version' '}', encodeQueryParameter(_serializers, majorVersion, const FullType(String)).toString()).replaceAll('{' r'minor_version' '}', encodeQueryParameter(_serializers, minorVersion, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Create Single Document Relationship
  /// 
  ///
  /// Parameters:
  /// * [docId] - The document id field value.
  /// * [majorVersion] - The document major_version_number__v field value.
  /// * [minorVersion] - The document minor_version_number__v field value.
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost({ 
    required String docId,
    required String majorVersion,
    required String minorVersion,
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships'.replaceAll('{' r'doc_id' '}', encodeQueryParameter(_serializers, docId, const FullType(String)).toString()).replaceAll('{' r'major_version' '}', encodeQueryParameter(_serializers, majorVersion, const FullType(String)).toString()).replaceAll('{' r'minor_version' '}', encodeQueryParameter(_serializers, minorVersion, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Delete Single Document Relationship
  /// 
  ///
  /// Parameters:
  /// * [docId] - The document id field value.
  /// * [majorVersion] - The document major_version_number__v field value.
  /// * [minorVersion] - The document minor_version_number__v field value.
  /// * [relationshipId] - The relationship id field value. See Retrieve Document Relationships.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete({ 
    required String docId,
    required String majorVersion,
    required String minorVersion,
    required String relationshipId,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}'.replaceAll('{' r'doc_id' '}', encodeQueryParameter(_serializers, docId, const FullType(String)).toString()).replaceAll('{' r'major_version' '}', encodeQueryParameter(_serializers, majorVersion, const FullType(String)).toString()).replaceAll('{' r'minor_version' '}', encodeQueryParameter(_serializers, minorVersion, const FullType(String)).toString()).replaceAll('{' r'relationship_id' '}', encodeQueryParameter(_serializers, relationshipId, const FullType(String)).toString());
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Document Relationship
  /// 
  ///
  /// Parameters:
  /// * [docId] - The document id field value.
  /// * [majorVersion] - The document major_version_number__v field value.
  /// * [minorVersion] - The document minor_version_number__v field value.
  /// * [relationshipId] - The relationship id field value. See Retrieve Document Relationships.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet({ 
    required String docId,
    required String majorVersion,
    required String minorVersion,
    required String relationshipId,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}'.replaceAll('{' r'doc_id' '}', encodeQueryParameter(_serializers, docId, const FullType(String)).toString()).replaceAll('{' r'major_version' '}', encodeQueryParameter(_serializers, majorVersion, const FullType(String)).toString()).replaceAll('{' r'minor_version' '}', encodeQueryParameter(_serializers, minorVersion, const FullType(String)).toString()).replaceAll('{' r'relationship_id' '}', encodeQueryParameter(_serializers, relationshipId, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Document Version Renditions
  /// 
  ///
  /// Parameters:
  /// * [docId] - The document id field value.
  /// * [majorVersion] - The document major_version_number__v field value.
  /// * [minorVersion] - The document minor_version_number__v field value.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet({ 
    required String docId,
    required String majorVersion,
    required String minorVersion,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions'.replaceAll('{' r'doc_id' '}', encodeQueryParameter(_serializers, docId, const FullType(String)).toString()).replaceAll('{' r'major_version' '}', encodeQueryParameter(_serializers, majorVersion, const FullType(String)).toString()).replaceAll('{' r'minor_version' '}', encodeQueryParameter(_serializers, minorVersion, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Delete Document Version Rendition
  /// 
  ///
  /// Parameters:
  /// * [docId] - The document id field value.
  /// * [majorVersion] - The document major_version_number__v field value.
  /// * [minorVersion] - The document minor_version_number__v field value.
  /// * [renditionType] - The document rendition type.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete({ 
    required String docId,
    required String majorVersion,
    required String minorVersion,
    required String renditionType,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}'.replaceAll('{' r'doc_id' '}', encodeQueryParameter(_serializers, docId, const FullType(String)).toString()).replaceAll('{' r'major_version' '}', encodeQueryParameter(_serializers, majorVersion, const FullType(String)).toString()).replaceAll('{' r'minor_version' '}', encodeQueryParameter(_serializers, minorVersion, const FullType(String)).toString()).replaceAll('{' r'rendition_type' '}', encodeQueryParameter(_serializers, renditionType, const FullType(String)).toString());
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Download Document Version Rendition File
  /// 
  ///
  /// Parameters:
  /// * [docId] - The document id field value.
  /// * [majorVersion] - The document major_version_number__v field value.
  /// * [minorVersion] - The document minor_version_number__v field value.
  /// * [renditionType] - The document rendition type.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet({ 
    required String docId,
    required String majorVersion,
    required String minorVersion,
    required String renditionType,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}'.replaceAll('{' r'doc_id' '}', encodeQueryParameter(_serializers, docId, const FullType(String)).toString()).replaceAll('{' r'major_version' '}', encodeQueryParameter(_serializers, majorVersion, const FullType(String)).toString()).replaceAll('{' r'minor_version' '}', encodeQueryParameter(_serializers, minorVersion, const FullType(String)).toString()).replaceAll('{' r'rendition_type' '}', encodeQueryParameter(_serializers, renditionType, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Upload Document Version Rendition
  /// 
  ///
  /// Parameters:
  /// * [docId] - The document id field value.
  /// * [majorVersion] - The document major_version_number__v field value.
  /// * [minorVersion] - The document minor_version_number__v field value.
  /// * [renditionType] - The document rendition type.
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost({ 
    required String docId,
    required String majorVersion,
    required String minorVersion,
    required String renditionType,
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}'.replaceAll('{' r'doc_id' '}', encodeQueryParameter(_serializers, docId, const FullType(String)).toString()).replaceAll('{' r'major_version' '}', encodeQueryParameter(_serializers, majorVersion, const FullType(String)).toString()).replaceAll('{' r'minor_version' '}', encodeQueryParameter(_serializers, minorVersion, const FullType(String)).toString()).replaceAll('{' r'rendition_type' '}', encodeQueryParameter(_serializers, renditionType, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Replace Document Version Rendition
  /// 
  ///
  /// Parameters:
  /// * [docId] - The document id field value.
  /// * [majorVersion] - The document major_version_number__v field value.
  /// * [minorVersion] - The document minor_version_number__v field value.
  /// * [renditionType] - The document rendition type.
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut({ 
    required String docId,
    required String majorVersion,
    required String minorVersion,
    required String renditionType,
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}'.replaceAll('{' r'doc_id' '}', encodeQueryParameter(_serializers, docId, const FullType(String)).toString()).replaceAll('{' r'major_version' '}', encodeQueryParameter(_serializers, majorVersion, const FullType(String)).toString()).replaceAll('{' r'minor_version' '}', encodeQueryParameter(_serializers, minorVersion, const FullType(String)).toString()).replaceAll('{' r'rendition_type' '}', encodeQueryParameter(_serializers, renditionType, const FullType(String)).toString());
    final _options = Options(
      method: r'PUT',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Download Document Version Thumbnail File
  /// 
  ///
  /// Parameters:
  /// * [docId] - The document id field value.
  /// * [majorVersion] - The document major_version_number__v field value.
  /// * [minorVersion] - The document minor_version_number__v field value.
  /// * [accept] 
  /// * [authorization] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet({ 
    required String docId,
    required String majorVersion,
    required String minorVersion,
    String? accept,
    String? authorization,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/thumbnail'.replaceAll('{' r'doc_id' '}', encodeQueryParameter(_serializers, docId, const FullType(String)).toString()).replaceAll('{' r'major_version' '}', encodeQueryParameter(_serializers, majorVersion, const FullType(String)).toString()).replaceAll('{' r'minor_version' '}', encodeQueryParameter(_serializers, minorVersion, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (accept != null) r'Accept': accept,
        if (authorization != null) r'Authorization': authorization,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve All Documents
  /// 
  ///
  /// Parameters:
  /// * [namedFilter] - Retrieves only documents which you have created.
  /// * [scope] - Searches only within the document content.
  /// * [versionscope] - Retrieves all document versions, rather than only the latest version.
  /// * [search] - Search for documents based on a {keyword} in searchable document fields.
  /// * [limit] - See VQL documentation for more information.
  /// * [sort] - See VQL documentation for more information.
  /// * [start] - See VQL documentation for more information.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsGet({ 
    String? namedFilter,
    String? scope,
    String? versionscope,
    String? search,
    String? limit,
    String? sort,
    String? start,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (namedFilter != null) r'named_filter': encodeQueryParameter(_serializers, namedFilter, const FullType(String)),
      if (scope != null) r'scope': encodeQueryParameter(_serializers, scope, const FullType(String)),
      if (versionscope != null) r'versionscope': encodeQueryParameter(_serializers, versionscope, const FullType(String)),
      if (search != null) r'search': encodeQueryParameter(_serializers, search, const FullType(String)),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(String)),
      if (sort != null) r'sort': encodeQueryParameter(_serializers, sort, const FullType(String)),
      if (start != null) r'start': encodeQueryParameter(_serializers, start, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve All Document Roles
  /// 
  ///
  /// Parameters:
  /// * [id] 
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsIdRolesGet({ 
    required String id,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/{id}/roles'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Assign Users &amp; Groups to Roles on a Single Document
  /// 
  ///
  /// Parameters:
  /// * [id] 
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsIdRolesPost({ 
    required String id,
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/{id}/roles'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Document Role
  /// 
  ///
  /// Parameters:
  /// * [id] - The document `id`.
  /// * [roleName] - The name of the role to retrieve. For example, `owner__v`.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsIdRolesRoleNameGet({ 
    required String id,
    required String roleName,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/{id}/roles/{role_name}'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString()).replaceAll('{' r'role_name' '}', encodeQueryParameter(_serializers, roleName, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Document User Actions
  /// 
  ///
  /// Parameters:
  /// * [id] - The document id field value from which to retrieve available user actions.
  /// * [majorVersion] - The major version number of the document.
  /// * [minorVersion] - The minor version number of the document.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet({ 
    required String id,
    required String majorVersion,
    required String minorVersion,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString()).replaceAll('{' r'major_version' '}', encodeQueryParameter(_serializers, majorVersion, const FullType(String)).toString()).replaceAll('{' r'minor_version' '}', encodeQueryParameter(_serializers, minorVersion, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Document Entry Criteria
  /// 
  ///
  /// Parameters:
  /// * [id] - The document id field value from which to retrieve available user actions.
  /// * [majorVersion] - The major version number of the document.
  /// * [minorVersion] - The minor version number of the document.
  /// * [nameV] - The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet({ 
    required String id,
    required String majorVersion,
    required String minorVersion,
    required String nameV,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}/entry_requirements'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString()).replaceAll('{' r'major_version' '}', encodeQueryParameter(_serializers, majorVersion, const FullType(String)).toString()).replaceAll('{' r'minor_version' '}', encodeQueryParameter(_serializers, minorVersion, const FullType(String)).toString()).replaceAll('{' r'name__v' '}', encodeQueryParameter(_serializers, nameV, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Initiate Document User Action
  /// 
  ///
  /// Parameters:
  /// * [id] - The document id field value from which to retrieve available user actions.
  /// * [majorVersion] - The major version number of the document.
  /// * [minorVersion] - The minor version number of the document.
  /// * [nameV] - The action name__v field value to initiate. This is retrieved from the Retrieve User Action request.
  /// * [authorization] 
  /// * [contentType] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut({ 
    required String id,
    required String majorVersion,
    required String minorVersion,
    required String nameV,
    String? authorization,
    String? contentType,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString()).replaceAll('{' r'major_version' '}', encodeQueryParameter(_serializers, majorVersion, const FullType(String)).toString()).replaceAll('{' r'minor_version' '}', encodeQueryParameter(_serializers, minorVersion, const FullType(String)).toString()).replaceAll('{' r'name__v' '}', encodeQueryParameter(_serializers, nameV, const FullType(String)).toString());
    final _options = Options(
      method: r'PUT',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (contentType != null) r'Content-Type': contentType,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve User Actions on Multiple Documents
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsLifecycleActionsPost({ 
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/lifecycle_actions';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Initiate Bulk Document User Actions
  /// 
  ///
  /// Parameters:
  /// * [userActionName] - The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Documents endpoint.
  /// * [authorization] 
  /// * [contentType] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsLifecycleActionsUserActionNamePut({ 
    required String userActionName,
    String? authorization,
    String? contentType,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/lifecycle_actions/{user_action_name}'.replaceAll('{' r'user_action_name' '}', encodeQueryParameter(_serializers, userActionName, const FullType(String)).toString());
    final _options = Options(
      method: r'PUT',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (contentType != null) r'Content-Type': contentType,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Create Single Document
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIMigrationMode] - When set to true,  you can use the status__v field to create documents in any lifecycle state. Additionally, you can manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsPost({ 
    String? authorization,
    String? accept,
    bool? xVaultAPIMigrationMode,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIMigrationMode != null) r'X-VaultAPI-MigrationMode': xVaultAPIMigrationMode,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Delete Multiple Document Relationships
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsRelationshipsBatchDelete({ 
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/relationships/batch';
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Create Multiple Document Relationships
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsRelationshipsBatchPost({ 
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/relationships/batch';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Delete Multiple Document Renditions
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsRenditionsBatchDelete({ 
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/renditions/batch';
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Add Multiple Document Renditions
  /// 
  ///
  /// Parameters:
  /// * [idParam] - If you’re identifying documents in your input by their external ID
  /// * [largeSizeAsset] - If set to true, indicates that the renditions to add are of the Large Size Asset (large_size_asset__v) rendition type. Vault applies Document Migration Mode limitations to renditions created with the request, but Document Migration permission is not required and your vault need not be in Migration Mode to use the parameter. Note that the request results in an error if the CSV contains any rendition type other than large_size_asset__v.
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIMigrationMode] - Must be set to true when importing any rendition type other than large_size_asset__v. You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsRenditionsBatchPost({ 
    String? idParam,
    String? largeSizeAsset,
    String? authorization,
    String? accept,
    String? contentType,
    bool? xVaultAPIMigrationMode,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/renditions/batch';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIMigrationMode != null) r'X-VaultAPI-MigrationMode': xVaultAPIMigrationMode,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (idParam != null) r'idParam': encodeQueryParameter(_serializers, idParam, const FullType(String)),
      if (largeSizeAsset != null) r'largeSizeAsset': encodeQueryParameter(_serializers, largeSizeAsset, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Remove Users and Groups from Roles on Multiple Documents &amp; Binders
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [contentType] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsRolesBatchDelete({ 
    String? authorization,
    String? contentType,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/roles/batch';
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (contentType != null) r'Content-Type': contentType,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Assign Users &amp; Groups to Roles on Multiple Documents &amp; Binders
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsRolesBatchPost({ 
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/roles/batch';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Document Template Collection
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsTemplatesGet({ 
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/templates';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Create Single Document Template
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [contentType] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsTemplatesPost({ 
    String? authorization,
    String? contentType,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/templates';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (contentType != null) r'Content-Type': contentType,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Update Multiple Document Templates
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsTemplatesPut({ 
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/templates';
    final _options = Options(
      method: r'PUT',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Delete Basic Document Template
  /// 
  ///
  /// Parameters:
  /// * [templateName] - The document template name__v field value.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsTemplatesTemplateNameDelete({ 
    required String templateName,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/templates/{template_name}'.replaceAll('{' r'template_name' '}', encodeQueryParameter(_serializers, templateName, const FullType(String)).toString());
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Download Document Template File
  /// 
  ///
  /// Parameters:
  /// * [templateName] - The document template name__v field value.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsTemplatesTemplateNameFileGet({ 
    required String templateName,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/templates/{template_name}/file'.replaceAll('{' r'template_name' '}', encodeQueryParameter(_serializers, templateName, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Document Template Attributes
  /// 
  ///
  /// Parameters:
  /// * [templateName] - The document template name__v field value.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsTemplatesTemplateNameGet({ 
    required String templateName,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/templates/{template_name}'.replaceAll('{' r'template_name' '}', encodeQueryParameter(_serializers, templateName, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Update Single Document Template
  /// 
  ///
  /// Parameters:
  /// * [templateName] - The document template name__v field value.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsTemplatesTemplateNamePut({ 
    required String templateName,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/templates/{template_name}'.replaceAll('{' r'template_name' '}', encodeQueryParameter(_serializers, templateName, const FullType(String)).toString());
    final _options = Options(
      method: r'PUT',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Document Tokens
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [contentType] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsTokensPost({ 
    String? authorization,
    String? contentType,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/tokens';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (contentType != null) r'Content-Type': contentType,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Export Document Versions
  /// 
  ///
  /// Parameters:
  /// * [source_] - Optional: To exclude source files, include a query parameter source=false. If omitted, defaults to true.
  /// * [renditions] - Optional: To include renditions, include a query parameter renditions=true. If omitted, defaults to false.
  /// * [authorization] 
  /// * [contentType] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsVersionsBatchActionsFileextractPost({ 
    bool? source_,
    bool? renditions,
    String? authorization,
    String? contentType,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/versions/batch/actions/fileextract';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (contentType != null) r'Content-Type': contentType,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (source_ != null) r'source': encodeQueryParameter(_serializers, source_, const FullType(bool)),
      if (renditions != null) r'renditions': encodeQueryParameter(_serializers, renditions, const FullType(bool)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Delete Multiple Document Versions
  /// 
  ///
  /// Parameters:
  /// * [idParam] - If you’re identifying documents in your input by their external ID
  /// * [authorization] 
  /// * [contentType] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsVersionsBatchDelete({ 
    String? idParam,
    String? authorization,
    String? contentType,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/versions/batch';
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (contentType != null) r'Content-Type': contentType,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (idParam != null) r'idParam': encodeQueryParameter(_serializers, idParam, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Create Multiple Document Versions
  /// 
  ///
  /// Parameters:
  /// * [idParam] - If you’re identifying documents in your input by their external ID
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIMigrationMode] - Must be set to true. Vault allows you to manually set the name and version number and to create documents in any lifecycle state using the `status__v` field, but does not allow you to change the document number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDocumentsVersionsBatchPost({ 
    String? idParam,
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIMigrationMode,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/documents/versions/batch';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIMigrationMode != null) r'X-VaultAPI-MigrationMode': xVaultAPIMigrationMode,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (idParam != null) r'idParam': encodeQueryParameter(_serializers, idParam, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Domain Information
  /// 
  ///
  /// Parameters:
  /// * [includeApplication] - To include Vault application type information in the response, set include_application to true. If omitted, defaults to false and application information is not included.
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDomainGet({ 
    bool? includeApplication,
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/domain';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (includeApplication != null) r'include_application': encodeQueryParameter(_serializers, includeApplication, const FullType(bool)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Domains
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsDomainsGet({ 
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/domains';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Add EDL Matched Documents
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [contentType] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsEdlMatchedDocumentsBatchActionsAddPost({ 
    String? authorization,
    String? contentType,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/edl_matched_documents/batch/actions/add';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (contentType != null) r'Content-Type': contentType,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Remove EDL Matched Documents
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [contentType] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsEdlMatchedDocumentsBatchActionsRemovePost({ 
    String? authorization,
    String? contentType,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/edl_matched_documents/batch/actions/remove';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (contentType != null) r'Content-Type': contentType,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Auto Managed Groups
  /// 
  ///
  /// Parameters:
  /// * [limit] - Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 1000. 
  /// * [offset] - Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51. If omitted, defaults to 0.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsGroupsAutoGet({ 
    String? limit,
    String? offset,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/groups/auto';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(String)),
      if (offset != null) r'offset': encodeQueryParameter(_serializers, offset, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve All Groups
  /// 
  ///
  /// Parameters:
  /// * [includeImplied] - When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. If omitted, the response includes only the members__v field. These users are individually added to a group by an Admin.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsGroupsGet({ 
    String? includeImplied,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/groups';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (includeImplied != null) r'includeImplied': encodeQueryParameter(_serializers, includeImplied, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Delete Group
  /// 
  ///
  /// Parameters:
  /// * [groupId] - The group id field value.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsGroupsGroupIdDelete({ 
    required String groupId,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/groups/{group_id}'.replaceAll('{' r'group_id' '}', encodeQueryParameter(_serializers, groupId, const FullType(String)).toString());
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Group
  /// 
  ///
  /// Parameters:
  /// * [groupId] - The group id field value.
  /// * [includeImplied] - When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. When not used, the response includes only the members__v field. These users are individually added to a group by Admin.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsGroupsGroupIdGet({ 
    required String groupId,
    bool? includeImplied,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/groups/{group_id}'.replaceAll('{' r'group_id' '}', encodeQueryParameter(_serializers, groupId, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (includeImplied != null) r'includeImplied': encodeQueryParameter(_serializers, includeImplied, const FullType(bool)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Update Group
  /// 
  ///
  /// Parameters:
  /// * [groupId] - The group id field value.
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsGroupsGroupIdPut({ 
    required String groupId,
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/groups/{group_id}'.replaceAll('{' r'group_id' '}', encodeQueryParameter(_serializers, groupId, const FullType(String)).toString());
    final _options = Options(
      method: r'PUT',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Create Group 
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsGroupsPost({ 
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/groups';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Application License Usage
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsLicensesGet({ 
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/licenses';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve All Multi-Record Workflows
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsObjectworkflowsActionsGet({ 
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/objectworkflows/actions';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Multi-Record Workflow Details
  /// 
  ///
  /// Parameters:
  /// * [workflowName] 
  /// * [authorization] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsObjectworkflowsActionsWorkflowNameGet({ 
    required String workflowName,
    String? authorization,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/objectworkflows/actions/{workflow_name}'.replaceAll('{' r'workflow_name' '}', encodeQueryParameter(_serializers, workflowName, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Initiate Multi-Record Workflow
  /// 
  ///
  /// Parameters:
  /// * [workflowName] 
  /// * [authorization] 
  /// * [contentType] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsObjectworkflowsActionsWorkflowNamePost({ 
    required String workflowName,
    String? authorization,
    String? contentType,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/objectworkflows/actions/{workflow_name}'.replaceAll('{' r'workflow_name' '}', encodeQueryParameter(_serializers, workflowName, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (contentType != null) r'Content-Type': contentType,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Workflows
  /// 
  ///
  /// Parameters:
  /// * [objectV] - To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v={name__v}&record_id__v={id}. These two parameters are required when the participant parameter is not used. 
  /// * [recordIdV] - To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v={name__v}&record_id__v={id}. These two parameters are required when the participant parameter is not used. 
  /// * [participant] - To retrieve all workflows available to a particular user, include the user id field value as ?participant={id}. To retrieve your own workflows, set this value to ?participant=me. This parameter is required when the object__v and record_id__v parameters are not used. 
  /// * [statusV] - To retrieve all workflows with specific statuses, include one or more status name__v field values. For example: status__v=active__v, status__v=active__v,completed__v. Workflows with `status__v=active__v` are in progress for the indicated object record. Valid statuses include: active__v completed__v cancelled__v
  /// * [offset] - This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset=201. 
  /// * [pageSize] - This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size=1000. 
  /// * [loc] - When localized (translated) strings are available, retrieve them by including ?loc=true. 
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsObjectworkflowsGet({ 
    String? objectV,
    String? recordIdV,
    String? participant,
    String? statusV,
    String? offset,
    String? pageSize,
    String? loc,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/objectworkflows';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (objectV != null) r'object__v': encodeQueryParameter(_serializers, objectV, const FullType(String)),
      if (recordIdV != null) r'record_id__v': encodeQueryParameter(_serializers, recordIdV, const FullType(String)),
      if (participant != null) r'participant': encodeQueryParameter(_serializers, participant, const FullType(String)),
      if (statusV != null) r'status__v': encodeQueryParameter(_serializers, statusV, const FullType(String)),
      if (offset != null) r'offset': encodeQueryParameter(_serializers, offset, const FullType(String)),
      if (pageSize != null) r'page_size': encodeQueryParameter(_serializers, pageSize, const FullType(String)),
      if (loc != null) r'loc': encodeQueryParameter(_serializers, loc, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Workflow Tasks
  /// 
  ///
  /// Parameters:
  /// * [objectV] - To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v={name__v}&record_id__v={id}. These two parameters are required when the assignee__v parameter is not used.
  /// * [recordIdV] - To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v={name__v}&record_id__v={id}. These two parameters are required when the assignee__v parameter is not used.
  /// * [assigneeV] - To retrieve all workflow tasks available to a particular user, include the user id field value as ?assignee__v={id}. To retrieve your own workflow tasks, set this value to ?assignee__v=me. This parameter is required when the object__v and record_id__v parameters are not used. 
  /// * [statusV] - To retrieve all workflow tasks with specific statuses, include one or more status name__v field values. For example: ?status__v=available__v or ?status__v=available__v,completed__v. 
  /// * [offset] - This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset=201. 
  /// * [pageSize] - This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size=1000. 
  /// * [loc] - When localized (translated) strings are available, retrieve them by including ?loc=true. 
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsObjectworkflowsTasksGet({ 
    String? objectV,
    String? recordIdV,
    String? assigneeV,
    String? statusV,
    String? offset,
    String? pageSize,
    String? loc,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/objectworkflows/tasks';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (objectV != null) r'object__v': encodeQueryParameter(_serializers, objectV, const FullType(String)),
      if (recordIdV != null) r'record_id__v': encodeQueryParameter(_serializers, recordIdV, const FullType(String)),
      if (assigneeV != null) r'assignee__v': encodeQueryParameter(_serializers, assigneeV, const FullType(String)),
      if (statusV != null) r'status__v': encodeQueryParameter(_serializers, statusV, const FullType(String)),
      if (offset != null) r'offset': encodeQueryParameter(_serializers, offset, const FullType(String)),
      if (pageSize != null) r'page_size': encodeQueryParameter(_serializers, pageSize, const FullType(String)),
      if (loc != null) r'loc': encodeQueryParameter(_serializers, loc, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Accept Single Record Workflow Task
  /// 
  ///
  /// Parameters:
  /// * [taskId] - The task id field value.
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsObjectworkflowsTasksTaskIdActionsAcceptPost({ 
    required String taskId,
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/objectworkflows/tasks/{task_id}/actions/accept'.replaceAll('{' r'task_id' '}', encodeQueryParameter(_serializers, taskId, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Cancel Workflow Task
  /// 
  ///
  /// Parameters:
  /// * [taskId] - The task id field value.
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsObjectworkflowsTasksTaskIdActionsCancelPost({ 
    required String taskId,
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/objectworkflows/tasks/{task_id}/actions/cancel'.replaceAll('{' r'task_id' '}', encodeQueryParameter(_serializers, taskId, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Complete Single Record Workflow Task
  /// 
  ///
  /// Parameters:
  /// * [taskId] - The task id field value.
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsObjectworkflowsTasksTaskIdActionsCompletePost({ 
    required String taskId,
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/objectworkflows/tasks/{task_id}/actions/complete'.replaceAll('{' r'task_id' '}', encodeQueryParameter(_serializers, taskId, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Workflow Task Actions
  /// 
  ///
  /// Parameters:
  /// * [taskId] - The task id field value.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsObjectworkflowsTasksTaskIdActionsGet({ 
    required String taskId,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/objectworkflows/tasks/{task_id}/actions'.replaceAll('{' r'task_id' '}', encodeQueryParameter(_serializers, taskId, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Accept Multi-item Workflow Task
  /// 
  ///
  /// Parameters:
  /// * [taskId] - The task id field value.
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsObjectworkflowsTasksTaskIdActionsMdwacceptPost({ 
    required String taskId,
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/objectworkflows/tasks/{task_id}/actions/mdwaccept'.replaceAll('{' r'task_id' '}', encodeQueryParameter(_serializers, taskId, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Complete Multi-item Workflow Task
  /// 
  ///
  /// Parameters:
  /// * [taskId] - The task id field value.
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsObjectworkflowsTasksTaskIdActionsMdwcompletePost({ 
    required String taskId,
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/objectworkflows/tasks/{task_id}/actions/mdwcomplete'.replaceAll('{' r'task_id' '}', encodeQueryParameter(_serializers, taskId, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Manage Multi-Item Workflow Content
  /// 
  ///
  /// Parameters:
  /// * [taskId] - The task id field value.
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPost({ 
    required String taskId,
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/objectworkflows/tasks/{task_id}/actions/mdwmanagecontent'.replaceAll('{' r'task_id' '}', encodeQueryParameter(_serializers, taskId, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Reassign Multi-item Workflow Task
  /// 
  ///
  /// Parameters:
  /// * [taskId] - The id of the task to reassign.
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsObjectworkflowsTasksTaskIdActionsMdwreassignPost({ 
    required String taskId,
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/objectworkflows/tasks/{task_id}/actions/mdwreassign'.replaceAll('{' r'task_id' '}', encodeQueryParameter(_serializers, taskId, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Reassign Single Record Workflow Task
  /// 
  ///
  /// Parameters:
  /// * [taskId] - The id of the task to reassign.
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsObjectworkflowsTasksTaskIdActionsReassignPost({ 
    required String taskId,
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/objectworkflows/tasks/{task_id}/actions/reassign'.replaceAll('{' r'task_id' '}', encodeQueryParameter(_serializers, taskId, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Workflow Task Action Details
  /// 
  ///
  /// Parameters:
  /// * [taskId] - The task id field value.
  /// * [taskAction] - The name of the task action retrieved from Retrieve Workflow Task Actions.
  /// * [loc] - When localized (translated) strings are available, retrieve them by including loc=true. 
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsObjectworkflowsTasksTaskIdActionsTaskActionGet({ 
    required String taskId,
    required String taskAction,
    String? loc,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/objectworkflows/tasks/{task_id}/actions/{task_action}'.replaceAll('{' r'task_id' '}', encodeQueryParameter(_serializers, taskId, const FullType(String)).toString()).replaceAll('{' r'task_action' '}', encodeQueryParameter(_serializers, taskAction, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (loc != null) r'loc': encodeQueryParameter(_serializers, loc, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Undo Workflow Task Acceptance
  /// 
  ///
  /// Parameters:
  /// * [taskId] - The task id field value.
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsObjectworkflowsTasksTaskIdActionsUndoacceptPost({ 
    required String taskId,
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/objectworkflows/tasks/{task_id}/actions/undoaccept'.replaceAll('{' r'task_id' '}', encodeQueryParameter(_serializers, taskId, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Update Workflow Task Due Date
  /// 
  ///
  /// Parameters:
  /// * [taskId] - The id of the task.
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePost({ 
    required String taskId,
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/objectworkflows/tasks/{task_id}/actions/updateduedate'.replaceAll('{' r'task_id' '}', encodeQueryParameter(_serializers, taskId, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Workflow Task Details
  /// 
  ///
  /// Parameters:
  /// * [taskId] - The task id field value.
  /// * [loc] - When localized (translated) strings are available, retrieve them by including loc=true.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsObjectworkflowsTasksTaskIdGet({ 
    required String taskId,
    bool? loc,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/objectworkflows/tasks/{task_id}'.replaceAll('{' r'task_id' '}', encodeQueryParameter(_serializers, taskId, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (loc != null) r'loc': encodeQueryParameter(_serializers, loc, const FullType(bool)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Workflow Actions
  /// 
  ///
  /// Parameters:
  /// * [workflowId] - The workflow id field value.
  /// * [loc] - When localized (translated) strings are available, retrieve them by including loc=true. 
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsObjectworkflowsWorkflowIdActionsGet({ 
    required String workflowId,
    String? loc,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/objectworkflows/{workflow_id}/actions'.replaceAll('{' r'workflow_id' '}', encodeQueryParameter(_serializers, workflowId, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (loc != null) r'loc': encodeQueryParameter(_serializers, loc, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Workflow Action Details
  /// 
  ///
  /// Parameters:
  /// * [workflowId] - The workflow id field value.
  /// * [workflowAction] - The workflow action name retrieved from Retrieve Workflow Actions.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet({ 
    required String workflowId,
    required String workflowAction,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/objectworkflows/{workflow_id}/actions/{workflow_action}'.replaceAll('{' r'workflow_id' '}', encodeQueryParameter(_serializers, workflowId, const FullType(String)).toString()).replaceAll('{' r'workflow_action' '}', encodeQueryParameter(_serializers, workflowAction, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Initiate Workflow Action
  /// 
  ///
  /// Parameters:
  /// * [workflowId] - The workflow id field value.
  /// * [workflowAction] - The workflow action name retrieved from Retrieve Workflow Actions.
  /// * [documentsSys] - Include the id or ids as a comma-separated list of the document(s) to be removed from a document workflow when using the removecontent action. If your workflow_action is remove_content, include the id of the document to remove the workflow. To remove multiple documents, use a comma-separated list of ids.
  /// * [authorization] 
  /// * [contentType] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost({ 
    required String workflowId,
    required String workflowAction,
    String? documentsSys,
    String? authorization,
    String? contentType,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/objectworkflows/{workflow_id}/actions/{workflow_action}'.replaceAll('{' r'workflow_id' '}', encodeQueryParameter(_serializers, workflowId, const FullType(String)).toString()).replaceAll('{' r'workflow_action' '}', encodeQueryParameter(_serializers, workflowAction, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (contentType != null) r'Content-Type': contentType,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (documentsSys != null) r'documents__sys': encodeQueryParameter(_serializers, documentsSys, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Workflow Details
  /// 
  ///
  /// Parameters:
  /// * [workflowId] - The workflow id field value.
  /// * [loc] - When localized (translated) strings are available, retrieve them by including loc=true.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsObjectworkflowsWorkflowIdGet({ 
    required String workflowId,
    bool? loc,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/objectworkflows/{workflow_id}'.replaceAll('{' r'workflow_id' '}', encodeQueryParameter(_serializers, workflowId, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (loc != null) r'loc': encodeQueryParameter(_serializers, loc, const FullType(bool)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve All Picklists
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsPicklistsGet({ 
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/picklists';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Picklist Values
  /// 
  ///
  /// Parameters:
  /// * [picklistName] - The picklist name field value (license_type__v, product_family__c, region__c, etc.)
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsPicklistsPicklistNameGet({ 
    required String picklistName,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/picklists/{picklist_name}'.replaceAll('{' r'picklist_name' '}', encodeQueryParameter(_serializers, picklistName, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Inactivate Picklist Value
  /// 
  ///
  /// Parameters:
  /// * [picklistName] - The picklist name field value (license_type__v, product_family__c, region__c, etc.)
  /// * [picklistValueName] - The picklist value name field value (north_america__c, south_america__c, etc.)
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsPicklistsPicklistNamePicklistValueNameDelete({ 
    required String picklistName,
    required String picklistValueName,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/picklists/{picklist_name}/{picklist_value_name}'.replaceAll('{' r'picklist_name' '}', encodeQueryParameter(_serializers, picklistName, const FullType(String)).toString()).replaceAll('{' r'picklist_value_name' '}', encodeQueryParameter(_serializers, picklistValueName, const FullType(String)).toString());
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Update Picklist Value
  /// 
  ///
  /// Parameters:
  /// * [picklistName] - The picklist name field value (license_type__v, product_family__c, region__c, etc.)
  /// * [picklistValueName] - The picklist value name field value (north_america__c, south_america__c, etc.)
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsPicklistsPicklistNamePicklistValueNamePut({ 
    required String picklistName,
    required String picklistValueName,
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/picklists/{picklist_name}/{picklist_value_name}'.replaceAll('{' r'picklist_name' '}', encodeQueryParameter(_serializers, picklistName, const FullType(String)).toString()).replaceAll('{' r'picklist_value_name' '}', encodeQueryParameter(_serializers, picklistValueName, const FullType(String)).toString());
    final _options = Options(
      method: r'PUT',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Create Picklist Values
  /// 
  ///
  /// Parameters:
  /// * [picklistName] - The picklist name field value (license_type__v, product_family__c, region__c, etc.)
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsPicklistsPicklistNamePost({ 
    required String picklistName,
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/picklists/{picklist_name}'.replaceAll('{' r'picklist_name' '}', encodeQueryParameter(_serializers, picklistName, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Update Picklist Value Label
  /// 
  ///
  /// Parameters:
  /// * [picklistName] - The picklist name field value (license_type__v, product_family__c, region__c, etc.)
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsPicklistsPicklistNamePut({ 
    required String picklistName,
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/picklists/{picklist_name}'.replaceAll('{' r'picklist_name' '}', encodeQueryParameter(_serializers, picklistName, const FullType(String)).toString());
    final _options = Options(
      method: r'PUT',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Build Production Vault
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsSandboxActionsBuildproductionPost({ 
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/sandbox/actions/buildproduction';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Promote to Production
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsSandboxActionsPromoteproductionPost({ 
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/sandbox/actions/promoteproduction';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Recheck Sandbox Usage Limit
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsSandboxActionsRecheckusagePost({ 
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/sandbox/actions/recheckusage';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Change Sandbox Size
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsSandboxBatchChangesizePost({ 
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/sandbox/batch/changesize';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Set Sandbox Entitlements
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsSandboxEntitlementsSetPost({ 
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/sandbox/entitlements/set';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Sandboxes
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsSandboxGet({ 
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/sandbox';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Delete Sandbox
  /// 
  ///
  /// Parameters:
  /// * [name] - The name of the sandbox vault to delete. This is the name which appears on the My Vaults page.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsSandboxNameDelete({ 
    required String name,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/sandbox/{name}'.replaceAll('{' r'name' '}', encodeQueryParameter(_serializers, name, const FullType(String)).toString());
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Create or Refresh Sandbox
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsSandboxPost({ 
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/sandbox';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Update Sandbox Snapshot
  /// 
  ///
  /// Parameters:
  /// * [apiName] - The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsSandboxSnapshotApiNameActionsUpdatePost({ 
    required String apiName,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/sandbox/snapshot/{api_name}/actions/update'.replaceAll('{' r'api_name' '}', encodeQueryParameter(_serializers, apiName, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Upgrade Sandbox Snapshot
  /// 
  ///
  /// Parameters:
  /// * [apiName] - The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsSandboxSnapshotApiNameActionsUpgradePost({ 
    required String apiName,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/sandbox/snapshot/{api_name}/actions/upgrade'.replaceAll('{' r'api_name' '}', encodeQueryParameter(_serializers, apiName, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Delete Sandbox Snapshot
  /// 
  ///
  /// Parameters:
  /// * [apiName] - The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsSandboxSnapshotApiNameDelete({ 
    required String apiName,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/sandbox/snapshot/{api_name}'.replaceAll('{' r'api_name' '}', encodeQueryParameter(_serializers, apiName, const FullType(String)).toString());
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Sandbox Snapshots
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsSandboxSnapshotGet({ 
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/sandbox/snapshot';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Create Sandbox Snapshot
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsSandboxSnapshotPost({ 
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/sandbox/snapshot';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Refresh Sandbox from Snapshot
  /// 
  ///
  /// Parameters:
  /// * [vaultId] - The Vault ID of the sandbox to be refreshed.
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsSandboxVaultIdActionsRefreshPost({ 
    required String vaultId,
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/sandbox/{vault_id}/actions/refresh'.replaceAll('{' r'vault_id' '}', encodeQueryParameter(_serializers, vaultId, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Sandbox Details by ID
  /// 
  ///
  /// Parameters:
  /// * [vaultId] 
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsSandboxVaultIdGet({ 
    required String vaultId,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/sandbox/{vault_id}'.replaceAll('{' r'vault_id' '}', encodeQueryParameter(_serializers, vaultId, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve All Security Policies
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsSecuritypoliciesGet({ 
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/securitypolicies';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Security Policy
  /// 
  ///
  /// Parameters:
  /// * [securityPolicyName] - Security policy name__v field value (retrieved from previous request). This is typically a numeric value.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsSecuritypoliciesSecurityPolicyNameGet({ 
    required String securityPolicyName,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/securitypolicies/{security_policy_name}'.replaceAll('{' r'security_policy_name' '}', encodeQueryParameter(_serializers, securityPolicyName, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve All Users
  /// 
  ///
  /// Parameters:
  /// * [vaults] - Retrieve all users assigned to all Vaults in your domain.
  /// * [excludeVaultMembership] - Optional: Set to false to include vault_membership fields. If true or omitted, vault_membership fields are not included in the response.
  /// * [excludeAppLicensing] - Optional: Set to false to include app_licensing fields. If true or omitted, app_licensing fields are not included in the response.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsUsersGet({ 
    String? vaults,
    String? excludeVaultMembership,
    String? excludeAppLicensing,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/users/';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (vaults != null) r'vaults': encodeQueryParameter(_serializers, vaults, const FullType(String)),
      if (excludeVaultMembership != null) r'exclude_vault_membership': encodeQueryParameter(_serializers, excludeVaultMembership, const FullType(String)),
      if (excludeAppLicensing != null) r'exclude_app_licensing': encodeQueryParameter(_serializers, excludeAppLicensing, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve User
  /// 
  ///
  /// Parameters:
  /// * [id] - The user id field value. Use the value me to get information for the currently authenticated user.
  /// * [excludeVaultMembership] - Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response.
  /// * [excludeAppLicensing] - Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsUsersIdGet({ 
    required String id,
    String? excludeVaultMembership,
    String? excludeAppLicensing,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/users/{id}'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (excludeVaultMembership != null) r'exclude_vault_membership': encodeQueryParameter(_serializers, excludeVaultMembership, const FullType(String)),
      if (excludeAppLicensing != null) r'exclude_app_licensing': encodeQueryParameter(_serializers, excludeAppLicensing, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve User Permissions
  /// 
  ///
  /// Parameters:
  /// * [id] - The ID of the user. Use the value me to retrieve information for the currently authenticated user.
  /// * [filter] - Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsUsersIdPermissionsGet({ 
    required String id,
    String? filter,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/users/{id}/permissions'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (filter != null) r'filter': encodeQueryParameter(_serializers, filter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Update Single User
  /// 
  ///
  /// Parameters:
  /// * [id] - The user id field value. Use the value me to get information for the currently authenticated user.
  /// * [authorization] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsUsersIdPut({ 
    required String id,
    String? authorization,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/users/{id}'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'PUT',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Validate Session User
  /// 
  ///
  /// Parameters:
  /// * [excludeVaultMembership] - Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response.
  /// * [excludeAppLicensing] - Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsUsersMeGet({ 
    String? excludeVaultMembership,
    String? excludeAppLicensing,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/users/me';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (excludeVaultMembership != null) r'exclude_vault_membership': encodeQueryParameter(_serializers, excludeVaultMembership, const FullType(String)),
      if (excludeAppLicensing != null) r'exclude_app_licensing': encodeQueryParameter(_serializers, excludeAppLicensing, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Change My Password
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [contentType] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsUsersMePasswordPost({ 
    String? authorization,
    String? contentType,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/users/me/password';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (contentType != null) r'Content-Type': contentType,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve My User Permissions
  /// 
  ///
  /// Parameters:
  /// * [filter] - Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsUsersMePermissionsGet({ 
    String? filter,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/users/me/permissions';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (filter != null) r'filter': encodeQueryParameter(_serializers, filter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Update My User
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsUsersMePut({ 
    String? authorization,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/users/me';
    final _options = Options(
      method: r'PUT',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Create Single User
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsUsersPost({ 
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/users';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Update Multiple Users
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [contentType] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsUsersPut({ 
    String? authorization,
    String? contentType,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/users';
    final _options = Options(
      method: r'PUT',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (contentType != null) r'Content-Type': contentType,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Disable User
  /// 
  ///
  /// Parameters:
  /// * [userId] - The user id field value. 
  /// * [domain] - When true, this disables the user account in all vaults in the domain.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsUsersUserIdDelete({ 
    required String userId,
    bool? domain,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/users/{user_id}'.replaceAll('{' r'user_id' '}', encodeQueryParameter(_serializers, userId, const FullType(String)).toString());
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (domain != null) r'domain': encodeQueryParameter(_serializers, domain, const FullType(bool)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Update Vault Membership
  /// 
  ///
  /// Parameters:
  /// * [userId] - The user id field value.
  /// * [vaultId] - The system-managed id field value assigned to each vault in the domain.
  /// * [authorization] 
  /// * [contentType] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsUsersUserIdVaultMembershipVaultIdPut({ 
    required String userId,
    required String vaultId,
    String? authorization,
    String? contentType,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/users/{user_id}/vault_membership/{vault_id}'.replaceAll('{' r'user_id' '}', encodeQueryParameter(_serializers, userId, const FullType(String)).toString()).replaceAll('{' r'vault_id' '}', encodeQueryParameter(_serializers, vaultId, const FullType(String)).toString());
    final _options = Options(
      method: r'PUT',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (contentType != null) r'Content-Type': contentType,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Vault Compare
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsVaultActionsComparePost({ 
    String? authorization,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/vault/actions/compare';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Vault Configuration Report
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> objectsVaultActionsConfigreportPost({ 
    String? authorization,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/objects/vault/actions/configreport';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Component Definition Query
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> queryComponentsPost({ 
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/query/components';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Next Page URL
  /// 
  ///
  /// Parameters:
  /// * [nextPage] 
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIDescribeQuery] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> queryNextPagePost({ 
    required String nextPage,
    String? authorization,
    String? accept,
    bool? xVaultAPIDescribeQuery,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/query/{next_page}'.replaceAll('{' r'next_page' '}', encodeQueryParameter(_serializers, nextPage, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIDescribeQuery != null) r'X-VaultAPI-DescribeQuery': xVaultAPIDescribeQuery,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Submitting a Query
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIDescribeQuery] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> queryPost({ 
    String? authorization,
    String? accept,
    bool? xVaultAPIDescribeQuery,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/query';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIDescribeQuery != null) r'X-VaultAPI-DescribeQuery': xVaultAPIDescribeQuery,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Previous Page URL
  /// 
  ///
  /// Parameters:
  /// * [previousPage] 
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIDescribeQuery] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> queryPreviousPagePost({ 
    required String previousPage,
    String? authorization,
    String? accept,
    bool? xVaultAPIDescribeQuery,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/query/{previous_page}'.replaceAll('{' r'previous_page' '}', encodeQueryParameter(_serializers, previousPage, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIDescribeQuery != null) r'X-VaultAPI-DescribeQuery': xVaultAPIDescribeQuery,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Current User with SCIM
  /// 
  ///
  /// Parameters:
  /// * [attributes] - Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.
  /// * [excludedAttributes] - Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> scimV2MeGet({ 
    String? attributes,
    String? excludedAttributes,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/scim/v2/Me';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (attributes != null) r'attributes': encodeQueryParameter(_serializers, attributes, const FullType(String)),
      if (excludedAttributes != null) r'excludedAttributes': encodeQueryParameter(_serializers, excludedAttributes, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Update Current User with SCIM
  /// 
  ///
  /// Parameters:
  /// * [attributes] - Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.
  /// * [excludedAttributes] - Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> scimV2MePut({ 
    String? attributes,
    String? excludedAttributes,
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/scim/v2/Me';
    final _options = Options(
      method: r'PUT',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (attributes != null) r'attributes': encodeQueryParameter(_serializers, attributes, const FullType(String)),
      if (excludedAttributes != null) r'excludedAttributes': encodeQueryParameter(_serializers, excludedAttributes, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve All SCIM Resource Types
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> scimV2ResourceTypesGet({ 
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/scim/v2/ResourceTypes';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Single SCIM Resource Type
  /// 
  ///
  /// Parameters:
  /// * [type] - A specific resource type. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the id value.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> scimV2ResourceTypesTypeGet({ 
    required String type,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/scim/v2/ResourceTypes/{type}'.replaceAll('{' r'type' '}', encodeQueryParameter(_serializers, type, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve All SCIM Schema Information
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> scimV2SchemasGet({ 
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/scim/v2/Schemas';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Single SCIM Schema Information
  /// 
  ///
  /// Parameters:
  /// * [id] - The ID of a specific schema. For example, urn:ietf:params:scim:schemas:extension:veevavault:2.0:User.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> scimV2SchemasIdGet({ 
    required String id,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/scim/v2/Schemas/{id}'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve SCIM Provider
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> scimV2ServiceProviderConfigGet({ 
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/scim/v2/ServiceProviderConfig';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve SCIM Resources
  /// 
  ///
  /// Parameters:
  /// * [type] - The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value.
  /// * [filter] - Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \"{value}\". For example, to filter for a particular user name, userName eq \"john\". Complex expressions are not supported, and eq is the only supported operator.
  /// * [attributes] - Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.
  /// * [excludedAttributes] - Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
  /// * [sortBy] - Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage
  /// * [sortOrder] - Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000.
  /// * [startIndex] - Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> scimV2TypeGet({ 
    required String type,
    String? filter,
    String? attributes,
    String? excludedAttributes,
    String? sortBy,
    String? sortOrder,
    String? startIndex,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/scim/v2/{type}'.replaceAll('{' r'type' '}', encodeQueryParameter(_serializers, type, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (filter != null) r'filter': encodeQueryParameter(_serializers, filter, const FullType(String)),
      if (attributes != null) r'attributes': encodeQueryParameter(_serializers, attributes, const FullType(String)),
      if (excludedAttributes != null) r'excludedAttributes': encodeQueryParameter(_serializers, excludedAttributes, const FullType(String)),
      if (sortBy != null) r'sortBy': encodeQueryParameter(_serializers, sortBy, const FullType(String)),
      if (sortOrder != null) r'sortOrder': encodeQueryParameter(_serializers, sortOrder, const FullType(String)),
      if (startIndex != null) r'startIndex': encodeQueryParameter(_serializers, startIndex, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Single SCIM Resource
  /// 
  ///
  /// Parameters:
  /// * [type] - The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value.
  /// * [id] - The ID of the resource to retrieve. You can retrieve all resource IDs from a particular resource type with the Retrieve SCIM Resources endpoint. For example, business_admin__v.
  /// * [attributes] - Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.
  /// * [excludedAttributes] - Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> scimV2TypeIdGet({ 
    required String type,
    required String id,
    String? attributes,
    String? excludedAttributes,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/scim/v2/{type}/{id}'.replaceAll('{' r'type' '}', encodeQueryParameter(_serializers, type, const FullType(String)).toString()).replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (attributes != null) r'attributes': encodeQueryParameter(_serializers, attributes, const FullType(String)),
      if (excludedAttributes != null) r'excludedAttributes': encodeQueryParameter(_serializers, excludedAttributes, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve All Users with SCIM
  /// 
  ///
  /// Parameters:
  /// * [filter] - Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \"{value}\". For example, to filter for a particular user name, userName eq \"john\". Complex expressions are not supported, and eq is the only supported operator.
  /// * [attributes] - Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.
  /// * [excludedAttributes] - Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
  /// * [sortBy] - Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage
  /// * [sortOrder] - Optional: Specify the order in which the sortBy parameter is applied. Allowed values are ascending or descending. If omitted, defaults to ascending.
  /// * [count] - Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000.
  /// * [startIndex] - Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> scimV2UsersGet({ 
    String? filter,
    String? attributes,
    String? excludedAttributes,
    String? sortBy,
    String? sortOrder,
    String? count,
    String? startIndex,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/scim/v2/Users';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (filter != null) r'filter': encodeQueryParameter(_serializers, filter, const FullType(String)),
      if (attributes != null) r'attributes': encodeQueryParameter(_serializers, attributes, const FullType(String)),
      if (excludedAttributes != null) r'excludedAttributes': encodeQueryParameter(_serializers, excludedAttributes, const FullType(String)),
      if (sortBy != null) r'sortBy': encodeQueryParameter(_serializers, sortBy, const FullType(String)),
      if (sortOrder != null) r'sortOrder': encodeQueryParameter(_serializers, sortOrder, const FullType(String)),
      if (count != null) r'count': encodeQueryParameter(_serializers, count, const FullType(String)),
      if (startIndex != null) r'startIndex': encodeQueryParameter(_serializers, startIndex, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Single User with SCIM
  /// 
  ///
  /// Parameters:
  /// * [id] - The id of the user you wish to update.
  /// * [filter] - Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \"{value}\". For example, to filter for a particular user name, userName eq \"john\". Complex expressions are not supported, and eq is the only supported operator.
  /// * [attributes] - Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.
  /// * [excludedAttributes] - Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> scimV2UsersIdGet({ 
    required String id,
    String? filter,
    String? attributes,
    String? excludedAttributes,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/scim/v2/Users/{id}'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (filter != null) r'filter': encodeQueryParameter(_serializers, filter, const FullType(String)),
      if (attributes != null) r'attributes': encodeQueryParameter(_serializers, attributes, const FullType(String)),
      if (excludedAttributes != null) r'excludedAttributes': encodeQueryParameter(_serializers, excludedAttributes, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Update User with SCIM
  /// 
  ///
  /// Parameters:
  /// * [id] - The id of the user you wish to update.
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> scimV2UsersIdPut({ 
    required String id,
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/scim/v2/Users/{id}'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'PUT',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Create User with SCIM
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> scimV2UsersPost({ 
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/scim/v2/Users';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Signing Certificate
  /// 
  ///
  /// Parameters:
  /// * [certId] - The cert_id is provided in each Spark message in the X-VaultAPISignature-CertificateId header.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> servicesCertificateCertIdGet({ 
    required String certId,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/services/certificate/{cert_id}'.replaceAll('{' r'cert_id' '}', encodeQueryParameter(_serializers, certId, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Disable Configuration Mode
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> servicesConfigurationModeActionsDisablePost({ 
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/services/configuration_mode/actions/disable';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Enable Configuration Mode
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> servicesConfigurationModeActionsEnablePost({ 
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/services/configuration_mode/actions/enable';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Available Direct Data Files
  /// 
  ///
  /// Parameters:
  /// * [extractType] - The Direct Data file type: incremental_directdata, full_directdata, or log_directdata. If omitted, returns all files.
  /// * [startTime] - Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 7AM on January 15, 2024 would use 2024-01-15T07:00:00Z. If omitted, defaults to the Vault’s creation date and time.
  /// * [stopTime] - Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 9AM on January 15, 2024 would use 2024-01-15T09:00:00Z. If omitted, defaults to today’s date and current time.
  /// * [accept] 
  /// * [authorization] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> servicesDirectdataFilesGet({ 
    String? extractType,
    int? startTime,
    int? stopTime,
    String? accept,
    String? authorization,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/services/directdata/files';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (accept != null) r'Accept': accept,
        if (authorization != null) r'Authorization': authorization,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (extractType != null) r'extract_type': encodeQueryParameter(_serializers, extractType, const FullType(String)),
      if (startTime != null) r'start_time': encodeQueryParameter(_serializers, startTime, const FullType(int)),
      if (stopTime != null) r'stop_time': encodeQueryParameter(_serializers, stopTime, const FullType(int)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Download Direct Data File
  /// 
  ///
  /// Parameters:
  /// * [name] - The name of the Direct Data file part. Obtain this from the Retrieve Available Direct Data Files request. For example, 146478-20240213-0000-F.001.
  /// * [accept] 
  /// * [authorization] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> servicesDirectdataFilesNameGet({ 
    required String name,
    String? accept,
    String? authorization,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/services/directdata/files/{name}'.replaceAll('{' r'name' '}', encodeQueryParameter(_serializers, name, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (accept != null) r'Accept': accept,
        if (authorization != null) r'Authorization': authorization,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Download Item Content
  /// 
  ///
  /// Parameters:
  /// * [item] - The absolute path to a file or folder. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
  /// * [authorization] 
  /// * [accept] 
  /// * [range] - Optional: Specifies a partial range of bytes to include in the upload. Maximum 50 MB. Must be in the format `bytes={min}-{max}`. For example, `bytes=0-1000`.
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> servicesFileStagingItemsContentItemGet({ 
    required String item,
    String? authorization,
    String? accept,
    String? range,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/services/file_staging/items/content/{item}'.replaceAll('{' r'item' '}', encodeQueryParameter(_serializers, item, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (range != null) r'Range': range,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Delete File or Folder
  /// 
  ///
  /// Parameters:
  /// * [item] - The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
  /// * [recursive] - Applicable to deleting folders only. If true, the request will delete the contents of a folder and all subfolders. The default is false.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> servicesFileStagingItemsItemDelete({ 
    required String item,
    String? recursive,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/services/file_staging/items/{item}'.replaceAll('{' r'item' '}', encodeQueryParameter(_serializers, item, const FullType(String)).toString());
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (recursive != null) r'recursive': encodeQueryParameter(_serializers, recursive, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// List Items at a Path
  /// 
  ///
  /// Parameters:
  /// * [item] - The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
  /// * [recursive] - If true, the response will contain the contents of all subfolders. If not specified, the default value is false.
  /// * [limit] - Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000.
  /// * [formatResult] - If set to csv, the response includes a job_id. Use the Job ID value to retrieve the status and results of the request.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> servicesFileStagingItemsItemGet({ 
    required String item,
    String? recursive,
    String? limit,
    String? formatResult,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/services/file_staging/items/{item}'.replaceAll('{' r'item' '}', encodeQueryParameter(_serializers, item, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (recursive != null) r'recursive': encodeQueryParameter(_serializers, recursive, const FullType(String)),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(String)),
      if (formatResult != null) r'format_result': encodeQueryParameter(_serializers, formatResult, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Update Folder or File
  /// 
  ///
  /// Parameters:
  /// * [item] - The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> servicesFileStagingItemsItemPut({ 
    required String item,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/services/file_staging/items/{item}'.replaceAll('{' r'item' '}', encodeQueryParameter(_serializers, item, const FullType(String)).toString());
    final _options = Options(
      method: r'PUT',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Create Folder or File
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [contentMD5] - Optional: The MD5 checksum of the file being uploaded.
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> servicesFileStagingItemsPost({ 
    String? authorization,
    String? accept,
    String? contentMD5,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/services/file_staging/items';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentMD5 != null) r'Content-MD5': contentMD5,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// List Upload Sessions
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> servicesFileStagingUploadGet({ 
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/services/file_staging/upload/';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Create Resumable Upload Session
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> servicesFileStagingUploadPost({ 
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/services/file_staging/upload';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Abort Upload Session
  /// 
  ///
  /// Parameters:
  /// * [uploadSessionId] 
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> servicesFileStagingUploadUploadSessionIdDelete({ 
    required String uploadSessionId,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/services/file_staging/upload/{upload_session_id}'.replaceAll('{' r'upload_session_id' '}', encodeQueryParameter(_serializers, uploadSessionId, const FullType(String)).toString());
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Get Upload Session Details
  /// 
  ///
  /// Parameters:
  /// * [uploadSessionId] 
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> servicesFileStagingUploadUploadSessionIdGet({ 
    required String uploadSessionId,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/services/file_staging/upload/{upload_session_id}'.replaceAll('{' r'upload_session_id' '}', encodeQueryParameter(_serializers, uploadSessionId, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// List File Parts Uploaded to Session
  /// 
  ///
  /// Parameters:
  /// * [uploadSessionId] 
  /// * [limit] - Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> servicesFileStagingUploadUploadSessionIdPartsGet({ 
    required String uploadSessionId,
    String? limit,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/services/file_staging/upload/{upload_session_id}/parts'.replaceAll('{' r'upload_session_id' '}', encodeQueryParameter(_serializers, uploadSessionId, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Commit Upload Session
  /// 
  ///
  /// Parameters:
  /// * [uploadSessionId] 
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> servicesFileStagingUploadUploadSessionIdPost({ 
    required String uploadSessionId,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/services/file_staging/upload/{upload_session_id}'.replaceAll('{' r'upload_session_id' '}', encodeQueryParameter(_serializers, uploadSessionId, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Upload to a Session
  /// 
  ///
  /// Parameters:
  /// * [uploadSessionId] 
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIFilePartNumber] - The part number, which uniquely identifies a file part and defines its position within the file as a whole. If a part is uploaded using a part number that has already been used, Vault overwrites the previously uploaded file part. You must upload parts in numerical order. For example, you cannot upload part 3 without first uploading parts 1 and 2.
  /// * [contentMD5] - Optional: The MD5 checksum of the file part being uploaded.
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> servicesFileStagingUploadUploadSessionIdPut({ 
    required String uploadSessionId,
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIFilePartNumber,
    String? contentMD5,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/services/file_staging/upload/{upload_session_id}'.replaceAll('{' r'upload_session_id' '}', encodeQueryParameter(_serializers, uploadSessionId, const FullType(String)).toString());
    final _options = Options(
      method: r'PUT',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIFilePartNumber != null) r'X-VaultAPI-FilePartNumber': xVaultAPIFilePartNumber,
        if (contentMD5 != null) r'Content-MD5': contentMD5,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Job Histories
  /// 
  ///
  /// Parameters:
  /// * [startDate] - Sets the date to start retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job.
  /// * [endDate] - Sets the date to end retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time.
  /// * [status] - Filter to only retrieve jobs in a certain status. Allowed values are success, errors_encountered, failed_to_run, missed_schedule, cancelled. If omitted, retrieves all statuses.
  /// * [limit] - Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50.
  /// * [offset] - Paginate the results displayed per page by specifying the amount of offset from the first job history returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> servicesJobsHistoriesGet({ 
    String? startDate,
    String? endDate,
    String? status,
    String? limit,
    String? offset,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/services/jobs/histories';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (startDate != null) r'start_date': encodeQueryParameter(_serializers, startDate, const FullType(String)),
      if (endDate != null) r'end_date': encodeQueryParameter(_serializers, endDate, const FullType(String)),
      if (status != null) r'status': encodeQueryParameter(_serializers, status, const FullType(String)),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(String)),
      if (offset != null) r'offset': encodeQueryParameter(_serializers, offset, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Import Bulk Translation File Job Errors
  /// 
  ///
  /// Parameters:
  /// * [jobId] - The id value of the requested import job. This was returned from the Import Bulk Translation File request.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> servicesJobsJobIdErrorsGet({ 
    required String jobId,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/services/jobs/{job_id}/errors'.replaceAll('{' r'job_id' '}', encodeQueryParameter(_serializers, jobId, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Job Status
  /// 
  ///
  /// Parameters:
  /// * [jobId] - The ID of the job, returned from the original job request.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> servicesJobsJobIdGet({ 
    required String jobId,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/services/jobs/{job_id}'.replaceAll('{' r'job_id' '}', encodeQueryParameter(_serializers, jobId, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Import Bulk Translation File Job Summary
  /// 
  ///
  /// Parameters:
  /// * [jobId] - The id value of the requested import job. This was returned from the Import Bulk Translation File request.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> servicesJobsJobIdSummaryGet({ 
    required String jobId,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/services/jobs/{job_id}/summary'.replaceAll('{' r'job_id' '}', encodeQueryParameter(_serializers, jobId, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve SDK Job Tasks
  /// 
  ///
  /// Parameters:
  /// * [jobId] - The ID of the SDK job, returned from the original job request.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> servicesJobsJobIdTasksGet({ 
    required String jobId,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/services/jobs/{job_id}/tasks'.replaceAll('{' r'job_id' '}', encodeQueryParameter(_serializers, jobId, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Job Monitors
  /// 
  ///
  /// Parameters:
  /// * [startDate] - Sets the date to start retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job.
  /// * [endDate] - Sets the date to end retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time.
  /// * [status] - Filter to only retrieve jobs in a certain status. Allowed values are scheduled, queued, running. If omitted, retrieves all statuses.
  /// * [limit] - Paginate the results by specifying the maximum number of jobs per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50.
  /// * [offset] - Paginate the results displayed per page by specifying the amount of offset from the first job instance returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> servicesJobsMonitorsGet({ 
    String? startDate,
    String? endDate,
    String? status,
    String? limit,
    String? offset,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/services/jobs/monitors';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (startDate != null) r'start_date': encodeQueryParameter(_serializers, startDate, const FullType(String)),
      if (endDate != null) r'end_date': encodeQueryParameter(_serializers, endDate, const FullType(String)),
      if (status != null) r'status': encodeQueryParameter(_serializers, status, const FullType(String)),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(String)),
      if (offset != null) r'offset': encodeQueryParameter(_serializers, offset, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Start Job
  /// 
  ///
  /// Parameters:
  /// * [jobId] - The ID of the scheduled job instance to start.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> servicesJobsStartNowJobIdPost({ 
    required String jobId,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/services/jobs/start_now/{job_id}'.replaceAll('{' r'job_id' '}', encodeQueryParameter(_serializers, jobId, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Extract Data Files
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> servicesLoaderExtractPost({ 
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/services/loader/extract';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Load Failure Log Results
  /// 
  ///
  /// Parameters:
  /// * [jobId] - The id value of the requested extract job.
  /// * [taskId] - The id value of the requested extract task.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> servicesLoaderJobIdTasksTaskIdFailurelogGet({ 
    required String jobId,
    required String taskId,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/services/loader/{job_id}/tasks/{task_id}/failurelog'.replaceAll('{' r'job_id' '}', encodeQueryParameter(_serializers, jobId, const FullType(String)).toString()).replaceAll('{' r'task_id' '}', encodeQueryParameter(_serializers, taskId, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Loader Extract Results
  /// 
  ///
  /// Parameters:
  /// * [jobId] - The id value of the requested extract job.
  /// * [taskId] - The id value of the requested extract task.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> servicesLoaderJobIdTasksTaskIdResultsGet({ 
    required String jobId,
    required String taskId,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/services/loader/{job_id}/tasks/{task_id}/results'.replaceAll('{' r'job_id' '}', encodeQueryParameter(_serializers, jobId, const FullType(String)).toString()).replaceAll('{' r'task_id' '}', encodeQueryParameter(_serializers, taskId, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Loader Extract Renditions Results
  /// 
  ///
  /// Parameters:
  /// * [jobId] - The id value of the requested extract job.
  /// * [taskId] - The id value of the requested extract task.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> servicesLoaderJobIdTasksTaskIdResultsRenditionsGet({ 
    required String jobId,
    required String taskId,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/services/loader/{job_id}/tasks/{task_id}/results/renditions'.replaceAll('{' r'job_id' '}', encodeQueryParameter(_serializers, jobId, const FullType(String)).toString()).replaceAll('{' r'task_id' '}', encodeQueryParameter(_serializers, taskId, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Load Success Log Results
  /// 
  ///
  /// Parameters:
  /// * [jobId] - The id value of the requested extract job.
  /// * [taskId] - The id value of the requested extract task.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> servicesLoaderJobIdTasksTaskIdSuccesslogGet({ 
    required String jobId,
    required String taskId,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/services/loader/{job_id}/tasks/{task_id}/successlog'.replaceAll('{' r'job_id' '}', encodeQueryParameter(_serializers, jobId, const FullType(String)).toString()).replaceAll('{' r'task_id' '}', encodeQueryParameter(_serializers, taskId, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Load Data Objects
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [contentType] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> servicesLoaderLoadPost({ 
    String? authorization,
    String? contentType,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/services/loader/load';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (contentType != null) r'Content-Type': contentType,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Validate Package
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> servicesPackageActionsValidatePost({ 
    String? authorization,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/services/package/actions/validate';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Export Package
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> servicesPackagePost({ 
    String? authorization,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/services/package';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Import Package
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [contentType] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> servicesPackagePut({ 
    String? authorization,
    String? contentType,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/services/package';
    final _options = Options(
      method: r'PUT',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (contentType != null) r'Content-Type': contentType,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve All Queues
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> servicesQueuesGet({ 
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/services/queues';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Disable Delivery
  /// 
  ///
  /// Parameters:
  /// * [queueName] - The name of a specific Queue.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> servicesQueuesQueueNameActionsDisableDeliveryPut({ 
    required String queueName,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/services/queues/{queue_name}/actions/disable_delivery'.replaceAll('{' r'queue_name' '}', encodeQueryParameter(_serializers, queueName, const FullType(String)).toString());
    final _options = Options(
      method: r'PUT',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Enable Delivery
  /// 
  ///
  /// Parameters:
  /// * [queueName] - The name of a specific Queue.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> servicesQueuesQueueNameActionsEnableDeliveryPut({ 
    required String queueName,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/services/queues/{queue_name}/actions/enable_delivery'.replaceAll('{' r'queue_name' '}', encodeQueryParameter(_serializers, queueName, const FullType(String)).toString());
    final _options = Options(
      method: r'PUT',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Reset Queue
  /// 
  ///
  /// Parameters:
  /// * [queueName] - The name of a specific Queue.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> servicesQueuesQueueNameActionsResetPut({ 
    required String queueName,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/services/queues/{queue_name}/actions/reset'.replaceAll('{' r'queue_name' '}', encodeQueryParameter(_serializers, queueName, const FullType(String)).toString());
    final _options = Options(
      method: r'PUT',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Queue Status
  /// 
  ///
  /// Parameters:
  /// * [queueName] - The name of a specific queue. For example, queue__c.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> servicesQueuesQueueNameGet({ 
    required String queueName,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/services/queues/{queue_name}'.replaceAll('{' r'queue_name' '}', encodeQueryParameter(_serializers, queueName, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Validate Imported Package
  /// 
  ///
  /// Parameters:
  /// * [packageId] - The ID of the package to validate. You can find this in the API response of a package import, or in the URL of package in the Vault UI.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> servicesVobjectVaultPackageVPackageIdActionsValidatePost({ 
    required String packageId,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/services/vobject/vault_package__v/{package_id}/actions/validate'.replaceAll('{' r'package_id' '}', encodeQueryParameter(_serializers, packageId, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// End Session
  /// 
  ///
  /// Parameters:
  /// * [accept] 
  /// * [authorization] - The Vault sessionId to end.
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> sessionDelete({ 
    String? accept,
    String? authorization,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/session';
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        if (accept != null) r'Accept': accept,
        if (authorization != null) r'Authorization': authorization,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Download Single Client Code Distribution
  /// 
  ///
  /// Parameters:
  /// * [distributionName] - The name attribute of the client code distribution to download.
  /// * [accept] 
  /// * [authorization] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> uicodeDistributionsDistributionNameCodeGet({ 
    required String distributionName,
    String? accept,
    String? authorization,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/uicode/distributions/{distribution_name}/code'.replaceAll('{' r'distribution_name' '}', encodeQueryParameter(_serializers, distributionName, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (accept != null) r'Accept': accept,
        if (authorization != null) r'Authorization': authorization,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Delete Single Client Code Distribution
  /// 
  ///
  /// Parameters:
  /// * [distributionName] - The name attribute of the client code distribution to delete.
  /// * [accept] 
  /// * [authorization] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> uicodeDistributionsDistributionNameDelete({ 
    required String distributionName,
    String? accept,
    String? authorization,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/uicode/distributions/{distribution_name}'.replaceAll('{' r'distribution_name' '}', encodeQueryParameter(_serializers, distributionName, const FullType(String)).toString());
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        if (accept != null) r'Accept': accept,
        if (authorization != null) r'Authorization': authorization,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Single Client Code Distribution Metadata
  /// 
  ///
  /// Parameters:
  /// * [distributionName] - The name attribute of the client code distribution to delete.
  /// * [accept] 
  /// * [authorization] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> uicodeDistributionsDistributionNameGet({ 
    required String distributionName,
    String? accept,
    String? authorization,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/uicode/distributions/{distribution_name}'.replaceAll('{' r'distribution_name' '}', encodeQueryParameter(_serializers, distributionName, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (accept != null) r'Accept': accept,
        if (authorization != null) r'Authorization': authorization,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve All Client Code Distribution Metadata
  /// 
  ///
  /// Parameters:
  /// * [accept] 
  /// * [authorization] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> uicodeDistributionsGet({ 
    String? accept,
    String? authorization,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/uicode/distributions';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (accept != null) r'Accept': accept,
        if (authorization != null) r'Authorization': authorization,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Add or Replace Single Client Code Distribution
  /// 
  ///
  /// Parameters:
  /// * [accept] 
  /// * [authorization] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> uicodeDistributionsPost({ 
    String? accept,
    String? authorization,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/uicode/distributions';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (accept != null) r'Accept': accept,
        if (authorization != null) r'Authorization': authorization,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Deploy Package
  /// 
  ///
  /// Parameters:
  /// * [packageId] - The id field value of the vault_package__v object record used for deployment. See Import Package.
  /// * [authorization] 
  /// * [contentType] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> vobjectVaultPackageVPackageIdActionsDeployPost({ 
    required String packageId,
    String? authorization,
    String? contentType,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/vobject/vault_package__v/{package_id}/actions/deploy'.replaceAll('{' r'package_id' '}', encodeQueryParameter(_serializers, packageId, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (contentType != null) r'Content-Type': contentType,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Package Deploy Results
  /// 
  ///
  /// Parameters:
  /// * [packageId] - The id field value of the vault_package__v object record used for deployment. See Deploy Package.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> vobjectVaultPackageVPackageIdActionsDeployResultsGet({ 
    required String packageId,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/vobject/vault_package__v/{package_id}/actions/deploy/results'.replaceAll('{' r'package_id' '}', encodeQueryParameter(_serializers, packageId, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Results of Cascade Delete Job
  /// 
  ///
  /// Parameters:
  /// * [objectName] - The object name__v field value (product__v, country__v, custom_object__c, etc.).
  /// * [jobStatus] 
  /// * [jobId] 
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet({ 
    required String objectName,
    required String jobStatus,
    required String jobId,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/vobjects/cascadedelete/results/{object_name}/{job_status}/{job_id}'.replaceAll('{' r'object_name' '}', encodeQueryParameter(_serializers, objectName, const FullType(String)).toString()).replaceAll('{' r'job_status' '}', encodeQueryParameter(_serializers, jobStatus, const FullType(String)).toString()).replaceAll('{' r'job_id' '}', encodeQueryParameter(_serializers, jobId, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Results of Deep Copy Job
  /// 
  ///
  /// Parameters:
  /// * [objectName] - The object name__v field value (product__v, country__v, custom_object__c, etc.).
  /// * [jobStatus] - The ID of the job, retrieved from the response of the job request.
  /// * [jobId] - Possible values are success or failure. Find if your job succeeded or failed by retrieving the job status.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet({ 
    required String objectName,
    required String jobStatus,
    required String jobId,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/vobjects/deepcopy/results/{object_name}/{job_status}/{job_id}'.replaceAll('{' r'object_name' '}', encodeQueryParameter(_serializers, objectName, const FullType(String)).toString()).replaceAll('{' r'job_status' '}', encodeQueryParameter(_serializers, jobStatus, const FullType(String)).toString()).replaceAll('{' r'job_id' '}', encodeQueryParameter(_serializers, jobId, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Create a Placeholder from an EDL Item
  /// 
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [contentType] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> vobjectsEdlItemVActionsCreateplaceholderPost({ 
    String? authorization,
    String? contentType,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/vobjects/edl_item__v/actions/createplaceholder';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (contentType != null) r'Content-Type': contentType,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Download Merge Records Job Log
  /// 
  ///
  /// Parameters:
  /// * [jobId] - The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> vobjectsMergesJobIdLogGet({ 
    required String jobId,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/vobjects/merges/{job_id}/log'.replaceAll('{' r'job_id' '}', encodeQueryParameter(_serializers, jobId, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Record Merge Results
  /// 
  ///
  /// Parameters:
  /// * [jobId] - The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> vobjectsMergesJobIdResultsGet({ 
    required String jobId,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/vobjects/merges/{job_id}/results'.replaceAll('{' r'job_id' '}', encodeQueryParameter(_serializers, jobId, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Record Merge Status
  /// 
  ///
  /// Parameters:
  /// * [jobId] - The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> vobjectsMergesJobIdStatusGet({ 
    required String jobId,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/vobjects/merges/{job_id}/status'.replaceAll('{' r'job_id' '}', encodeQueryParameter(_serializers, jobId, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Initiate Object Action on Multiple Records
  /// 
  ///
  /// Parameters:
  /// * [objectName] - The object name__v field value.
  /// * [actionName] - Either the name of the Objectaction or Objectlifecyclestateuseraction to initiate. This is obtained from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
  /// * [authorization] 
  /// * [contentType] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> vobjectsObjectNameActionsActionNamePost({ 
    required String objectName,
    required String actionName,
    String? authorization,
    String? contentType,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/vobjects/{object_name}/actions/{action_name}'.replaceAll('{' r'object_name' '}', encodeQueryParameter(_serializers, objectName, const FullType(String)).toString()).replaceAll('{' r'action_name' '}', encodeQueryParameter(_serializers, actionName, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (contentType != null) r'Content-Type': contentType,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Change Object Type
  /// 
  ///
  /// Parameters:
  /// * [objectName] - The name of the object.
  /// * [authorization] 
  /// * [contentType] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> vobjectsObjectNameActionsChangetypePost({ 
    required String objectName,
    String? authorization,
    String? contentType,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/vobjects/{object_name}/actions/changetype'.replaceAll('{' r'object_name' '}', encodeQueryParameter(_serializers, objectName, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (contentType != null) r'Content-Type': contentType,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Initiate Record Merge
  /// 
  ///
  /// Parameters:
  /// * [objectName] - The object name__v field value. For example, account__v. This object must have Enable Merges configured.
  /// * [authorization] 
  /// * [contentType] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [vobjectsObjectNameActionsMergePostRequestInner] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> vobjectsObjectNameActionsMergePost({ 
    required String objectName,
    String? authorization,
    String? contentType,
    String? accept,
    String? xVaultAPIClientID,
    BuiltList<VobjectsObjectNameActionsMergePostRequestInner>? vobjectsObjectNameActionsMergePostRequestInner,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/vobjects/{object_name}/actions/merge'.replaceAll('{' r'object_name' '}', encodeQueryParameter(_serializers, objectName, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (contentType != null) r'Content-Type': contentType,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      contentType: 'application/json',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      const _type = FullType(BuiltList, [FullType(VobjectsObjectNameActionsMergePostRequestInner)]);
      _bodyData = vobjectsObjectNameActionsMergePostRequestInner == null ? null : _serializers.serialize(vobjectsObjectNameActionsMergePostRequestInner, specifiedType: _type);

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Roll-up Field Recalculation Status
  /// 
  ///
  /// Parameters:
  /// * [objectName] - The name of the object for which to check the status of a Roll-up field recalculation.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> vobjectsObjectNameActionsRecalculaterollupsGet({ 
    required String objectName,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/vobjects/{object_name}/actions/recalculaterollups'.replaceAll('{' r'object_name' '}', encodeQueryParameter(_serializers, objectName, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Recalculate Roll-up Fields
  /// 
  ///
  /// Parameters:
  /// * [objectName] - The name of the object for which to check the status of a Roll-up field recalculation.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> vobjectsObjectNameActionsRecalculaterollupsPost({ 
    required String objectName,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/vobjects/{object_name}/actions/recalculaterollups'.replaceAll('{' r'object_name' '}', encodeQueryParameter(_serializers, objectName, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Update Corporate Currency Fields
  /// 
  ///
  /// Parameters:
  /// * [objectName] - The object name__v field value (product__v, country__v, custom_object__c, etc.).
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> vobjectsObjectNameActionsUpdatecorporatecurrencyPut({ 
    required String objectName,
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/vobjects/{object_name}/actions/updatecorporatecurrency'.replaceAll('{' r'object_name' '}', encodeQueryParameter(_serializers, objectName, const FullType(String)).toString());
    final _options = Options(
      method: r'PUT',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Delete Multiple Object Record Attachments
  /// 
  ///
  /// Parameters:
  /// * [objectName] - The object name__v field value (product__v, country__v, custom_object__c, etc.).
  /// * [idParam] 
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> vobjectsObjectNameAttachmentsBatchDelete({ 
    required String objectName,
    String? idParam,
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/vobjects/{object_name}/attachments/batch'.replaceAll('{' r'object_name' '}', encodeQueryParameter(_serializers, objectName, const FullType(String)).toString());
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (idParam != null) r'idParam': encodeQueryParameter(_serializers, idParam, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Create Multiple Object Record Attachments
  /// 
  ///
  /// Parameters:
  /// * [objectName] - The object name__v field value (product__v, country__v, custom_object__c, etc.).
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> vobjectsObjectNameAttachmentsBatchPost({ 
    required String objectName,
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/vobjects/{object_name}/attachments/batch'.replaceAll('{' r'object_name' '}', encodeQueryParameter(_serializers, objectName, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Update Multiple Object Record Attachment Descriptions
  /// 
  ///
  /// Parameters:
  /// * [objectName] - The object name__v field value (product__v, country__v, custom_object__c, etc.).
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> vobjectsObjectNameAttachmentsBatchPut({ 
    required String objectName,
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/vobjects/{object_name}/attachments/batch'.replaceAll('{' r'object_name' '}', encodeQueryParameter(_serializers, objectName, const FullType(String)).toString());
    final _options = Options(
      method: r'PUT',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Delete Object Records
  /// 
  ///
  /// Parameters:
  /// * [objectName] - The object name__v field value (product__v, country__v, custom_object__c, etc.).
  /// * [authorization] 
  /// * [contentType] - Can be text/csv or application/json
  /// * [accept] - Can be text/csv or application/json
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> vobjectsObjectNameDelete({ 
    required String objectName,
    String? authorization,
    String? contentType,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/vobjects/{object_name}'.replaceAll('{' r'object_name' '}', encodeQueryParameter(_serializers, objectName, const FullType(String)).toString());
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (contentType != null) r'Content-Type': contentType,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Object Record Roles
  /// 
  ///
  /// Parameters:
  /// * [objectName] - The object name.
  /// * [id] - The id of the document, binder, or object record.
  /// * [roleName] - Optional: Include a role name to filter for a specific role. For example, owner__v.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> vobjectsObjectNameIdRolesRoleNameGet({ 
    required String objectName,
    required String id,
    required String roleName,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/vobjects/{object_name}/{id}/roles/{role_name}'.replaceAll('{' r'object_name' '}', encodeQueryParameter(_serializers, objectName, const FullType(String)).toString()).replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString()).replaceAll('{' r'role_name' '}', encodeQueryParameter(_serializers, roleName, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Object User Actions Details
  /// 
  ///
  /// Parameters:
  /// * [objectName] - The object name__v field value.
  /// * [objectRecordId] - The object record id field value from which to retrieve user actions.
  /// * [actionName] - The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> vobjectsObjectNameObjectRecordIdActionsActionNameGet({ 
    required String objectName,
    required String objectRecordId,
    required String actionName,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/vobjects/{object_name}/{object_record_id}/actions/{action_name}'.replaceAll('{' r'object_name' '}', encodeQueryParameter(_serializers, objectName, const FullType(String)).toString()).replaceAll('{' r'object_record_id' '}', encodeQueryParameter(_serializers, objectRecordId, const FullType(String)).toString()).replaceAll('{' r'action_name' '}', encodeQueryParameter(_serializers, actionName, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Initiate Object Action on a Single Record
  /// 
  ///
  /// Parameters:
  /// * [objectName] - The object name__v field value.
  /// * [objectRecordId] - The object record id field value from which to retrieve user actions.
  /// * [actionName] - The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
  /// * [authorization] 
  /// * [contentType] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> vobjectsObjectNameObjectRecordIdActionsActionNamePost({ 
    required String objectName,
    required String objectRecordId,
    required String actionName,
    String? authorization,
    String? contentType,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/vobjects/{object_name}/{object_record_id}/actions/{action_name}'.replaceAll('{' r'object_name' '}', encodeQueryParameter(_serializers, objectName, const FullType(String)).toString()).replaceAll('{' r'object_record_id' '}', encodeQueryParameter(_serializers, objectRecordId, const FullType(String)).toString()).replaceAll('{' r'action_name' '}', encodeQueryParameter(_serializers, actionName, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (contentType != null) r'Content-Type': contentType,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Cascade Delete Object Record
  /// 
  ///
  /// Parameters:
  /// * [objectName] - The object name__v field value (product__v, country__v, custom_object__c, etc.).
  /// * [objectRecordId] - The object record id field value.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> vobjectsObjectNameObjectRecordIdActionsCascadedeletePost({ 
    required String objectName,
    required String objectRecordId,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/vobjects/{object_name}/{object_record_id}/actions/cascadedelete'.replaceAll('{' r'object_name' '}', encodeQueryParameter(_serializers, objectName, const FullType(String)).toString()).replaceAll('{' r'object_record_id' '}', encodeQueryParameter(_serializers, objectRecordId, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Deep Copy Object Record
  /// 
  ///
  /// Parameters:
  /// * [objectName] - The object name__v field value (product__v, country__v, custom_object__c, etc.).
  /// * [objectRecordId] - The object record id field value.
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> vobjectsObjectNameObjectRecordIdActionsDeepcopyPost({ 
    required String objectName,
    required String objectRecordId,
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/vobjects/{object_name}/{object_record_id}/actions/deepcopy'.replaceAll('{' r'object_name' '}', encodeQueryParameter(_serializers, objectName, const FullType(String)).toString()).replaceAll('{' r'object_record_id' '}', encodeQueryParameter(_serializers, objectRecordId, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Object Record User Actions
  /// 
  ///
  /// Parameters:
  /// * [objectName] - The object name__v field value.
  /// * [objectRecordId] - The object record id field value.
  /// * [loc] - Optional: When true, retrieves localized (translated) strings for the label. 
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> vobjectsObjectNameObjectRecordIdActionsGet({ 
    required String objectName,
    required String objectRecordId,
    bool? loc,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/vobjects/{object_name}/{object_record_id}/actions'.replaceAll('{' r'object_name' '}', encodeQueryParameter(_serializers, objectName, const FullType(String)).toString()).replaceAll('{' r'object_record_id' '}', encodeQueryParameter(_serializers, objectRecordId, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (loc != null) r'loc': encodeQueryParameter(_serializers, loc, const FullType(bool)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Download Attachment Field File
  /// 
  ///
  /// Parameters:
  /// * [objectName] - The object name__v field value. For example, product__v.
  /// * [objectRecordId] - The object record id field value.
  /// * [attachmentFieldName] - The name of the Attachment field to update.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet({ 
    required String objectName,
    required String objectRecordId,
    required String attachmentFieldName,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/vobjects/{object_name}/{object_record_id}/attachment_fields/{attachment_field_name}/file'.replaceAll('{' r'object_name' '}', encodeQueryParameter(_serializers, objectName, const FullType(String)).toString()).replaceAll('{' r'object_record_id' '}', encodeQueryParameter(_serializers, objectRecordId, const FullType(String)).toString()).replaceAll('{' r'attachment_field_name' '}', encodeQueryParameter(_serializers, attachmentFieldName, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Update Attachment Field File
  /// 
  ///
  /// Parameters:
  /// * [objectName] - The object name__v field value. For example, product__v.
  /// * [objectRecordId] - The object record id field value.
  /// * [attachmentFieldName] - The name of the Attachment field to update.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost({ 
    required String objectName,
    required String objectRecordId,
    required String attachmentFieldName,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/vobjects/{object_name}/{object_record_id}/attachment_fields/{attachment_field_name}/file'.replaceAll('{' r'object_name' '}', encodeQueryParameter(_serializers, objectName, const FullType(String)).toString()).replaceAll('{' r'object_record_id' '}', encodeQueryParameter(_serializers, objectRecordId, const FullType(String)).toString()).replaceAll('{' r'attachment_field_name' '}', encodeQueryParameter(_serializers, attachmentFieldName, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Download All Attachment Field Files
  /// 
  ///
  /// Parameters:
  /// * [objectName] - The object name__v field value. For example, product__v.
  /// * [objectRecordId] - The object record id field value.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet({ 
    required String objectName,
    required String objectRecordId,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/vobjects/{object_name}/{object_record_id}/attachment_fields/file'.replaceAll('{' r'object_name' '}', encodeQueryParameter(_serializers, objectName, const FullType(String)).toString()).replaceAll('{' r'object_record_id' '}', encodeQueryParameter(_serializers, objectRecordId, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Delete Object Record Attachment
  /// 
  ///
  /// Parameters:
  /// * [objectName] - The object name__v field value (product__v, country__v, custom_object__c, etc.).
  /// * [objectRecordId] - The object record id field value.
  /// * [attachmentId] - The attachment id field value.
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete({ 
    required String objectName,
    required String objectRecordId,
    required String attachmentId,
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}'.replaceAll('{' r'object_name' '}', encodeQueryParameter(_serializers, objectName, const FullType(String)).toString()).replaceAll('{' r'object_record_id' '}', encodeQueryParameter(_serializers, objectRecordId, const FullType(String)).toString()).replaceAll('{' r'attachment_id' '}', encodeQueryParameter(_serializers, attachmentId, const FullType(String)).toString());
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Object Record Attachment Metadata
  /// 
  ///
  /// Parameters:
  /// * [objectName] - The object name__v field value (product__v, country__v, custom_object__c, etc.).
  /// * [objectRecordId] - The object record id field value.
  /// * [attachmentId] - The attachment id field value.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet({ 
    required String objectName,
    required String objectRecordId,
    required String attachmentId,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}'.replaceAll('{' r'object_name' '}', encodeQueryParameter(_serializers, objectName, const FullType(String)).toString()).replaceAll('{' r'object_record_id' '}', encodeQueryParameter(_serializers, objectRecordId, const FullType(String)).toString()).replaceAll('{' r'attachment_id' '}', encodeQueryParameter(_serializers, attachmentId, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Update Object Record Attachment Description
  /// 
  ///
  /// Parameters:
  /// * [objectName] - The object name__v field value (product__v, country__v, custom_object__c, etc.).
  /// * [objectRecordId] - The object record id field value.
  /// * [attachmentId] - The attachment id field value.
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut({ 
    required String objectName,
    required String objectRecordId,
    required String attachmentId,
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}'.replaceAll('{' r'object_name' '}', encodeQueryParameter(_serializers, objectName, const FullType(String)).toString()).replaceAll('{' r'object_record_id' '}', encodeQueryParameter(_serializers, objectRecordId, const FullType(String)).toString()).replaceAll('{' r'attachment_id' '}', encodeQueryParameter(_serializers, attachmentId, const FullType(String)).toString());
    final _options = Options(
      method: r'PUT',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Delete Object Record Attachment Version
  /// 
  ///
  /// Parameters:
  /// * [objectName] - The object name__v field value (product__v, country__v, custom_object__c, etc.).
  /// * [objectRecordId] - The object record id field value.
  /// * [attachmentId] - The attachment id field value.
  /// * [attachmentVersion] - The attachment version__v field value.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete({ 
    required String objectName,
    required String objectRecordId,
    required String attachmentId,
    required String attachmentVersion,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}'.replaceAll('{' r'object_name' '}', encodeQueryParameter(_serializers, objectName, const FullType(String)).toString()).replaceAll('{' r'object_record_id' '}', encodeQueryParameter(_serializers, objectRecordId, const FullType(String)).toString()).replaceAll('{' r'attachment_id' '}', encodeQueryParameter(_serializers, attachmentId, const FullType(String)).toString()).replaceAll('{' r'attachment_version' '}', encodeQueryParameter(_serializers, attachmentVersion, const FullType(String)).toString());
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Download Object Record Attachment File
  /// 
  ///
  /// Parameters:
  /// * [objectName] - The object name__v field value (product__v, country__v, custom_object__c, etc.).
  /// * [objectRecordId] - The object record id field value.
  /// * [attachmentId] - The attachment id field value.
  /// * [attachmentVersion] 
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet({ 
    required String objectName,
    required String objectRecordId,
    required String attachmentId,
    required String attachmentVersion,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}/file'.replaceAll('{' r'object_name' '}', encodeQueryParameter(_serializers, objectName, const FullType(String)).toString()).replaceAll('{' r'object_record_id' '}', encodeQueryParameter(_serializers, objectRecordId, const FullType(String)).toString()).replaceAll('{' r'attachment_id' '}', encodeQueryParameter(_serializers, attachmentId, const FullType(String)).toString()).replaceAll('{' r'attachment_version' '}', encodeQueryParameter(_serializers, attachmentVersion, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Object Record Attachment Version Metadata
  /// 
  ///
  /// Parameters:
  /// * [objectName] - The object name__v field value (product__v, country__v, custom_object__c, etc.).
  /// * [objectRecordId] - The object record id field value.
  /// * [attachmentId] - The attachment id field value.
  /// * [attachmentVersion] - The attachment version__v field value.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet({ 
    required String objectName,
    required String objectRecordId,
    required String attachmentId,
    required String attachmentVersion,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}'.replaceAll('{' r'object_name' '}', encodeQueryParameter(_serializers, objectName, const FullType(String)).toString()).replaceAll('{' r'object_record_id' '}', encodeQueryParameter(_serializers, objectRecordId, const FullType(String)).toString()).replaceAll('{' r'attachment_id' '}', encodeQueryParameter(_serializers, attachmentId, const FullType(String)).toString()).replaceAll('{' r'attachment_version' '}', encodeQueryParameter(_serializers, attachmentVersion, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Restore Object Record Attachment Version
  /// 
  ///
  /// Parameters:
  /// * [objectName] - The object name__v field value (product__v, country__v, custom_object__c, etc.).
  /// * [objectRecordId] - The object record id field value.
  /// * [attachmentId] - The attachment id field value.
  /// * [attachmentVersion] - The attachment version__v field value.
  /// * [restore] 
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost({ 
    required String objectName,
    required String objectRecordId,
    required String attachmentId,
    required String attachmentVersion,
    bool? restore,
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}'.replaceAll('{' r'object_name' '}', encodeQueryParameter(_serializers, objectName, const FullType(String)).toString()).replaceAll('{' r'object_record_id' '}', encodeQueryParameter(_serializers, objectRecordId, const FullType(String)).toString()).replaceAll('{' r'attachment_id' '}', encodeQueryParameter(_serializers, attachmentId, const FullType(String)).toString()).replaceAll('{' r'attachment_version' '}', encodeQueryParameter(_serializers, attachmentVersion, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (restore != null) r'restore': encodeQueryParameter(_serializers, restore, const FullType(bool)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Object Record Attachment Versions
  /// 
  ///
  /// Parameters:
  /// * [objectName] - The object name__v field value (product__v, country__v, custom_object__c, etc.).
  /// * [objectRecordId] - The object record id field value.
  /// * [attachmentId] - The attachment id field value.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet({ 
    required String objectName,
    required String objectRecordId,
    required String attachmentId,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions'.replaceAll('{' r'object_name' '}', encodeQueryParameter(_serializers, objectName, const FullType(String)).toString()).replaceAll('{' r'object_record_id' '}', encodeQueryParameter(_serializers, objectRecordId, const FullType(String)).toString()).replaceAll('{' r'attachment_id' '}', encodeQueryParameter(_serializers, attachmentId, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Download All Object Record Attachment Files
  /// 
  ///
  /// Parameters:
  /// * [objectName] - The object name__v field value (product__v, country__v, custom_object__c, etc.).
  /// * [objectRecordId] - The object record id field value.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> vobjectsObjectNameObjectRecordIdAttachmentsFileGet({ 
    required String objectName,
    required String objectRecordId,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/vobjects/{object_name}/{object_record_id}/attachments/file'.replaceAll('{' r'object_name' '}', encodeQueryParameter(_serializers, objectName, const FullType(String)).toString()).replaceAll('{' r'object_record_id' '}', encodeQueryParameter(_serializers, objectRecordId, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Object Record Attachments
  /// 
  ///
  /// Parameters:
  /// * [objectName] - The object name__v field value (product__v, country__v, custom_object__c, etc.).
  /// * [objectRecordId] - The object record id field value.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> vobjectsObjectNameObjectRecordIdAttachmentsGet({ 
    required String objectName,
    required String objectRecordId,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/vobjects/{object_name}/{object_record_id}/attachments'.replaceAll('{' r'object_name' '}', encodeQueryParameter(_serializers, objectName, const FullType(String)).toString()).replaceAll('{' r'object_record_id' '}', encodeQueryParameter(_serializers, objectRecordId, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Create Object Record Attachment
  /// 
  ///
  /// Parameters:
  /// * [objectName] - The object name__v field value (product__v, country__v, custom_object__c, etc.).
  /// * [objectRecordId] - The object record id field value.
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> vobjectsObjectNameObjectRecordIdAttachmentsPost({ 
    required String objectName,
    required String objectRecordId,
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/vobjects/{object_name}/{object_record_id}/attachments'.replaceAll('{' r'object_name' '}', encodeQueryParameter(_serializers, objectName, const FullType(String)).toString()).replaceAll('{' r'object_record_id' '}', encodeQueryParameter(_serializers, objectRecordId, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Complete Audit History for a Single Object Record
  /// 
  ///
  /// Parameters:
  /// * [objectName] - The object name__v field value.
  /// * [objectRecordId] - The object record id field value from which to retrieve user actions.
  /// * [startDate] - Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vVault’s creation date. 
  /// * [endDate] - Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date. 
  /// * [formatResult] - To request a CSV file of your audit history, use csv. 
  /// * [limit] - Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
  /// * [offset] - Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51. If omitted, defaults to 0.
  /// * [events] - Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of object audit events. The values passed to this parameter are case sensitive. For example, events=Copy,Edit,Delete. If omitted, defaults to all audit events.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> vobjectsObjectNameObjectRecordIdAudittrailGet({ 
    required String objectName,
    required String objectRecordId,
    String? startDate,
    String? endDate,
    String? formatResult,
    String? limit,
    String? offset,
    String? events,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/vobjects/{object_name}/{object_record_id}/audittrail'.replaceAll('{' r'object_name' '}', encodeQueryParameter(_serializers, objectName, const FullType(String)).toString()).replaceAll('{' r'object_record_id' '}', encodeQueryParameter(_serializers, objectRecordId, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (startDate != null) r'start_date': encodeQueryParameter(_serializers, startDate, const FullType(String)),
      if (endDate != null) r'end_date': encodeQueryParameter(_serializers, endDate, const FullType(String)),
      if (formatResult != null) r'format_result': encodeQueryParameter(_serializers, formatResult, const FullType(String)),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(String)),
      if (offset != null) r'offset': encodeQueryParameter(_serializers, offset, const FullType(String)),
      if (events != null) r'events': encodeQueryParameter(_serializers, events, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Object Record
  /// 
  ///
  /// Parameters:
  /// * [objectName] - The object name__v field value (product__v, country__v, custom_object__c, etc.).
  /// * [objectRecordId] - The object record id field value.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> vobjectsObjectNameObjectRecordIdGet({ 
    required String objectName,
    required String objectRecordId,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/vobjects/{object_name}/{object_record_id}'.replaceAll('{' r'object_name' '}', encodeQueryParameter(_serializers, objectName, const FullType(String)).toString()).replaceAll('{' r'object_record_id' '}', encodeQueryParameter(_serializers, objectRecordId, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Create &amp; Upsert Object Records
  /// 
  ///
  /// Parameters:
  /// * [objectName] - The object name__v field value (product__v, country__v, custom_object__c, etc.).
  /// * [idParam] - To upsert object records, add `idParam={field_name}` to the request endpoint. You can use any object field which has `unique` set to `true` in the object metadata. For example, `idParam=external_id__v`.
  /// * [authorization] 
  /// * [contentType] - Can be text/csv or application/json
  /// * [accept] - Can be text/csv or application/json
  /// * [xVaultAPIMigrationMode] - If set to `true`, Vault allows you to create or update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as `created_by__v`. Does not bypass record triggers. Use the `X-VaultAPI-NoTriggers` header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header.
  /// * [xVaultAPINoTriggers] - If set to `true` and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers.
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> vobjectsObjectNamePost({ 
    required String objectName,
    String? idParam,
    String? authorization,
    String? contentType,
    String? accept,
    bool? xVaultAPIMigrationMode,
    bool? xVaultAPINoTriggers,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/vobjects/{object_name}'.replaceAll('{' r'object_name' '}', encodeQueryParameter(_serializers, objectName, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (contentType != null) r'Content-Type': contentType,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIMigrationMode != null) r'X-VaultAPI-MigrationMode': xVaultAPIMigrationMode,
        if (xVaultAPINoTriggers != null) r'X-VaultAPI-NoTriggers': xVaultAPINoTriggers,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (idParam != null) r'idParam': encodeQueryParameter(_serializers, idParam, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Update Object Records
  /// 
  ///
  /// Parameters:
  /// * [objectName] - The object name__v field value (product__v, country__v, custom_object__c, etc.).
  /// * [authorization] 
  /// * [contentType] - Can be text/csv or application/json
  /// * [accept] - Can be text/csv or application/json
  /// * [xVaultAPIMigrationMode] - If set to `true`, Vault allows you to update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as `created_by__v`. Does not bypass record triggers. Use the `X-VaultAPI-NoTriggers` header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header.
  /// * [xVaultAPINoTriggers] - If set to `true` and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers.
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> vobjectsObjectNamePut({ 
    required String objectName,
    String? authorization,
    String? contentType,
    String? accept,
    bool? xVaultAPIMigrationMode,
    bool? xVaultAPINoTriggers,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/vobjects/{object_name}'.replaceAll('{' r'object_name' '}', encodeQueryParameter(_serializers, objectName, const FullType(String)).toString());
    final _options = Options(
      method: r'PUT',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (contentType != null) r'Content-Type': contentType,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIMigrationMode != null) r'X-VaultAPI-MigrationMode': xVaultAPIMigrationMode,
        if (xVaultAPINoTriggers != null) r'X-VaultAPI-NoTriggers': xVaultAPINoTriggers,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Remove Users &amp; Groups from Roles on Object Records
  /// 
  ///
  /// Parameters:
  /// * [objectName] - The name of the object where you want to remove roles.
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> vobjectsObjectNameRolesDelete({ 
    required String objectName,
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/vobjects/{object_name}/roles'.replaceAll('{' r'object_name' '}', encodeQueryParameter(_serializers, objectName, const FullType(String)).toString());
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Assign Users &amp; Groups to Roles on Object Records
  /// 
  ///
  /// Parameters:
  /// * [objectName] - The name of the object where you want to remove roles.
  /// * [authorization] 
  /// * [accept] 
  /// * [contentType] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> vobjectsObjectNameRolesPost({ 
    required String objectName,
    String? authorization,
    String? accept,
    String? contentType,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/vobjects/{object_name}/roles'.replaceAll('{' r'object_name' '}', encodeQueryParameter(_serializers, objectName, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (contentType != null) r'Content-Type': contentType,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

  /// Retrieve Outbound Package Dependencies
  /// 
  ///
  /// Parameters:
  /// * [packageId] - The ID of the outbound_package__v record from which to retrieve dependencies.
  /// * [authorization] 
  /// * [accept] 
  /// * [xVaultAPIClientID] - Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]
  /// Throws [DioException] if API call or serialization fails
  Future<Response<void>> vobjectsOutboundPackageVPackageIdDependenciesGet({ 
    required String packageId,
    String? authorization,
    String? accept,
    String? xVaultAPIClientID,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/vobjects/outbound_package__v/{package_id}/dependencies'.replaceAll('{' r'package_id' '}', encodeQueryParameter(_serializers, packageId, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        if (authorization != null) r'Authorization': authorization,
        if (accept != null) r'Accept': accept,
        if (xVaultAPIClientID != null) r'X-VaultAPI-ClientID': xVaultAPIClientID,
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[],
        ...?extra,
      },
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    return _response;
  }

}
