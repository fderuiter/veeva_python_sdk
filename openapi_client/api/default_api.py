# coding: utf-8

"""
    Veeva Vault API v25.1

    The latest GA version of the Vault REST API.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictBool, StrictInt, StrictStr, conlist, constr

from typing import Optional

from openapi_client.models.vobjects_object_name_actions_merge_post_request_inner import VobjectsObjectNameActionsMergePostRequestInner

from openapi_client.api_client import ApiClient
from openapi_client.api_response import ApiResponse
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class DefaultApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def api_get(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve API Versions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_get(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the api_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.api_get_with_http_info(authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def api_get_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve API Versions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_get_with_http_info(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _hosts = [
            '{{vaultDNS}}/api',
            'login.veevavault.com/api'
        ]
        _host = _hosts[0]
        if kwargs.get('_host_index'):
            _host_index = int(kwargs.get('_host_index'))
            if _host_index < 0 or _host_index >= len(_hosts):
                raise ApiValueError(
                    "Invalid host index. Must be 0 <= index < %s"
                    % len(_host)
                )
            _host = _hosts[_host_index]
        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params and _key != "_host_index":
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/api/', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            _host=_host,
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def api_mdl_components_component_type_and_record_name_files_get(self, component_type_and_record_name : Annotated[StrictStr, Field(..., description="The component type of the record followed by the name of the record from which to retrieve the content file. The format is `{Componenttype}.{record_name}`. For example, `Formattedoutput.my_formatted_output__c`.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Content File  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_mdl_components_component_type_and_record_name_files_get(component_type_and_record_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param component_type_and_record_name: The component type of the record followed by the name of the record from which to retrieve the content file. The format is `{Componenttype}.{record_name}`. For example, `Formattedoutput.my_formatted_output__c`. (required)
        :type component_type_and_record_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the api_mdl_components_component_type_and_record_name_files_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.api_mdl_components_component_type_and_record_name_files_get_with_http_info(component_type_and_record_name, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def api_mdl_components_component_type_and_record_name_files_get_with_http_info(self, component_type_and_record_name : Annotated[StrictStr, Field(..., description="The component type of the record followed by the name of the record from which to retrieve the content file. The format is `{Componenttype}.{record_name}`. For example, `Formattedoutput.my_formatted_output__c`.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Content File  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_mdl_components_component_type_and_record_name_files_get_with_http_info(component_type_and_record_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param component_type_and_record_name: The component type of the record followed by the name of the record from which to retrieve the content file. The format is `{Componenttype}.{record_name}`. For example, `Formattedoutput.my_formatted_output__c`. (required)
        :type component_type_and_record_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'component_type_and_record_name',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_mdl_components_component_type_and_record_name_files_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['component_type_and_record_name'] is not None:
            _path_params['component_type_and_record_name'] = _params['component_type_and_record_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/api/mdl/components/{component_type_and_record_name}/files', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def api_mdl_components_component_type_and_record_name_get(self, component_type_and_record_name : Annotated[StrictStr, Field(..., description="The component type name (`Picklist`, `Docfield`, `Doctype`, etc.) followed by the name of the record from which to retrieve metadata. The format is `{Componenttype}.{record_name}`. For example, `Picklist.color__c`. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Component Record (MDL)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_mdl_components_component_type_and_record_name_get(component_type_and_record_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param component_type_and_record_name: The component type name (`Picklist`, `Docfield`, `Doctype`, etc.) followed by the name of the record from which to retrieve metadata. The format is `{Componenttype}.{record_name}`. For example, `Picklist.color__c`. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint. (required)
        :type component_type_and_record_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the api_mdl_components_component_type_and_record_name_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.api_mdl_components_component_type_and_record_name_get_with_http_info(component_type_and_record_name, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def api_mdl_components_component_type_and_record_name_get_with_http_info(self, component_type_and_record_name : Annotated[StrictStr, Field(..., description="The component type name (`Picklist`, `Docfield`, `Doctype`, etc.) followed by the name of the record from which to retrieve metadata. The format is `{Componenttype}.{record_name}`. For example, `Picklist.color__c`. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Component Record (MDL)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_mdl_components_component_type_and_record_name_get_with_http_info(component_type_and_record_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param component_type_and_record_name: The component type name (`Picklist`, `Docfield`, `Doctype`, etc.) followed by the name of the record from which to retrieve metadata. The format is `{Componenttype}.{record_name}`. For example, `Picklist.color__c`. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint. (required)
        :type component_type_and_record_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'component_type_and_record_name',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_mdl_components_component_type_and_record_name_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['component_type_and_record_name'] is not None:
            _path_params['component_type_and_record_name'] = _params['component_type_and_record_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/api/mdl/components/{component_type_and_record_name}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def api_mdl_execute_async_job_id_results_get(self, job_id : StrictStr, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Asynchronous MDL Script Results  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_mdl_execute_async_job_id_results_get(job_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param job_id: (required)
        :type job_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the api_mdl_execute_async_job_id_results_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.api_mdl_execute_async_job_id_results_get_with_http_info(job_id, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def api_mdl_execute_async_job_id_results_get_with_http_info(self, job_id : StrictStr, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Asynchronous MDL Script Results  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_mdl_execute_async_job_id_results_get_with_http_info(job_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param job_id: (required)
        :type job_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'job_id',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_mdl_execute_async_job_id_results_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['job_id'] is not None:
            _path_params['job_id'] = _params['job_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/api/mdl/execute_async/{job_id}/results', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def api_mdl_execute_async_post(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Execute MDL Script Asynchronously  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_mdl_execute_async_post(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the api_mdl_execute_async_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.api_mdl_execute_async_post_with_http_info(authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def api_mdl_execute_async_post_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Execute MDL Script Asynchronously  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_mdl_execute_async_post_with_http_info(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_mdl_execute_async_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/api/mdl/execute_async', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def api_mdl_execute_post(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Execute MDL Script  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_mdl_execute_post(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the api_mdl_execute_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.api_mdl_execute_post_with_http_info(authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def api_mdl_execute_post_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Execute MDL Script  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_mdl_execute_post_with_http_info(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_mdl_execute_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/api/mdl/execute', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def api_mdl_files_post(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Upload Content File  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_mdl_files_post(authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the api_mdl_files_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.api_mdl_files_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def api_mdl_files_post_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Upload Content File  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_mdl_files_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_mdl_files_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/api/mdl/files', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def audittrail_audit_trail_type_get(self, audit_trail_type : Annotated[StrictStr, Field(..., description="The name of the specified audit type (document_audit_trail, object_audit_trail, etc). Use the Retrieve Audit Types API to retrieve types available in your Vault. Requests for login_audit_trail only accept one request per user at a time.")], start_date : Annotated[Optional[StrictStr], Field(description="Specify a start date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days.")] = None, end_date : Annotated[Optional[StrictStr], Field(description="Specify an end date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days.")] = None, all_dates : Annotated[Optional[StrictStr], Field(description="Set to true to request audit information for all dates. You must leave start_date and end_date blank when requesting an export of a full audit trail.")] = None, format_result : Annotated[Optional[StrictStr], Field(description="To request a downloadable CSV file of your audit details, use csv. The response contains a jobId to retrieve the job status, which contains a link to download the CSV file. If omitted, the API returns a JSON response and does not start a job. If all_dates is true, this parameter is required.")] = None, limit : Annotated[Optional[StrictStr], Field(description="Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.")] = None, offset : Annotated[Optional[StrictStr], Field(description="Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51. If omitted, defaults to 0.")] = None, objects : Annotated[Optional[StrictStr], Field(description="This is an optional parameter when specifying object_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more object names to retrieve their audit details. For example, objects=product__v,country__v. If omitted, defaults to all objects.")] = None, events : Annotated[Optional[StrictStr], Field(description="This is an optional parameter when specifying object_audit_trail or document_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more audit events to retrieve their audit details. For example, events=Edit,Delete,TaskAssignment. If omitted, defaults to all audit events. See Vault Help for full lists of object audit events and document audit events.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Audit Details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.audittrail_audit_trail_type_get(audit_trail_type, start_date, end_date, all_dates, format_result, limit, offset, objects, events, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param audit_trail_type: The name of the specified audit type (document_audit_trail, object_audit_trail, etc). Use the Retrieve Audit Types API to retrieve types available in your Vault. Requests for login_audit_trail only accept one request per user at a time. (required)
        :type audit_trail_type: str
        :param start_date: Specify a start date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days.
        :type start_date: str
        :param end_date: Specify an end date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days.
        :type end_date: str
        :param all_dates: Set to true to request audit information for all dates. You must leave start_date and end_date blank when requesting an export of a full audit trail.
        :type all_dates: str
        :param format_result: To request a downloadable CSV file of your audit details, use csv. The response contains a jobId to retrieve the job status, which contains a link to download the CSV file. If omitted, the API returns a JSON response and does not start a job. If all_dates is true, this parameter is required.
        :type format_result: str
        :param limit: Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
        :type limit: str
        :param offset: Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51. If omitted, defaults to 0.
        :type offset: str
        :param objects: This is an optional parameter when specifying object_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more object names to retrieve their audit details. For example, objects=product__v,country__v. If omitted, defaults to all objects.
        :type objects: str
        :param events: This is an optional parameter when specifying object_audit_trail or document_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more audit events to retrieve their audit details. For example, events=Edit,Delete,TaskAssignment. If omitted, defaults to all audit events. See Vault Help for full lists of object audit events and document audit events.
        :type events: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the audittrail_audit_trail_type_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.audittrail_audit_trail_type_get_with_http_info(audit_trail_type, start_date, end_date, all_dates, format_result, limit, offset, objects, events, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def audittrail_audit_trail_type_get_with_http_info(self, audit_trail_type : Annotated[StrictStr, Field(..., description="The name of the specified audit type (document_audit_trail, object_audit_trail, etc). Use the Retrieve Audit Types API to retrieve types available in your Vault. Requests for login_audit_trail only accept one request per user at a time.")], start_date : Annotated[Optional[StrictStr], Field(description="Specify a start date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days.")] = None, end_date : Annotated[Optional[StrictStr], Field(description="Specify an end date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days.")] = None, all_dates : Annotated[Optional[StrictStr], Field(description="Set to true to request audit information for all dates. You must leave start_date and end_date blank when requesting an export of a full audit trail.")] = None, format_result : Annotated[Optional[StrictStr], Field(description="To request a downloadable CSV file of your audit details, use csv. The response contains a jobId to retrieve the job status, which contains a link to download the CSV file. If omitted, the API returns a JSON response and does not start a job. If all_dates is true, this parameter is required.")] = None, limit : Annotated[Optional[StrictStr], Field(description="Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.")] = None, offset : Annotated[Optional[StrictStr], Field(description="Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51. If omitted, defaults to 0.")] = None, objects : Annotated[Optional[StrictStr], Field(description="This is an optional parameter when specifying object_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more object names to retrieve their audit details. For example, objects=product__v,country__v. If omitted, defaults to all objects.")] = None, events : Annotated[Optional[StrictStr], Field(description="This is an optional parameter when specifying object_audit_trail or document_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more audit events to retrieve their audit details. For example, events=Edit,Delete,TaskAssignment. If omitted, defaults to all audit events. See Vault Help for full lists of object audit events and document audit events.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Audit Details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.audittrail_audit_trail_type_get_with_http_info(audit_trail_type, start_date, end_date, all_dates, format_result, limit, offset, objects, events, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param audit_trail_type: The name of the specified audit type (document_audit_trail, object_audit_trail, etc). Use the Retrieve Audit Types API to retrieve types available in your Vault. Requests for login_audit_trail only accept one request per user at a time. (required)
        :type audit_trail_type: str
        :param start_date: Specify a start date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days.
        :type start_date: str
        :param end_date: Specify an end date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days.
        :type end_date: str
        :param all_dates: Set to true to request audit information for all dates. You must leave start_date and end_date blank when requesting an export of a full audit trail.
        :type all_dates: str
        :param format_result: To request a downloadable CSV file of your audit details, use csv. The response contains a jobId to retrieve the job status, which contains a link to download the CSV file. If omitted, the API returns a JSON response and does not start a job. If all_dates is true, this parameter is required.
        :type format_result: str
        :param limit: Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
        :type limit: str
        :param offset: Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51. If omitted, defaults to 0.
        :type offset: str
        :param objects: This is an optional parameter when specifying object_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more object names to retrieve their audit details. For example, objects=product__v,country__v. If omitted, defaults to all objects.
        :type objects: str
        :param events: This is an optional parameter when specifying object_audit_trail or document_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more audit events to retrieve their audit details. For example, events=Edit,Delete,TaskAssignment. If omitted, defaults to all audit events. See Vault Help for full lists of object audit events and document audit events.
        :type events: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'audit_trail_type',
            'start_date',
            'end_date',
            'all_dates',
            'format_result',
            'limit',
            'offset',
            'objects',
            'events',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method audittrail_audit_trail_type_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['audit_trail_type'] is not None:
            _path_params['audit_trail_type'] = _params['audit_trail_type']


        # process the query parameters
        _query_params = []
        if _params.get('start_date') is not None:  # noqa: E501
            _query_params.append(('start_date', _params['start_date']))

        if _params.get('end_date') is not None:  # noqa: E501
            _query_params.append(('end_date', _params['end_date']))

        if _params.get('all_dates') is not None:  # noqa: E501
            _query_params.append(('all_dates', _params['all_dates']))

        if _params.get('format_result') is not None:  # noqa: E501
            _query_params.append(('format_result', _params['format_result']))

        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('offset') is not None:  # noqa: E501
            _query_params.append(('offset', _params['offset']))

        if _params.get('objects') is not None:  # noqa: E501
            _query_params.append(('objects', _params['objects']))

        if _params.get('events') is not None:  # noqa: E501
            _query_params.append(('events', _params['events']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/audittrail/{audit_trail_type}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def auth_discovery_post(self, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Authentication Type Discovery  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.auth_discovery_post(accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the auth_discovery_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.auth_discovery_post_with_http_info(accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def auth_discovery_post_with_http_info(self, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Authentication Type Discovery  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.auth_discovery_post_with_http_info(accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_discovery_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/auth/discovery', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def auth_oauth_session_oath_oidc_profile_id_post(self, oath_oidc_profile_id : StrictStr, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """OAuth 2.0 / OpenID Connect  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.auth_oauth_session_oath_oidc_profile_id_post(oath_oidc_profile_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param oath_oidc_profile_id: (required)
        :type oath_oidc_profile_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the auth_oauth_session_oath_oidc_profile_id_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.auth_oauth_session_oath_oidc_profile_id_post_with_http_info(oath_oidc_profile_id, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def auth_oauth_session_oath_oidc_profile_id_post_with_http_info(self, oath_oidc_profile_id : StrictStr, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """OAuth 2.0 / OpenID Connect  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.auth_oauth_session_oath_oidc_profile_id_post_with_http_info(oath_oidc_profile_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param oath_oidc_profile_id: (required)
        :type oath_oidc_profile_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'oath_oidc_profile_id',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_oauth_session_oath_oidc_profile_id_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['oath_oidc_profile_id'] is not None:
            _path_params['oath_oidc_profile_id'] = _params['oath_oidc_profile_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/auth/oauth/session/{oath_oidc_profile_id}', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def auth_post(self, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """User Name and Password  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.auth_post(content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the auth_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.auth_post_with_http_info(content_type, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def auth_post_with_http_info(self, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """User Name and Password  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.auth_post_with_http_info(content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'content_type',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/auth', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def code_class_name_delete(self, class_name : Annotated[StrictStr, Field(..., description="The fully qualified class name of your file.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Delete Single Source Code File  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.code_class_name_delete(class_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param class_name: The fully qualified class name of your file. (required)
        :type class_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the code_class_name_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.code_class_name_delete_with_http_info(class_name, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def code_class_name_delete_with_http_info(self, class_name : Annotated[StrictStr, Field(..., description="The fully qualified class name of your file.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Delete Single Source Code File  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.code_class_name_delete_with_http_info(class_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param class_name: The fully qualified class name of your file. (required)
        :type class_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'class_name',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method code_class_name_delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['class_name'] is not None:
            _path_params['class_name'] = _params['class_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/code/{class_name}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def code_class_name_disable_put(self, class_name : Annotated[StrictStr, Field(..., description="The fully qualified class name of your file.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Disable Vault Extension  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.code_class_name_disable_put(class_name, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param class_name: The fully qualified class name of your file. (required)
        :type class_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the code_class_name_disable_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.code_class_name_disable_put_with_http_info(class_name, authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def code_class_name_disable_put_with_http_info(self, class_name : Annotated[StrictStr, Field(..., description="The fully qualified class name of your file.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Disable Vault Extension  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.code_class_name_disable_put_with_http_info(class_name, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param class_name: The fully qualified class name of your file. (required)
        :type class_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'class_name',
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method code_class_name_disable_put" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['class_name'] is not None:
            _path_params['class_name'] = _params['class_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/code/{class_name}/disable', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def code_class_name_enable_put(self, class_name : Annotated[StrictStr, Field(..., description="The fully qualified class name of your file.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Enable Vault Extension  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.code_class_name_enable_put(class_name, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param class_name: The fully qualified class name of your file. (required)
        :type class_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the code_class_name_enable_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.code_class_name_enable_put_with_http_info(class_name, authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def code_class_name_enable_put_with_http_info(self, class_name : Annotated[StrictStr, Field(..., description="The fully qualified class name of your file.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Enable Vault Extension  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.code_class_name_enable_put_with_http_info(class_name, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param class_name: The fully qualified class name of your file. (required)
        :type class_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'class_name',
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method code_class_name_enable_put" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['class_name'] is not None:
            _path_params['class_name'] = _params['class_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/code/{class_name}/enable', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def code_class_name_get(self, class_name : Annotated[StrictStr, Field(..., description="The fully qualified class name of your file.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Single Source Code File  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.code_class_name_get(class_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param class_name: The fully qualified class name of your file. (required)
        :type class_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the code_class_name_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.code_class_name_get_with_http_info(class_name, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def code_class_name_get_with_http_info(self, class_name : Annotated[StrictStr, Field(..., description="The fully qualified class name of your file.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Single Source Code File  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.code_class_name_get_with_http_info(class_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param class_name: The fully qualified class name of your file. (required)
        :type class_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'class_name',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method code_class_name_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['class_name'] is not None:
            _path_params['class_name'] = _params['class_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/code/{class_name}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def code_profiler_get(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve All Profiling Sessions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.code_profiler_get(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the code_profiler_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.code_profiler_get_with_http_info(authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def code_profiler_get_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve All Profiling Sessions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.code_profiler_get_with_http_info(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method code_profiler_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/code/profiler', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def code_profiler_post(self, authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Create Profiling Session  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.code_profiler_post(authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the code_profiler_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.code_profiler_post_with_http_info(authorization, content_type, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def code_profiler_post_with_http_info(self, authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create Profiling Session  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.code_profiler_post_with_http_info(authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'content_type',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method code_profiler_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/code/profiler', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def code_profiler_session_name_actions_end_post(self, session_name : Annotated[StrictStr, Field(..., description="The name of the session, for example,  baseline__c.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """End Profiling Session  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.code_profiler_session_name_actions_end_post(session_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param session_name: The name of the session, for example,  baseline__c. (required)
        :type session_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the code_profiler_session_name_actions_end_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.code_profiler_session_name_actions_end_post_with_http_info(session_name, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def code_profiler_session_name_actions_end_post_with_http_info(self, session_name : Annotated[StrictStr, Field(..., description="The name of the session, for example,  baseline__c.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """End Profiling Session  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.code_profiler_session_name_actions_end_post_with_http_info(session_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param session_name: The name of the session, for example,  baseline__c. (required)
        :type session_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'session_name',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method code_profiler_session_name_actions_end_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['session_name'] is not None:
            _path_params['session_name'] = _params['session_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/code/profiler/{session_name}/actions/end', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def code_profiler_session_name_delete(self, session_name : Annotated[StrictStr, Field(..., description="The name of the session, for example,  baseline__c.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Delete Profiling Session  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.code_profiler_session_name_delete(session_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param session_name: The name of the session, for example,  baseline__c. (required)
        :type session_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the code_profiler_session_name_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.code_profiler_session_name_delete_with_http_info(session_name, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def code_profiler_session_name_delete_with_http_info(self, session_name : Annotated[StrictStr, Field(..., description="The name of the session, for example,  baseline__c.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Delete Profiling Session  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.code_profiler_session_name_delete_with_http_info(session_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param session_name: The name of the session, for example,  baseline__c. (required)
        :type session_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'session_name',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method code_profiler_session_name_delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['session_name'] is not None:
            _path_params['session_name'] = _params['session_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/code/profiler/{session_name}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def code_profiler_session_name_get(self, session_name : Annotated[StrictStr, Field(..., description="The name of the session, for example,  baseline__c.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Profiling Session  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.code_profiler_session_name_get(session_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param session_name: The name of the session, for example,  baseline__c. (required)
        :type session_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the code_profiler_session_name_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.code_profiler_session_name_get_with_http_info(session_name, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def code_profiler_session_name_get_with_http_info(self, session_name : Annotated[StrictStr, Field(..., description="The name of the session, for example,  baseline__c.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Profiling Session  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.code_profiler_session_name_get_with_http_info(session_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param session_name: The name of the session, for example,  baseline__c. (required)
        :type session_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'session_name',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method code_profiler_session_name_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['session_name'] is not None:
            _path_params['session_name'] = _params['session_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/code/profiler/{session_name}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def code_profiler_session_name_results_get(self, session_name : Annotated[StrictStr, Field(..., description="The name of the session, for example,  baseline__c.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Download Profiling Session Results  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.code_profiler_session_name_results_get(session_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param session_name: The name of the session, for example,  baseline__c. (required)
        :type session_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the code_profiler_session_name_results_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.code_profiler_session_name_results_get_with_http_info(session_name, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def code_profiler_session_name_results_get_with_http_info(self, session_name : Annotated[StrictStr, Field(..., description="The name of the session, for example,  baseline__c.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Download Profiling Session Results  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.code_profiler_session_name_results_get_with_http_info(session_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param session_name: The name of the session, for example,  baseline__c. (required)
        :type session_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'session_name',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method code_profiler_session_name_results_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['session_name'] is not None:
            _path_params['session_name'] = _params['session_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/code/profiler/{session_name}/results', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def code_put(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Add or Replace Single Source Code File  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.code_put(authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the code_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.code_put_with_http_info(authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def code_put_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Add or Replace Single Source Code File  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.code_put_with_http_info(authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method code_put" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/code', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def composites_trees_edl_hierarchy_or_template_actions_listnodes_post(self, edl_hierarchy_or_template : Annotated[StrictStr, Field(..., description="Choose to retrieve either edl_hierarchy__v or edl_template__v")], authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Specific Root Nodes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.composites_trees_edl_hierarchy_or_template_actions_listnodes_post(edl_hierarchy_or_template, authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param edl_hierarchy_or_template: Choose to retrieve either edl_hierarchy__v or edl_template__v (required)
        :type edl_hierarchy_or_template: str
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the composites_trees_edl_hierarchy_or_template_actions_listnodes_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.composites_trees_edl_hierarchy_or_template_actions_listnodes_post_with_http_info(edl_hierarchy_or_template, authorization, content_type, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def composites_trees_edl_hierarchy_or_template_actions_listnodes_post_with_http_info(self, edl_hierarchy_or_template : Annotated[StrictStr, Field(..., description="Choose to retrieve either edl_hierarchy__v or edl_template__v")], authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Specific Root Nodes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.composites_trees_edl_hierarchy_or_template_actions_listnodes_post_with_http_info(edl_hierarchy_or_template, authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param edl_hierarchy_or_template: Choose to retrieve either edl_hierarchy__v or edl_template__v (required)
        :type edl_hierarchy_or_template: str
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'edl_hierarchy_or_template',
            'authorization',
            'content_type',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method composites_trees_edl_hierarchy_or_template_actions_listnodes_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['edl_hierarchy_or_template'] is not None:
            _path_params['edl_hierarchy_or_template'] = _params['edl_hierarchy_or_template']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/composites/trees/{edl_hierarchy_or_template}/actions/listnodes', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def composites_trees_edl_hierarchy_or_template_get(self, edl_hierarchy_or_template : StrictStr, authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve All Root Nodes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.composites_trees_edl_hierarchy_or_template_get(edl_hierarchy_or_template, authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param edl_hierarchy_or_template: (required)
        :type edl_hierarchy_or_template: str
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the composites_trees_edl_hierarchy_or_template_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.composites_trees_edl_hierarchy_or_template_get_with_http_info(edl_hierarchy_or_template, authorization, content_type, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def composites_trees_edl_hierarchy_or_template_get_with_http_info(self, edl_hierarchy_or_template : StrictStr, authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve All Root Nodes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.composites_trees_edl_hierarchy_or_template_get_with_http_info(edl_hierarchy_or_template, authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param edl_hierarchy_or_template: (required)
        :type edl_hierarchy_or_template: str
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'edl_hierarchy_or_template',
            'authorization',
            'content_type',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method composites_trees_edl_hierarchy_or_template_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['edl_hierarchy_or_template'] is not None:
            _path_params['edl_hierarchy_or_template'] = _params['edl_hierarchy_or_template']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/composites/trees/{edl_hierarchy_or_template}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def composites_trees_edl_hierarchy_v_parent_node_id_children_get(self, parent_node_id : Annotated[StrictStr, Field(..., description="The ID of a parent node in the hierarchy.")], authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve a Node's Children  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.composites_trees_edl_hierarchy_v_parent_node_id_children_get(parent_node_id, authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param parent_node_id: The ID of a parent node in the hierarchy. (required)
        :type parent_node_id: str
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the composites_trees_edl_hierarchy_v_parent_node_id_children_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.composites_trees_edl_hierarchy_v_parent_node_id_children_get_with_http_info(parent_node_id, authorization, content_type, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def composites_trees_edl_hierarchy_v_parent_node_id_children_get_with_http_info(self, parent_node_id : Annotated[StrictStr, Field(..., description="The ID of a parent node in the hierarchy.")], authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve a Node's Children  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.composites_trees_edl_hierarchy_v_parent_node_id_children_get_with_http_info(parent_node_id, authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param parent_node_id: The ID of a parent node in the hierarchy. (required)
        :type parent_node_id: str
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'parent_node_id',
            'authorization',
            'content_type',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method composites_trees_edl_hierarchy_v_parent_node_id_children_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['parent_node_id'] is not None:
            _path_params['parent_node_id'] = _params['parent_node_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/composites/trees/edl_hierarchy__v/{parent_node_id}/children', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def composites_trees_edl_hierarchy_v_parent_node_id_children_put(self, parent_node_id : Annotated[StrictStr, Field(..., description="The ID of a parent node in the hierarchy.")], authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Update Node Order  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.composites_trees_edl_hierarchy_v_parent_node_id_children_put(parent_node_id, authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param parent_node_id: The ID of a parent node in the hierarchy. (required)
        :type parent_node_id: str
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the composites_trees_edl_hierarchy_v_parent_node_id_children_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.composites_trees_edl_hierarchy_v_parent_node_id_children_put_with_http_info(parent_node_id, authorization, content_type, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def composites_trees_edl_hierarchy_v_parent_node_id_children_put_with_http_info(self, parent_node_id : Annotated[StrictStr, Field(..., description="The ID of a parent node in the hierarchy.")], authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Update Node Order  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.composites_trees_edl_hierarchy_v_parent_node_id_children_put_with_http_info(parent_node_id, authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param parent_node_id: The ID of a parent node in the hierarchy. (required)
        :type parent_node_id: str
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'parent_node_id',
            'authorization',
            'content_type',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method composites_trees_edl_hierarchy_v_parent_node_id_children_put" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['parent_node_id'] is not None:
            _path_params['parent_node_id'] = _params['parent_node_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/composites/trees/edl_hierarchy__v/{parent_node_id}/children', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def configuration_component_type_and_record_name_get(self, component_type_and_record_name : Annotated[StrictStr, Field(..., description="The component type name (`Picklist`, `Docfield`, `Doctype`, etc.) followed by the name of the record from which to retrieve metadata. The format is `{Componenttype}.{record_name}`. For example, `Picklist.color__c`. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint.")], loc : Annotated[Optional[StrictStr], Field(description="When localized (translated) strings are available, retrieve them by setting loc to true.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Component Record (XML/JSON)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.configuration_component_type_and_record_name_get(component_type_and_record_name, loc, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param component_type_and_record_name: The component type name (`Picklist`, `Docfield`, `Doctype`, etc.) followed by the name of the record from which to retrieve metadata. The format is `{Componenttype}.{record_name}`. For example, `Picklist.color__c`. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint. (required)
        :type component_type_and_record_name: str
        :param loc: When localized (translated) strings are available, retrieve them by setting loc to true.
        :type loc: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the configuration_component_type_and_record_name_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.configuration_component_type_and_record_name_get_with_http_info(component_type_and_record_name, loc, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def configuration_component_type_and_record_name_get_with_http_info(self, component_type_and_record_name : Annotated[StrictStr, Field(..., description="The component type name (`Picklist`, `Docfield`, `Doctype`, etc.) followed by the name of the record from which to retrieve metadata. The format is `{Componenttype}.{record_name}`. For example, `Picklist.color__c`. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint.")], loc : Annotated[Optional[StrictStr], Field(description="When localized (translated) strings are available, retrieve them by setting loc to true.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Component Record (XML/JSON)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.configuration_component_type_and_record_name_get_with_http_info(component_type_and_record_name, loc, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param component_type_and_record_name: The component type name (`Picklist`, `Docfield`, `Doctype`, etc.) followed by the name of the record from which to retrieve metadata. The format is `{Componenttype}.{record_name}`. For example, `Picklist.color__c`. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint. (required)
        :type component_type_and_record_name: str
        :param loc: When localized (translated) strings are available, retrieve them by setting loc to true.
        :type loc: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'component_type_and_record_name',
            'loc',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configuration_component_type_and_record_name_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['component_type_and_record_name'] is not None:
            _path_params['component_type_and_record_name'] = _params['component_type_and_record_name']


        # process the query parameters
        _query_params = []
        if _params.get('loc') is not None:  # noqa: E501
            _query_params.append(('loc', _params['loc']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/configuration/{component_type_and_record_name}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def configuration_component_type_get(self, component_type : StrictStr, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Component Record Collection  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.configuration_component_type_get(component_type, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param component_type: (required)
        :type component_type: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the configuration_component_type_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.configuration_component_type_get_with_http_info(component_type, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def configuration_component_type_get_with_http_info(self, component_type : StrictStr, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Component Record Collection  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.configuration_component_type_get_with_http_info(component_type, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param component_type: (required)
        :type component_type: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'component_type',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configuration_component_type_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['component_type'] is not None:
            _path_params['component_type'] = _params['component_type']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/configuration/{component_type}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def configuration_object_name_and_object_type_get(self, object_name_and_object_type : Annotated[StrictStr, Field(..., description="The object name followed by the object type in the format `Objecttype.{object_name}.{object_type}`. For example, `Objecttype.product__v.base__v`.")], loc : Annotated[Optional[StrictStr], Field(description="When localized (translated) strings are available, retrieve them by setting loc to true.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Details from a Specific Object  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.configuration_object_name_and_object_type_get(object_name_and_object_type, loc, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name_and_object_type: The object name followed by the object type in the format `Objecttype.{object_name}.{object_type}`. For example, `Objecttype.product__v.base__v`. (required)
        :type object_name_and_object_type: str
        :param loc: When localized (translated) strings are available, retrieve them by setting loc to true.
        :type loc: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the configuration_object_name_and_object_type_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.configuration_object_name_and_object_type_get_with_http_info(object_name_and_object_type, loc, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def configuration_object_name_and_object_type_get_with_http_info(self, object_name_and_object_type : Annotated[StrictStr, Field(..., description="The object name followed by the object type in the format `Objecttype.{object_name}.{object_type}`. For example, `Objecttype.product__v.base__v`.")], loc : Annotated[Optional[StrictStr], Field(description="When localized (translated) strings are available, retrieve them by setting loc to true.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Details from a Specific Object  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.configuration_object_name_and_object_type_get_with_http_info(object_name_and_object_type, loc, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name_and_object_type: The object name followed by the object type in the format `Objecttype.{object_name}.{object_type}`. For example, `Objecttype.product__v.base__v`. (required)
        :type object_name_and_object_type: str
        :param loc: When localized (translated) strings are available, retrieve them by setting loc to true.
        :type loc: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'object_name_and_object_type',
            'loc',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configuration_object_name_and_object_type_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['object_name_and_object_type'] is not None:
            _path_params['object_name_and_object_type'] = _params['object_name_and_object_type']


        # process the query parameters
        _query_params = []
        if _params.get('loc') is not None:  # noqa: E501
            _query_params.append(('loc', _params['loc']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/configuration/{object_name_and_object_type}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def configuration_objecttype_get(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Details from All Object Types  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.configuration_objecttype_get(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the configuration_objecttype_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.configuration_objecttype_get_with_http_info(authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def configuration_objecttype_get_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Details from All Object Types  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.configuration_objecttype_get_with_http_info(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configuration_objecttype_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/configuration/Objecttype', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def configuration_role_assignment_rule_delete(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Delete Lifecycle Role Assignment Override Rules  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.configuration_role_assignment_rule_delete(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the configuration_role_assignment_rule_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.configuration_role_assignment_rule_delete_with_http_info(authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def configuration_role_assignment_rule_delete_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Delete Lifecycle Role Assignment Override Rules  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.configuration_role_assignment_rule_delete_with_http_info(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configuration_role_assignment_rule_delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/configuration/role_assignment_rule', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def configuration_role_assignment_rule_get(self, lifecycle__v : Annotated[Optional[StrictStr], Field(description="Include the name of the lifecycle from which to retrieve information. For example: lifecycle_v=general_lifecycle__c")] = None, role__v : Annotated[Optional[StrictStr], Field(description="Include the name of the role from which to retrieve information. For example: role__v=editor__c")] = None, product__v : Annotated[Optional[StrictStr], Field(description="Include the ID/name of a specific product to see product-based override rules to default users/allowed users for the lifecycle role. For example: product__v=0PR0011001 or product__v.name__v=CholeCap")] = None, country__v : Annotated[Optional[StrictStr], Field(description="Include the ID/name of a specific country to see country-based override rules to default users/allowed users for the lifecycle role. For example: country__v=0CR0022002 or country__v.name__v=United States")] = None, study__v : Annotated[Optional[StrictStr], Field(description="In eTMF Vaults only. Include the ID/name of a specific study to see study-based override rules to default users/allowed users for the lifecycle role. For example: study__v=0ST0021J01 or study__v.name__v=CholeCap Study")] = None, study_country__v : Annotated[Optional[StrictStr], Field(description="In eTMF Vaults only. Include the ID/name of a specific study country to see study country-based override rules to default users/allowed users for the lifecycle role. For example: study_country__v=0SC0001001 or study_country__v.name__v=Germany")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Lifecycle Role Assignment Rules (Default & Override)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.configuration_role_assignment_rule_get(lifecycle__v, role__v, product__v, country__v, study__v, study_country__v, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param lifecycle__v: Include the name of the lifecycle from which to retrieve information. For example: lifecycle_v=general_lifecycle__c
        :type lifecycle__v: str
        :param role__v: Include the name of the role from which to retrieve information. For example: role__v=editor__c
        :type role__v: str
        :param product__v: Include the ID/name of a specific product to see product-based override rules to default users/allowed users for the lifecycle role. For example: product__v=0PR0011001 or product__v.name__v=CholeCap
        :type product__v: str
        :param country__v: Include the ID/name of a specific country to see country-based override rules to default users/allowed users for the lifecycle role. For example: country__v=0CR0022002 or country__v.name__v=United States
        :type country__v: str
        :param study__v: In eTMF Vaults only. Include the ID/name of a specific study to see study-based override rules to default users/allowed users for the lifecycle role. For example: study__v=0ST0021J01 or study__v.name__v=CholeCap Study
        :type study__v: str
        :param study_country__v: In eTMF Vaults only. Include the ID/name of a specific study country to see study country-based override rules to default users/allowed users for the lifecycle role. For example: study_country__v=0SC0001001 or study_country__v.name__v=Germany
        :type study_country__v: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the configuration_role_assignment_rule_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.configuration_role_assignment_rule_get_with_http_info(lifecycle__v, role__v, product__v, country__v, study__v, study_country__v, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def configuration_role_assignment_rule_get_with_http_info(self, lifecycle__v : Annotated[Optional[StrictStr], Field(description="Include the name of the lifecycle from which to retrieve information. For example: lifecycle_v=general_lifecycle__c")] = None, role__v : Annotated[Optional[StrictStr], Field(description="Include the name of the role from which to retrieve information. For example: role__v=editor__c")] = None, product__v : Annotated[Optional[StrictStr], Field(description="Include the ID/name of a specific product to see product-based override rules to default users/allowed users for the lifecycle role. For example: product__v=0PR0011001 or product__v.name__v=CholeCap")] = None, country__v : Annotated[Optional[StrictStr], Field(description="Include the ID/name of a specific country to see country-based override rules to default users/allowed users for the lifecycle role. For example: country__v=0CR0022002 or country__v.name__v=United States")] = None, study__v : Annotated[Optional[StrictStr], Field(description="In eTMF Vaults only. Include the ID/name of a specific study to see study-based override rules to default users/allowed users for the lifecycle role. For example: study__v=0ST0021J01 or study__v.name__v=CholeCap Study")] = None, study_country__v : Annotated[Optional[StrictStr], Field(description="In eTMF Vaults only. Include the ID/name of a specific study country to see study country-based override rules to default users/allowed users for the lifecycle role. For example: study_country__v=0SC0001001 or study_country__v.name__v=Germany")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Lifecycle Role Assignment Rules (Default & Override)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.configuration_role_assignment_rule_get_with_http_info(lifecycle__v, role__v, product__v, country__v, study__v, study_country__v, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param lifecycle__v: Include the name of the lifecycle from which to retrieve information. For example: lifecycle_v=general_lifecycle__c
        :type lifecycle__v: str
        :param role__v: Include the name of the role from which to retrieve information. For example: role__v=editor__c
        :type role__v: str
        :param product__v: Include the ID/name of a specific product to see product-based override rules to default users/allowed users for the lifecycle role. For example: product__v=0PR0011001 or product__v.name__v=CholeCap
        :type product__v: str
        :param country__v: Include the ID/name of a specific country to see country-based override rules to default users/allowed users for the lifecycle role. For example: country__v=0CR0022002 or country__v.name__v=United States
        :type country__v: str
        :param study__v: In eTMF Vaults only. Include the ID/name of a specific study to see study-based override rules to default users/allowed users for the lifecycle role. For example: study__v=0ST0021J01 or study__v.name__v=CholeCap Study
        :type study__v: str
        :param study_country__v: In eTMF Vaults only. Include the ID/name of a specific study country to see study country-based override rules to default users/allowed users for the lifecycle role. For example: study_country__v=0SC0001001 or study_country__v.name__v=Germany
        :type study_country__v: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'lifecycle__v',
            'role__v',
            'product__v',
            'country__v',
            'study__v',
            'study_country__v',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configuration_role_assignment_rule_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('lifecycle__v') is not None:  # noqa: E501
            _query_params.append(('lifecycle__v', _params['lifecycle__v']))

        if _params.get('role__v') is not None:  # noqa: E501
            _query_params.append(('role__v', _params['role__v']))

        if _params.get('product__v') is not None:  # noqa: E501
            _query_params.append(('product__v', _params['product__v']))

        if _params.get('country__v') is not None:  # noqa: E501
            _query_params.append(('country__v', _params['country__v']))

        if _params.get('study__v') is not None:  # noqa: E501
            _query_params.append(('study__v', _params['study__v']))

        if _params.get('study_country__v') is not None:  # noqa: E501
            _query_params.append(('study_country__v', _params['study_country__v']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/configuration/role_assignment_rule', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def configuration_role_assignment_rule_post(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Create Lifecycle Role Assignment Override Rules  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.configuration_role_assignment_rule_post(authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the configuration_role_assignment_rule_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.configuration_role_assignment_rule_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def configuration_role_assignment_rule_post_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create Lifecycle Role Assignment Override Rules  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.configuration_role_assignment_rule_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configuration_role_assignment_rule_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/configuration/role_assignment_rule', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def configuration_role_assignment_rule_put(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Update Lifecycle Role Assignment Rules (Default & Override)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.configuration_role_assignment_rule_put(authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the configuration_role_assignment_rule_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.configuration_role_assignment_rule_put_with_http_info(authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def configuration_role_assignment_rule_put_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Update Lifecycle Role Assignment Rules (Default & Override)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.configuration_role_assignment_rule_put_with_http_info(authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configuration_role_assignment_rule_put" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/configuration/role_assignment_rule', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def delegation_login_post(self, authorization : Annotated[Optional[StrictStr], Field(description="The sessionId of the currently authenticated user who will initiate the delegated session. Cannot be a delegated_sessionid.")] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Initiate Delegated Session  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delegation_login_post(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization: The sessionId of the currently authenticated user who will initiate the delegated session. Cannot be a delegated_sessionid.
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the delegation_login_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.delegation_login_post_with_http_info(authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def delegation_login_post_with_http_info(self, authorization : Annotated[Optional[StrictStr], Field(description="The sessionId of the currently authenticated user who will initiate the delegated session. Cannot be a delegated_sessionid.")] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Initiate Delegated Session  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delegation_login_post_with_http_info(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization: The sessionId of the currently authenticated user who will initiate the delegated session. Cannot be a delegated_sessionid.
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delegation_login_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/delegation/login', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def delegation_vaults_get(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Delegations  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delegation_vaults_get(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the delegation_vaults_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.delegation_vaults_get_with_http_info(authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def delegation_vaults_get_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Delegations  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delegation_vaults_get_with_http_info(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delegation_vaults_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/delegation/vaults', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def keep_alive_post(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Session Keep Alive  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.keep_alive_post(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the keep_alive_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.keep_alive_post_with_http_info(authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def keep_alive_post_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Session Keep Alive  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.keep_alive_post_with_http_info(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method keep_alive_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/keep-alive', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def limits_get(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Limits on Objects  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.limits_get(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the limits_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.limits_get_with_http_info(authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def limits_get_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Limits on Objects  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.limits_get_with_http_info(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method limits_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/limits', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def logs_api_usage_get(self, var_date : Annotated[Optional[StrictStr], Field(description="The day to retrieve the API Usage log. Date is in UTC and follows the format YYYY-MM-DD. Date cannot be more than 30 days in the past.")] = None, log_format : Annotated[Optional[StrictStr], Field(description="Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP. ")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Download Daily API Usage  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.logs_api_usage_get(var_date, log_format, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param var_date: The day to retrieve the API Usage log. Date is in UTC and follows the format YYYY-MM-DD. Date cannot be more than 30 days in the past.
        :type var_date: str
        :param log_format: Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP. 
        :type log_format: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the logs_api_usage_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.logs_api_usage_get_with_http_info(var_date, log_format, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def logs_api_usage_get_with_http_info(self, var_date : Annotated[Optional[StrictStr], Field(description="The day to retrieve the API Usage log. Date is in UTC and follows the format YYYY-MM-DD. Date cannot be more than 30 days in the past.")] = None, log_format : Annotated[Optional[StrictStr], Field(description="Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP. ")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Download Daily API Usage  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.logs_api_usage_get_with_http_info(var_date, log_format, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param var_date: The day to retrieve the API Usage log. Date is in UTC and follows the format YYYY-MM-DD. Date cannot be more than 30 days in the past.
        :type var_date: str
        :param log_format: Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP. 
        :type log_format: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'var_date',
            'log_format',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method logs_api_usage_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('var_date') is not None:  # noqa: E501
            _query_params.append(('date', _params['var_date']))

        if _params.get('log_format') is not None:  # noqa: E501
            _query_params.append(('log_format', _params['log_format']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/logs/api_usage', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def logs_code_debug_get(self, user_id : Annotated[Optional[StrictStr], Field(description="Filter results to retrieve the debug log for this user ID only. If omitted, this request retrieves debug logs for all users in the Vault.")] = None, include_inactive : Annotated[Optional[StrictBool], Field(description="Set to `true` to include debug log sessions with a status of `inactive__sys` in the response. If omitted, defaults to `false` and inactive sessions are not included in the response.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve All Debug Logs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.logs_code_debug_get(user_id, include_inactive, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param user_id: Filter results to retrieve the debug log for this user ID only. If omitted, this request retrieves debug logs for all users in the Vault.
        :type user_id: str
        :param include_inactive: Set to `true` to include debug log sessions with a status of `inactive__sys` in the response. If omitted, defaults to `false` and inactive sessions are not included in the response.
        :type include_inactive: bool
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the logs_code_debug_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.logs_code_debug_get_with_http_info(user_id, include_inactive, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def logs_code_debug_get_with_http_info(self, user_id : Annotated[Optional[StrictStr], Field(description="Filter results to retrieve the debug log for this user ID only. If omitted, this request retrieves debug logs for all users in the Vault.")] = None, include_inactive : Annotated[Optional[StrictBool], Field(description="Set to `true` to include debug log sessions with a status of `inactive__sys` in the response. If omitted, defaults to `false` and inactive sessions are not included in the response.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve All Debug Logs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.logs_code_debug_get_with_http_info(user_id, include_inactive, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param user_id: Filter results to retrieve the debug log for this user ID only. If omitted, this request retrieves debug logs for all users in the Vault.
        :type user_id: str
        :param include_inactive: Set to `true` to include debug log sessions with a status of `inactive__sys` in the response. If omitted, defaults to `false` and inactive sessions are not included in the response.
        :type include_inactive: bool
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'user_id',
            'include_inactive',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method logs_code_debug_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('user_id') is not None:  # noqa: E501
            _query_params.append(('user_id', _params['user_id']))

        if _params.get('include_inactive') is not None:  # noqa: E501
            _query_params.append(('include_inactive', _params['include_inactive']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/logs/code/debug', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def logs_code_debug_id_actions_reset_delete(self, id : Annotated[StrictStr, Field(..., description="The ID of the debug log to delete.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Delete Debug Log  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.logs_code_debug_id_actions_reset_delete(id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param id: The ID of the debug log to delete. (required)
        :type id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the logs_code_debug_id_actions_reset_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.logs_code_debug_id_actions_reset_delete_with_http_info(id, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def logs_code_debug_id_actions_reset_delete_with_http_info(self, id : Annotated[StrictStr, Field(..., description="The ID of the debug log to delete.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Delete Debug Log  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.logs_code_debug_id_actions_reset_delete_with_http_info(id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param id: The ID of the debug log to delete. (required)
        :type id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'id',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method logs_code_debug_id_actions_reset_delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id'] is not None:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/logs/code/debug/{id}/actions/reset', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def logs_code_debug_id_actions_reset_post(self, id : Annotated[StrictStr, Field(..., description="The ID of the debug log to delete.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Reset Debug Log  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.logs_code_debug_id_actions_reset_post(id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param id: The ID of the debug log to delete. (required)
        :type id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the logs_code_debug_id_actions_reset_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.logs_code_debug_id_actions_reset_post_with_http_info(id, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def logs_code_debug_id_actions_reset_post_with_http_info(self, id : Annotated[StrictStr, Field(..., description="The ID of the debug log to delete.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Reset Debug Log  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.logs_code_debug_id_actions_reset_post_with_http_info(id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param id: The ID of the debug log to delete. (required)
        :type id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'id',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method logs_code_debug_id_actions_reset_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id'] is not None:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/logs/code/debug/{id}/actions/reset', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def logs_code_debug_id_files_get(self, id : Annotated[StrictStr, Field(..., description="The ID of the debug log to download.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Download Debug Log Files  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.logs_code_debug_id_files_get(id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param id: The ID of the debug log to download. (required)
        :type id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the logs_code_debug_id_files_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.logs_code_debug_id_files_get_with_http_info(id, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def logs_code_debug_id_files_get_with_http_info(self, id : Annotated[StrictStr, Field(..., description="The ID of the debug log to download.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Download Debug Log Files  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.logs_code_debug_id_files_get_with_http_info(id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param id: The ID of the debug log to download. (required)
        :type id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'id',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method logs_code_debug_id_files_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id'] is not None:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/logs/code/debug/{id}/files', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def logs_code_debug_id_get(self, id : Annotated[StrictStr, Field(..., description="The ID of the debug log to retrieve.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Single Debug Log  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.logs_code_debug_id_get(id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param id: The ID of the debug log to retrieve. (required)
        :type id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the logs_code_debug_id_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.logs_code_debug_id_get_with_http_info(id, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def logs_code_debug_id_get_with_http_info(self, id : Annotated[StrictStr, Field(..., description="The ID of the debug log to retrieve.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Single Debug Log  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.logs_code_debug_id_get_with_http_info(id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param id: The ID of the debug log to retrieve. (required)
        :type id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'id',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method logs_code_debug_id_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id'] is not None:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/logs/code/debug/{id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def logs_code_debug_post(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Create Debug Log  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.logs_code_debug_post(authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the logs_code_debug_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.logs_code_debug_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def logs_code_debug_post_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create Debug Log  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.logs_code_debug_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method logs_code_debug_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/logs/code/debug', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def logs_code_runtime_get(self, var_date : Optional[StrictStr] = None, log_format : Annotated[Optional[StrictStr], Field(description="Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP. ")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Download SDK Runtime Log  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.logs_code_runtime_get(var_date, log_format, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param var_date:
        :type var_date: str
        :param log_format: Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP. 
        :type log_format: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the logs_code_runtime_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.logs_code_runtime_get_with_http_info(var_date, log_format, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def logs_code_runtime_get_with_http_info(self, var_date : Optional[StrictStr] = None, log_format : Annotated[Optional[StrictStr], Field(description="Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP. ")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Download SDK Runtime Log  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.logs_code_runtime_get_with_http_info(var_date, log_format, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param var_date:
        :type var_date: str
        :param log_format: Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP. 
        :type log_format: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'var_date',
            'log_format',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method logs_code_runtime_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('var_date') is not None:  # noqa: E501
            _query_params.append(('date', _params['var_date']))

        if _params.get('log_format') is not None:  # noqa: E501
            _query_params.append(('log_format', _params['log_format']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/logs/code/runtime', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def messages_message_type_actions_import_post(self, message_type : Annotated[StrictStr, Field(..., description="The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Import Bulk Translation File  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.messages_message_type_actions_import_post(message_type, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param message_type: The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys. (required)
        :type message_type: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the messages_message_type_actions_import_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.messages_message_type_actions_import_post_with_http_info(message_type, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def messages_message_type_actions_import_post_with_http_info(self, message_type : Annotated[StrictStr, Field(..., description="The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Import Bulk Translation File  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.messages_message_type_actions_import_post_with_http_info(message_type, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param message_type: The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys. (required)
        :type message_type: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'message_type',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method messages_message_type_actions_import_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['message_type'] is not None:
            _path_params['message_type'] = _params['message_type']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/messages/{message_type}/actions/import', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def messages_message_type_language_lang_actions_export_post(self, message_type : Annotated[StrictStr, Field(..., description="The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys.")], lang : Annotated[StrictStr, Field(..., description="A valid language code value, for example, en. Retrieve available values from the Admin Key (admin_key__sys) field on the Language (language__sys) object. Active and Inactive languages are both valid. ")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Export Bulk Translation File  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.messages_message_type_language_lang_actions_export_post(message_type, lang, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param message_type: The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys. (required)
        :type message_type: str
        :param lang: A valid language code value, for example, en. Retrieve available values from the Admin Key (admin_key__sys) field on the Language (language__sys) object. Active and Inactive languages are both valid.  (required)
        :type lang: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the messages_message_type_language_lang_actions_export_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.messages_message_type_language_lang_actions_export_post_with_http_info(message_type, lang, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def messages_message_type_language_lang_actions_export_post_with_http_info(self, message_type : Annotated[StrictStr, Field(..., description="The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys.")], lang : Annotated[StrictStr, Field(..., description="A valid language code value, for example, en. Retrieve available values from the Admin Key (admin_key__sys) field on the Language (language__sys) object. Active and Inactive languages are both valid. ")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Export Bulk Translation File  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.messages_message_type_language_lang_actions_export_post_with_http_info(message_type, lang, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param message_type: The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys. (required)
        :type message_type: str
        :param lang: A valid language code value, for example, en. Retrieve available values from the Admin Key (admin_key__sys) field on the Language (language__sys) object. Active and Inactive languages are both valid.  (required)
        :type lang: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'message_type',
            'lang',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method messages_message_type_language_lang_actions_export_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['message_type'] is not None:
            _path_params['message_type'] = _params['message_type']

        if _params['lang'] is not None:
            _path_params['lang'] = _params['lang']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/messages/{message_type}/language/{lang}/actions/export', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def metadata_audittrail_audit_trail_type_get(self, audit_trail_type : Annotated[StrictStr, Field(..., description="The name of the specified audit type (document_audit_trail, object_audit_trail, etc).")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Audit Metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.metadata_audittrail_audit_trail_type_get(audit_trail_type, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param audit_trail_type: The name of the specified audit type (document_audit_trail, object_audit_trail, etc). (required)
        :type audit_trail_type: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the metadata_audittrail_audit_trail_type_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.metadata_audittrail_audit_trail_type_get_with_http_info(audit_trail_type, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def metadata_audittrail_audit_trail_type_get_with_http_info(self, audit_trail_type : Annotated[StrictStr, Field(..., description="The name of the specified audit type (document_audit_trail, object_audit_trail, etc).")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Audit Metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.metadata_audittrail_audit_trail_type_get_with_http_info(audit_trail_type, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param audit_trail_type: The name of the specified audit type (document_audit_trail, object_audit_trail, etc). (required)
        :type audit_trail_type: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'audit_trail_type',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method metadata_audittrail_audit_trail_type_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['audit_trail_type'] is not None:
            _path_params['audit_trail_type'] = _params['audit_trail_type']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/metadata/audittrail/{audit_trail_type}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def metadata_audittrail_get(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Audit Types  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.metadata_audittrail_get(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the metadata_audittrail_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.metadata_audittrail_get_with_http_info(authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def metadata_audittrail_get_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Audit Types  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.metadata_audittrail_get_with_http_info(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method metadata_audittrail_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/metadata/audittrail', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def metadata_components_component_type_get(self, component_type : Annotated[StrictStr, Field(..., description="The component type name (Picklist, Docfield, Doctype, etc.).")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Component Type Metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.metadata_components_component_type_get(component_type, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param component_type: The component type name (Picklist, Docfield, Doctype, etc.). (required)
        :type component_type: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the metadata_components_component_type_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.metadata_components_component_type_get_with_http_info(component_type, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def metadata_components_component_type_get_with_http_info(self, component_type : Annotated[StrictStr, Field(..., description="The component type name (Picklist, Docfield, Doctype, etc.).")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Component Type Metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.metadata_components_component_type_get_with_http_info(component_type, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param component_type: The component type name (Picklist, Docfield, Doctype, etc.). (required)
        :type component_type: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'component_type',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method metadata_components_component_type_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['component_type'] is not None:
            _path_params['component_type'] = _params['component_type']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/metadata/components/{component_type}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def metadata_components_get(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve All Component Metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.metadata_components_get(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the metadata_components_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.metadata_components_get_with_http_info(authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def metadata_components_get_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve All Component Metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.metadata_components_get_with_http_info(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method metadata_components_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/metadata/components', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def metadata_objects_binders_templates_bindernodes_get(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Binder Template Node Metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.metadata_objects_binders_templates_bindernodes_get(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the metadata_objects_binders_templates_bindernodes_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.metadata_objects_binders_templates_bindernodes_get_with_http_info(authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def metadata_objects_binders_templates_bindernodes_get_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Binder Template Node Metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.metadata_objects_binders_templates_bindernodes_get_with_http_info(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method metadata_objects_binders_templates_bindernodes_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/metadata/objects/binders/templates/bindernodes', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def metadata_objects_binders_templates_get(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Binder Template Metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.metadata_objects_binders_templates_get(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the metadata_objects_binders_templates_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.metadata_objects_binders_templates_get_with_http_info(authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def metadata_objects_binders_templates_get_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Binder Template Metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.metadata_objects_binders_templates_get_with_http_info(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method metadata_objects_binders_templates_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/metadata/objects/binders/templates', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def metadata_objects_documents_annotations_placemarks_types_placemark_type_get(self, placemark_type : Annotated[StrictStr, Field(..., description="The name of the placemark type. For example, sticky__sys.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Annotation Placemark Type Metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.metadata_objects_documents_annotations_placemarks_types_placemark_type_get(placemark_type, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param placemark_type: The name of the placemark type. For example, sticky__sys. (required)
        :type placemark_type: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the metadata_objects_documents_annotations_placemarks_types_placemark_type_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.metadata_objects_documents_annotations_placemarks_types_placemark_type_get_with_http_info(placemark_type, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def metadata_objects_documents_annotations_placemarks_types_placemark_type_get_with_http_info(self, placemark_type : Annotated[StrictStr, Field(..., description="The name of the placemark type. For example, sticky__sys.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Annotation Placemark Type Metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.metadata_objects_documents_annotations_placemarks_types_placemark_type_get_with_http_info(placemark_type, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param placemark_type: The name of the placemark type. For example, sticky__sys. (required)
        :type placemark_type: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'placemark_type',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method metadata_objects_documents_annotations_placemarks_types_placemark_type_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['placemark_type'] is not None:
            _path_params['placemark_type'] = _params['placemark_type']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/metadata/objects/documents/annotations/placemarks/types/{placemark_type}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def metadata_objects_documents_annotations_references_types_reference_type_get(self, reference_type : StrictStr, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Annotation Reference Type Metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.metadata_objects_documents_annotations_references_types_reference_type_get(reference_type, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param reference_type: (required)
        :type reference_type: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the metadata_objects_documents_annotations_references_types_reference_type_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.metadata_objects_documents_annotations_references_types_reference_type_get_with_http_info(reference_type, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def metadata_objects_documents_annotations_references_types_reference_type_get_with_http_info(self, reference_type : StrictStr, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Annotation Reference Type Metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.metadata_objects_documents_annotations_references_types_reference_type_get_with_http_info(reference_type, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param reference_type: (required)
        :type reference_type: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'reference_type',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method metadata_objects_documents_annotations_references_types_reference_type_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['reference_type'] is not None:
            _path_params['reference_type'] = _params['reference_type']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/metadata/objects/documents/annotations/references/types/{reference_type}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def metadata_objects_documents_annotations_types_annotation_type_get(self, annotation_type : Annotated[StrictStr, Field(..., description="The name of the annotation type. Valid annotation types include: `note__sys` `line__sys` `document_link__sys` `permalink_link__sys` `anchor__sys` `reply__sys` `external_link__sys`  The following annotation types are only valid in Medical and PromoMats Vaults:  `suggested_link__sys` `approved_link__sys` `auto_link__sys` `keyword_link__sys`")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Annotation Type Metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.metadata_objects_documents_annotations_types_annotation_type_get(annotation_type, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param annotation_type: The name of the annotation type. Valid annotation types include: `note__sys` `line__sys` `document_link__sys` `permalink_link__sys` `anchor__sys` `reply__sys` `external_link__sys`  The following annotation types are only valid in Medical and PromoMats Vaults:  `suggested_link__sys` `approved_link__sys` `auto_link__sys` `keyword_link__sys` (required)
        :type annotation_type: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the metadata_objects_documents_annotations_types_annotation_type_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.metadata_objects_documents_annotations_types_annotation_type_get_with_http_info(annotation_type, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def metadata_objects_documents_annotations_types_annotation_type_get_with_http_info(self, annotation_type : Annotated[StrictStr, Field(..., description="The name of the annotation type. Valid annotation types include: `note__sys` `line__sys` `document_link__sys` `permalink_link__sys` `anchor__sys` `reply__sys` `external_link__sys`  The following annotation types are only valid in Medical and PromoMats Vaults:  `suggested_link__sys` `approved_link__sys` `auto_link__sys` `keyword_link__sys`")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Annotation Type Metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.metadata_objects_documents_annotations_types_annotation_type_get_with_http_info(annotation_type, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param annotation_type: The name of the annotation type. Valid annotation types include: `note__sys` `line__sys` `document_link__sys` `permalink_link__sys` `anchor__sys` `reply__sys` `external_link__sys`  The following annotation types are only valid in Medical and PromoMats Vaults:  `suggested_link__sys` `approved_link__sys` `auto_link__sys` `keyword_link__sys` (required)
        :type annotation_type: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'annotation_type',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method metadata_objects_documents_annotations_types_annotation_type_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['annotation_type'] is not None:
            _path_params['annotation_type'] = _params['annotation_type']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/metadata/objects/documents/annotations/types/{annotation_type}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def metadata_objects_documents_events_event_type_types_event_subtype_get(self, event_type : Annotated[StrictStr, Field(..., description="The event type. For example, distribution__v.")], event_subtype : Annotated[StrictStr, Field(..., description="The event subtype. For example, approved_email__v.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Document Event SubType Metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.metadata_objects_documents_events_event_type_types_event_subtype_get(event_type, event_subtype, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param event_type: The event type. For example, distribution__v. (required)
        :type event_type: str
        :param event_subtype: The event subtype. For example, approved_email__v. (required)
        :type event_subtype: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the metadata_objects_documents_events_event_type_types_event_subtype_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.metadata_objects_documents_events_event_type_types_event_subtype_get_with_http_info(event_type, event_subtype, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def metadata_objects_documents_events_event_type_types_event_subtype_get_with_http_info(self, event_type : Annotated[StrictStr, Field(..., description="The event type. For example, distribution__v.")], event_subtype : Annotated[StrictStr, Field(..., description="The event subtype. For example, approved_email__v.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Document Event SubType Metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.metadata_objects_documents_events_event_type_types_event_subtype_get_with_http_info(event_type, event_subtype, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param event_type: The event type. For example, distribution__v. (required)
        :type event_type: str
        :param event_subtype: The event subtype. For example, approved_email__v. (required)
        :type event_subtype: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'event_type',
            'event_subtype',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method metadata_objects_documents_events_event_type_types_event_subtype_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['event_type'] is not None:
            _path_params['event_type'] = _params['event_type']

        if _params['event_subtype'] is not None:
            _path_params['event_subtype'] = _params['event_subtype']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/metadata/objects/documents/events/{event_type}/types/{event_subtype}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def metadata_objects_documents_events_get(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Document Event Types and Subtypes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.metadata_objects_documents_events_get(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the metadata_objects_documents_events_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.metadata_objects_documents_events_get_with_http_info(authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def metadata_objects_documents_events_get_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Document Event Types and Subtypes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.metadata_objects_documents_events_get_with_http_info(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method metadata_objects_documents_events_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/metadata/objects/documents/events', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def metadata_objects_documents_lock_get(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Document Lock Metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.metadata_objects_documents_lock_get(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the metadata_objects_documents_lock_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.metadata_objects_documents_lock_get_with_http_info(authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def metadata_objects_documents_lock_get_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Document Lock Metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.metadata_objects_documents_lock_get_with_http_info(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method metadata_objects_documents_lock_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/metadata/objects/documents/lock', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def metadata_objects_documents_properties_find_common_post(self, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, authorization : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Common Document Fields  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.metadata_objects_documents_properties_find_common_post(content_type, accept, authorization, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param authorization:
        :type authorization: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the metadata_objects_documents_properties_find_common_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.metadata_objects_documents_properties_find_common_post_with_http_info(content_type, accept, authorization, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def metadata_objects_documents_properties_find_common_post_with_http_info(self, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, authorization : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Common Document Fields  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.metadata_objects_documents_properties_find_common_post_with_http_info(content_type, accept, authorization, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param authorization:
        :type authorization: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'content_type',
            'accept',
            'authorization',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method metadata_objects_documents_properties_find_common_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/metadata/objects/documents/properties/find_common', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def metadata_objects_documents_properties_get(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve All Document Fields  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.metadata_objects_documents_properties_get(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the metadata_objects_documents_properties_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.metadata_objects_documents_properties_get_with_http_info(authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def metadata_objects_documents_properties_get_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve All Document Fields  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.metadata_objects_documents_properties_get_with_http_info(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method metadata_objects_documents_properties_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/metadata/objects/documents/properties', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def metadata_objects_documents_templates_get(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Document Template Metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.metadata_objects_documents_templates_get(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the metadata_objects_documents_templates_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.metadata_objects_documents_templates_get_with_http_info(authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def metadata_objects_documents_templates_get_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Document Template Metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.metadata_objects_documents_templates_get_with_http_info(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method metadata_objects_documents_templates_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/metadata/objects/documents/templates', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def metadata_objects_documents_types_get(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve All Document Types  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.metadata_objects_documents_types_get(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the metadata_objects_documents_types_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.metadata_objects_documents_types_get_with_http_info(authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def metadata_objects_documents_types_get_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve All Document Types  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.metadata_objects_documents_types_get_with_http_info(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method metadata_objects_documents_types_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/metadata/objects/documents/types', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def metadata_objects_documents_types_type_get(self, type : Annotated[StrictStr, Field(..., description="The document type. See Retrieve Document Types.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Document Type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.metadata_objects_documents_types_type_get(type, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param type: The document type. See Retrieve Document Types. (required)
        :type type: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the metadata_objects_documents_types_type_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.metadata_objects_documents_types_type_get_with_http_info(type, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def metadata_objects_documents_types_type_get_with_http_info(self, type : Annotated[StrictStr, Field(..., description="The document type. See Retrieve Document Types.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Document Type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.metadata_objects_documents_types_type_get_with_http_info(type, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param type: The document type. See Retrieve Document Types. (required)
        :type type: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'type',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method metadata_objects_documents_types_type_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['type'] is not None:
            _path_params['type'] = _params['type']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/metadata/objects/documents/types/{type}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def metadata_objects_documents_types_type_relationships_get(self, type : Annotated[StrictStr, Field(..., description="The document type. See Retrieve Document Types.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Document Type Relationships  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.metadata_objects_documents_types_type_relationships_get(type, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param type: The document type. See Retrieve Document Types. (required)
        :type type: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the metadata_objects_documents_types_type_relationships_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.metadata_objects_documents_types_type_relationships_get_with_http_info(type, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def metadata_objects_documents_types_type_relationships_get_with_http_info(self, type : Annotated[StrictStr, Field(..., description="The document type. See Retrieve Document Types.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Document Type Relationships  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.metadata_objects_documents_types_type_relationships_get_with_http_info(type, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param type: The document type. See Retrieve Document Types. (required)
        :type type: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'type',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method metadata_objects_documents_types_type_relationships_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['type'] is not None:
            _path_params['type'] = _params['type']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/metadata/objects/documents/types/{type}/relationships', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def metadata_objects_documents_types_type_subtypes_subtype_classifications_classification_get(self, type : Annotated[StrictStr, Field(..., description="The document type. See Retrieve Document Types.")], subtype : Annotated[StrictStr, Field(..., description="The document subtype. See Retrieve Document Types.")], classification : Annotated[StrictStr, Field(..., description="The document classification. See Retrieve Document Types.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Document Classification  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.metadata_objects_documents_types_type_subtypes_subtype_classifications_classification_get(type, subtype, classification, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param type: The document type. See Retrieve Document Types. (required)
        :type type: str
        :param subtype: The document subtype. See Retrieve Document Types. (required)
        :type subtype: str
        :param classification: The document classification. See Retrieve Document Types. (required)
        :type classification: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the metadata_objects_documents_types_type_subtypes_subtype_classifications_classification_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.metadata_objects_documents_types_type_subtypes_subtype_classifications_classification_get_with_http_info(type, subtype, classification, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def metadata_objects_documents_types_type_subtypes_subtype_classifications_classification_get_with_http_info(self, type : Annotated[StrictStr, Field(..., description="The document type. See Retrieve Document Types.")], subtype : Annotated[StrictStr, Field(..., description="The document subtype. See Retrieve Document Types.")], classification : Annotated[StrictStr, Field(..., description="The document classification. See Retrieve Document Types.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Document Classification  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.metadata_objects_documents_types_type_subtypes_subtype_classifications_classification_get_with_http_info(type, subtype, classification, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param type: The document type. See Retrieve Document Types. (required)
        :type type: str
        :param subtype: The document subtype. See Retrieve Document Types. (required)
        :type subtype: str
        :param classification: The document classification. See Retrieve Document Types. (required)
        :type classification: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'type',
            'subtype',
            'classification',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method metadata_objects_documents_types_type_subtypes_subtype_classifications_classification_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['type'] is not None:
            _path_params['type'] = _params['type']

        if _params['subtype'] is not None:
            _path_params['subtype'] = _params['subtype']

        if _params['classification'] is not None:
            _path_params['classification'] = _params['classification']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/metadata/objects/documents/types/{type}/subtypes/{subtype}/classifications/{classification}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def metadata_objects_documents_types_type_subtypes_subtype_get(self, type : Annotated[StrictStr, Field(..., description="The document type. See Retrieve Document Types.")], subtype : Annotated[StrictStr, Field(..., description="The document subtype. See Retrieve Document Types.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Document Subtype  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.metadata_objects_documents_types_type_subtypes_subtype_get(type, subtype, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param type: The document type. See Retrieve Document Types. (required)
        :type type: str
        :param subtype: The document subtype. See Retrieve Document Types. (required)
        :type subtype: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the metadata_objects_documents_types_type_subtypes_subtype_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.metadata_objects_documents_types_type_subtypes_subtype_get_with_http_info(type, subtype, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def metadata_objects_documents_types_type_subtypes_subtype_get_with_http_info(self, type : Annotated[StrictStr, Field(..., description="The document type. See Retrieve Document Types.")], subtype : Annotated[StrictStr, Field(..., description="The document subtype. See Retrieve Document Types.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Document Subtype  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.metadata_objects_documents_types_type_subtypes_subtype_get_with_http_info(type, subtype, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param type: The document type. See Retrieve Document Types. (required)
        :type type: str
        :param subtype: The document subtype. See Retrieve Document Types. (required)
        :type subtype: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'type',
            'subtype',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method metadata_objects_documents_types_type_subtypes_subtype_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['type'] is not None:
            _path_params['type'] = _params['type']

        if _params['subtype'] is not None:
            _path_params['subtype'] = _params['subtype']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/metadata/objects/documents/types/{type}/subtypes/{subtype}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def metadata_objects_groups_get(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Group Metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.metadata_objects_groups_get(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the metadata_objects_groups_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.metadata_objects_groups_get_with_http_info(authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def metadata_objects_groups_get_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Group Metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.metadata_objects_groups_get_with_http_info(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method metadata_objects_groups_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/metadata/objects/groups', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def metadata_objects_securitypolicies_get(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Security Policy Metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.metadata_objects_securitypolicies_get(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the metadata_objects_securitypolicies_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.metadata_objects_securitypolicies_get_with_http_info(authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def metadata_objects_securitypolicies_get_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Security Policy Metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.metadata_objects_securitypolicies_get_with_http_info(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method metadata_objects_securitypolicies_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/metadata/objects/securitypolicies', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def metadata_objects_users_get(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve User Metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.metadata_objects_users_get(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the metadata_objects_users_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.metadata_objects_users_get_with_http_info(authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def metadata_objects_users_get_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve User Metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.metadata_objects_users_get_with_http_info(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method metadata_objects_users_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/metadata/objects/users', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def metadata_query_archived_documents_relationships_document_signature_sysr_get(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Archived Document Signature Metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.metadata_query_archived_documents_relationships_document_signature_sysr_get(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the metadata_query_archived_documents_relationships_document_signature_sysr_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.metadata_query_archived_documents_relationships_document_signature_sysr_get_with_http_info(authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def metadata_query_archived_documents_relationships_document_signature_sysr_get_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Archived Document Signature Metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.metadata_query_archived_documents_relationships_document_signature_sysr_get_with_http_info(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method metadata_query_archived_documents_relationships_document_signature_sysr_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/metadata/query/archived_documents/relationships/document_signature__sysr', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def metadata_query_documents_relationships_document_signature_sysr_get(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Document Signature Metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.metadata_query_documents_relationships_document_signature_sysr_get(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the metadata_query_documents_relationships_document_signature_sysr_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.metadata_query_documents_relationships_document_signature_sysr_get_with_http_info(authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def metadata_query_documents_relationships_document_signature_sysr_get_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Document Signature Metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.metadata_query_documents_relationships_document_signature_sysr_get_with_http_info(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method metadata_query_documents_relationships_document_signature_sysr_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/metadata/query/documents/relationships/document_signature__sysr', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def metadata_vobjects_get(self, loc : Annotated[Optional[StrictBool], Field(description="To retrieve localized (translated) strings, include the parameter loc=true. See the next request below for details.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Object Collection  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.metadata_vobjects_get(loc, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param loc: To retrieve localized (translated) strings, include the parameter loc=true. See the next request below for details.
        :type loc: bool
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the metadata_vobjects_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.metadata_vobjects_get_with_http_info(loc, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def metadata_vobjects_get_with_http_info(self, loc : Annotated[Optional[StrictBool], Field(description="To retrieve localized (translated) strings, include the parameter loc=true. See the next request below for details.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Object Collection  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.metadata_vobjects_get_with_http_info(loc, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param loc: To retrieve localized (translated) strings, include the parameter loc=true. See the next request below for details.
        :type loc: bool
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'loc',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method metadata_vobjects_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('loc') is not None:  # noqa: E501
            _query_params.append(('loc', _params['loc']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/metadata/vobjects', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def metadata_vobjects_object_name_actions_canceldeployment_post(self, object_name : StrictStr, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Cancel Raw Object Deployment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.metadata_vobjects_object_name_actions_canceldeployment_post(object_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: (required)
        :type object_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the metadata_vobjects_object_name_actions_canceldeployment_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.metadata_vobjects_object_name_actions_canceldeployment_post_with_http_info(object_name, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def metadata_vobjects_object_name_actions_canceldeployment_post_with_http_info(self, object_name : StrictStr, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Cancel Raw Object Deployment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.metadata_vobjects_object_name_actions_canceldeployment_post_with_http_info(object_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: (required)
        :type object_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'object_name',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method metadata_vobjects_object_name_actions_canceldeployment_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['object_name'] is not None:
            _path_params['object_name'] = _params['object_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/metadata/vobjects/{object_name}/actions/canceldeployment', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def metadata_vobjects_object_name_fields_object_field_name_get(self, object_name : Annotated[StrictStr, Field(..., description="The object name__v field value (product__v, country__v, custom_object__c, etc.).")], object_field_name : Annotated[StrictStr, Field(..., description="The object field name value (id, name__v, external_id__v, etc.).")], loc : Annotated[Optional[StrictBool], Field(description="To retrieve localized (translated) strings, include the parameter loc=true. See the next request below for details.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Object Field Metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.metadata_vobjects_object_name_fields_object_field_name_get(object_name, object_field_name, loc, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
        :type object_name: str
        :param object_field_name: The object field name value (id, name__v, external_id__v, etc.). (required)
        :type object_field_name: str
        :param loc: To retrieve localized (translated) strings, include the parameter loc=true. See the next request below for details.
        :type loc: bool
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the metadata_vobjects_object_name_fields_object_field_name_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.metadata_vobjects_object_name_fields_object_field_name_get_with_http_info(object_name, object_field_name, loc, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def metadata_vobjects_object_name_fields_object_field_name_get_with_http_info(self, object_name : Annotated[StrictStr, Field(..., description="The object name__v field value (product__v, country__v, custom_object__c, etc.).")], object_field_name : Annotated[StrictStr, Field(..., description="The object field name value (id, name__v, external_id__v, etc.).")], loc : Annotated[Optional[StrictBool], Field(description="To retrieve localized (translated) strings, include the parameter loc=true. See the next request below for details.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Object Field Metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.metadata_vobjects_object_name_fields_object_field_name_get_with_http_info(object_name, object_field_name, loc, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
        :type object_name: str
        :param object_field_name: The object field name value (id, name__v, external_id__v, etc.). (required)
        :type object_field_name: str
        :param loc: To retrieve localized (translated) strings, include the parameter loc=true. See the next request below for details.
        :type loc: bool
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'object_name',
            'object_field_name',
            'loc',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method metadata_vobjects_object_name_fields_object_field_name_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['object_name'] is not None:
            _path_params['object_name'] = _params['object_name']

        if _params['object_field_name'] is not None:
            _path_params['object_field_name'] = _params['object_field_name']


        # process the query parameters
        _query_params = []
        if _params.get('loc') is not None:  # noqa: E501
            _query_params.append(('loc', _params['loc']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/metadata/vobjects/{object_name}/fields/{object_field_name}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def metadata_vobjects_object_name_get(self, object_name : Annotated[StrictStr, Field(..., description="The object name__v field value (product__v, country__v, custom_object__c, etc.).")], loc : Annotated[Optional[StrictBool], Field(description="To retrieve localized (translated) strings, include the parameter loc=true. See the next request below for details.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Object Metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.metadata_vobjects_object_name_get(object_name, loc, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
        :type object_name: str
        :param loc: To retrieve localized (translated) strings, include the parameter loc=true. See the next request below for details.
        :type loc: bool
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the metadata_vobjects_object_name_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.metadata_vobjects_object_name_get_with_http_info(object_name, loc, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def metadata_vobjects_object_name_get_with_http_info(self, object_name : Annotated[StrictStr, Field(..., description="The object name__v field value (product__v, country__v, custom_object__c, etc.).")], loc : Annotated[Optional[StrictBool], Field(description="To retrieve localized (translated) strings, include the parameter loc=true. See the next request below for details.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Object Metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.metadata_vobjects_object_name_get_with_http_info(object_name, loc, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
        :type object_name: str
        :param loc: To retrieve localized (translated) strings, include the parameter loc=true. See the next request below for details.
        :type loc: bool
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'object_name',
            'loc',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method metadata_vobjects_object_name_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['object_name'] is not None:
            _path_params['object_name'] = _params['object_name']


        # process the query parameters
        _query_params = []
        if _params.get('loc') is not None:  # noqa: E501
            _query_params.append(('loc', _params['loc']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/metadata/vobjects/{object_name}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def metadata_vobjects_object_name_page_layouts_get(self, object_name : StrictStr, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Page Layouts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.metadata_vobjects_object_name_page_layouts_get(object_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: (required)
        :type object_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the metadata_vobjects_object_name_page_layouts_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.metadata_vobjects_object_name_page_layouts_get_with_http_info(object_name, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def metadata_vobjects_object_name_page_layouts_get_with_http_info(self, object_name : StrictStr, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Page Layouts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.metadata_vobjects_object_name_page_layouts_get_with_http_info(object_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: (required)
        :type object_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'object_name',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method metadata_vobjects_object_name_page_layouts_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['object_name'] is not None:
            _path_params['object_name'] = _params['object_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/metadata/vobjects/{object_name}/page_layouts', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def metadata_vobjects_object_name_page_layouts_layout_name_get(self, object_name : Annotated[StrictStr, Field(..., description="The name of the object from which to retrieve page layout metadata.")], layout_name : Annotated[StrictStr, Field(..., description="The name of the page layout from which to retrieve metadata.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Page Layout Metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.metadata_vobjects_object_name_page_layouts_layout_name_get(object_name, layout_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The name of the object from which to retrieve page layout metadata. (required)
        :type object_name: str
        :param layout_name: The name of the page layout from which to retrieve metadata. (required)
        :type layout_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the metadata_vobjects_object_name_page_layouts_layout_name_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.metadata_vobjects_object_name_page_layouts_layout_name_get_with_http_info(object_name, layout_name, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def metadata_vobjects_object_name_page_layouts_layout_name_get_with_http_info(self, object_name : Annotated[StrictStr, Field(..., description="The name of the object from which to retrieve page layout metadata.")], layout_name : Annotated[StrictStr, Field(..., description="The name of the page layout from which to retrieve metadata.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Page Layout Metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.metadata_vobjects_object_name_page_layouts_layout_name_get_with_http_info(object_name, layout_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The name of the object from which to retrieve page layout metadata. (required)
        :type object_name: str
        :param layout_name: The name of the page layout from which to retrieve metadata. (required)
        :type layout_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'object_name',
            'layout_name',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method metadata_vobjects_object_name_page_layouts_layout_name_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['object_name'] is not None:
            _path_params['object_name'] = _params['object_name']

        if _params['layout_name'] is not None:
            _path_params['layout_name'] = _params['layout_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/metadata/vobjects/{object_name}/page_layouts/{layout_name}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def notifications_histories_get(self, start_date : Annotated[Optional[StrictStr], Field(description="Specify a start date to retrieve notification history. This date cannot be more than 2 years ago. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the start of the day. If start_date is omitted entirely, defaults to the start of the previous day. If you’ve specified a start_date, you must also specify an end_date.")] = None, end_date : Annotated[Optional[StrictStr], Field(description="Specify an end date to retrieve notification history. This date cannot be more than 30 days away from the specified start_date. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the time of the API request. If you’ve specified an end_date, you must also specify a start_date.")] = None, all_dates : Annotated[Optional[StrictBool], Field(description="Set to true to request notification history for all dates. This is the same as requesting a full CSV export from the Vault UI. When requesting a full notification history, you must leave start_date and end_date blank and set format_result to csv. You can request an export of notification history for all_dates once every 24 hours.")] = None, format_result : Annotated[Optional[StrictStr], Field(description="To request a downloadable CSV file of your notification history, set this parameter to csv. The response contains a jobId to retrieve the job status, which provides a link to download the CSV file. If omitted, the API returns a JSON response with notification history and does not start a job. If all_dates is true, this parameter must be csv.")] = None, limit : Annotated[Optional[StrictStr], Field(description="Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.")] = None, offset : Annotated[Optional[StrictStr], Field(description="Paginate the results displayed per page by specifying the amount of offset from the entry returned. If omitted, defaults to 0.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Email Notification Histories  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.notifications_histories_get(start_date, end_date, all_dates, format_result, limit, offset, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param start_date: Specify a start date to retrieve notification history. This date cannot be more than 2 years ago. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the start of the day. If start_date is omitted entirely, defaults to the start of the previous day. If you’ve specified a start_date, you must also specify an end_date.
        :type start_date: str
        :param end_date: Specify an end date to retrieve notification history. This date cannot be more than 30 days away from the specified start_date. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the time of the API request. If you’ve specified an end_date, you must also specify a start_date.
        :type end_date: str
        :param all_dates: Set to true to request notification history for all dates. This is the same as requesting a full CSV export from the Vault UI. When requesting a full notification history, you must leave start_date and end_date blank and set format_result to csv. You can request an export of notification history for all_dates once every 24 hours.
        :type all_dates: bool
        :param format_result: To request a downloadable CSV file of your notification history, set this parameter to csv. The response contains a jobId to retrieve the job status, which provides a link to download the CSV file. If omitted, the API returns a JSON response with notification history and does not start a job. If all_dates is true, this parameter must be csv.
        :type format_result: str
        :param limit: Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
        :type limit: str
        :param offset: Paginate the results displayed per page by specifying the amount of offset from the entry returned. If omitted, defaults to 0.
        :type offset: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the notifications_histories_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.notifications_histories_get_with_http_info(start_date, end_date, all_dates, format_result, limit, offset, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def notifications_histories_get_with_http_info(self, start_date : Annotated[Optional[StrictStr], Field(description="Specify a start date to retrieve notification history. This date cannot be more than 2 years ago. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the start of the day. If start_date is omitted entirely, defaults to the start of the previous day. If you’ve specified a start_date, you must also specify an end_date.")] = None, end_date : Annotated[Optional[StrictStr], Field(description="Specify an end date to retrieve notification history. This date cannot be more than 30 days away from the specified start_date. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the time of the API request. If you’ve specified an end_date, you must also specify a start_date.")] = None, all_dates : Annotated[Optional[StrictBool], Field(description="Set to true to request notification history for all dates. This is the same as requesting a full CSV export from the Vault UI. When requesting a full notification history, you must leave start_date and end_date blank and set format_result to csv. You can request an export of notification history for all_dates once every 24 hours.")] = None, format_result : Annotated[Optional[StrictStr], Field(description="To request a downloadable CSV file of your notification history, set this parameter to csv. The response contains a jobId to retrieve the job status, which provides a link to download the CSV file. If omitted, the API returns a JSON response with notification history and does not start a job. If all_dates is true, this parameter must be csv.")] = None, limit : Annotated[Optional[StrictStr], Field(description="Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.")] = None, offset : Annotated[Optional[StrictStr], Field(description="Paginate the results displayed per page by specifying the amount of offset from the entry returned. If omitted, defaults to 0.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Email Notification Histories  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.notifications_histories_get_with_http_info(start_date, end_date, all_dates, format_result, limit, offset, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param start_date: Specify a start date to retrieve notification history. This date cannot be more than 2 years ago. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the start of the day. If start_date is omitted entirely, defaults to the start of the previous day. If you’ve specified a start_date, you must also specify an end_date.
        :type start_date: str
        :param end_date: Specify an end date to retrieve notification history. This date cannot be more than 30 days away from the specified start_date. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the time of the API request. If you’ve specified an end_date, you must also specify a start_date.
        :type end_date: str
        :param all_dates: Set to true to request notification history for all dates. This is the same as requesting a full CSV export from the Vault UI. When requesting a full notification history, you must leave start_date and end_date blank and set format_result to csv. You can request an export of notification history for all_dates once every 24 hours.
        :type all_dates: bool
        :param format_result: To request a downloadable CSV file of your notification history, set this parameter to csv. The response contains a jobId to retrieve the job status, which provides a link to download the CSV file. If omitted, the API returns a JSON response with notification history and does not start a job. If all_dates is true, this parameter must be csv.
        :type format_result: str
        :param limit: Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
        :type limit: str
        :param offset: Paginate the results displayed per page by specifying the amount of offset from the entry returned. If omitted, defaults to 0.
        :type offset: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'start_date',
            'end_date',
            'all_dates',
            'format_result',
            'limit',
            'offset',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notifications_histories_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('start_date') is not None:  # noqa: E501
            _query_params.append(('start_date', _params['start_date']))

        if _params.get('end_date') is not None:  # noqa: E501
            _query_params.append(('end_date', _params['end_date']))

        if _params.get('all_dates') is not None:  # noqa: E501
            _query_params.append(('all_dates', _params['all_dates']))

        if _params.get('format_result') is not None:  # noqa: E501
            _query_params.append(('format_result', _params['format_result']))

        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('offset') is not None:  # noqa: E501
            _query_params.append(('offset', _params['offset']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/notifications/histories', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def object_workflow_actions_action_get(self, action : StrictStr, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Bulk Workflow Action Details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.object_workflow_actions_action_get(action, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param action: (required)
        :type action: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the object_workflow_actions_action_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.object_workflow_actions_action_get_with_http_info(action, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def object_workflow_actions_action_get_with_http_info(self, action : StrictStr, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Bulk Workflow Action Details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.object_workflow_actions_action_get_with_http_info(action, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param action: (required)
        :type action: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'action',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method object_workflow_actions_action_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['action'] is not None:
            _path_params['action'] = _params['action']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/object/workflow/actions/{action}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def object_workflow_actions_action_post(self, action : StrictStr, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Initiate Workflow Actions on Multiple Workflows  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.object_workflow_actions_action_post(action, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param action: (required)
        :type action: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the object_workflow_actions_action_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.object_workflow_actions_action_post_with_http_info(action, authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def object_workflow_actions_action_post_with_http_info(self, action : StrictStr, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Initiate Workflow Actions on Multiple Workflows  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.object_workflow_actions_action_post_with_http_info(action, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param action: (required)
        :type action: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'action',
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method object_workflow_actions_action_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['action'] is not None:
            _path_params['action'] = _params['action']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/object/workflow/actions/{action}', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def object_workflow_actions_canceltasks_post(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Cancel Workflow Tasks  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.object_workflow_actions_canceltasks_post(authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the object_workflow_actions_canceltasks_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.object_workflow_actions_canceltasks_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def object_workflow_actions_canceltasks_post_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Cancel Workflow Tasks  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.object_workflow_actions_canceltasks_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method object_workflow_actions_canceltasks_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/object/workflow/actions/canceltasks', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def object_workflow_actions_cancelworkflows_post(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Cancel Workflows  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.object_workflow_actions_cancelworkflows_post(authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the object_workflow_actions_cancelworkflows_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.object_workflow_actions_cancelworkflows_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def object_workflow_actions_cancelworkflows_post_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Cancel Workflows  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.object_workflow_actions_cancelworkflows_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method object_workflow_actions_cancelworkflows_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/object/workflow/actions/cancelworkflows', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def object_workflow_actions_get(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Bulk Workflow Actions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.object_workflow_actions_get(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the object_workflow_actions_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.object_workflow_actions_get_with_http_info(authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def object_workflow_actions_get_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Bulk Workflow Actions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.object_workflow_actions_get_with_http_info(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method object_workflow_actions_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/object/workflow/actions', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def object_workflow_actions_reassigntasks_post(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Reassign Workflow Tasks  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.object_workflow_actions_reassigntasks_post(authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the object_workflow_actions_reassigntasks_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.object_workflow_actions_reassigntasks_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def object_workflow_actions_reassigntasks_post_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Reassign Workflow Tasks  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.object_workflow_actions_reassigntasks_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method object_workflow_actions_reassigntasks_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/object/workflow/actions/reassigntasks', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def object_workflow_actions_replaceworkflowowner_post(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Replace Workflow Owner  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.object_workflow_actions_replaceworkflowowner_post(authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the object_workflow_actions_replaceworkflowowner_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.object_workflow_actions_replaceworkflowowner_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def object_workflow_actions_replaceworkflowowner_post_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Replace Workflow Owner  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.object_workflow_actions_replaceworkflowowner_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method object_workflow_actions_replaceworkflowowner_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/object/workflow/actions/replaceworkflowowner', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_binders_actions_export_job_id_results_get(self, job_id : Annotated[StrictStr, Field(..., description="The id value of the requested export job. This is returned with the export binder requests above.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Binder Export Results  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_actions_export_job_id_results_get(job_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param job_id: The id value of the requested export job. This is returned with the export binder requests above. (required)
        :type job_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_binders_actions_export_job_id_results_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_binders_actions_export_job_id_results_get_with_http_info(job_id, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_binders_actions_export_job_id_results_get_with_http_info(self, job_id : Annotated[StrictStr, Field(..., description="The id value of the requested export job. This is returned with the export binder requests above.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Binder Export Results  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_actions_export_job_id_results_get_with_http_info(job_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param job_id: The id value of the requested export job. This is returned with the export binder requests above. (required)
        :type job_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'job_id',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_binders_actions_export_job_id_results_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['job_id'] is not None:
            _path_params['job_id'] = _params['job_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/binders/actions/export/{job_id}/results', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_binders_binder_id_actions_export_post(self, binder_id : Annotated[StrictStr, Field(..., description="The binder id field value.")], source : Annotated[Optional[StrictBool], Field(description="to include source content or not")] = None, renditiontype : Annotated[Optional[StrictStr], Field(description="to include viewable renditions")] = None, docversion : Annotated[Optional[StrictStr], Field(description="to include all major versions")] = None, attachments : Annotated[Optional[StrictStr], Field(description="to include all versions of attachments")] = None, export : Annotated[Optional[StrictStr], Field(description="configurable filename metadata")] = None, docfield : Annotated[Optional[StrictBool], Field(description="to exclude document metadata csv")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Export Binder (Latest Version)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_binder_id_actions_export_post(binder_id, source, renditiontype, docversion, attachments, export, docfield, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param binder_id: The binder id field value. (required)
        :type binder_id: str
        :param source: to include source content or not
        :type source: bool
        :param renditiontype: to include viewable renditions
        :type renditiontype: str
        :param docversion: to include all major versions
        :type docversion: str
        :param attachments: to include all versions of attachments
        :type attachments: str
        :param export: configurable filename metadata
        :type export: str
        :param docfield: to exclude document metadata csv
        :type docfield: bool
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_binders_binder_id_actions_export_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_binders_binder_id_actions_export_post_with_http_info(binder_id, source, renditiontype, docversion, attachments, export, docfield, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_binders_binder_id_actions_export_post_with_http_info(self, binder_id : Annotated[StrictStr, Field(..., description="The binder id field value.")], source : Annotated[Optional[StrictBool], Field(description="to include source content or not")] = None, renditiontype : Annotated[Optional[StrictStr], Field(description="to include viewable renditions")] = None, docversion : Annotated[Optional[StrictStr], Field(description="to include all major versions")] = None, attachments : Annotated[Optional[StrictStr], Field(description="to include all versions of attachments")] = None, export : Annotated[Optional[StrictStr], Field(description="configurable filename metadata")] = None, docfield : Annotated[Optional[StrictBool], Field(description="to exclude document metadata csv")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Export Binder (Latest Version)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_binder_id_actions_export_post_with_http_info(binder_id, source, renditiontype, docversion, attachments, export, docfield, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param binder_id: The binder id field value. (required)
        :type binder_id: str
        :param source: to include source content or not
        :type source: bool
        :param renditiontype: to include viewable renditions
        :type renditiontype: str
        :param docversion: to include all major versions
        :type docversion: str
        :param attachments: to include all versions of attachments
        :type attachments: str
        :param export: configurable filename metadata
        :type export: str
        :param docfield: to exclude document metadata csv
        :type docfield: bool
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'binder_id',
            'source',
            'renditiontype',
            'docversion',
            'attachments',
            'export',
            'docfield',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_binders_binder_id_actions_export_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['binder_id'] is not None:
            _path_params['binder_id'] = _params['binder_id']


        # process the query parameters
        _query_params = []
        if _params.get('source') is not None:  # noqa: E501
            _query_params.append(('source', _params['source']))

        if _params.get('renditiontype') is not None:  # noqa: E501
            _query_params.append(('renditiontype', _params['renditiontype']))

        if _params.get('docversion') is not None:  # noqa: E501
            _query_params.append(('docversion', _params['docversion']))

        if _params.get('attachments') is not None:  # noqa: E501
            _query_params.append(('attachments', _params['attachments']))

        if _params.get('export') is not None:  # noqa: E501
            _query_params.append(('export', _params['export']))

        if _params.get('docfield') is not None:  # noqa: E501
            _query_params.append(('docfield', _params['docfield']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/binders/{binder_id}/actions/export', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_binders_binder_id_actions_post(self, binder_id : Annotated[StrictStr, Field(..., description="The binder id field value.")], authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Refresh Binder Auto-Filing  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_binder_id_actions_post(binder_id, authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param binder_id: The binder id field value. (required)
        :type binder_id: str
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_binders_binder_id_actions_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_binders_binder_id_actions_post_with_http_info(binder_id, authorization, content_type, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_binders_binder_id_actions_post_with_http_info(self, binder_id : Annotated[StrictStr, Field(..., description="The binder id field value.")], authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Refresh Binder Auto-Filing  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_binder_id_actions_post_with_http_info(binder_id, authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param binder_id: The binder id field value. (required)
        :type binder_id: str
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'binder_id',
            'authorization',
            'content_type',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_binders_binder_id_actions_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['binder_id'] is not None:
            _path_params['binder_id'] = _params['binder_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/binders/{binder_id}/actions', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_binders_binder_id_binding_rule_put(self, binder_id : Annotated[StrictStr, Field(..., description="The binder id field value.")], content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, authorization : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Update Binding Rule  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_binder_id_binding_rule_put(binder_id, content_type, accept, authorization, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param binder_id: The binder id field value. (required)
        :type binder_id: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param authorization:
        :type authorization: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_binders_binder_id_binding_rule_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_binders_binder_id_binding_rule_put_with_http_info(binder_id, content_type, accept, authorization, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_binders_binder_id_binding_rule_put_with_http_info(self, binder_id : Annotated[StrictStr, Field(..., description="The binder id field value.")], content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, authorization : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Update Binding Rule  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_binder_id_binding_rule_put_with_http_info(binder_id, content_type, accept, authorization, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param binder_id: The binder id field value. (required)
        :type binder_id: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param authorization:
        :type authorization: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'binder_id',
            'content_type',
            'accept',
            'authorization',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_binders_binder_id_binding_rule_put" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['binder_id'] is not None:
            _path_params['binder_id'] = _params['binder_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/binders/{binder_id}/binding_rule', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_binders_binder_id_delete(self, binder_id : Annotated[StrictStr, Field(..., description="The binder id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Delete Binder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_binder_id_delete(binder_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param binder_id: The binder id field value. (required)
        :type binder_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_binders_binder_id_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_binders_binder_id_delete_with_http_info(binder_id, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_binders_binder_id_delete_with_http_info(self, binder_id : Annotated[StrictStr, Field(..., description="The binder id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Delete Binder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_binder_id_delete_with_http_info(binder_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param binder_id: The binder id field value. (required)
        :type binder_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'binder_id',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_binders_binder_id_delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['binder_id'] is not None:
            _path_params['binder_id'] = _params['binder_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/binders/{binder_id}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_binders_binder_id_documents_node_id_binding_rule_put(self, binder_id : Annotated[StrictStr, Field(..., description="The binder id field value.")], node_id : Annotated[StrictStr, Field(..., description="The binder node id field value.")], authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Update Binder Document Binding Rule  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_binder_id_documents_node_id_binding_rule_put(binder_id, node_id, authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param binder_id: The binder id field value. (required)
        :type binder_id: str
        :param node_id: The binder node id field value. (required)
        :type node_id: str
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_binders_binder_id_documents_node_id_binding_rule_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_binders_binder_id_documents_node_id_binding_rule_put_with_http_info(binder_id, node_id, authorization, content_type, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_binders_binder_id_documents_node_id_binding_rule_put_with_http_info(self, binder_id : Annotated[StrictStr, Field(..., description="The binder id field value.")], node_id : Annotated[StrictStr, Field(..., description="The binder node id field value.")], authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Update Binder Document Binding Rule  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_binder_id_documents_node_id_binding_rule_put_with_http_info(binder_id, node_id, authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param binder_id: The binder id field value. (required)
        :type binder_id: str
        :param node_id: The binder node id field value. (required)
        :type node_id: str
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'binder_id',
            'node_id',
            'authorization',
            'content_type',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_binders_binder_id_documents_node_id_binding_rule_put" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['binder_id'] is not None:
            _path_params['binder_id'] = _params['binder_id']

        if _params['node_id'] is not None:
            _path_params['node_id'] = _params['node_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/binders/{binder_id}/documents/{node_id}/binding_rule', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_binders_binder_id_documents_post(self, binder_id : Annotated[StrictStr, Field(..., description="The binder id field value.")], authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Add Document to Binder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_binder_id_documents_post(binder_id, authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param binder_id: The binder id field value. (required)
        :type binder_id: str
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_binders_binder_id_documents_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_binders_binder_id_documents_post_with_http_info(binder_id, authorization, content_type, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_binders_binder_id_documents_post_with_http_info(self, binder_id : Annotated[StrictStr, Field(..., description="The binder id field value.")], authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Add Document to Binder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_binder_id_documents_post_with_http_info(binder_id, authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param binder_id: The binder id field value. (required)
        :type binder_id: str
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'binder_id',
            'authorization',
            'content_type',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_binders_binder_id_documents_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['binder_id'] is not None:
            _path_params['binder_id'] = _params['binder_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/binders/{binder_id}/documents', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_binders_binder_id_documents_section_id_delete(self, binder_id : Annotated[StrictStr, Field(..., description="The binder id field value.")], section_id : Annotated[StrictStr, Field(..., description="The binder node id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Remove Document from Binder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_binder_id_documents_section_id_delete(binder_id, section_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param binder_id: The binder id field value. (required)
        :type binder_id: str
        :param section_id: The binder node id field value. (required)
        :type section_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_binders_binder_id_documents_section_id_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_binders_binder_id_documents_section_id_delete_with_http_info(binder_id, section_id, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_binders_binder_id_documents_section_id_delete_with_http_info(self, binder_id : Annotated[StrictStr, Field(..., description="The binder id field value.")], section_id : Annotated[StrictStr, Field(..., description="The binder node id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Remove Document from Binder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_binder_id_documents_section_id_delete_with_http_info(binder_id, section_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param binder_id: The binder id field value. (required)
        :type binder_id: str
        :param section_id: The binder node id field value. (required)
        :type section_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'binder_id',
            'section_id',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_binders_binder_id_documents_section_id_delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['binder_id'] is not None:
            _path_params['binder_id'] = _params['binder_id']

        if _params['section_id'] is not None:
            _path_params['section_id'] = _params['section_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/binders/{binder_id}/documents/{section_id}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_binders_binder_id_documents_section_id_put(self, binder_id : Annotated[StrictStr, Field(..., description="The binder id field value.")], section_id : Annotated[StrictStr, Field(..., description="The binder node id field value.")], authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Move Document in Binder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_binder_id_documents_section_id_put(binder_id, section_id, authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param binder_id: The binder id field value. (required)
        :type binder_id: str
        :param section_id: The binder node id field value. (required)
        :type section_id: str
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_binders_binder_id_documents_section_id_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_binders_binder_id_documents_section_id_put_with_http_info(binder_id, section_id, authorization, content_type, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_binders_binder_id_documents_section_id_put_with_http_info(self, binder_id : Annotated[StrictStr, Field(..., description="The binder id field value.")], section_id : Annotated[StrictStr, Field(..., description="The binder node id field value.")], authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Move Document in Binder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_binder_id_documents_section_id_put_with_http_info(binder_id, section_id, authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param binder_id: The binder id field value. (required)
        :type binder_id: str
        :param section_id: The binder node id field value. (required)
        :type section_id: str
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'binder_id',
            'section_id',
            'authorization',
            'content_type',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_binders_binder_id_documents_section_id_put" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['binder_id'] is not None:
            _path_params['binder_id'] = _params['binder_id']

        if _params['section_id'] is not None:
            _path_params['section_id'] = _params['section_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/binders/{binder_id}/documents/{section_id}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_binders_binder_id_get(self, binder_id : Annotated[StrictStr, Field(..., description="The binder id field value.")], depth : Annotated[Optional[StrictStr], Field(description="To retrieve all information in all levels of the binder, set this to all. By default, only one level is returned.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Binder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_binder_id_get(binder_id, depth, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param binder_id: The binder id field value. (required)
        :type binder_id: str
        :param depth: To retrieve all information in all levels of the binder, set this to all. By default, only one level is returned.
        :type depth: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_binders_binder_id_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_binders_binder_id_get_with_http_info(binder_id, depth, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_binders_binder_id_get_with_http_info(self, binder_id : Annotated[StrictStr, Field(..., description="The binder id field value.")], depth : Annotated[Optional[StrictStr], Field(description="To retrieve all information in all levels of the binder, set this to all. By default, only one level is returned.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Binder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_binder_id_get_with_http_info(binder_id, depth, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param binder_id: The binder id field value. (required)
        :type binder_id: str
        :param depth: To retrieve all information in all levels of the binder, set this to all. By default, only one level is returned.
        :type depth: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'binder_id',
            'depth',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_binders_binder_id_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['binder_id'] is not None:
            _path_params['binder_id'] = _params['binder_id']


        # process the query parameters
        _query_params = []
        if _params.get('depth') is not None:  # noqa: E501
            _query_params.append(('depth', _params['depth']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/binders/{binder_id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_binders_binder_id_post(self, binder_id : Annotated[StrictStr, Field(..., description="The binder id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Create Binder Version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_binder_id_post(binder_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param binder_id: The binder id field value. (required)
        :type binder_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_binders_binder_id_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_binders_binder_id_post_with_http_info(binder_id, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_binders_binder_id_post_with_http_info(self, binder_id : Annotated[StrictStr, Field(..., description="The binder id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create Binder Version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_binder_id_post_with_http_info(binder_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param binder_id: The binder id field value. (required)
        :type binder_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'binder_id',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_binders_binder_id_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['binder_id'] is not None:
            _path_params['binder_id'] = _params['binder_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/binders/{binder_id}', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_binders_binder_id_put(self, binder_id : Annotated[StrictStr, Field(..., description="The binder id field value.")], authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Update Binder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_binder_id_put(binder_id, authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param binder_id: The binder id field value. (required)
        :type binder_id: str
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_binders_binder_id_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_binders_binder_id_put_with_http_info(binder_id, authorization, content_type, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_binders_binder_id_put_with_http_info(self, binder_id : Annotated[StrictStr, Field(..., description="The binder id field value.")], authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Update Binder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_binder_id_put_with_http_info(binder_id, authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param binder_id: The binder id field value. (required)
        :type binder_id: str
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'binder_id',
            'authorization',
            'content_type',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_binders_binder_id_put" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['binder_id'] is not None:
            _path_params['binder_id'] = _params['binder_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/binders/{binder_id}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_binders_binder_id_roles_role_name_and_user_or_group_id_delete(self, binder_id : Annotated[StrictStr, Field(..., description="The id value of the binder from which to remove roles.")], role_name_and_user_or_group : Annotated[StrictStr, Field(..., description="The name of the role from which to remove the user or group followed by either `user` or `group`. The format is `{role_name}.{user_or_group}`. For example, `consumer__v.user`.")], id : Annotated[StrictStr, Field(..., description="The id value of the user or group to remove from the role.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Remove Users & Groups from Roles on a Single Binder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_binder_id_roles_role_name_and_user_or_group_id_delete(binder_id, role_name_and_user_or_group, id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param binder_id: The id value of the binder from which to remove roles. (required)
        :type binder_id: str
        :param role_name_and_user_or_group: The name of the role from which to remove the user or group followed by either `user` or `group`. The format is `{role_name}.{user_or_group}`. For example, `consumer__v.user`. (required)
        :type role_name_and_user_or_group: str
        :param id: The id value of the user or group to remove from the role. (required)
        :type id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_binders_binder_id_roles_role_name_and_user_or_group_id_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_binders_binder_id_roles_role_name_and_user_or_group_id_delete_with_http_info(binder_id, role_name_and_user_or_group, id, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_binders_binder_id_roles_role_name_and_user_or_group_id_delete_with_http_info(self, binder_id : Annotated[StrictStr, Field(..., description="The id value of the binder from which to remove roles.")], role_name_and_user_or_group : Annotated[StrictStr, Field(..., description="The name of the role from which to remove the user or group followed by either `user` or `group`. The format is `{role_name}.{user_or_group}`. For example, `consumer__v.user`.")], id : Annotated[StrictStr, Field(..., description="The id value of the user or group to remove from the role.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Remove Users & Groups from Roles on a Single Binder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_binder_id_roles_role_name_and_user_or_group_id_delete_with_http_info(binder_id, role_name_and_user_or_group, id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param binder_id: The id value of the binder from which to remove roles. (required)
        :type binder_id: str
        :param role_name_and_user_or_group: The name of the role from which to remove the user or group followed by either `user` or `group`. The format is `{role_name}.{user_or_group}`. For example, `consumer__v.user`. (required)
        :type role_name_and_user_or_group: str
        :param id: The id value of the user or group to remove from the role. (required)
        :type id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'binder_id',
            'role_name_and_user_or_group',
            'id',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_binders_binder_id_roles_role_name_and_user_or_group_id_delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['binder_id'] is not None:
            _path_params['binder_id'] = _params['binder_id']

        if _params['role_name_and_user_or_group'] is not None:
            _path_params['role_name_and_user_or_group'] = _params['role_name_and_user_or_group']

        if _params['id'] is not None:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/binders/{binder_id}/roles/{role_name_and_user_or_group}/{id}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_binders_binder_id_sections_node_id_binding_rule_put(self, binder_id : Annotated[StrictStr, Field(..., description="The binder id field value.")], node_id : Annotated[StrictStr, Field(..., description="The binder node id field value.")], content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, authorization : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Update Binder Section Binding Rule  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_binder_id_sections_node_id_binding_rule_put(binder_id, node_id, content_type, accept, authorization, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param binder_id: The binder id field value. (required)
        :type binder_id: str
        :param node_id: The binder node id field value. (required)
        :type node_id: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param authorization:
        :type authorization: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_binders_binder_id_sections_node_id_binding_rule_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_binders_binder_id_sections_node_id_binding_rule_put_with_http_info(binder_id, node_id, content_type, accept, authorization, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_binders_binder_id_sections_node_id_binding_rule_put_with_http_info(self, binder_id : Annotated[StrictStr, Field(..., description="The binder id field value.")], node_id : Annotated[StrictStr, Field(..., description="The binder node id field value.")], content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, authorization : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Update Binder Section Binding Rule  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_binder_id_sections_node_id_binding_rule_put_with_http_info(binder_id, node_id, content_type, accept, authorization, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param binder_id: The binder id field value. (required)
        :type binder_id: str
        :param node_id: The binder node id field value. (required)
        :type node_id: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param authorization:
        :type authorization: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'binder_id',
            'node_id',
            'content_type',
            'accept',
            'authorization',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_binders_binder_id_sections_node_id_binding_rule_put" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['binder_id'] is not None:
            _path_params['binder_id'] = _params['binder_id']

        if _params['node_id'] is not None:
            _path_params['node_id'] = _params['node_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/binders/{binder_id}/sections/{node_id}/binding_rule', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_binders_binder_id_sections_node_id_put(self, binder_id : Annotated[StrictStr, Field(..., description="The binder id field value.")], node_id : Annotated[StrictStr, Field(..., description="The binder node id of the section.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Update Binder Section  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_binder_id_sections_node_id_put(binder_id, node_id, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param binder_id: The binder id field value. (required)
        :type binder_id: str
        :param node_id: The binder node id of the section. (required)
        :type node_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_binders_binder_id_sections_node_id_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_binders_binder_id_sections_node_id_put_with_http_info(binder_id, node_id, authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_binders_binder_id_sections_node_id_put_with_http_info(self, binder_id : Annotated[StrictStr, Field(..., description="The binder id field value.")], node_id : Annotated[StrictStr, Field(..., description="The binder node id of the section.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Update Binder Section  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_binder_id_sections_node_id_put_with_http_info(binder_id, node_id, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param binder_id: The binder id field value. (required)
        :type binder_id: str
        :param node_id: The binder node id of the section. (required)
        :type node_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'binder_id',
            'node_id',
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_binders_binder_id_sections_node_id_put" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['binder_id'] is not None:
            _path_params['binder_id'] = _params['binder_id']

        if _params['node_id'] is not None:
            _path_params['node_id'] = _params['node_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/binders/{binder_id}/sections/{node_id}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_binders_binder_id_sections_post(self, binder_id : Annotated[StrictStr, Field(..., description="The binder id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Create Binder Section  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_binder_id_sections_post(binder_id, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param binder_id: The binder id field value. (required)
        :type binder_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_binders_binder_id_sections_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_binders_binder_id_sections_post_with_http_info(binder_id, authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_binders_binder_id_sections_post_with_http_info(self, binder_id : Annotated[StrictStr, Field(..., description="The binder id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create Binder Section  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_binder_id_sections_post_with_http_info(binder_id, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param binder_id: The binder id field value. (required)
        :type binder_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'binder_id',
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_binders_binder_id_sections_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['binder_id'] is not None:
            _path_params['binder_id'] = _params['binder_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/binders/{binder_id}/sections', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_binders_binder_id_sections_section_id_delete(self, binder_id : Annotated[StrictStr, Field(..., description="The binder id field value.")], section_id : Annotated[StrictStr, Field(..., description="The binder node id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Delete Binder Section  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_binder_id_sections_section_id_delete(binder_id, section_id, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param binder_id: The binder id field value. (required)
        :type binder_id: str
        :param section_id: The binder node id field value. (required)
        :type section_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_binders_binder_id_sections_section_id_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_binders_binder_id_sections_section_id_delete_with_http_info(binder_id, section_id, authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_binders_binder_id_sections_section_id_delete_with_http_info(self, binder_id : Annotated[StrictStr, Field(..., description="The binder id field value.")], section_id : Annotated[StrictStr, Field(..., description="The binder node id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Delete Binder Section  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_binder_id_sections_section_id_delete_with_http_info(binder_id, section_id, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param binder_id: The binder id field value. (required)
        :type binder_id: str
        :param section_id: The binder node id field value. (required)
        :type section_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'binder_id',
            'section_id',
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_binders_binder_id_sections_section_id_delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['binder_id'] is not None:
            _path_params['binder_id'] = _params['binder_id']

        if _params['section_id'] is not None:
            _path_params['section_id'] = _params['section_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/binders/{binder_id}/sections/{section_id}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_binders_binder_id_sections_section_id_get(self, binder_id : Annotated[StrictStr, Field(..., description="The binder id field value.")], section_id : Annotated[StrictStr, Field(..., description="The binder node id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Binder Sections  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_binder_id_sections_section_id_get(binder_id, section_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param binder_id: The binder id field value. (required)
        :type binder_id: str
        :param section_id: The binder node id field value. (required)
        :type section_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_binders_binder_id_sections_section_id_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_binders_binder_id_sections_section_id_get_with_http_info(binder_id, section_id, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_binders_binder_id_sections_section_id_get_with_http_info(self, binder_id : Annotated[StrictStr, Field(..., description="The binder id field value.")], section_id : Annotated[StrictStr, Field(..., description="The binder node id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Binder Sections  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_binder_id_sections_section_id_get_with_http_info(binder_id, section_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param binder_id: The binder id field value. (required)
        :type binder_id: str
        :param section_id: The binder node id field value. (required)
        :type section_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'binder_id',
            'section_id',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_binders_binder_id_sections_section_id_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['binder_id'] is not None:
            _path_params['binder_id'] = _params['binder_id']

        if _params['section_id'] is not None:
            _path_params['section_id'] = _params['section_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/binders/{binder_id}/sections/{section_id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_binders_binder_id_versions_get(self, binder_id : Annotated[StrictStr, Field(..., description="The binder id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve All Binder Versions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_binder_id_versions_get(binder_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param binder_id: The binder id field value. (required)
        :type binder_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_binders_binder_id_versions_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_binders_binder_id_versions_get_with_http_info(binder_id, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_binders_binder_id_versions_get_with_http_info(self, binder_id : Annotated[StrictStr, Field(..., description="The binder id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve All Binder Versions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_binder_id_versions_get_with_http_info(binder_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param binder_id: The binder id field value. (required)
        :type binder_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'binder_id',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_binders_binder_id_versions_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['binder_id'] is not None:
            _path_params['binder_id'] = _params['binder_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/binders/{binder_id}/versions', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_binders_binder_id_versions_major_version_minor_version_actions_export_post(self, binder_id : Annotated[StrictStr, Field(..., description="The binder id field value.")], major_version : Annotated[StrictStr, Field(..., description="The binder major_version_number__v field value.")], minor_version : Annotated[StrictStr, Field(..., description="The binder minor_version_number__v field value.")], source : Annotated[Optional[StrictBool], Field(description="to include source content or not")] = None, renditiontype : Annotated[Optional[StrictStr], Field(description="to include viewable renditions")] = None, docversion : Annotated[Optional[StrictStr], Field(description="to include all major versions")] = None, attachments : Annotated[Optional[StrictStr], Field(description="to include all versions of attachments")] = None, export : Annotated[Optional[StrictStr], Field(description="configurable filename metadata")] = None, docfield : Annotated[Optional[StrictBool], Field(description="to exclude document metadata csv")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Export Binder (Specific Version)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_binder_id_versions_major_version_minor_version_actions_export_post(binder_id, major_version, minor_version, source, renditiontype, docversion, attachments, export, docfield, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param binder_id: The binder id field value. (required)
        :type binder_id: str
        :param major_version: The binder major_version_number__v field value. (required)
        :type major_version: str
        :param minor_version: The binder minor_version_number__v field value. (required)
        :type minor_version: str
        :param source: to include source content or not
        :type source: bool
        :param renditiontype: to include viewable renditions
        :type renditiontype: str
        :param docversion: to include all major versions
        :type docversion: str
        :param attachments: to include all versions of attachments
        :type attachments: str
        :param export: configurable filename metadata
        :type export: str
        :param docfield: to exclude document metadata csv
        :type docfield: bool
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_binders_binder_id_versions_major_version_minor_version_actions_export_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_binders_binder_id_versions_major_version_minor_version_actions_export_post_with_http_info(binder_id, major_version, minor_version, source, renditiontype, docversion, attachments, export, docfield, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_binders_binder_id_versions_major_version_minor_version_actions_export_post_with_http_info(self, binder_id : Annotated[StrictStr, Field(..., description="The binder id field value.")], major_version : Annotated[StrictStr, Field(..., description="The binder major_version_number__v field value.")], minor_version : Annotated[StrictStr, Field(..., description="The binder minor_version_number__v field value.")], source : Annotated[Optional[StrictBool], Field(description="to include source content or not")] = None, renditiontype : Annotated[Optional[StrictStr], Field(description="to include viewable renditions")] = None, docversion : Annotated[Optional[StrictStr], Field(description="to include all major versions")] = None, attachments : Annotated[Optional[StrictStr], Field(description="to include all versions of attachments")] = None, export : Annotated[Optional[StrictStr], Field(description="configurable filename metadata")] = None, docfield : Annotated[Optional[StrictBool], Field(description="to exclude document metadata csv")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Export Binder (Specific Version)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_binder_id_versions_major_version_minor_version_actions_export_post_with_http_info(binder_id, major_version, minor_version, source, renditiontype, docversion, attachments, export, docfield, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param binder_id: The binder id field value. (required)
        :type binder_id: str
        :param major_version: The binder major_version_number__v field value. (required)
        :type major_version: str
        :param minor_version: The binder minor_version_number__v field value. (required)
        :type minor_version: str
        :param source: to include source content or not
        :type source: bool
        :param renditiontype: to include viewable renditions
        :type renditiontype: str
        :param docversion: to include all major versions
        :type docversion: str
        :param attachments: to include all versions of attachments
        :type attachments: str
        :param export: configurable filename metadata
        :type export: str
        :param docfield: to exclude document metadata csv
        :type docfield: bool
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'binder_id',
            'major_version',
            'minor_version',
            'source',
            'renditiontype',
            'docversion',
            'attachments',
            'export',
            'docfield',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_binders_binder_id_versions_major_version_minor_version_actions_export_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['binder_id'] is not None:
            _path_params['binder_id'] = _params['binder_id']

        if _params['major_version'] is not None:
            _path_params['major_version'] = _params['major_version']

        if _params['minor_version'] is not None:
            _path_params['minor_version'] = _params['minor_version']


        # process the query parameters
        _query_params = []
        if _params.get('source') is not None:  # noqa: E501
            _query_params.append(('source', _params['source']))

        if _params.get('renditiontype') is not None:  # noqa: E501
            _query_params.append(('renditiontype', _params['renditiontype']))

        if _params.get('docversion') is not None:  # noqa: E501
            _query_params.append(('docversion', _params['docversion']))

        if _params.get('attachments') is not None:  # noqa: E501
            _query_params.append(('attachments', _params['attachments']))

        if _params.get('export') is not None:  # noqa: E501
            _query_params.append(('export', _params['export']))

        if _params.get('docfield') is not None:  # noqa: E501
            _query_params.append(('docfield', _params['docfield']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/actions/export', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_binders_binder_id_versions_major_version_minor_version_delete(self, binder_id : Annotated[StrictStr, Field(..., description="The binder id field value.")], major_version : Annotated[StrictStr, Field(..., description="The binder major_version_number__v field value.")], minor_version : Annotated[StrictStr, Field(..., description="The binder minor_version_number__v field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Delete Binder Version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_binder_id_versions_major_version_minor_version_delete(binder_id, major_version, minor_version, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param binder_id: The binder id field value. (required)
        :type binder_id: str
        :param major_version: The binder major_version_number__v field value. (required)
        :type major_version: str
        :param minor_version: The binder minor_version_number__v field value. (required)
        :type minor_version: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_binders_binder_id_versions_major_version_minor_version_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_binders_binder_id_versions_major_version_minor_version_delete_with_http_info(binder_id, major_version, minor_version, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_binders_binder_id_versions_major_version_minor_version_delete_with_http_info(self, binder_id : Annotated[StrictStr, Field(..., description="The binder id field value.")], major_version : Annotated[StrictStr, Field(..., description="The binder major_version_number__v field value.")], minor_version : Annotated[StrictStr, Field(..., description="The binder minor_version_number__v field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Delete Binder Version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_binder_id_versions_major_version_minor_version_delete_with_http_info(binder_id, major_version, minor_version, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param binder_id: The binder id field value. (required)
        :type binder_id: str
        :param major_version: The binder major_version_number__v field value. (required)
        :type major_version: str
        :param minor_version: The binder minor_version_number__v field value. (required)
        :type minor_version: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'binder_id',
            'major_version',
            'minor_version',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_binders_binder_id_versions_major_version_minor_version_delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['binder_id'] is not None:
            _path_params['binder_id'] = _params['binder_id']

        if _params['major_version'] is not None:
            _path_params['major_version'] = _params['major_version']

        if _params['minor_version'] is not None:
            _path_params['minor_version'] = _params['minor_version']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_binders_binder_id_versions_major_version_minor_version_get(self, binder_id : Annotated[StrictStr, Field(..., description="The binder id field value.")], major_version : Annotated[StrictStr, Field(..., description="The binder major_version_number__v field value.")], minor_version : Annotated[StrictStr, Field(..., description="The binder minor_version_number__v field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Binder Version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_binder_id_versions_major_version_minor_version_get(binder_id, major_version, minor_version, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param binder_id: The binder id field value. (required)
        :type binder_id: str
        :param major_version: The binder major_version_number__v field value. (required)
        :type major_version: str
        :param minor_version: The binder minor_version_number__v field value. (required)
        :type minor_version: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_binders_binder_id_versions_major_version_minor_version_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_binders_binder_id_versions_major_version_minor_version_get_with_http_info(binder_id, major_version, minor_version, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_binders_binder_id_versions_major_version_minor_version_get_with_http_info(self, binder_id : Annotated[StrictStr, Field(..., description="The binder id field value.")], major_version : Annotated[StrictStr, Field(..., description="The binder major_version_number__v field value.")], minor_version : Annotated[StrictStr, Field(..., description="The binder minor_version_number__v field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Binder Version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_binder_id_versions_major_version_minor_version_get_with_http_info(binder_id, major_version, minor_version, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param binder_id: The binder id field value. (required)
        :type binder_id: str
        :param major_version: The binder major_version_number__v field value. (required)
        :type major_version: str
        :param minor_version: The binder minor_version_number__v field value. (required)
        :type minor_version: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'binder_id',
            'major_version',
            'minor_version',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_binders_binder_id_versions_major_version_minor_version_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['binder_id'] is not None:
            _path_params['binder_id'] = _params['binder_id']

        if _params['major_version'] is not None:
            _path_params['major_version'] = _params['major_version']

        if _params['minor_version'] is not None:
            _path_params['minor_version'] = _params['minor_version']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_binders_binder_id_versions_major_version_minor_version_put(self, binder_id : Annotated[StrictStr, Field(..., description="The binder id field value.")], major_version : Annotated[StrictStr, Field(..., description="The binder major_version_number__v field value.")], minor_version : Annotated[StrictStr, Field(..., description="The binder minor_version_number__v field value.")], authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Update Binder Version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_binder_id_versions_major_version_minor_version_put(binder_id, major_version, minor_version, authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param binder_id: The binder id field value. (required)
        :type binder_id: str
        :param major_version: The binder major_version_number__v field value. (required)
        :type major_version: str
        :param minor_version: The binder minor_version_number__v field value. (required)
        :type minor_version: str
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_binders_binder_id_versions_major_version_minor_version_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_binders_binder_id_versions_major_version_minor_version_put_with_http_info(binder_id, major_version, minor_version, authorization, content_type, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_binders_binder_id_versions_major_version_minor_version_put_with_http_info(self, binder_id : Annotated[StrictStr, Field(..., description="The binder id field value.")], major_version : Annotated[StrictStr, Field(..., description="The binder major_version_number__v field value.")], minor_version : Annotated[StrictStr, Field(..., description="The binder minor_version_number__v field value.")], authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Update Binder Version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_binder_id_versions_major_version_minor_version_put_with_http_info(binder_id, major_version, minor_version, authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param binder_id: The binder id field value. (required)
        :type binder_id: str
        :param major_version: The binder major_version_number__v field value. (required)
        :type major_version: str
        :param minor_version: The binder minor_version_number__v field value. (required)
        :type minor_version: str
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'binder_id',
            'major_version',
            'minor_version',
            'authorization',
            'content_type',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_binders_binder_id_versions_major_version_minor_version_put" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['binder_id'] is not None:
            _path_params['binder_id'] = _params['binder_id']

        if _params['major_version'] is not None:
            _path_params['major_version'] = _params['major_version']

        if _params['minor_version'] is not None:
            _path_params['minor_version'] = _params['minor_version']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_binders_binder_id_versions_major_version_minor_version_relationships_post(self, binder_id : Annotated[StrictStr, Field(..., description="The binder id field value.")], major_version : Annotated[StrictStr, Field(..., description="The binder major_version_number__v field value.")], minor_version : Annotated[StrictStr, Field(..., description="The binder minor_version_number__v field value.")], authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Create Binder Relationship  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_binder_id_versions_major_version_minor_version_relationships_post(binder_id, major_version, minor_version, authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param binder_id: The binder id field value. (required)
        :type binder_id: str
        :param major_version: The binder major_version_number__v field value. (required)
        :type major_version: str
        :param minor_version: The binder minor_version_number__v field value. (required)
        :type minor_version: str
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_binders_binder_id_versions_major_version_minor_version_relationships_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_binders_binder_id_versions_major_version_minor_version_relationships_post_with_http_info(binder_id, major_version, minor_version, authorization, content_type, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_binders_binder_id_versions_major_version_minor_version_relationships_post_with_http_info(self, binder_id : Annotated[StrictStr, Field(..., description="The binder id field value.")], major_version : Annotated[StrictStr, Field(..., description="The binder major_version_number__v field value.")], minor_version : Annotated[StrictStr, Field(..., description="The binder minor_version_number__v field value.")], authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create Binder Relationship  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_binder_id_versions_major_version_minor_version_relationships_post_with_http_info(binder_id, major_version, minor_version, authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param binder_id: The binder id field value. (required)
        :type binder_id: str
        :param major_version: The binder major_version_number__v field value. (required)
        :type major_version: str
        :param minor_version: The binder minor_version_number__v field value. (required)
        :type minor_version: str
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'binder_id',
            'major_version',
            'minor_version',
            'authorization',
            'content_type',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_binders_binder_id_versions_major_version_minor_version_relationships_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['binder_id'] is not None:
            _path_params['binder_id'] = _params['binder_id']

        if _params['major_version'] is not None:
            _path_params['major_version'] = _params['major_version']

        if _params['minor_version'] is not None:
            _path_params['minor_version'] = _params['minor_version']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_delete(self, binder_id : Annotated[StrictStr, Field(..., description="The binder id field value.")], major_version : Annotated[StrictStr, Field(..., description="The binder major_version_number__v field value.")], minor_version : Annotated[StrictStr, Field(..., description="The binder minor_version_number__v field value.")], relationship_id : Annotated[StrictStr, Field(..., description="The binder relationship id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Delete Binder Relationship  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_delete(binder_id, major_version, minor_version, relationship_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param binder_id: The binder id field value. (required)
        :type binder_id: str
        :param major_version: The binder major_version_number__v field value. (required)
        :type major_version: str
        :param minor_version: The binder minor_version_number__v field value. (required)
        :type minor_version: str
        :param relationship_id: The binder relationship id field value. (required)
        :type relationship_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_delete_with_http_info(binder_id, major_version, minor_version, relationship_id, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_delete_with_http_info(self, binder_id : Annotated[StrictStr, Field(..., description="The binder id field value.")], major_version : Annotated[StrictStr, Field(..., description="The binder major_version_number__v field value.")], minor_version : Annotated[StrictStr, Field(..., description="The binder minor_version_number__v field value.")], relationship_id : Annotated[StrictStr, Field(..., description="The binder relationship id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Delete Binder Relationship  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_delete_with_http_info(binder_id, major_version, minor_version, relationship_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param binder_id: The binder id field value. (required)
        :type binder_id: str
        :param major_version: The binder major_version_number__v field value. (required)
        :type major_version: str
        :param minor_version: The binder minor_version_number__v field value. (required)
        :type minor_version: str
        :param relationship_id: The binder relationship id field value. (required)
        :type relationship_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'binder_id',
            'major_version',
            'minor_version',
            'relationship_id',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['binder_id'] is not None:
            _path_params['binder_id'] = _params['binder_id']

        if _params['major_version'] is not None:
            _path_params['major_version'] = _params['major_version']

        if _params['minor_version'] is not None:
            _path_params['minor_version'] = _params['minor_version']

        if _params['relationship_id'] is not None:
            _path_params['relationship_id'] = _params['relationship_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_get(self, binder_id : Annotated[StrictStr, Field(..., description="The binder id field value.")], major_version : Annotated[StrictStr, Field(..., description="The binder major_version_number__v field value.")], minor_version : Annotated[StrictStr, Field(..., description="The binder minor_version_number__v field value.")], relationship_id : Annotated[StrictStr, Field(..., description="The binder relationship id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Binder Relationship  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_get(binder_id, major_version, minor_version, relationship_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param binder_id: The binder id field value. (required)
        :type binder_id: str
        :param major_version: The binder major_version_number__v field value. (required)
        :type major_version: str
        :param minor_version: The binder minor_version_number__v field value. (required)
        :type minor_version: str
        :param relationship_id: The binder relationship id field value. (required)
        :type relationship_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_get_with_http_info(binder_id, major_version, minor_version, relationship_id, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_get_with_http_info(self, binder_id : Annotated[StrictStr, Field(..., description="The binder id field value.")], major_version : Annotated[StrictStr, Field(..., description="The binder major_version_number__v field value.")], minor_version : Annotated[StrictStr, Field(..., description="The binder minor_version_number__v field value.")], relationship_id : Annotated[StrictStr, Field(..., description="The binder relationship id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Binder Relationship  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_get_with_http_info(binder_id, major_version, minor_version, relationship_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param binder_id: The binder id field value. (required)
        :type binder_id: str
        :param major_version: The binder major_version_number__v field value. (required)
        :type major_version: str
        :param minor_version: The binder minor_version_number__v field value. (required)
        :type minor_version: str
        :param relationship_id: The binder relationship id field value. (required)
        :type relationship_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'binder_id',
            'major_version',
            'minor_version',
            'relationship_id',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['binder_id'] is not None:
            _path_params['binder_id'] = _params['binder_id']

        if _params['major_version'] is not None:
            _path_params['major_version'] = _params['major_version']

        if _params['minor_version'] is not None:
            _path_params['minor_version'] = _params['minor_version']

        if _params['relationship_id'] is not None:
            _path_params['relationship_id'] = _params['relationship_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_binders_binder_id_versions_major_version_minor_version_sections_section_id_get(self, binder_id : Annotated[StrictStr, Field(..., description="The binder id field value.")], major_version : Annotated[StrictStr, Field(..., description="The binder major_version_number__v field value.")], minor_version : Annotated[StrictStr, Field(..., description="The binder minor_version_number__v field value.")], section_id : Annotated[StrictStr, Field(..., description="Retrieve all sections (documents and subsections) in a binder’s sub-level node. If not included, all sections from the binder’s top-level root node will be returned.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Binder Version Section  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_binder_id_versions_major_version_minor_version_sections_section_id_get(binder_id, major_version, minor_version, section_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param binder_id: The binder id field value. (required)
        :type binder_id: str
        :param major_version: The binder major_version_number__v field value. (required)
        :type major_version: str
        :param minor_version: The binder minor_version_number__v field value. (required)
        :type minor_version: str
        :param section_id: Retrieve all sections (documents and subsections) in a binder’s sub-level node. If not included, all sections from the binder’s top-level root node will be returned. (required)
        :type section_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_binders_binder_id_versions_major_version_minor_version_sections_section_id_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_binders_binder_id_versions_major_version_minor_version_sections_section_id_get_with_http_info(binder_id, major_version, minor_version, section_id, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_binders_binder_id_versions_major_version_minor_version_sections_section_id_get_with_http_info(self, binder_id : Annotated[StrictStr, Field(..., description="The binder id field value.")], major_version : Annotated[StrictStr, Field(..., description="The binder major_version_number__v field value.")], minor_version : Annotated[StrictStr, Field(..., description="The binder minor_version_number__v field value.")], section_id : Annotated[StrictStr, Field(..., description="Retrieve all sections (documents and subsections) in a binder’s sub-level node. If not included, all sections from the binder’s top-level root node will be returned.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Binder Version Section  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_binder_id_versions_major_version_minor_version_sections_section_id_get_with_http_info(binder_id, major_version, minor_version, section_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param binder_id: The binder id field value. (required)
        :type binder_id: str
        :param major_version: The binder major_version_number__v field value. (required)
        :type major_version: str
        :param minor_version: The binder minor_version_number__v field value. (required)
        :type minor_version: str
        :param section_id: Retrieve all sections (documents and subsections) in a binder’s sub-level node. If not included, all sections from the binder’s top-level root node will be returned. (required)
        :type section_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'binder_id',
            'major_version',
            'minor_version',
            'section_id',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_binders_binder_id_versions_major_version_minor_version_sections_section_id_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['binder_id'] is not None:
            _path_params['binder_id'] = _params['binder_id']

        if _params['major_version'] is not None:
            _path_params['major_version'] = _params['major_version']

        if _params['minor_version'] is not None:
            _path_params['minor_version'] = _params['minor_version']

        if _params['section_id'] is not None:
            _path_params['section_id'] = _params['section_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/sections/{section_id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_binders_id_roles_get(self, id : StrictStr, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve All Binder Roles  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_id_roles_get(id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_binders_id_roles_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_binders_id_roles_get_with_http_info(id, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_binders_id_roles_get_with_http_info(self, id : StrictStr, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve All Binder Roles  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_id_roles_get_with_http_info(id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'id',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_binders_id_roles_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id'] is not None:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/binders/{id}/roles', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_binders_id_roles_post(self, id : StrictStr, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Assign Users & Groups to Roles on a Single Binder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_id_roles_post(id, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_binders_id_roles_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_binders_id_roles_post_with_http_info(id, authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_binders_id_roles_post_with_http_info(self, id : StrictStr, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Assign Users & Groups to Roles on a Single Binder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_id_roles_post_with_http_info(id, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'id',
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_binders_id_roles_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id'] is not None:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/binders/{id}/roles', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_binders_id_roles_role_name_get(self, id : Annotated[StrictStr, Field(..., description="The binder `id`.")], role_name : Annotated[StrictStr, Field(..., description="The name of the role to retrieve. For example, `owner__v`.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Document Role  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_id_roles_role_name_get(id, role_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param id: The binder `id`. (required)
        :type id: str
        :param role_name: The name of the role to retrieve. For example, `owner__v`. (required)
        :type role_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_binders_id_roles_role_name_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_binders_id_roles_role_name_get_with_http_info(id, role_name, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_binders_id_roles_role_name_get_with_http_info(self, id : Annotated[StrictStr, Field(..., description="The binder `id`.")], role_name : Annotated[StrictStr, Field(..., description="The name of the role to retrieve. For example, `owner__v`.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Document Role  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_id_roles_role_name_get_with_http_info(id, role_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param id: The binder `id`. (required)
        :type id: str
        :param role_name: The name of the role to retrieve. For example, `owner__v`. (required)
        :type role_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'id',
            'role_name',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_binders_id_roles_role_name_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id'] is not None:
            _path_params['id'] = _params['id']

        if _params['role_name'] is not None:
            _path_params['role_name'] = _params['role_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/binders/{id}/roles/{role_name}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_binders_id_versions_major_version_minor_version_lifecycle_actions_get(self, id : Annotated[StrictStr, Field(..., description="The binder id field value from which to retrieve available user actions.")], major_version : Annotated[StrictStr, Field(..., description="The major version number of the binder.")], minor_version : Annotated[StrictStr, Field(..., description="The minor version number of the binder.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Binder User Actions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_id_versions_major_version_minor_version_lifecycle_actions_get(id, major_version, minor_version, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param id: The binder id field value from which to retrieve available user actions. (required)
        :type id: str
        :param major_version: The major version number of the binder. (required)
        :type major_version: str
        :param minor_version: The minor version number of the binder. (required)
        :type minor_version: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_binders_id_versions_major_version_minor_version_lifecycle_actions_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_binders_id_versions_major_version_minor_version_lifecycle_actions_get_with_http_info(id, major_version, minor_version, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_binders_id_versions_major_version_minor_version_lifecycle_actions_get_with_http_info(self, id : Annotated[StrictStr, Field(..., description="The binder id field value from which to retrieve available user actions.")], major_version : Annotated[StrictStr, Field(..., description="The major version number of the binder.")], minor_version : Annotated[StrictStr, Field(..., description="The minor version number of the binder.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Binder User Actions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_id_versions_major_version_minor_version_lifecycle_actions_get_with_http_info(id, major_version, minor_version, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param id: The binder id field value from which to retrieve available user actions. (required)
        :type id: str
        :param major_version: The major version number of the binder. (required)
        :type major_version: str
        :param minor_version: The minor version number of the binder. (required)
        :type minor_version: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'id',
            'major_version',
            'minor_version',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_binders_id_versions_major_version_minor_version_lifecycle_actions_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id'] is not None:
            _path_params['id'] = _params['id']

        if _params['major_version'] is not None:
            _path_params['major_version'] = _params['major_version']

        if _params['minor_version'] is not None:
            _path_params['minor_version'] = _params['minor_version']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get(self, id : Annotated[StrictStr, Field(..., description="The binder id field value from which to retrieve available user actions.")], major_version : Annotated[StrictStr, Field(..., description="The major version number of the binder.")], minor_version : Annotated[StrictStr, Field(..., description="The minor version number of the binder.")], name__v : Annotated[StrictStr, Field(..., description="The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Binder Entry Criteria  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get(id, major_version, minor_version, name__v, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param id: The binder id field value from which to retrieve available user actions. (required)
        :type id: str
        :param major_version: The major version number of the binder. (required)
        :type major_version: str
        :param minor_version: The minor version number of the binder. (required)
        :type minor_version: str
        :param name__v: The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above. (required)
        :type name__v: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get_with_http_info(id, major_version, minor_version, name__v, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get_with_http_info(self, id : Annotated[StrictStr, Field(..., description="The binder id field value from which to retrieve available user actions.")], major_version : Annotated[StrictStr, Field(..., description="The major version number of the binder.")], minor_version : Annotated[StrictStr, Field(..., description="The minor version number of the binder.")], name__v : Annotated[StrictStr, Field(..., description="The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Binder Entry Criteria  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get_with_http_info(id, major_version, minor_version, name__v, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param id: The binder id field value from which to retrieve available user actions. (required)
        :type id: str
        :param major_version: The major version number of the binder. (required)
        :type major_version: str
        :param minor_version: The minor version number of the binder. (required)
        :type minor_version: str
        :param name__v: The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above. (required)
        :type name__v: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'id',
            'major_version',
            'minor_version',
            'name__v',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id'] is not None:
            _path_params['id'] = _params['id']

        if _params['major_version'] is not None:
            _path_params['major_version'] = _params['major_version']

        if _params['minor_version'] is not None:
            _path_params['minor_version'] = _params['minor_version']

        if _params['name__v'] is not None:
            _path_params['name__v'] = _params['name__v']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}/entry_requirements', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_put(self, id : Annotated[StrictStr, Field(..., description="The binder id field value from which to retrieve available user actions.")], major_version : Annotated[StrictStr, Field(..., description="The major version number of the binder.")], minor_version : Annotated[StrictStr, Field(..., description="The minor version number of the binder.")], name__v : Annotated[StrictStr, Field(..., description="The action name__v field value to initiate. This is retrieved from the Retrieve User Action request.")], authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Initiate Binder User Action  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_put(id, major_version, minor_version, name__v, authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param id: The binder id field value from which to retrieve available user actions. (required)
        :type id: str
        :param major_version: The major version number of the binder. (required)
        :type major_version: str
        :param minor_version: The minor version number of the binder. (required)
        :type minor_version: str
        :param name__v: The action name__v field value to initiate. This is retrieved from the Retrieve User Action request. (required)
        :type name__v: str
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_put_with_http_info(id, major_version, minor_version, name__v, authorization, content_type, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_put_with_http_info(self, id : Annotated[StrictStr, Field(..., description="The binder id field value from which to retrieve available user actions.")], major_version : Annotated[StrictStr, Field(..., description="The major version number of the binder.")], minor_version : Annotated[StrictStr, Field(..., description="The minor version number of the binder.")], name__v : Annotated[StrictStr, Field(..., description="The action name__v field value to initiate. This is retrieved from the Retrieve User Action request.")], authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Initiate Binder User Action  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_put_with_http_info(id, major_version, minor_version, name__v, authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param id: The binder id field value from which to retrieve available user actions. (required)
        :type id: str
        :param major_version: The major version number of the binder. (required)
        :type major_version: str
        :param minor_version: The minor version number of the binder. (required)
        :type minor_version: str
        :param name__v: The action name__v field value to initiate. This is retrieved from the Retrieve User Action request. (required)
        :type name__v: str
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'id',
            'major_version',
            'minor_version',
            'name__v',
            'authorization',
            'content_type',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_put" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id'] is not None:
            _path_params['id'] = _params['id']

        if _params['major_version'] is not None:
            _path_params['major_version'] = _params['major_version']

        if _params['minor_version'] is not None:
            _path_params['minor_version'] = _params['minor_version']

        if _params['name__v'] is not None:
            _path_params['name__v'] = _params['name__v']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_binders_lifecycle_actions_post(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve User Actions on Multiple Binders  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_lifecycle_actions_post(authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_binders_lifecycle_actions_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_binders_lifecycle_actions_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_binders_lifecycle_actions_post_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve User Actions on Multiple Binders  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_lifecycle_actions_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_binders_lifecycle_actions_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/binders/lifecycle_actions', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_binders_lifecycle_actions_user_action_name_put(self, user_action_name : Annotated[StrictStr, Field(..., description="The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Binders endpoint.")], authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Initiate Bulk Binder User Actions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_lifecycle_actions_user_action_name_put(user_action_name, authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param user_action_name: The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Binders endpoint. (required)
        :type user_action_name: str
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_binders_lifecycle_actions_user_action_name_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_binders_lifecycle_actions_user_action_name_put_with_http_info(user_action_name, authorization, content_type, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_binders_lifecycle_actions_user_action_name_put_with_http_info(self, user_action_name : Annotated[StrictStr, Field(..., description="The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Binders endpoint.")], authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Initiate Bulk Binder User Actions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_lifecycle_actions_user_action_name_put_with_http_info(user_action_name, authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param user_action_name: The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Binders endpoint. (required)
        :type user_action_name: str
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'user_action_name',
            'authorization',
            'content_type',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_binders_lifecycle_actions_user_action_name_put" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['user_action_name'] is not None:
            _path_params['user_action_name'] = _params['user_action_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/binders/lifecycle_actions/{user_action_name}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_binders_post(self, var_async : Annotated[Optional[StrictBool], Field(description="When creating a binder, the binder metadata is indexed synchronously by default. To process the indexing asynchronously, include a query parameter async set to true (objects/binders?async=true). This helps speed up the response time from Vault when processing large amounts of data. ")] = None, authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Create Binder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_post(var_async, authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param var_async: When creating a binder, the binder metadata is indexed synchronously by default. To process the indexing asynchronously, include a query parameter async set to true (objects/binders?async=true). This helps speed up the response time from Vault when processing large amounts of data. 
        :type var_async: bool
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_binders_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_binders_post_with_http_info(var_async, authorization, content_type, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_binders_post_with_http_info(self, var_async : Annotated[Optional[StrictBool], Field(description="When creating a binder, the binder metadata is indexed synchronously by default. To process the indexing asynchronously, include a query parameter async set to true (objects/binders?async=true). This helps speed up the response time from Vault when processing large amounts of data. ")] = None, authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create Binder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_post_with_http_info(var_async, authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param var_async: When creating a binder, the binder metadata is indexed synchronously by default. To process the indexing asynchronously, include a query parameter async set to true (objects/binders?async=true). This helps speed up the response time from Vault when processing large amounts of data. 
        :type var_async: bool
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'var_async',
            'authorization',
            'content_type',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_binders_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('var_async') is not None:  # noqa: E501
            _query_params.append(('async', _params['var_async']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/binders', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_binders_templates_get(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Binder Template Collection  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_templates_get(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_binders_templates_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_binders_templates_get_with_http_info(authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_binders_templates_get_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Binder Template Collection  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_templates_get_with_http_info(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_binders_templates_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/binders/templates', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_binders_templates_post(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Create Binder Template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_templates_post(authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_binders_templates_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_binders_templates_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_binders_templates_post_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create Binder Template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_templates_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_binders_templates_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/binders/templates', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_binders_templates_put(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Update Binder Template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_templates_put(authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_binders_templates_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_binders_templates_put_with_http_info(authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_binders_templates_put_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Update Binder Template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_templates_put_with_http_info(authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_binders_templates_put" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/binders/templates', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_binders_templates_template_name_bindernodes_get(self, template_name : Annotated[StrictStr, Field(..., description="The binder template name__v field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Binder Template Node Attributes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_templates_template_name_bindernodes_get(template_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param template_name: The binder template name__v field value. (required)
        :type template_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_binders_templates_template_name_bindernodes_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_binders_templates_template_name_bindernodes_get_with_http_info(template_name, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_binders_templates_template_name_bindernodes_get_with_http_info(self, template_name : Annotated[StrictStr, Field(..., description="The binder template name__v field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Binder Template Node Attributes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_templates_template_name_bindernodes_get_with_http_info(template_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param template_name: The binder template name__v field value. (required)
        :type template_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'template_name',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_binders_templates_template_name_bindernodes_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['template_name'] is not None:
            _path_params['template_name'] = _params['template_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/binders/templates/{template_name}/bindernodes', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_binders_templates_template_name_bindernodes_post(self, template_name : Annotated[StrictStr, Field(..., description="The binder template name__v field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Create Binder Template Node  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_templates_template_name_bindernodes_post(template_name, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param template_name: The binder template name__v field value. (required)
        :type template_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_binders_templates_template_name_bindernodes_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_binders_templates_template_name_bindernodes_post_with_http_info(template_name, authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_binders_templates_template_name_bindernodes_post_with_http_info(self, template_name : Annotated[StrictStr, Field(..., description="The binder template name__v field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create Binder Template Node  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_templates_template_name_bindernodes_post_with_http_info(template_name, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param template_name: The binder template name__v field value. (required)
        :type template_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'template_name',
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_binders_templates_template_name_bindernodes_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['template_name'] is not None:
            _path_params['template_name'] = _params['template_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/binders/templates/{template_name}/bindernodes', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_binders_templates_template_name_bindernodes_put(self, template_name : Annotated[StrictStr, Field(..., description="The binder template name__v field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Replace Binder Template Nodes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_templates_template_name_bindernodes_put(template_name, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param template_name: The binder template name__v field value. (required)
        :type template_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_binders_templates_template_name_bindernodes_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_binders_templates_template_name_bindernodes_put_with_http_info(template_name, authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_binders_templates_template_name_bindernodes_put_with_http_info(self, template_name : Annotated[StrictStr, Field(..., description="The binder template name__v field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Replace Binder Template Nodes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_templates_template_name_bindernodes_put_with_http_info(template_name, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param template_name: The binder template name__v field value. (required)
        :type template_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'template_name',
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_binders_templates_template_name_bindernodes_put" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['template_name'] is not None:
            _path_params['template_name'] = _params['template_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/binders/templates/{template_name}/bindernodes', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_binders_templates_template_name_delete(self, template_name : Annotated[StrictStr, Field(..., description="The binder template name__v field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Delete Binder Template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_templates_template_name_delete(template_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param template_name: The binder template name__v field value. (required)
        :type template_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_binders_templates_template_name_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_binders_templates_template_name_delete_with_http_info(template_name, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_binders_templates_template_name_delete_with_http_info(self, template_name : Annotated[StrictStr, Field(..., description="The binder template name__v field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Delete Binder Template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_templates_template_name_delete_with_http_info(template_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param template_name: The binder template name__v field value. (required)
        :type template_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'template_name',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_binders_templates_template_name_delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['template_name'] is not None:
            _path_params['template_name'] = _params['template_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/binders/templates/{template_name}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_binders_templates_template_name_get(self, template_name : Annotated[StrictStr, Field(..., description="The binder template name__v field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Binder Template Attributes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_templates_template_name_get(template_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param template_name: The binder template name__v field value. (required)
        :type template_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_binders_templates_template_name_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_binders_templates_template_name_get_with_http_info(template_name, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_binders_templates_template_name_get_with_http_info(self, template_name : Annotated[StrictStr, Field(..., description="The binder template name__v field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Binder Template Attributes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_binders_templates_template_name_get_with_http_info(template_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param template_name: The binder template name__v field value. (required)
        :type template_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'template_name',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_binders_templates_template_name_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['template_name'] is not None:
            _path_params['template_name'] = _params['template_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/binders/templates/{template_name}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_deletions_documents_get(self, start_date : Annotated[Optional[StrictStr], Field(description="Specify a date (no more than 30 days past) after which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z")] = None, end_date : Annotated[Optional[StrictStr], Field(description="Specify a date (no more than 30 days past) before which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z ")] = None, authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Deleted Document IDs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_deletions_documents_get(start_date, end_date, authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param start_date: Specify a date (no more than 30 days past) after which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z
        :type start_date: str
        :param end_date: Specify a date (no more than 30 days past) before which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z 
        :type end_date: str
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_deletions_documents_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_deletions_documents_get_with_http_info(start_date, end_date, authorization, content_type, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_deletions_documents_get_with_http_info(self, start_date : Annotated[Optional[StrictStr], Field(description="Specify a date (no more than 30 days past) after which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z")] = None, end_date : Annotated[Optional[StrictStr], Field(description="Specify a date (no more than 30 days past) before which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z ")] = None, authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Deleted Document IDs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_deletions_documents_get_with_http_info(start_date, end_date, authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param start_date: Specify a date (no more than 30 days past) after which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z
        :type start_date: str
        :param end_date: Specify a date (no more than 30 days past) before which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z 
        :type end_date: str
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'start_date',
            'end_date',
            'authorization',
            'content_type',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_deletions_documents_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('start_date') is not None:  # noqa: E501
            _query_params.append(('start_date', _params['start_date']))

        if _params.get('end_date') is not None:  # noqa: E501
            _query_params.append(('end_date', _params['end_date']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/deletions/documents', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_deletions_vobjects_object_name_get(self, object_name : Annotated[StrictStr, Field(..., description="The object name__v field value (product__v, country__v, custom_object__c, etc.).")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Deleted Object Record ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_deletions_vobjects_object_name_get(object_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
        :type object_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_deletions_vobjects_object_name_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_deletions_vobjects_object_name_get_with_http_info(object_name, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_deletions_vobjects_object_name_get_with_http_info(self, object_name : Annotated[StrictStr, Field(..., description="The object name__v field value (product__v, country__v, custom_object__c, etc.).")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Deleted Object Record ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_deletions_vobjects_object_name_get_with_http_info(object_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
        :type object_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'object_name',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_deletions_vobjects_object_name_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['object_name'] is not None:
            _path_params['object_name'] = _params['object_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/deletions/vobjects/{object_name}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_actions_get(self, loc : Annotated[Optional[StrictBool], Field(description="When localized (translated) strings are available, retrieve them by setting loc to true.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve All Document Workflows  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_actions_get(loc, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param loc: When localized (translated) strings are available, retrieve them by setting loc to true.
        :type loc: bool
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_actions_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_actions_get_with_http_info(loc, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_actions_get_with_http_info(self, loc : Annotated[Optional[StrictBool], Field(description="When localized (translated) strings are available, retrieve them by setting loc to true.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve All Document Workflows  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_actions_get_with_http_info(loc, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param loc: When localized (translated) strings are available, retrieve them by setting loc to true.
        :type loc: bool
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'loc',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_actions_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('loc') is not None:  # noqa: E501
            _query_params.append(('loc', _params['loc']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/actions', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_actions_lifecycle_and_state_and_action_job_id_results_get(self, lifecycle_and_state_and_action : Annotated[StrictStr, Field(..., description="The `name__v` values for the lifecycle, state, and action in the format `{lifecycle_name}.{state_name}.{action_name}`. To get this value, [Retrieve the Job Status](https://developer.veevavault.com/api/24.3#RetrieveJobStatus) and find the `href` under the `artifacts` link.")], job_id : StrictStr, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Download Controlled Copy Job Results  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_actions_lifecycle_and_state_and_action_job_id_results_get(lifecycle_and_state_and_action, job_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param lifecycle_and_state_and_action: The `name__v` values for the lifecycle, state, and action in the format `{lifecycle_name}.{state_name}.{action_name}`. To get this value, [Retrieve the Job Status](https://developer.veevavault.com/api/24.3#RetrieveJobStatus) and find the `href` under the `artifacts` link. (required)
        :type lifecycle_and_state_and_action: str
        :param job_id: (required)
        :type job_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_actions_lifecycle_and_state_and_action_job_id_results_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_actions_lifecycle_and_state_and_action_job_id_results_get_with_http_info(lifecycle_and_state_and_action, job_id, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_actions_lifecycle_and_state_and_action_job_id_results_get_with_http_info(self, lifecycle_and_state_and_action : Annotated[StrictStr, Field(..., description="The `name__v` values for the lifecycle, state, and action in the format `{lifecycle_name}.{state_name}.{action_name}`. To get this value, [Retrieve the Job Status](https://developer.veevavault.com/api/24.3#RetrieveJobStatus) and find the `href` under the `artifacts` link.")], job_id : StrictStr, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Download Controlled Copy Job Results  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_actions_lifecycle_and_state_and_action_job_id_results_get_with_http_info(lifecycle_and_state_and_action, job_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param lifecycle_and_state_and_action: The `name__v` values for the lifecycle, state, and action in the format `{lifecycle_name}.{state_name}.{action_name}`. To get this value, [Retrieve the Job Status](https://developer.veevavault.com/api/24.3#RetrieveJobStatus) and find the `href` under the `artifacts` link. (required)
        :type lifecycle_and_state_and_action: str
        :param job_id: (required)
        :type job_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'lifecycle_and_state_and_action',
            'job_id',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_actions_lifecycle_and_state_and_action_job_id_results_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['lifecycle_and_state_and_action'] is not None:
            _path_params['lifecycle_and_state_and_action'] = _params['lifecycle_and_state_and_action']

        if _params['job_id'] is not None:
            _path_params['job_id'] = _params['job_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/actions/{lifecycle_and_state_and_action}/{job_id}/results', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_actions_workflow_name_get(self, workflow_name : Annotated[StrictStr, Field(..., description="The document workflow name value.")], loc : Annotated[Optional[StrictBool], Field(description="When localized (translated) strings are available, retrieve them by setting loc to true.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Document Workflow Details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_actions_workflow_name_get(workflow_name, loc, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param workflow_name: The document workflow name value. (required)
        :type workflow_name: str
        :param loc: When localized (translated) strings are available, retrieve them by setting loc to true.
        :type loc: bool
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_actions_workflow_name_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_actions_workflow_name_get_with_http_info(workflow_name, loc, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_actions_workflow_name_get_with_http_info(self, workflow_name : Annotated[StrictStr, Field(..., description="The document workflow name value.")], loc : Annotated[Optional[StrictBool], Field(description="When localized (translated) strings are available, retrieve them by setting loc to true.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Document Workflow Details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_actions_workflow_name_get_with_http_info(workflow_name, loc, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param workflow_name: The document workflow name value. (required)
        :type workflow_name: str
        :param loc: When localized (translated) strings are available, retrieve them by setting loc to true.
        :type loc: bool
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'workflow_name',
            'loc',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_actions_workflow_name_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['workflow_name'] is not None:
            _path_params['workflow_name'] = _params['workflow_name']


        # process the query parameters
        _query_params = []
        if _params.get('loc') is not None:  # noqa: E501
            _query_params.append(('loc', _params['loc']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/actions/{workflow_name}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_actions_workflow_name_post(self, workflow_name : Annotated[StrictStr, Field(..., description="The document workflow name value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Initiate Document Workflow  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_actions_workflow_name_post(workflow_name, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param workflow_name: The document workflow name value. (required)
        :type workflow_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_actions_workflow_name_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_actions_workflow_name_post_with_http_info(workflow_name, authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_actions_workflow_name_post_with_http_info(self, workflow_name : Annotated[StrictStr, Field(..., description="The document workflow name value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Initiate Document Workflow  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_actions_workflow_name_post_with_http_info(workflow_name, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param workflow_name: The document workflow name value. (required)
        :type workflow_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'workflow_name',
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_actions_workflow_name_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['workflow_name'] is not None:
            _path_params['workflow_name'] = _params['workflow_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/actions/{workflow_name}', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_annotations_batch_delete(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Delete Annotations  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_annotations_batch_delete(authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_annotations_batch_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_annotations_batch_delete_with_http_info(authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_annotations_batch_delete_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Delete Annotations  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_annotations_batch_delete_with_http_info(authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_annotations_batch_delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/annotations/batch', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_annotations_batch_post(self, authorization : constr(strict=True, max_length=0, min_length=0), content_type : constr(strict=True, max_length=0, min_length=0), accept : constr(strict=True, max_length=0, min_length=0), x_vault_api_client_id : Annotated[constr(strict=True, max_length=0, min_length=0), Field(..., description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")], **kwargs) -> None:  # noqa: E501
        """Create Multiple Annotations  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_annotations_batch_post(authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization: (required)
        :type authorization: str
        :param content_type: (required)
        :type content_type: str
        :param accept: (required)
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log. (required)
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_annotations_batch_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_annotations_batch_post_with_http_info(authorization, content_type, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_annotations_batch_post_with_http_info(self, authorization : constr(strict=True, max_length=0, min_length=0), content_type : constr(strict=True, max_length=0, min_length=0), accept : constr(strict=True, max_length=0, min_length=0), x_vault_api_client_id : Annotated[constr(strict=True, max_length=0, min_length=0), Field(..., description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Create Multiple Annotations  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_annotations_batch_post_with_http_info(authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization: (required)
        :type authorization: str
        :param content_type: (required)
        :type content_type: str
        :param accept: (required)
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log. (required)
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'content_type',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_annotations_batch_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/annotations/batch', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_annotations_batch_put(self, authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Update Annotations  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_annotations_batch_put(authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_annotations_batch_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_annotations_batch_put_with_http_info(authorization, content_type, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_annotations_batch_put_with_http_info(self, authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Update Annotations  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_annotations_batch_put_with_http_info(authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'content_type',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_annotations_batch_put" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/annotations/batch', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_annotations_replies_batch_post(self, authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Add Annotation Replies  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_annotations_replies_batch_post(authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_annotations_replies_batch_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_annotations_replies_batch_post_with_http_info(authorization, content_type, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_annotations_replies_batch_post_with_http_info(self, authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Add Annotation Replies  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_annotations_replies_batch_post_with_http_info(authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'content_type',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_annotations_replies_batch_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/annotations/replies/batch', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_attachments_batch_delete(self, accept : Optional[StrictStr] = None, authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Delete Multiple Document Attachments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_attachments_batch_delete(accept, authorization, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param accept:
        :type accept: str
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_attachments_batch_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_attachments_batch_delete_with_http_info(accept, authorization, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_attachments_batch_delete_with_http_info(self, accept : Optional[StrictStr] = None, authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Delete Multiple Document Attachments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_attachments_batch_delete_with_http_info(accept, authorization, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param accept:
        :type accept: str
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'accept',
            'authorization',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_attachments_batch_delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/attachments/batch', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_attachments_batch_post(self, accept : Optional[StrictStr] = None, authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Create Multiple Document Attachments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_attachments_batch_post(accept, authorization, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param accept:
        :type accept: str
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_attachments_batch_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_attachments_batch_post_with_http_info(accept, authorization, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_attachments_batch_post_with_http_info(self, accept : Optional[StrictStr] = None, authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create Multiple Document Attachments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_attachments_batch_post_with_http_info(accept, authorization, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param accept:
        :type accept: str
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'accept',
            'authorization',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_attachments_batch_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/attachments/batch', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_attachments_batch_put(self, accept : Optional[StrictStr] = None, authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Update Multiple Document Attachment Descriptions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_attachments_batch_put(accept, authorization, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param accept:
        :type accept: str
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_attachments_batch_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_attachments_batch_put_with_http_info(accept, authorization, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_attachments_batch_put_with_http_info(self, accept : Optional[StrictStr] = None, authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Update Multiple Document Attachment Descriptions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_attachments_batch_put_with_http_info(accept, authorization, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param accept:
        :type accept: str
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'accept',
            'authorization',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_attachments_batch_put" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/attachments/batch', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_batch_actions_fileextract_job_id_results_get(self, job_id : Annotated[StrictStr, Field(..., description="The id value of the requested export job. This is returned with the export document requests.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Document Export Results  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_batch_actions_fileextract_job_id_results_get(job_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param job_id: The id value of the requested export job. This is returned with the export document requests. (required)
        :type job_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_batch_actions_fileextract_job_id_results_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_batch_actions_fileextract_job_id_results_get_with_http_info(job_id, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_batch_actions_fileextract_job_id_results_get_with_http_info(self, job_id : Annotated[StrictStr, Field(..., description="The id value of the requested export job. This is returned with the export document requests.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Document Export Results  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_batch_actions_fileextract_job_id_results_get_with_http_info(job_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param job_id: The id value of the requested export job. This is returned with the export document requests. (required)
        :type job_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'job_id',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_batch_actions_fileextract_job_id_results_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['job_id'] is not None:
            _path_params['job_id'] = _params['job_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/batch/actions/fileextract/{job_id}/results', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_batch_actions_fileextract_post(self, source : Annotated[Optional[StrictBool], Field(description="Optional: To exclude source files, include a query parameter source=false. If omitted, defaults to true.")] = None, renditions : Annotated[Optional[StrictBool], Field(description="Optional: To include renditions, include a query parameter renditions=true. If omitted, defaults to false.")] = None, allversions : Annotated[Optional[StrictBool], Field(description="Optional: To include all versions or latest version, include a query parameter allversions=true. If omitted, defaults to false.")] = None, authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Export Documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_batch_actions_fileextract_post(source, renditions, allversions, authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param source: Optional: To exclude source files, include a query parameter source=false. If omitted, defaults to true.
        :type source: bool
        :param renditions: Optional: To include renditions, include a query parameter renditions=true. If omitted, defaults to false.
        :type renditions: bool
        :param allversions: Optional: To include all versions or latest version, include a query parameter allversions=true. If omitted, defaults to false.
        :type allversions: bool
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_batch_actions_fileextract_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_batch_actions_fileextract_post_with_http_info(source, renditions, allversions, authorization, content_type, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_batch_actions_fileextract_post_with_http_info(self, source : Annotated[Optional[StrictBool], Field(description="Optional: To exclude source files, include a query parameter source=false. If omitted, defaults to true.")] = None, renditions : Annotated[Optional[StrictBool], Field(description="Optional: To include renditions, include a query parameter renditions=true. If omitted, defaults to false.")] = None, allversions : Annotated[Optional[StrictBool], Field(description="Optional: To include all versions or latest version, include a query parameter allversions=true. If omitted, defaults to false.")] = None, authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Export Documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_batch_actions_fileextract_post_with_http_info(source, renditions, allversions, authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param source: Optional: To exclude source files, include a query parameter source=false. If omitted, defaults to true.
        :type source: bool
        :param renditions: Optional: To include renditions, include a query parameter renditions=true. If omitted, defaults to false.
        :type renditions: bool
        :param allversions: Optional: To include all versions or latest version, include a query parameter allversions=true. If omitted, defaults to false.
        :type allversions: bool
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'source',
            'renditions',
            'allversions',
            'authorization',
            'content_type',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_batch_actions_fileextract_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('source') is not None:  # noqa: E501
            _query_params.append(('source', _params['source']))

        if _params.get('renditions') is not None:  # noqa: E501
            _query_params.append(('renditions', _params['renditions']))

        if _params.get('allversions') is not None:  # noqa: E501
            _query_params.append(('allversions', _params['allversions']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/batch/actions/fileextract', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_batch_actions_reclassify_put(self, authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_migration_mode : Annotated[Optional[StrictBool], Field(description="When set to true, Vault allows you to manually set the document number and to update documents to any lifecycle state using the status__v field. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message.  You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>")] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Reclassify Multiple Documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_batch_actions_reclassify_put(authorization, content_type, accept, x_vault_api_migration_mode, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_migration_mode: When set to true, Vault allows you to manually set the document number and to update documents to any lifecycle state using the status__v field. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message.  You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>
        :type x_vault_api_migration_mode: bool
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_batch_actions_reclassify_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_batch_actions_reclassify_put_with_http_info(authorization, content_type, accept, x_vault_api_migration_mode, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_batch_actions_reclassify_put_with_http_info(self, authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_migration_mode : Annotated[Optional[StrictBool], Field(description="When set to true, Vault allows you to manually set the document number and to update documents to any lifecycle state using the status__v field. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message.  You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>")] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Reclassify Multiple Documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_batch_actions_reclassify_put_with_http_info(authorization, content_type, accept, x_vault_api_migration_mode, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_migration_mode: When set to true, Vault allows you to manually set the document number and to update documents to any lifecycle state using the status__v field. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message.  You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>
        :type x_vault_api_migration_mode: bool
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'content_type',
            'accept',
            'x_vault_api_migration_mode',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_batch_actions_reclassify_put" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_migration_mode'] is not None:
            _header_params['X-VaultAPI-MigrationMode'] = _params['x_vault_api_migration_mode']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/batch/actions/reclassify', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_batch_actions_rerender_post(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Update Multiple Document Renditions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_batch_actions_rerender_post(authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_batch_actions_rerender_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_batch_actions_rerender_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_batch_actions_rerender_post_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Update Multiple Document Renditions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_batch_actions_rerender_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_batch_actions_rerender_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/batch/actions/rerender', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_batch_delete(self, id_param : Annotated[Optional[StrictStr], Field(description="If you’re identifying documents in your input by their external ID")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Delete Multiple Documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_batch_delete(id_param, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param id_param: If you’re identifying documents in your input by their external ID
        :type id_param: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_batch_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_batch_delete_with_http_info(id_param, authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_batch_delete_with_http_info(self, id_param : Annotated[Optional[StrictStr], Field(description="If you’re identifying documents in your input by their external ID")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Delete Multiple Documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_batch_delete_with_http_info(id_param, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param id_param: If you’re identifying documents in your input by their external ID
        :type id_param: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'id_param',
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_batch_delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('id_param') is not None:  # noqa: E501
            _query_params.append(('idParam', _params['id_param']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/batch', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_batch_lock_delete(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Undo Collaborative Authoring Checkout  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_batch_lock_delete(authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_batch_lock_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_batch_lock_delete_with_http_info(authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_batch_lock_delete_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Undo Collaborative Authoring Checkout  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_batch_lock_delete_with_http_info(authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_batch_lock_delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/batch/lock', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_batch_post(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_migration_mode : Annotated[Optional[StrictBool], Field(description="When set to true, Vault allows you to create documents in any lifecycle state using the status__v field, and to manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>")] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Create Multiple Documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_batch_post(authorization, accept, content_type, x_vault_api_migration_mode, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_migration_mode: When set to true, Vault allows you to create documents in any lifecycle state using the status__v field, and to manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>
        :type x_vault_api_migration_mode: bool
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_batch_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_batch_post_with_http_info(authorization, accept, content_type, x_vault_api_migration_mode, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_batch_post_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_migration_mode : Annotated[Optional[StrictBool], Field(description="When set to true, Vault allows you to create documents in any lifecycle state using the status__v field, and to manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>")] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create Multiple Documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_batch_post_with_http_info(authorization, accept, content_type, x_vault_api_migration_mode, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_migration_mode: When set to true, Vault allows you to create documents in any lifecycle state using the status__v field, and to manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>
        :type x_vault_api_migration_mode: bool
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_migration_mode',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_batch_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_migration_mode'] is not None:
            _header_params['X-VaultAPI-MigrationMode'] = _params['x_vault_api_migration_mode']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/batch', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_batch_put(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_migration_mode : Annotated[Optional[StrictBool], Field(description="When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header.Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>")] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Update Multiple Documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_batch_put(authorization, accept, content_type, x_vault_api_migration_mode, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_migration_mode: When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header.Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>
        :type x_vault_api_migration_mode: bool
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_batch_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_batch_put_with_http_info(authorization, accept, content_type, x_vault_api_migration_mode, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_batch_put_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_migration_mode : Annotated[Optional[StrictBool], Field(description="When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header.Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>")] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Update Multiple Documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_batch_put_with_http_info(authorization, accept, content_type, x_vault_api_migration_mode, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_migration_mode: When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header.Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>
        :type x_vault_api_migration_mode: bool
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_migration_mode',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_batch_put" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_migration_mode'] is not None:
            _header_params['X-VaultAPI-MigrationMode'] = _params['x_vault_api_migration_mode']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/batch', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_doc_id_anchors_get(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Anchor IDs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_anchors_get(doc_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_doc_id_anchors_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_doc_id_anchors_get_with_http_info(doc_id, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_doc_id_anchors_get_with_http_info(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Anchor IDs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_anchors_get_with_http_info(doc_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'doc_id',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_doc_id_anchors_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['doc_id'] is not None:
            _path_params['doc_id'] = _params['doc_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/{doc_id}/anchors', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_doc_id_annotations_file_get(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Export Document Annotations to PDF  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_annotations_file_get(doc_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_doc_id_annotations_file_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_doc_id_annotations_file_get_with_http_info(doc_id, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_doc_id_annotations_file_get_with_http_info(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Export Document Annotations to PDF  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_annotations_file_get_with_http_info(doc_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'doc_id',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_doc_id_annotations_file_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['doc_id'] is not None:
            _path_params['doc_id'] = _params['doc_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/{doc_id}/annotations/file', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_doc_id_annotations_file_post(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Import Document Annotations from PDF  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_annotations_file_post(doc_id, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_doc_id_annotations_file_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_doc_id_annotations_file_post_with_http_info(doc_id, authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_doc_id_annotations_file_post_with_http_info(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Import Document Annotations from PDF  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_annotations_file_post_with_http_info(doc_id, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'doc_id',
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_doc_id_annotations_file_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['doc_id'] is not None:
            _path_params['doc_id'] = _params['doc_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/{doc_id}/annotations/file', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_doc_id_attachments_attachment_id_delete(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], attachment_id : Annotated[StrictStr, Field(..., description="The attachment id field value.")], accept : Optional[StrictStr] = None, authorization : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Delete Single Document Attachment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_attachments_attachment_id_delete(doc_id, attachment_id, accept, authorization, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param attachment_id: The attachment id field value. (required)
        :type attachment_id: str
        :param accept:
        :type accept: str
        :param authorization:
        :type authorization: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_doc_id_attachments_attachment_id_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_doc_id_attachments_attachment_id_delete_with_http_info(doc_id, attachment_id, accept, authorization, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_doc_id_attachments_attachment_id_delete_with_http_info(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], attachment_id : Annotated[StrictStr, Field(..., description="The attachment id field value.")], accept : Optional[StrictStr] = None, authorization : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Delete Single Document Attachment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_attachments_attachment_id_delete_with_http_info(doc_id, attachment_id, accept, authorization, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param attachment_id: The attachment id field value. (required)
        :type attachment_id: str
        :param accept:
        :type accept: str
        :param authorization:
        :type authorization: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'doc_id',
            'attachment_id',
            'accept',
            'authorization',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_doc_id_attachments_attachment_id_delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['doc_id'] is not None:
            _path_params['doc_id'] = _params['doc_id']

        if _params['attachment_id'] is not None:
            _path_params['attachment_id'] = _params['attachment_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/{doc_id}/attachments/{attachment_id}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_doc_id_attachments_attachment_id_file_get(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], attachment_id : Annotated[StrictStr, Field(..., description="The attachment id field value.")], accept : Optional[StrictStr] = None, authorization : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Download Document Attachment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_attachments_attachment_id_file_get(doc_id, attachment_id, accept, authorization, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param attachment_id: The attachment id field value. (required)
        :type attachment_id: str
        :param accept:
        :type accept: str
        :param authorization:
        :type authorization: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_doc_id_attachments_attachment_id_file_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_doc_id_attachments_attachment_id_file_get_with_http_info(doc_id, attachment_id, accept, authorization, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_doc_id_attachments_attachment_id_file_get_with_http_info(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], attachment_id : Annotated[StrictStr, Field(..., description="The attachment id field value.")], accept : Optional[StrictStr] = None, authorization : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Download Document Attachment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_attachments_attachment_id_file_get_with_http_info(doc_id, attachment_id, accept, authorization, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param attachment_id: The attachment id field value. (required)
        :type attachment_id: str
        :param accept:
        :type accept: str
        :param authorization:
        :type authorization: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'doc_id',
            'attachment_id',
            'accept',
            'authorization',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_doc_id_attachments_attachment_id_file_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['doc_id'] is not None:
            _path_params['doc_id'] = _params['doc_id']

        if _params['attachment_id'] is not None:
            _path_params['attachment_id'] = _params['attachment_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/{doc_id}/attachments/{attachment_id}/file', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_doc_id_attachments_attachment_id_get(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], attachment_id : Annotated[StrictStr, Field(..., description="The attachment id field value.")], accept : Optional[StrictStr] = None, authorization : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Document Attachment Metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_attachments_attachment_id_get(doc_id, attachment_id, accept, authorization, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param attachment_id: The attachment id field value. (required)
        :type attachment_id: str
        :param accept:
        :type accept: str
        :param authorization:
        :type authorization: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_doc_id_attachments_attachment_id_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_doc_id_attachments_attachment_id_get_with_http_info(doc_id, attachment_id, accept, authorization, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_doc_id_attachments_attachment_id_get_with_http_info(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], attachment_id : Annotated[StrictStr, Field(..., description="The attachment id field value.")], accept : Optional[StrictStr] = None, authorization : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Document Attachment Metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_attachments_attachment_id_get_with_http_info(doc_id, attachment_id, accept, authorization, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param attachment_id: The attachment id field value. (required)
        :type attachment_id: str
        :param accept:
        :type accept: str
        :param authorization:
        :type authorization: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'doc_id',
            'attachment_id',
            'accept',
            'authorization',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_doc_id_attachments_attachment_id_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['doc_id'] is not None:
            _path_params['doc_id'] = _params['doc_id']

        if _params['attachment_id'] is not None:
            _path_params['attachment_id'] = _params['attachment_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/{doc_id}/attachments/{attachment_id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_doc_id_attachments_attachment_id_put(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], attachment_id : Annotated[StrictStr, Field(..., description="The attachment id field value.")], accept : Optional[StrictStr] = None, authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Update Document Attachment Description  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_attachments_attachment_id_put(doc_id, attachment_id, accept, authorization, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param attachment_id: The attachment id field value. (required)
        :type attachment_id: str
        :param accept:
        :type accept: str
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_doc_id_attachments_attachment_id_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_doc_id_attachments_attachment_id_put_with_http_info(doc_id, attachment_id, accept, authorization, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_doc_id_attachments_attachment_id_put_with_http_info(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], attachment_id : Annotated[StrictStr, Field(..., description="The attachment id field value.")], accept : Optional[StrictStr] = None, authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Update Document Attachment Description  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_attachments_attachment_id_put_with_http_info(doc_id, attachment_id, accept, authorization, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param attachment_id: The attachment id field value. (required)
        :type attachment_id: str
        :param accept:
        :type accept: str
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'doc_id',
            'attachment_id',
            'accept',
            'authorization',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_doc_id_attachments_attachment_id_put" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['doc_id'] is not None:
            _path_params['doc_id'] = _params['doc_id']

        if _params['attachment_id'] is not None:
            _path_params['attachment_id'] = _params['attachment_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/{doc_id}/attachments/{attachment_id}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_delete(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], attachment_id : Annotated[StrictStr, Field(..., description="The attachment id field value.")], attachment_version : Annotated[StrictStr, Field(..., description="The attachment version__v field value.")], accept : Optional[StrictStr] = None, authorization : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Delete Single Document Attachment Version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_delete(doc_id, attachment_id, attachment_version, accept, authorization, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param attachment_id: The attachment id field value. (required)
        :type attachment_id: str
        :param attachment_version: The attachment version__v field value. (required)
        :type attachment_version: str
        :param accept:
        :type accept: str
        :param authorization:
        :type authorization: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_delete_with_http_info(doc_id, attachment_id, attachment_version, accept, authorization, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_delete_with_http_info(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], attachment_id : Annotated[StrictStr, Field(..., description="The attachment id field value.")], attachment_version : Annotated[StrictStr, Field(..., description="The attachment version__v field value.")], accept : Optional[StrictStr] = None, authorization : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Delete Single Document Attachment Version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_delete_with_http_info(doc_id, attachment_id, attachment_version, accept, authorization, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param attachment_id: The attachment id field value. (required)
        :type attachment_id: str
        :param attachment_version: The attachment version__v field value. (required)
        :type attachment_version: str
        :param accept:
        :type accept: str
        :param authorization:
        :type authorization: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'doc_id',
            'attachment_id',
            'attachment_version',
            'accept',
            'authorization',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['doc_id'] is not None:
            _path_params['doc_id'] = _params['doc_id']

        if _params['attachment_id'] is not None:
            _path_params['attachment_id'] = _params['attachment_id']

        if _params['attachment_version'] is not None:
            _path_params['attachment_version'] = _params['attachment_version']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_file_get(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], attachment_id : Annotated[StrictStr, Field(..., description="The attachment id field value.")], attachment_version : Annotated[StrictStr, Field(..., description="The attachment version__v field value.")], accept : Optional[StrictStr] = None, authorization : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Download Document Attachment Version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_file_get(doc_id, attachment_id, attachment_version, accept, authorization, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param attachment_id: The attachment id field value. (required)
        :type attachment_id: str
        :param attachment_version: The attachment version__v field value. (required)
        :type attachment_version: str
        :param accept:
        :type accept: str
        :param authorization:
        :type authorization: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_file_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_file_get_with_http_info(doc_id, attachment_id, attachment_version, accept, authorization, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_file_get_with_http_info(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], attachment_id : Annotated[StrictStr, Field(..., description="The attachment id field value.")], attachment_version : Annotated[StrictStr, Field(..., description="The attachment version__v field value.")], accept : Optional[StrictStr] = None, authorization : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Download Document Attachment Version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_file_get_with_http_info(doc_id, attachment_id, attachment_version, accept, authorization, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param attachment_id: The attachment id field value. (required)
        :type attachment_id: str
        :param attachment_version: The attachment version__v field value. (required)
        :type attachment_version: str
        :param accept:
        :type accept: str
        :param authorization:
        :type authorization: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'doc_id',
            'attachment_id',
            'attachment_version',
            'accept',
            'authorization',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_file_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['doc_id'] is not None:
            _path_params['doc_id'] = _params['doc_id']

        if _params['attachment_id'] is not None:
            _path_params['attachment_id'] = _params['attachment_id']

        if _params['attachment_version'] is not None:
            _path_params['attachment_version'] = _params['attachment_version']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}/file', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_get(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], attachment_id : Annotated[StrictStr, Field(..., description="The attachment id field value.")], attachment_version : Annotated[StrictStr, Field(..., description="The attachment version__v field value.")], accept : Optional[StrictStr] = None, authorization : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Document Attachment Version Metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_get(doc_id, attachment_id, attachment_version, accept, authorization, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param attachment_id: The attachment id field value. (required)
        :type attachment_id: str
        :param attachment_version: The attachment version__v field value. (required)
        :type attachment_version: str
        :param accept:
        :type accept: str
        :param authorization:
        :type authorization: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_get_with_http_info(doc_id, attachment_id, attachment_version, accept, authorization, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_get_with_http_info(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], attachment_id : Annotated[StrictStr, Field(..., description="The attachment id field value.")], attachment_version : Annotated[StrictStr, Field(..., description="The attachment version__v field value.")], accept : Optional[StrictStr] = None, authorization : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Document Attachment Version Metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_get_with_http_info(doc_id, attachment_id, attachment_version, accept, authorization, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param attachment_id: The attachment id field value. (required)
        :type attachment_id: str
        :param attachment_version: The attachment version__v field value. (required)
        :type attachment_version: str
        :param accept:
        :type accept: str
        :param authorization:
        :type authorization: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'doc_id',
            'attachment_id',
            'attachment_version',
            'accept',
            'authorization',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['doc_id'] is not None:
            _path_params['doc_id'] = _params['doc_id']

        if _params['attachment_id'] is not None:
            _path_params['attachment_id'] = _params['attachment_id']

        if _params['attachment_version'] is not None:
            _path_params['attachment_version'] = _params['attachment_version']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_post(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], attachment_id : Annotated[StrictStr, Field(..., description="The attachment id field value.")], attachment_version : Annotated[StrictStr, Field(..., description="The attachment version__v field value.")], restore : Annotated[Optional[StrictBool], Field(description="The parameter restore must be set to true. ")] = None, accept : Optional[StrictStr] = None, authorization : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Restore Document Attachment Version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_post(doc_id, attachment_id, attachment_version, restore, accept, authorization, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param attachment_id: The attachment id field value. (required)
        :type attachment_id: str
        :param attachment_version: The attachment version__v field value. (required)
        :type attachment_version: str
        :param restore: The parameter restore must be set to true. 
        :type restore: bool
        :param accept:
        :type accept: str
        :param authorization:
        :type authorization: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_post_with_http_info(doc_id, attachment_id, attachment_version, restore, accept, authorization, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_post_with_http_info(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], attachment_id : Annotated[StrictStr, Field(..., description="The attachment id field value.")], attachment_version : Annotated[StrictStr, Field(..., description="The attachment version__v field value.")], restore : Annotated[Optional[StrictBool], Field(description="The parameter restore must be set to true. ")] = None, accept : Optional[StrictStr] = None, authorization : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Restore Document Attachment Version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_post_with_http_info(doc_id, attachment_id, attachment_version, restore, accept, authorization, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param attachment_id: The attachment id field value. (required)
        :type attachment_id: str
        :param attachment_version: The attachment version__v field value. (required)
        :type attachment_version: str
        :param restore: The parameter restore must be set to true. 
        :type restore: bool
        :param accept:
        :type accept: str
        :param authorization:
        :type authorization: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'doc_id',
            'attachment_id',
            'attachment_version',
            'restore',
            'accept',
            'authorization',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['doc_id'] is not None:
            _path_params['doc_id'] = _params['doc_id']

        if _params['attachment_id'] is not None:
            _path_params['attachment_id'] = _params['attachment_id']

        if _params['attachment_version'] is not None:
            _path_params['attachment_version'] = _params['attachment_version']


        # process the query parameters
        _query_params = []
        if _params.get('restore') is not None:  # noqa: E501
            _query_params.append(('restore', _params['restore']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_doc_id_attachments_attachment_id_versions_get(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], attachment_id : Annotated[StrictStr, Field(..., description="The attachment id field value.")], accept : Optional[StrictStr] = None, authorization : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Document Attachment Versions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_attachments_attachment_id_versions_get(doc_id, attachment_id, accept, authorization, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param attachment_id: The attachment id field value. (required)
        :type attachment_id: str
        :param accept:
        :type accept: str
        :param authorization:
        :type authorization: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_doc_id_attachments_attachment_id_versions_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_doc_id_attachments_attachment_id_versions_get_with_http_info(doc_id, attachment_id, accept, authorization, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_doc_id_attachments_attachment_id_versions_get_with_http_info(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], attachment_id : Annotated[StrictStr, Field(..., description="The attachment id field value.")], accept : Optional[StrictStr] = None, authorization : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Document Attachment Versions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_attachments_attachment_id_versions_get_with_http_info(doc_id, attachment_id, accept, authorization, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param attachment_id: The attachment id field value. (required)
        :type attachment_id: str
        :param accept:
        :type accept: str
        :param authorization:
        :type authorization: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'doc_id',
            'attachment_id',
            'accept',
            'authorization',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_doc_id_attachments_attachment_id_versions_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['doc_id'] is not None:
            _path_params['doc_id'] = _params['doc_id']

        if _params['attachment_id'] is not None:
            _path_params['attachment_id'] = _params['attachment_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/{doc_id}/attachments/{attachment_id}/versions', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_doc_id_attachments_file_get(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], accept : Optional[StrictStr] = None, authorization : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Download All Document Attachments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_attachments_file_get(doc_id, accept, authorization, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param accept:
        :type accept: str
        :param authorization:
        :type authorization: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_doc_id_attachments_file_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_doc_id_attachments_file_get_with_http_info(doc_id, accept, authorization, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_doc_id_attachments_file_get_with_http_info(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], accept : Optional[StrictStr] = None, authorization : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Download All Document Attachments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_attachments_file_get_with_http_info(doc_id, accept, authorization, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param accept:
        :type accept: str
        :param authorization:
        :type authorization: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'doc_id',
            'accept',
            'authorization',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_doc_id_attachments_file_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['doc_id'] is not None:
            _path_params['doc_id'] = _params['doc_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/{doc_id}/attachments/file', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_doc_id_attachments_get(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], accept : Optional[StrictStr] = None, authorization : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Document Attachments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_attachments_get(doc_id, accept, authorization, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param accept:
        :type accept: str
        :param authorization:
        :type authorization: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_doc_id_attachments_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_doc_id_attachments_get_with_http_info(doc_id, accept, authorization, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_doc_id_attachments_get_with_http_info(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], accept : Optional[StrictStr] = None, authorization : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Document Attachments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_attachments_get_with_http_info(doc_id, accept, authorization, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param accept:
        :type accept: str
        :param authorization:
        :type authorization: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'doc_id',
            'accept',
            'authorization',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_doc_id_attachments_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['doc_id'] is not None:
            _path_params['doc_id'] = _params['doc_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/{doc_id}/attachments', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_doc_id_attachments_post(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], accept : Optional[StrictStr] = None, authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Create Document Attachment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_attachments_post(doc_id, accept, authorization, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param accept:
        :type accept: str
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_doc_id_attachments_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_doc_id_attachments_post_with_http_info(doc_id, accept, authorization, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_doc_id_attachments_post_with_http_info(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], accept : Optional[StrictStr] = None, authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create Document Attachment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_attachments_post_with_http_info(doc_id, accept, authorization, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param accept:
        :type accept: str
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'doc_id',
            'accept',
            'authorization',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_doc_id_attachments_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['doc_id'] is not None:
            _path_params['doc_id'] = _params['doc_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/{doc_id}/attachments', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_doc_id_audittrail_get(self, doc_id : Annotated[StrictStr, Field(..., description="The document ID for which to retrieve audit history.")], start_date : Annotated[Optional[StrictStr], Field(description="Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vault’s creation date. ")] = None, end_date : Annotated[Optional[StrictStr], Field(description="Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date. ")] = None, format_result : Annotated[Optional[StrictStr], Field(description="To request a CSV file of your audit history, use csv. ")] = None, limit : Annotated[Optional[StrictStr], Field(description="Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.")] = None, offset : Annotated[Optional[StrictStr], Field(description="Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51. If omitted, defaults to 0.")] = None, events : Annotated[Optional[StrictStr], Field(description="Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of document audit events. The values passed to this parameter are case sensitive. For example, events=WorkflowCompletion,TaskAssignment. If omitted, defaults to all audit events.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Complete Audit History for a Single Document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_audittrail_get(doc_id, start_date, end_date, format_result, limit, offset, events, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document ID for which to retrieve audit history. (required)
        :type doc_id: str
        :param start_date: Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vault’s creation date. 
        :type start_date: str
        :param end_date: Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date. 
        :type end_date: str
        :param format_result: To request a CSV file of your audit history, use csv. 
        :type format_result: str
        :param limit: Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
        :type limit: str
        :param offset: Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51. If omitted, defaults to 0.
        :type offset: str
        :param events: Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of document audit events. The values passed to this parameter are case sensitive. For example, events=WorkflowCompletion,TaskAssignment. If omitted, defaults to all audit events.
        :type events: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_doc_id_audittrail_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_doc_id_audittrail_get_with_http_info(doc_id, start_date, end_date, format_result, limit, offset, events, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_doc_id_audittrail_get_with_http_info(self, doc_id : Annotated[StrictStr, Field(..., description="The document ID for which to retrieve audit history.")], start_date : Annotated[Optional[StrictStr], Field(description="Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vault’s creation date. ")] = None, end_date : Annotated[Optional[StrictStr], Field(description="Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date. ")] = None, format_result : Annotated[Optional[StrictStr], Field(description="To request a CSV file of your audit history, use csv. ")] = None, limit : Annotated[Optional[StrictStr], Field(description="Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.")] = None, offset : Annotated[Optional[StrictStr], Field(description="Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51. If omitted, defaults to 0.")] = None, events : Annotated[Optional[StrictStr], Field(description="Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of document audit events. The values passed to this parameter are case sensitive. For example, events=WorkflowCompletion,TaskAssignment. If omitted, defaults to all audit events.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Complete Audit History for a Single Document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_audittrail_get_with_http_info(doc_id, start_date, end_date, format_result, limit, offset, events, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document ID for which to retrieve audit history. (required)
        :type doc_id: str
        :param start_date: Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vault’s creation date. 
        :type start_date: str
        :param end_date: Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date. 
        :type end_date: str
        :param format_result: To request a CSV file of your audit history, use csv. 
        :type format_result: str
        :param limit: Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
        :type limit: str
        :param offset: Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51. If omitted, defaults to 0.
        :type offset: str
        :param events: Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of document audit events. The values passed to this parameter are case sensitive. For example, events=WorkflowCompletion,TaskAssignment. If omitted, defaults to all audit events.
        :type events: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'doc_id',
            'start_date',
            'end_date',
            'format_result',
            'limit',
            'offset',
            'events',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_doc_id_audittrail_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['doc_id'] is not None:
            _path_params['doc_id'] = _params['doc_id']


        # process the query parameters
        _query_params = []
        if _params.get('start_date') is not None:  # noqa: E501
            _query_params.append(('start_date', _params['start_date']))

        if _params.get('end_date') is not None:  # noqa: E501
            _query_params.append(('end_date', _params['end_date']))

        if _params.get('format_result') is not None:  # noqa: E501
            _query_params.append(('format_result', _params['format_result']))

        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('offset') is not None:  # noqa: E501
            _query_params.append(('offset', _params['offset']))

        if _params.get('events') is not None:  # noqa: E501
            _query_params.append(('events', _params['events']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/{doc_id}/audittrail', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_doc_id_delete(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Delete Single Document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_delete(doc_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_doc_id_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_doc_id_delete_with_http_info(doc_id, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_doc_id_delete_with_http_info(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Delete Single Document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_delete_with_http_info(doc_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'doc_id',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_doc_id_delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['doc_id'] is not None:
            _path_params['doc_id'] = _params['doc_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/{doc_id}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_doc_id_events_get(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Document Events  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_events_get(doc_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_doc_id_events_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_doc_id_events_get_with_http_info(doc_id, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_doc_id_events_get_with_http_info(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Document Events  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_events_get_with_http_info(doc_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'doc_id',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_doc_id_events_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['doc_id'] is not None:
            _path_params['doc_id'] = _params['doc_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/{doc_id}/events', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_doc_id_file_get(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], lock_document : Annotated[Optional[StrictBool], Field(description="Set to true to Check Out this document before retrieval. If omitted, defaults to false.")] = None, accept : Optional[StrictStr] = None, authorization : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Download Document File  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_file_get(doc_id, lock_document, accept, authorization, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param lock_document: Set to true to Check Out this document before retrieval. If omitted, defaults to false.
        :type lock_document: bool
        :param accept:
        :type accept: str
        :param authorization:
        :type authorization: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_doc_id_file_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_doc_id_file_get_with_http_info(doc_id, lock_document, accept, authorization, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_doc_id_file_get_with_http_info(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], lock_document : Annotated[Optional[StrictBool], Field(description="Set to true to Check Out this document before retrieval. If omitted, defaults to false.")] = None, accept : Optional[StrictStr] = None, authorization : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Download Document File  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_file_get_with_http_info(doc_id, lock_document, accept, authorization, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param lock_document: Set to true to Check Out this document before retrieval. If omitted, defaults to false.
        :type lock_document: bool
        :param accept:
        :type accept: str
        :param authorization:
        :type authorization: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'doc_id',
            'lock_document',
            'accept',
            'authorization',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_doc_id_file_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['doc_id'] is not None:
            _path_params['doc_id'] = _params['doc_id']


        # process the query parameters
        _query_params = []
        if _params.get('lock_document') is not None:  # noqa: E501
            _query_params.append(('lockDocument', _params['lock_document']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/{doc_id}/file', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_doc_id_get(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_get(doc_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_doc_id_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_doc_id_get_with_http_info(doc_id, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_doc_id_get_with_http_info(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_get_with_http_info(doc_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'doc_id',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_doc_id_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['doc_id'] is not None:
            _path_params['doc_id'] = _params['doc_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/{doc_id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_doc_id_lock_delete(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Delete Document Lock  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_lock_delete(doc_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_doc_id_lock_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_doc_id_lock_delete_with_http_info(doc_id, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_doc_id_lock_delete_with_http_info(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Delete Document Lock  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_lock_delete_with_http_info(doc_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'doc_id',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_doc_id_lock_delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['doc_id'] is not None:
            _path_params['doc_id'] = _params['doc_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/{doc_id}/lock', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_doc_id_lock_get(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Document Lock  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_lock_get(doc_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_doc_id_lock_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_doc_id_lock_get_with_http_info(doc_id, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_doc_id_lock_get_with_http_info(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Document Lock  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_lock_get_with_http_info(doc_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'doc_id',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_doc_id_lock_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['doc_id'] is not None:
            _path_params['doc_id'] = _params['doc_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/{doc_id}/lock', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_doc_id_lock_post(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Create Document Lock  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_lock_post(doc_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_doc_id_lock_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_doc_id_lock_post_with_http_info(doc_id, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_doc_id_lock_post_with_http_info(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create Document Lock  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_lock_post_with_http_info(doc_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'doc_id',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_doc_id_lock_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['doc_id'] is not None:
            _path_params['doc_id'] = _params['doc_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/{doc_id}/lock', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_doc_id_major_version_minor_version_attachments_file_get(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], major_version : Annotated[StrictStr, Field(..., description="The document major_version_number__v field value.")], minor_version : Annotated[StrictStr, Field(..., description="The document minor_version_number__v field value.")], accept : Optional[StrictStr] = None, authorization : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Download All Document Version Attachments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_major_version_minor_version_attachments_file_get(doc_id, major_version, minor_version, accept, authorization, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param major_version: The document major_version_number__v field value. (required)
        :type major_version: str
        :param minor_version: The document minor_version_number__v field value. (required)
        :type minor_version: str
        :param accept:
        :type accept: str
        :param authorization:
        :type authorization: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_doc_id_major_version_minor_version_attachments_file_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_doc_id_major_version_minor_version_attachments_file_get_with_http_info(doc_id, major_version, minor_version, accept, authorization, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_doc_id_major_version_minor_version_attachments_file_get_with_http_info(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], major_version : Annotated[StrictStr, Field(..., description="The document major_version_number__v field value.")], minor_version : Annotated[StrictStr, Field(..., description="The document minor_version_number__v field value.")], accept : Optional[StrictStr] = None, authorization : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Download All Document Version Attachments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_major_version_minor_version_attachments_file_get_with_http_info(doc_id, major_version, minor_version, accept, authorization, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param major_version: The document major_version_number__v field value. (required)
        :type major_version: str
        :param minor_version: The document minor_version_number__v field value. (required)
        :type minor_version: str
        :param accept:
        :type accept: str
        :param authorization:
        :type authorization: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'doc_id',
            'major_version',
            'minor_version',
            'accept',
            'authorization',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_doc_id_major_version_minor_version_attachments_file_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['doc_id'] is not None:
            _path_params['doc_id'] = _params['doc_id']

        if _params['major_version'] is not None:
            _path_params['major_version'] = _params['major_version']

        if _params['minor_version'] is not None:
            _path_params['minor_version'] = _params['minor_version']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/{doc_id}/{major_version}/{minor_version}/attachments/file', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_doc_id_post(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], suppress_rendition : Annotated[Optional[StrictStr], Field(description="Set to true to suppress automatic generation of the viewable rendition. If omitted, defaults to false")] = None, authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Create Single Document Version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_post(doc_id, suppress_rendition, authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param suppress_rendition: Set to true to suppress automatic generation of the viewable rendition. If omitted, defaults to false
        :type suppress_rendition: str
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_doc_id_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_doc_id_post_with_http_info(doc_id, suppress_rendition, authorization, content_type, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_doc_id_post_with_http_info(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], suppress_rendition : Annotated[Optional[StrictStr], Field(description="Set to true to suppress automatic generation of the viewable rendition. If omitted, defaults to false")] = None, authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create Single Document Version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_post_with_http_info(doc_id, suppress_rendition, authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param suppress_rendition: Set to true to suppress automatic generation of the viewable rendition. If omitted, defaults to false
        :type suppress_rendition: str
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'doc_id',
            'suppress_rendition',
            'authorization',
            'content_type',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_doc_id_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['doc_id'] is not None:
            _path_params['doc_id'] = _params['doc_id']


        # process the query parameters
        _query_params = []
        if _params.get('suppress_rendition') is not None:  # noqa: E501
            _query_params.append(('suppressRendition', _params['suppress_rendition']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/{doc_id}', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_doc_id_put(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_migration_mode : Annotated[Optional[StrictBool], Field(description="When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>")] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Update Single Document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_put(doc_id, authorization, content_type, accept, x_vault_api_migration_mode, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_migration_mode: When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>
        :type x_vault_api_migration_mode: bool
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_doc_id_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_doc_id_put_with_http_info(doc_id, authorization, content_type, accept, x_vault_api_migration_mode, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_doc_id_put_with_http_info(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_migration_mode : Annotated[Optional[StrictBool], Field(description="When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>")] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Update Single Document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_put_with_http_info(doc_id, authorization, content_type, accept, x_vault_api_migration_mode, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_migration_mode: When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>
        :type x_vault_api_migration_mode: bool
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'doc_id',
            'authorization',
            'content_type',
            'accept',
            'x_vault_api_migration_mode',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_doc_id_put" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['doc_id'] is not None:
            _path_params['doc_id'] = _params['doc_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_migration_mode'] is not None:
            _header_params['X-VaultAPI-MigrationMode'] = _params['x_vault_api_migration_mode']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/{doc_id}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_doc_id_renditions_get(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Document Renditions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_renditions_get(doc_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_doc_id_renditions_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_doc_id_renditions_get_with_http_info(doc_id, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_doc_id_renditions_get_with_http_info(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Document Renditions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_renditions_get_with_http_info(doc_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'doc_id',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_doc_id_renditions_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['doc_id'] is not None:
            _path_params['doc_id'] = _params['doc_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/{doc_id}/renditions', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_doc_id_renditions_rendition_type_delete(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], rendition_type : Annotated[StrictStr, Field(..., description="The document rendition type.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Delete Single Document Rendition  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_renditions_rendition_type_delete(doc_id, rendition_type, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param rendition_type: The document rendition type. (required)
        :type rendition_type: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_doc_id_renditions_rendition_type_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_doc_id_renditions_rendition_type_delete_with_http_info(doc_id, rendition_type, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_doc_id_renditions_rendition_type_delete_with_http_info(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], rendition_type : Annotated[StrictStr, Field(..., description="The document rendition type.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Delete Single Document Rendition  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_renditions_rendition_type_delete_with_http_info(doc_id, rendition_type, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param rendition_type: The document rendition type. (required)
        :type rendition_type: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'doc_id',
            'rendition_type',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_doc_id_renditions_rendition_type_delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['doc_id'] is not None:
            _path_params['doc_id'] = _params['doc_id']

        if _params['rendition_type'] is not None:
            _path_params['rendition_type'] = _params['rendition_type']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/{doc_id}/renditions/{rendition_type}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_doc_id_renditions_rendition_type_get(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], rendition_type : Annotated[StrictStr, Field(..., description="The document rendition type.")], steady_state : Annotated[Optional[StrictStr], Field(description="Set to true to download a rendition (file) from the latest steady state version (1.0, 2.0, etc.) of a document. ")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Download Document Rendition File  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_renditions_rendition_type_get(doc_id, rendition_type, steady_state, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param rendition_type: The document rendition type. (required)
        :type rendition_type: str
        :param steady_state: Set to true to download a rendition (file) from the latest steady state version (1.0, 2.0, etc.) of a document. 
        :type steady_state: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_doc_id_renditions_rendition_type_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_doc_id_renditions_rendition_type_get_with_http_info(doc_id, rendition_type, steady_state, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_doc_id_renditions_rendition_type_get_with_http_info(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], rendition_type : Annotated[StrictStr, Field(..., description="The document rendition type.")], steady_state : Annotated[Optional[StrictStr], Field(description="Set to true to download a rendition (file) from the latest steady state version (1.0, 2.0, etc.) of a document. ")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Download Document Rendition File  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_renditions_rendition_type_get_with_http_info(doc_id, rendition_type, steady_state, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param rendition_type: The document rendition type. (required)
        :type rendition_type: str
        :param steady_state: Set to true to download a rendition (file) from the latest steady state version (1.0, 2.0, etc.) of a document. 
        :type steady_state: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'doc_id',
            'rendition_type',
            'steady_state',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_doc_id_renditions_rendition_type_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['doc_id'] is not None:
            _path_params['doc_id'] = _params['doc_id']

        if _params['rendition_type'] is not None:
            _path_params['rendition_type'] = _params['rendition_type']


        # process the query parameters
        _query_params = []
        if _params.get('steady_state') is not None:  # noqa: E501
            _query_params.append(('steadyState', _params['steady_state']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/{doc_id}/renditions/{rendition_type}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_doc_id_renditions_rendition_type_post(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], rendition_type : Annotated[StrictStr, Field(..., description="The document rendition type.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Add Single Document Rendition  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_renditions_rendition_type_post(doc_id, rendition_type, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param rendition_type: The document rendition type. (required)
        :type rendition_type: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_doc_id_renditions_rendition_type_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_doc_id_renditions_rendition_type_post_with_http_info(doc_id, rendition_type, authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_doc_id_renditions_rendition_type_post_with_http_info(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], rendition_type : Annotated[StrictStr, Field(..., description="The document rendition type.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Add Single Document Rendition  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_renditions_rendition_type_post_with_http_info(doc_id, rendition_type, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param rendition_type: The document rendition type. (required)
        :type rendition_type: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'doc_id',
            'rendition_type',
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_doc_id_renditions_rendition_type_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['doc_id'] is not None:
            _path_params['doc_id'] = _params['doc_id']

        if _params['rendition_type'] is not None:
            _path_params['rendition_type'] = _params['rendition_type']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/{doc_id}/renditions/{rendition_type}', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_doc_id_renditions_rendition_type_put(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], rendition_type : Annotated[StrictStr, Field(..., description="The document rendition type.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Replace Document Rendition  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_renditions_rendition_type_put(doc_id, rendition_type, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param rendition_type: The document rendition type. (required)
        :type rendition_type: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_doc_id_renditions_rendition_type_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_doc_id_renditions_rendition_type_put_with_http_info(doc_id, rendition_type, authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_doc_id_renditions_rendition_type_put_with_http_info(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], rendition_type : Annotated[StrictStr, Field(..., description="The document rendition type.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Replace Document Rendition  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_renditions_rendition_type_put_with_http_info(doc_id, rendition_type, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param rendition_type: The document rendition type. (required)
        :type rendition_type: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'doc_id',
            'rendition_type',
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_doc_id_renditions_rendition_type_put" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['doc_id'] is not None:
            _path_params['doc_id'] = _params['doc_id']

        if _params['rendition_type'] is not None:
            _path_params['rendition_type'] = _params['rendition_type']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/{doc_id}/renditions/{rendition_type}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_doc_id_roles_role_name_and_user_or_group_id_delete(self, doc_id : Annotated[StrictStr, Field(..., description="The id value of the document from which to remove roles.")], role_name_and_user_or_group : Annotated[StrictStr, Field(..., description="The name of the role from which to remove the user or group followed by either `user` or `group`. The format is `{role_name}.{user_or_group}`. For example, `consumer__v.user`.")], id : Annotated[StrictStr, Field(..., description="The id value of the user or group to remove from the role.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Remove Users & Groups from Roles on a Single Document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_roles_role_name_and_user_or_group_id_delete(doc_id, role_name_and_user_or_group, id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The id value of the document from which to remove roles. (required)
        :type doc_id: str
        :param role_name_and_user_or_group: The name of the role from which to remove the user or group followed by either `user` or `group`. The format is `{role_name}.{user_or_group}`. For example, `consumer__v.user`. (required)
        :type role_name_and_user_or_group: str
        :param id: The id value of the user or group to remove from the role. (required)
        :type id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_doc_id_roles_role_name_and_user_or_group_id_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_doc_id_roles_role_name_and_user_or_group_id_delete_with_http_info(doc_id, role_name_and_user_or_group, id, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_doc_id_roles_role_name_and_user_or_group_id_delete_with_http_info(self, doc_id : Annotated[StrictStr, Field(..., description="The id value of the document from which to remove roles.")], role_name_and_user_or_group : Annotated[StrictStr, Field(..., description="The name of the role from which to remove the user or group followed by either `user` or `group`. The format is `{role_name}.{user_or_group}`. For example, `consumer__v.user`.")], id : Annotated[StrictStr, Field(..., description="The id value of the user or group to remove from the role.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Remove Users & Groups from Roles on a Single Document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_roles_role_name_and_user_or_group_id_delete_with_http_info(doc_id, role_name_and_user_or_group, id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The id value of the document from which to remove roles. (required)
        :type doc_id: str
        :param role_name_and_user_or_group: The name of the role from which to remove the user or group followed by either `user` or `group`. The format is `{role_name}.{user_or_group}`. For example, `consumer__v.user`. (required)
        :type role_name_and_user_or_group: str
        :param id: The id value of the user or group to remove from the role. (required)
        :type id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'doc_id',
            'role_name_and_user_or_group',
            'id',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_doc_id_roles_role_name_and_user_or_group_id_delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['doc_id'] is not None:
            _path_params['doc_id'] = _params['doc_id']

        if _params['role_name_and_user_or_group'] is not None:
            _path_params['role_name_and_user_or_group'] = _params['role_name_and_user_or_group']

        if _params['id'] is not None:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/{doc_id}/roles/{role_name_and_user_or_group}/{id}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_doc_id_version_major_version_minor_version_attachments_get(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], major_version : Annotated[StrictStr, Field(..., description="The document major_version_number__v field value.")], minor_version : Annotated[StrictStr, Field(..., description="The document minor_version_number__v field value.")], accept : Optional[StrictStr] = None, authorization : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Document Version Attachments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_version_major_version_minor_version_attachments_get(doc_id, major_version, minor_version, accept, authorization, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param major_version: The document major_version_number__v field value. (required)
        :type major_version: str
        :param minor_version: The document minor_version_number__v field value. (required)
        :type minor_version: str
        :param accept:
        :type accept: str
        :param authorization:
        :type authorization: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_doc_id_version_major_version_minor_version_attachments_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_doc_id_version_major_version_minor_version_attachments_get_with_http_info(doc_id, major_version, minor_version, accept, authorization, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_doc_id_version_major_version_minor_version_attachments_get_with_http_info(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], major_version : Annotated[StrictStr, Field(..., description="The document major_version_number__v field value.")], minor_version : Annotated[StrictStr, Field(..., description="The document minor_version_number__v field value.")], accept : Optional[StrictStr] = None, authorization : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Document Version Attachments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_version_major_version_minor_version_attachments_get_with_http_info(doc_id, major_version, minor_version, accept, authorization, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param major_version: The document major_version_number__v field value. (required)
        :type major_version: str
        :param minor_version: The document minor_version_number__v field value. (required)
        :type minor_version: str
        :param accept:
        :type accept: str
        :param authorization:
        :type authorization: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'doc_id',
            'major_version',
            'minor_version',
            'accept',
            'authorization',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_doc_id_version_major_version_minor_version_attachments_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['doc_id'] is not None:
            _path_params['doc_id'] = _params['doc_id']

        if _params['major_version'] is not None:
            _path_params['major_version'] = _params['major_version']

        if _params['minor_version'] is not None:
            _path_params['minor_version'] = _params['minor_version']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/{doc_id}/version/{major_version}/{minor_version}/attachments', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_doc_id_versions_get(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Document Versions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_versions_get(doc_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_doc_id_versions_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_doc_id_versions_get_with_http_info(doc_id, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_doc_id_versions_get_with_http_info(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Document Versions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_versions_get_with_http_info(doc_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'doc_id',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_doc_id_versions_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['doc_id'] is not None:
            _path_params['doc_id'] = _params['doc_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/{doc_id}/versions', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_get(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], major_version : Annotated[StrictStr, Field(..., description="The document major_version_number__v field value.")], minor_version : Annotated[StrictStr, Field(..., description="The document minor_version_number__v field value.")], annotation_id : Annotated[StrictStr, Field(..., description="The annotation ID, which can be retrieved with Read Annotations by Document Version and Type.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Read Annotations by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_get(doc_id, major_version, minor_version, annotation_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param major_version: The document major_version_number__v field value. (required)
        :type major_version: str
        :param minor_version: The document minor_version_number__v field value. (required)
        :type minor_version: str
        :param annotation_id: The annotation ID, which can be retrieved with Read Annotations by Document Version and Type. (required)
        :type annotation_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_get_with_http_info(doc_id, major_version, minor_version, annotation_id, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_get_with_http_info(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], major_version : Annotated[StrictStr, Field(..., description="The document major_version_number__v field value.")], minor_version : Annotated[StrictStr, Field(..., description="The document minor_version_number__v field value.")], annotation_id : Annotated[StrictStr, Field(..., description="The annotation ID, which can be retrieved with Read Annotations by Document Version and Type.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Read Annotations by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_get_with_http_info(doc_id, major_version, minor_version, annotation_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param major_version: The document major_version_number__v field value. (required)
        :type major_version: str
        :param minor_version: The document minor_version_number__v field value. (required)
        :type minor_version: str
        :param annotation_id: The annotation ID, which can be retrieved with Read Annotations by Document Version and Type. (required)
        :type annotation_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'doc_id',
            'major_version',
            'minor_version',
            'annotation_id',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['doc_id'] is not None:
            _path_params['doc_id'] = _params['doc_id']

        if _params['major_version'] is not None:
            _path_params['major_version'] = _params['major_version']

        if _params['minor_version'] is not None:
            _path_params['minor_version'] = _params['minor_version']

        if _params['annotation_id'] is not None:
            _path_params['annotation_id'] = _params['annotation_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/{annotation_id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_replies_get(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], major_version : Annotated[StrictStr, Field(..., description="The document major_version_number__v field value.")], minor_version : Annotated[StrictStr, Field(..., description="The document minor_version_number__v field value.")], annotation_id : Annotated[StrictStr, Field(..., description="The parent annotation ID, which can be retrieved with Read Annotations by Document Version and Type.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Read Replies of Parent Annotation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_replies_get(doc_id, major_version, minor_version, annotation_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param major_version: The document major_version_number__v field value. (required)
        :type major_version: str
        :param minor_version: The document minor_version_number__v field value. (required)
        :type minor_version: str
        :param annotation_id: The parent annotation ID, which can be retrieved with Read Annotations by Document Version and Type. (required)
        :type annotation_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_replies_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_replies_get_with_http_info(doc_id, major_version, minor_version, annotation_id, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_replies_get_with_http_info(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], major_version : Annotated[StrictStr, Field(..., description="The document major_version_number__v field value.")], minor_version : Annotated[StrictStr, Field(..., description="The document minor_version_number__v field value.")], annotation_id : Annotated[StrictStr, Field(..., description="The parent annotation ID, which can be retrieved with Read Annotations by Document Version and Type.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Read Replies of Parent Annotation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_replies_get_with_http_info(doc_id, major_version, minor_version, annotation_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param major_version: The document major_version_number__v field value. (required)
        :type major_version: str
        :param minor_version: The document minor_version_number__v field value. (required)
        :type minor_version: str
        :param annotation_id: The parent annotation ID, which can be retrieved with Read Annotations by Document Version and Type. (required)
        :type annotation_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'doc_id',
            'major_version',
            'minor_version',
            'annotation_id',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_replies_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['doc_id'] is not None:
            _path_params['doc_id'] = _params['doc_id']

        if _params['major_version'] is not None:
            _path_params['major_version'] = _params['major_version']

        if _params['minor_version'] is not None:
            _path_params['minor_version'] = _params['minor_version']

        if _params['annotation_id'] is not None:
            _path_params['annotation_id'] = _params['annotation_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/{annotation_id}/replies', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_doc_id_versions_major_version_minor_version_annotations_file_get(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], major_version : Annotated[StrictStr, Field(..., description="The document major_version_number__v field value.")], minor_version : Annotated[StrictStr, Field(..., description="The document minor_version_number__v field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Export Document Version Annotations to PDF  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_versions_major_version_minor_version_annotations_file_get(doc_id, major_version, minor_version, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param major_version: The document major_version_number__v field value. (required)
        :type major_version: str
        :param minor_version: The document minor_version_number__v field value. (required)
        :type minor_version: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_doc_id_versions_major_version_minor_version_annotations_file_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_doc_id_versions_major_version_minor_version_annotations_file_get_with_http_info(doc_id, major_version, minor_version, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_doc_id_versions_major_version_minor_version_annotations_file_get_with_http_info(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], major_version : Annotated[StrictStr, Field(..., description="The document major_version_number__v field value.")], minor_version : Annotated[StrictStr, Field(..., description="The document minor_version_number__v field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Export Document Version Annotations to PDF  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_versions_major_version_minor_version_annotations_file_get_with_http_info(doc_id, major_version, minor_version, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param major_version: The document major_version_number__v field value. (required)
        :type major_version: str
        :param minor_version: The document minor_version_number__v field value. (required)
        :type minor_version: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'doc_id',
            'major_version',
            'minor_version',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_doc_id_versions_major_version_minor_version_annotations_file_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['doc_id'] is not None:
            _path_params['doc_id'] = _params['doc_id']

        if _params['major_version'] is not None:
            _path_params['major_version'] = _params['major_version']

        if _params['minor_version'] is not None:
            _path_params['minor_version'] = _params['minor_version']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/file', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_doc_id_versions_major_version_minor_version_annotations_file_post(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], major_version : Annotated[StrictStr, Field(..., description="The document major_version_number__v field value.")], minor_version : Annotated[StrictStr, Field(..., description="The document minor_version_number__v field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Import Document Version Annotations from PDF  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_versions_major_version_minor_version_annotations_file_post(doc_id, major_version, minor_version, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param major_version: The document major_version_number__v field value. (required)
        :type major_version: str
        :param minor_version: The document minor_version_number__v field value. (required)
        :type minor_version: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_doc_id_versions_major_version_minor_version_annotations_file_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_doc_id_versions_major_version_minor_version_annotations_file_post_with_http_info(doc_id, major_version, minor_version, authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_doc_id_versions_major_version_minor_version_annotations_file_post_with_http_info(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], major_version : Annotated[StrictStr, Field(..., description="The document major_version_number__v field value.")], minor_version : Annotated[StrictStr, Field(..., description="The document minor_version_number__v field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Import Document Version Annotations from PDF  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_versions_major_version_minor_version_annotations_file_post_with_http_info(doc_id, major_version, minor_version, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param major_version: The document major_version_number__v field value. (required)
        :type major_version: str
        :param minor_version: The document minor_version_number__v field value. (required)
        :type minor_version: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'doc_id',
            'major_version',
            'minor_version',
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_doc_id_versions_major_version_minor_version_annotations_file_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['doc_id'] is not None:
            _path_params['doc_id'] = _params['doc_id']

        if _params['major_version'] is not None:
            _path_params['major_version'] = _params['major_version']

        if _params['minor_version'] is not None:
            _path_params['minor_version'] = _params['minor_version']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/file', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_doc_id_versions_major_version_minor_version_annotations_get(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], major_version : Annotated[StrictStr, Field(..., description="The document major_version_number__v field value.")], minor_version : Annotated[StrictStr, Field(..., description="The document minor_version_number__v field value.")], limit : Annotated[Optional[StrictStr], Field(description="Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 500. If omitted, defaults to 500. Values greater than 500 are ignored.")] = None, offset : Annotated[Optional[StrictStr], Field(description="This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to offset=201.")] = None, annotation_types : Annotated[Optional[StrictStr], Field(description="The type(s) of annotations to retrieve. For example, note__sys,anchor__sys. If omitted, Vault returns all annotations. Valid annotation types include: `note__sys` `line__sys` `document_link__sys` `permalink_link__sys` `anchor__sys` `reply__sys` `external_link__sys`  The following annotation types are only valid in PromoMats Vaults:  `suggested_link__sys` `approved_link__sys` `auto_link__sys` `keyword_link__sys` ")] = None, pagination_id : Annotated[Optional[StrictStr], Field(description="A unique identifier used to load requests with paginated results.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Read Annotations by Document Version and Type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_versions_major_version_minor_version_annotations_get(doc_id, major_version, minor_version, limit, offset, annotation_types, pagination_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param major_version: The document major_version_number__v field value. (required)
        :type major_version: str
        :param minor_version: The document minor_version_number__v field value. (required)
        :type minor_version: str
        :param limit: Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 500. If omitted, defaults to 500. Values greater than 500 are ignored.
        :type limit: str
        :param offset: This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to offset=201.
        :type offset: str
        :param annotation_types: The type(s) of annotations to retrieve. For example, note__sys,anchor__sys. If omitted, Vault returns all annotations. Valid annotation types include: `note__sys` `line__sys` `document_link__sys` `permalink_link__sys` `anchor__sys` `reply__sys` `external_link__sys`  The following annotation types are only valid in PromoMats Vaults:  `suggested_link__sys` `approved_link__sys` `auto_link__sys` `keyword_link__sys` 
        :type annotation_types: str
        :param pagination_id: A unique identifier used to load requests with paginated results.
        :type pagination_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_doc_id_versions_major_version_minor_version_annotations_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_doc_id_versions_major_version_minor_version_annotations_get_with_http_info(doc_id, major_version, minor_version, limit, offset, annotation_types, pagination_id, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_doc_id_versions_major_version_minor_version_annotations_get_with_http_info(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], major_version : Annotated[StrictStr, Field(..., description="The document major_version_number__v field value.")], minor_version : Annotated[StrictStr, Field(..., description="The document minor_version_number__v field value.")], limit : Annotated[Optional[StrictStr], Field(description="Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 500. If omitted, defaults to 500. Values greater than 500 are ignored.")] = None, offset : Annotated[Optional[StrictStr], Field(description="This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to offset=201.")] = None, annotation_types : Annotated[Optional[StrictStr], Field(description="The type(s) of annotations to retrieve. For example, note__sys,anchor__sys. If omitted, Vault returns all annotations. Valid annotation types include: `note__sys` `line__sys` `document_link__sys` `permalink_link__sys` `anchor__sys` `reply__sys` `external_link__sys`  The following annotation types are only valid in PromoMats Vaults:  `suggested_link__sys` `approved_link__sys` `auto_link__sys` `keyword_link__sys` ")] = None, pagination_id : Annotated[Optional[StrictStr], Field(description="A unique identifier used to load requests with paginated results.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Read Annotations by Document Version and Type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_versions_major_version_minor_version_annotations_get_with_http_info(doc_id, major_version, minor_version, limit, offset, annotation_types, pagination_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param major_version: The document major_version_number__v field value. (required)
        :type major_version: str
        :param minor_version: The document minor_version_number__v field value. (required)
        :type minor_version: str
        :param limit: Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 500. If omitted, defaults to 500. Values greater than 500 are ignored.
        :type limit: str
        :param offset: This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to offset=201.
        :type offset: str
        :param annotation_types: The type(s) of annotations to retrieve. For example, note__sys,anchor__sys. If omitted, Vault returns all annotations. Valid annotation types include: `note__sys` `line__sys` `document_link__sys` `permalink_link__sys` `anchor__sys` `reply__sys` `external_link__sys`  The following annotation types are only valid in PromoMats Vaults:  `suggested_link__sys` `approved_link__sys` `auto_link__sys` `keyword_link__sys` 
        :type annotation_types: str
        :param pagination_id: A unique identifier used to load requests with paginated results.
        :type pagination_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'doc_id',
            'major_version',
            'minor_version',
            'limit',
            'offset',
            'annotation_types',
            'pagination_id',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_doc_id_versions_major_version_minor_version_annotations_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['doc_id'] is not None:
            _path_params['doc_id'] = _params['doc_id']

        if _params['major_version'] is not None:
            _path_params['major_version'] = _params['major_version']

        if _params['minor_version'] is not None:
            _path_params['minor_version'] = _params['minor_version']


        # process the query parameters
        _query_params = []
        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('offset') is not None:  # noqa: E501
            _query_params.append(('offset', _params['offset']))

        if _params.get('annotation_types') is not None:  # noqa: E501
            _query_params.append(('annotation_types', _params['annotation_types']))

        if _params.get('pagination_id') is not None:  # noqa: E501
            _query_params.append(('pagination_id', _params['pagination_id']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_file_get(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], major_version : Annotated[StrictStr, Field(..., description="The document major_version_number__v field value.")], minor_version : Annotated[StrictStr, Field(..., description="The document minor_version_number__v field value.")], attachment_id : Annotated[StrictStr, Field(..., description="The id field value of the attachment.")], attachment_version : Annotated[StrictStr, Field(..., description="The version of the attachment.")], accept : Optional[StrictStr] = None, authorization : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Download Document Version Attachment Version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_file_get(doc_id, major_version, minor_version, attachment_id, attachment_version, accept, authorization, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param major_version: The document major_version_number__v field value. (required)
        :type major_version: str
        :param minor_version: The document minor_version_number__v field value. (required)
        :type minor_version: str
        :param attachment_id: The id field value of the attachment. (required)
        :type attachment_id: str
        :param attachment_version: The version of the attachment. (required)
        :type attachment_version: str
        :param accept:
        :type accept: str
        :param authorization:
        :type authorization: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_file_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_file_get_with_http_info(doc_id, major_version, minor_version, attachment_id, attachment_version, accept, authorization, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_file_get_with_http_info(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], major_version : Annotated[StrictStr, Field(..., description="The document major_version_number__v field value.")], minor_version : Annotated[StrictStr, Field(..., description="The document minor_version_number__v field value.")], attachment_id : Annotated[StrictStr, Field(..., description="The id field value of the attachment.")], attachment_version : Annotated[StrictStr, Field(..., description="The version of the attachment.")], accept : Optional[StrictStr] = None, authorization : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Download Document Version Attachment Version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_file_get_with_http_info(doc_id, major_version, minor_version, attachment_id, attachment_version, accept, authorization, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param major_version: The document major_version_number__v field value. (required)
        :type major_version: str
        :param minor_version: The document minor_version_number__v field value. (required)
        :type minor_version: str
        :param attachment_id: The id field value of the attachment. (required)
        :type attachment_id: str
        :param attachment_version: The version of the attachment. (required)
        :type attachment_version: str
        :param accept:
        :type accept: str
        :param authorization:
        :type authorization: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'doc_id',
            'major_version',
            'minor_version',
            'attachment_id',
            'attachment_version',
            'accept',
            'authorization',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_file_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['doc_id'] is not None:
            _path_params['doc_id'] = _params['doc_id']

        if _params['major_version'] is not None:
            _path_params['major_version'] = _params['major_version']

        if _params['minor_version'] is not None:
            _path_params['minor_version'] = _params['minor_version']

        if _params['attachment_id'] is not None:
            _path_params['attachment_id'] = _params['attachment_id']

        if _params['attachment_version'] is not None:
            _path_params['attachment_version'] = _params['attachment_version']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/attachments/{attachment_id}/versions/{attachment_version}/file', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_get(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], major_version : Annotated[StrictStr, Field(..., description="The document major_version_number__v field value.")], minor_version : Annotated[StrictStr, Field(..., description="The document minor_version_number__v field value.")], attachment_id : Annotated[StrictStr, Field(..., description="The id of the document attachment to retrieve.")], attachment_version : Annotated[StrictStr, Field(..., description="Optional: The version of the attachment to retrieve. If omitted, the endpoint retrieves all versions of the specified attachment.")], accept : Optional[StrictStr] = None, authorization : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Document Version Attachment Versions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_get(doc_id, major_version, minor_version, attachment_id, attachment_version, accept, authorization, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param major_version: The document major_version_number__v field value. (required)
        :type major_version: str
        :param minor_version: The document minor_version_number__v field value. (required)
        :type minor_version: str
        :param attachment_id: The id of the document attachment to retrieve. (required)
        :type attachment_id: str
        :param attachment_version: Optional: The version of the attachment to retrieve. If omitted, the endpoint retrieves all versions of the specified attachment. (required)
        :type attachment_version: str
        :param accept:
        :type accept: str
        :param authorization:
        :type authorization: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_get_with_http_info(doc_id, major_version, minor_version, attachment_id, attachment_version, accept, authorization, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_get_with_http_info(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], major_version : Annotated[StrictStr, Field(..., description="The document major_version_number__v field value.")], minor_version : Annotated[StrictStr, Field(..., description="The document minor_version_number__v field value.")], attachment_id : Annotated[StrictStr, Field(..., description="The id of the document attachment to retrieve.")], attachment_version : Annotated[StrictStr, Field(..., description="Optional: The version of the attachment to retrieve. If omitted, the endpoint retrieves all versions of the specified attachment.")], accept : Optional[StrictStr] = None, authorization : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Document Version Attachment Versions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_get_with_http_info(doc_id, major_version, minor_version, attachment_id, attachment_version, accept, authorization, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param major_version: The document major_version_number__v field value. (required)
        :type major_version: str
        :param minor_version: The document minor_version_number__v field value. (required)
        :type minor_version: str
        :param attachment_id: The id of the document attachment to retrieve. (required)
        :type attachment_id: str
        :param attachment_version: Optional: The version of the attachment to retrieve. If omitted, the endpoint retrieves all versions of the specified attachment. (required)
        :type attachment_version: str
        :param accept:
        :type accept: str
        :param authorization:
        :type authorization: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'doc_id',
            'major_version',
            'minor_version',
            'attachment_id',
            'attachment_version',
            'accept',
            'authorization',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['doc_id'] is not None:
            _path_params['doc_id'] = _params['doc_id']

        if _params['major_version'] is not None:
            _path_params['major_version'] = _params['major_version']

        if _params['minor_version'] is not None:
            _path_params['minor_version'] = _params['minor_version']

        if _params['attachment_id'] is not None:
            _path_params['attachment_id'] = _params['attachment_id']

        if _params['attachment_version'] is not None:
            _path_params['attachment_version'] = _params['attachment_version']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/attachments/{attachment_id}/versions/{attachment_version}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_doc_id_versions_major_version_minor_version_delete(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], major_version : Annotated[StrictStr, Field(..., description="The document major_version_number__v field value.")], minor_version : Annotated[StrictStr, Field(..., description="The document minor_version_number__v field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Delete Single Document Version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_versions_major_version_minor_version_delete(doc_id, major_version, minor_version, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param major_version: The document major_version_number__v field value. (required)
        :type major_version: str
        :param minor_version: The document minor_version_number__v field value. (required)
        :type minor_version: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_doc_id_versions_major_version_minor_version_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_doc_id_versions_major_version_minor_version_delete_with_http_info(doc_id, major_version, minor_version, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_doc_id_versions_major_version_minor_version_delete_with_http_info(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], major_version : Annotated[StrictStr, Field(..., description="The document major_version_number__v field value.")], minor_version : Annotated[StrictStr, Field(..., description="The document minor_version_number__v field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Delete Single Document Version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_versions_major_version_minor_version_delete_with_http_info(doc_id, major_version, minor_version, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param major_version: The document major_version_number__v field value. (required)
        :type major_version: str
        :param minor_version: The document minor_version_number__v field value. (required)
        :type minor_version: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'doc_id',
            'major_version',
            'minor_version',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_doc_id_versions_major_version_minor_version_delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['doc_id'] is not None:
            _path_params['doc_id'] = _params['doc_id']

        if _params['major_version'] is not None:
            _path_params['major_version'] = _params['major_version']

        if _params['minor_version'] is not None:
            _path_params['minor_version'] = _params['minor_version']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_doc_id_versions_major_version_minor_version_doc_export_annotations_to_csv_get(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], major_version : Annotated[StrictStr, Field(..., description="The document major_version_number__v field value.")], minor_version : Annotated[StrictStr, Field(..., description="The document minor_version_number__v field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Document Version Notes as CSV  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_versions_major_version_minor_version_doc_export_annotations_to_csv_get(doc_id, major_version, minor_version, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param major_version: The document major_version_number__v field value. (required)
        :type major_version: str
        :param minor_version: The document minor_version_number__v field value. (required)
        :type minor_version: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_doc_id_versions_major_version_minor_version_doc_export_annotations_to_csv_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_doc_id_versions_major_version_minor_version_doc_export_annotations_to_csv_get_with_http_info(doc_id, major_version, minor_version, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_doc_id_versions_major_version_minor_version_doc_export_annotations_to_csv_get_with_http_info(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], major_version : Annotated[StrictStr, Field(..., description="The document major_version_number__v field value.")], minor_version : Annotated[StrictStr, Field(..., description="The document minor_version_number__v field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Document Version Notes as CSV  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_versions_major_version_minor_version_doc_export_annotations_to_csv_get_with_http_info(doc_id, major_version, minor_version, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param major_version: The document major_version_number__v field value. (required)
        :type major_version: str
        :param minor_version: The document minor_version_number__v field value. (required)
        :type minor_version: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'doc_id',
            'major_version',
            'minor_version',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_doc_id_versions_major_version_minor_version_doc_export_annotations_to_csv_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['doc_id'] is not None:
            _path_params['doc_id'] = _params['doc_id']

        if _params['major_version'] is not None:
            _path_params['major_version'] = _params['major_version']

        if _params['minor_version'] is not None:
            _path_params['minor_version'] = _params['minor_version']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/doc-export-annotations-to-csv', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_doc_id_versions_major_version_minor_version_events_post(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], major_version : Annotated[StrictStr, Field(..., description="The document major_version_number__v field value.")], minor_version : Annotated[StrictStr, Field(..., description="The document minor_version_number__v field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Create Document Event  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_versions_major_version_minor_version_events_post(doc_id, major_version, minor_version, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param major_version: The document major_version_number__v field value. (required)
        :type major_version: str
        :param minor_version: The document minor_version_number__v field value. (required)
        :type minor_version: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_doc_id_versions_major_version_minor_version_events_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_doc_id_versions_major_version_minor_version_events_post_with_http_info(doc_id, major_version, minor_version, authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_doc_id_versions_major_version_minor_version_events_post_with_http_info(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], major_version : Annotated[StrictStr, Field(..., description="The document major_version_number__v field value.")], minor_version : Annotated[StrictStr, Field(..., description="The document minor_version_number__v field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create Document Event  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_versions_major_version_minor_version_events_post_with_http_info(doc_id, major_version, minor_version, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param major_version: The document major_version_number__v field value. (required)
        :type major_version: str
        :param minor_version: The document minor_version_number__v field value. (required)
        :type minor_version: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'doc_id',
            'major_version',
            'minor_version',
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_doc_id_versions_major_version_minor_version_events_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['doc_id'] is not None:
            _path_params['doc_id'] = _params['doc_id']

        if _params['major_version'] is not None:
            _path_params['major_version'] = _params['major_version']

        if _params['minor_version'] is not None:
            _path_params['minor_version'] = _params['minor_version']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/events', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_doc_id_versions_major_version_minor_version_export_video_annotations_get(self, doc_id : Annotated[StrictStr, Field(..., description="The video document id field value.")], major_version : Annotated[StrictStr, Field(..., description="The video document major_version_number__v field value.")], minor_version : Annotated[StrictStr, Field(..., description="The video document minor_version_number__v field value.")], authorization : Optional[StrictStr] = None, accept : Annotated[Optional[StrictStr], Field(description="This `Accept` header only changes the format of the response in the case of an error. On `SUCCESS`, the HTTP Response Header `Content-Type` is set to `text/plain;charset=UnicodeLittle`.")] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Video Annotations  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_versions_major_version_minor_version_export_video_annotations_get(doc_id, major_version, minor_version, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The video document id field value. (required)
        :type doc_id: str
        :param major_version: The video document major_version_number__v field value. (required)
        :type major_version: str
        :param minor_version: The video document minor_version_number__v field value. (required)
        :type minor_version: str
        :param authorization:
        :type authorization: str
        :param accept: This `Accept` header only changes the format of the response in the case of an error. On `SUCCESS`, the HTTP Response Header `Content-Type` is set to `text/plain;charset=UnicodeLittle`.
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_doc_id_versions_major_version_minor_version_export_video_annotations_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_doc_id_versions_major_version_minor_version_export_video_annotations_get_with_http_info(doc_id, major_version, minor_version, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_doc_id_versions_major_version_minor_version_export_video_annotations_get_with_http_info(self, doc_id : Annotated[StrictStr, Field(..., description="The video document id field value.")], major_version : Annotated[StrictStr, Field(..., description="The video document major_version_number__v field value.")], minor_version : Annotated[StrictStr, Field(..., description="The video document minor_version_number__v field value.")], authorization : Optional[StrictStr] = None, accept : Annotated[Optional[StrictStr], Field(description="This `Accept` header only changes the format of the response in the case of an error. On `SUCCESS`, the HTTP Response Header `Content-Type` is set to `text/plain;charset=UnicodeLittle`.")] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Video Annotations  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_versions_major_version_minor_version_export_video_annotations_get_with_http_info(doc_id, major_version, minor_version, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The video document id field value. (required)
        :type doc_id: str
        :param major_version: The video document major_version_number__v field value. (required)
        :type major_version: str
        :param minor_version: The video document minor_version_number__v field value. (required)
        :type minor_version: str
        :param authorization:
        :type authorization: str
        :param accept: This `Accept` header only changes the format of the response in the case of an error. On `SUCCESS`, the HTTP Response Header `Content-Type` is set to `text/plain;charset=UnicodeLittle`.
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'doc_id',
            'major_version',
            'minor_version',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_doc_id_versions_major_version_minor_version_export_video_annotations_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['doc_id'] is not None:
            _path_params['doc_id'] = _params['doc_id']

        if _params['major_version'] is not None:
            _path_params['major_version'] = _params['major_version']

        if _params['minor_version'] is not None:
            _path_params['minor_version'] = _params['minor_version']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/export-video-annotations', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_doc_id_versions_major_version_minor_version_file_get(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], major_version : Annotated[StrictStr, Field(..., description="The document major_version_number__v field value.")], minor_version : Annotated[StrictStr, Field(..., description="The document minor_version_number__v field value.")], accept : Optional[StrictStr] = None, authorization : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Download Document Version File  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_versions_major_version_minor_version_file_get(doc_id, major_version, minor_version, accept, authorization, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param major_version: The document major_version_number__v field value. (required)
        :type major_version: str
        :param minor_version: The document minor_version_number__v field value. (required)
        :type minor_version: str
        :param accept:
        :type accept: str
        :param authorization:
        :type authorization: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_doc_id_versions_major_version_minor_version_file_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_doc_id_versions_major_version_minor_version_file_get_with_http_info(doc_id, major_version, minor_version, accept, authorization, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_doc_id_versions_major_version_minor_version_file_get_with_http_info(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], major_version : Annotated[StrictStr, Field(..., description="The document major_version_number__v field value.")], minor_version : Annotated[StrictStr, Field(..., description="The document minor_version_number__v field value.")], accept : Optional[StrictStr] = None, authorization : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Download Document Version File  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_versions_major_version_minor_version_file_get_with_http_info(doc_id, major_version, minor_version, accept, authorization, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param major_version: The document major_version_number__v field value. (required)
        :type major_version: str
        :param minor_version: The document minor_version_number__v field value. (required)
        :type minor_version: str
        :param accept:
        :type accept: str
        :param authorization:
        :type authorization: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'doc_id',
            'major_version',
            'minor_version',
            'accept',
            'authorization',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_doc_id_versions_major_version_minor_version_file_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['doc_id'] is not None:
            _path_params['doc_id'] = _params['doc_id']

        if _params['major_version'] is not None:
            _path_params['major_version'] = _params['major_version']

        if _params['minor_version'] is not None:
            _path_params['minor_version'] = _params['minor_version']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/file', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_doc_id_versions_major_version_minor_version_get(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], major_version : Annotated[StrictStr, Field(..., description="The document major_version_number__v field value.")], minor_version : Annotated[StrictStr, Field(..., description="The document minor_version_number__v field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Document Version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_versions_major_version_minor_version_get(doc_id, major_version, minor_version, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param major_version: The document major_version_number__v field value. (required)
        :type major_version: str
        :param minor_version: The document minor_version_number__v field value. (required)
        :type minor_version: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_doc_id_versions_major_version_minor_version_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_doc_id_versions_major_version_minor_version_get_with_http_info(doc_id, major_version, minor_version, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_doc_id_versions_major_version_minor_version_get_with_http_info(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], major_version : Annotated[StrictStr, Field(..., description="The document major_version_number__v field value.")], minor_version : Annotated[StrictStr, Field(..., description="The document minor_version_number__v field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Document Version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_versions_major_version_minor_version_get_with_http_info(doc_id, major_version, minor_version, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param major_version: The document major_version_number__v field value. (required)
        :type major_version: str
        :param minor_version: The document minor_version_number__v field value. (required)
        :type minor_version: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'doc_id',
            'major_version',
            'minor_version',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_doc_id_versions_major_version_minor_version_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['doc_id'] is not None:
            _path_params['doc_id'] = _params['doc_id']

        if _params['major_version'] is not None:
            _path_params['major_version'] = _params['major_version']

        if _params['minor_version'] is not None:
            _path_params['minor_version'] = _params['minor_version']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_doc_id_versions_major_version_minor_version_put(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], major_version : Annotated[StrictStr, Field(..., description="The document major_version_number__v field value.")], minor_version : Annotated[StrictStr, Field(..., description="The document minor_version_number__v field value.")], authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_migration_mode : Annotated[Optional[StrictBool], Field(description="When set to true, Vault allows you to manually set the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>")] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Update Document Version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_versions_major_version_minor_version_put(doc_id, major_version, minor_version, authorization, content_type, accept, x_vault_api_migration_mode, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param major_version: The document major_version_number__v field value. (required)
        :type major_version: str
        :param minor_version: The document minor_version_number__v field value. (required)
        :type minor_version: str
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_migration_mode: When set to true, Vault allows you to manually set the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>
        :type x_vault_api_migration_mode: bool
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_doc_id_versions_major_version_minor_version_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_doc_id_versions_major_version_minor_version_put_with_http_info(doc_id, major_version, minor_version, authorization, content_type, accept, x_vault_api_migration_mode, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_doc_id_versions_major_version_minor_version_put_with_http_info(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], major_version : Annotated[StrictStr, Field(..., description="The document major_version_number__v field value.")], minor_version : Annotated[StrictStr, Field(..., description="The document minor_version_number__v field value.")], authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_migration_mode : Annotated[Optional[StrictBool], Field(description="When set to true, Vault allows you to manually set the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>")] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Update Document Version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_versions_major_version_minor_version_put_with_http_info(doc_id, major_version, minor_version, authorization, content_type, accept, x_vault_api_migration_mode, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param major_version: The document major_version_number__v field value. (required)
        :type major_version: str
        :param minor_version: The document minor_version_number__v field value. (required)
        :type minor_version: str
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_migration_mode: When set to true, Vault allows you to manually set the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>
        :type x_vault_api_migration_mode: bool
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'doc_id',
            'major_version',
            'minor_version',
            'authorization',
            'content_type',
            'accept',
            'x_vault_api_migration_mode',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_doc_id_versions_major_version_minor_version_put" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['doc_id'] is not None:
            _path_params['doc_id'] = _params['doc_id']

        if _params['major_version'] is not None:
            _path_params['major_version'] = _params['major_version']

        if _params['minor_version'] is not None:
            _path_params['minor_version'] = _params['minor_version']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_migration_mode'] is not None:
            _header_params['X-VaultAPI-MigrationMode'] = _params['x_vault_api_migration_mode']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_doc_id_versions_major_version_minor_version_relationships_get(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], major_version : Annotated[StrictStr, Field(..., description="The document major_version_number__v field value.")], minor_version : Annotated[StrictStr, Field(..., description="The document minor_version_number__v field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Document Relationships  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_versions_major_version_minor_version_relationships_get(doc_id, major_version, minor_version, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param major_version: The document major_version_number__v field value. (required)
        :type major_version: str
        :param minor_version: The document minor_version_number__v field value. (required)
        :type minor_version: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_doc_id_versions_major_version_minor_version_relationships_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_doc_id_versions_major_version_minor_version_relationships_get_with_http_info(doc_id, major_version, minor_version, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_doc_id_versions_major_version_minor_version_relationships_get_with_http_info(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], major_version : Annotated[StrictStr, Field(..., description="The document major_version_number__v field value.")], minor_version : Annotated[StrictStr, Field(..., description="The document minor_version_number__v field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Document Relationships  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_versions_major_version_minor_version_relationships_get_with_http_info(doc_id, major_version, minor_version, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param major_version: The document major_version_number__v field value. (required)
        :type major_version: str
        :param minor_version: The document minor_version_number__v field value. (required)
        :type minor_version: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'doc_id',
            'major_version',
            'minor_version',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_doc_id_versions_major_version_minor_version_relationships_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['doc_id'] is not None:
            _path_params['doc_id'] = _params['doc_id']

        if _params['major_version'] is not None:
            _path_params['major_version'] = _params['major_version']

        if _params['minor_version'] is not None:
            _path_params['minor_version'] = _params['minor_version']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_doc_id_versions_major_version_minor_version_relationships_post(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], major_version : Annotated[StrictStr, Field(..., description="The document major_version_number__v field value.")], minor_version : Annotated[StrictStr, Field(..., description="The document minor_version_number__v field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Create Single Document Relationship  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_versions_major_version_minor_version_relationships_post(doc_id, major_version, minor_version, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param major_version: The document major_version_number__v field value. (required)
        :type major_version: str
        :param minor_version: The document minor_version_number__v field value. (required)
        :type minor_version: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_doc_id_versions_major_version_minor_version_relationships_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_doc_id_versions_major_version_minor_version_relationships_post_with_http_info(doc_id, major_version, minor_version, authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_doc_id_versions_major_version_minor_version_relationships_post_with_http_info(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], major_version : Annotated[StrictStr, Field(..., description="The document major_version_number__v field value.")], minor_version : Annotated[StrictStr, Field(..., description="The document minor_version_number__v field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create Single Document Relationship  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_versions_major_version_minor_version_relationships_post_with_http_info(doc_id, major_version, minor_version, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param major_version: The document major_version_number__v field value. (required)
        :type major_version: str
        :param minor_version: The document minor_version_number__v field value. (required)
        :type minor_version: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'doc_id',
            'major_version',
            'minor_version',
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_doc_id_versions_major_version_minor_version_relationships_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['doc_id'] is not None:
            _path_params['doc_id'] = _params['doc_id']

        if _params['major_version'] is not None:
            _path_params['major_version'] = _params['major_version']

        if _params['minor_version'] is not None:
            _path_params['minor_version'] = _params['minor_version']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_delete(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], major_version : Annotated[StrictStr, Field(..., description="The document major_version_number__v field value.")], minor_version : Annotated[StrictStr, Field(..., description="The document minor_version_number__v field value.")], relationship_id : Annotated[StrictStr, Field(..., description="The relationship id field value. See Retrieve Document Relationships.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Delete Single Document Relationship  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_delete(doc_id, major_version, minor_version, relationship_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param major_version: The document major_version_number__v field value. (required)
        :type major_version: str
        :param minor_version: The document minor_version_number__v field value. (required)
        :type minor_version: str
        :param relationship_id: The relationship id field value. See Retrieve Document Relationships. (required)
        :type relationship_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_delete_with_http_info(doc_id, major_version, minor_version, relationship_id, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_delete_with_http_info(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], major_version : Annotated[StrictStr, Field(..., description="The document major_version_number__v field value.")], minor_version : Annotated[StrictStr, Field(..., description="The document minor_version_number__v field value.")], relationship_id : Annotated[StrictStr, Field(..., description="The relationship id field value. See Retrieve Document Relationships.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Delete Single Document Relationship  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_delete_with_http_info(doc_id, major_version, minor_version, relationship_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param major_version: The document major_version_number__v field value. (required)
        :type major_version: str
        :param minor_version: The document minor_version_number__v field value. (required)
        :type minor_version: str
        :param relationship_id: The relationship id field value. See Retrieve Document Relationships. (required)
        :type relationship_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'doc_id',
            'major_version',
            'minor_version',
            'relationship_id',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['doc_id'] is not None:
            _path_params['doc_id'] = _params['doc_id']

        if _params['major_version'] is not None:
            _path_params['major_version'] = _params['major_version']

        if _params['minor_version'] is not None:
            _path_params['minor_version'] = _params['minor_version']

        if _params['relationship_id'] is not None:
            _path_params['relationship_id'] = _params['relationship_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_get(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], major_version : Annotated[StrictStr, Field(..., description="The document major_version_number__v field value.")], minor_version : Annotated[StrictStr, Field(..., description="The document minor_version_number__v field value.")], relationship_id : Annotated[StrictStr, Field(..., description="The relationship id field value. See Retrieve Document Relationships.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Document Relationship  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_get(doc_id, major_version, minor_version, relationship_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param major_version: The document major_version_number__v field value. (required)
        :type major_version: str
        :param minor_version: The document minor_version_number__v field value. (required)
        :type minor_version: str
        :param relationship_id: The relationship id field value. See Retrieve Document Relationships. (required)
        :type relationship_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_get_with_http_info(doc_id, major_version, minor_version, relationship_id, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_get_with_http_info(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], major_version : Annotated[StrictStr, Field(..., description="The document major_version_number__v field value.")], minor_version : Annotated[StrictStr, Field(..., description="The document minor_version_number__v field value.")], relationship_id : Annotated[StrictStr, Field(..., description="The relationship id field value. See Retrieve Document Relationships.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Document Relationship  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_get_with_http_info(doc_id, major_version, minor_version, relationship_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param major_version: The document major_version_number__v field value. (required)
        :type major_version: str
        :param minor_version: The document minor_version_number__v field value. (required)
        :type minor_version: str
        :param relationship_id: The relationship id field value. See Retrieve Document Relationships. (required)
        :type relationship_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'doc_id',
            'major_version',
            'minor_version',
            'relationship_id',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['doc_id'] is not None:
            _path_params['doc_id'] = _params['doc_id']

        if _params['major_version'] is not None:
            _path_params['major_version'] = _params['major_version']

        if _params['minor_version'] is not None:
            _path_params['minor_version'] = _params['minor_version']

        if _params['relationship_id'] is not None:
            _path_params['relationship_id'] = _params['relationship_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_doc_id_versions_major_version_minor_version_renditions_get(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], major_version : Annotated[StrictStr, Field(..., description="The document major_version_number__v field value.")], minor_version : Annotated[StrictStr, Field(..., description="The document minor_version_number__v field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Document Version Renditions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_versions_major_version_minor_version_renditions_get(doc_id, major_version, minor_version, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param major_version: The document major_version_number__v field value. (required)
        :type major_version: str
        :param minor_version: The document minor_version_number__v field value. (required)
        :type minor_version: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_doc_id_versions_major_version_minor_version_renditions_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_doc_id_versions_major_version_minor_version_renditions_get_with_http_info(doc_id, major_version, minor_version, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_doc_id_versions_major_version_minor_version_renditions_get_with_http_info(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], major_version : Annotated[StrictStr, Field(..., description="The document major_version_number__v field value.")], minor_version : Annotated[StrictStr, Field(..., description="The document minor_version_number__v field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Document Version Renditions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_versions_major_version_minor_version_renditions_get_with_http_info(doc_id, major_version, minor_version, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param major_version: The document major_version_number__v field value. (required)
        :type major_version: str
        :param minor_version: The document minor_version_number__v field value. (required)
        :type minor_version: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'doc_id',
            'major_version',
            'minor_version',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_doc_id_versions_major_version_minor_version_renditions_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['doc_id'] is not None:
            _path_params['doc_id'] = _params['doc_id']

        if _params['major_version'] is not None:
            _path_params['major_version'] = _params['major_version']

        if _params['minor_version'] is not None:
            _path_params['minor_version'] = _params['minor_version']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_delete(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], major_version : Annotated[StrictStr, Field(..., description="The document major_version_number__v field value.")], minor_version : Annotated[StrictStr, Field(..., description="The document minor_version_number__v field value.")], rendition_type : Annotated[StrictStr, Field(..., description="The document rendition type.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Delete Document Version Rendition  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_delete(doc_id, major_version, minor_version, rendition_type, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param major_version: The document major_version_number__v field value. (required)
        :type major_version: str
        :param minor_version: The document minor_version_number__v field value. (required)
        :type minor_version: str
        :param rendition_type: The document rendition type. (required)
        :type rendition_type: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_delete_with_http_info(doc_id, major_version, minor_version, rendition_type, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_delete_with_http_info(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], major_version : Annotated[StrictStr, Field(..., description="The document major_version_number__v field value.")], minor_version : Annotated[StrictStr, Field(..., description="The document minor_version_number__v field value.")], rendition_type : Annotated[StrictStr, Field(..., description="The document rendition type.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Delete Document Version Rendition  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_delete_with_http_info(doc_id, major_version, minor_version, rendition_type, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param major_version: The document major_version_number__v field value. (required)
        :type major_version: str
        :param minor_version: The document minor_version_number__v field value. (required)
        :type minor_version: str
        :param rendition_type: The document rendition type. (required)
        :type rendition_type: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'doc_id',
            'major_version',
            'minor_version',
            'rendition_type',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['doc_id'] is not None:
            _path_params['doc_id'] = _params['doc_id']

        if _params['major_version'] is not None:
            _path_params['major_version'] = _params['major_version']

        if _params['minor_version'] is not None:
            _path_params['minor_version'] = _params['minor_version']

        if _params['rendition_type'] is not None:
            _path_params['rendition_type'] = _params['rendition_type']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_get(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], major_version : Annotated[StrictStr, Field(..., description="The document major_version_number__v field value.")], minor_version : Annotated[StrictStr, Field(..., description="The document minor_version_number__v field value.")], rendition_type : Annotated[StrictStr, Field(..., description="The document rendition type.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Download Document Version Rendition File  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_get(doc_id, major_version, minor_version, rendition_type, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param major_version: The document major_version_number__v field value. (required)
        :type major_version: str
        :param minor_version: The document minor_version_number__v field value. (required)
        :type minor_version: str
        :param rendition_type: The document rendition type. (required)
        :type rendition_type: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_get_with_http_info(doc_id, major_version, minor_version, rendition_type, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_get_with_http_info(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], major_version : Annotated[StrictStr, Field(..., description="The document major_version_number__v field value.")], minor_version : Annotated[StrictStr, Field(..., description="The document minor_version_number__v field value.")], rendition_type : Annotated[StrictStr, Field(..., description="The document rendition type.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Download Document Version Rendition File  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_get_with_http_info(doc_id, major_version, minor_version, rendition_type, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param major_version: The document major_version_number__v field value. (required)
        :type major_version: str
        :param minor_version: The document minor_version_number__v field value. (required)
        :type minor_version: str
        :param rendition_type: The document rendition type. (required)
        :type rendition_type: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'doc_id',
            'major_version',
            'minor_version',
            'rendition_type',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['doc_id'] is not None:
            _path_params['doc_id'] = _params['doc_id']

        if _params['major_version'] is not None:
            _path_params['major_version'] = _params['major_version']

        if _params['minor_version'] is not None:
            _path_params['minor_version'] = _params['minor_version']

        if _params['rendition_type'] is not None:
            _path_params['rendition_type'] = _params['rendition_type']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_post(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], major_version : Annotated[StrictStr, Field(..., description="The document major_version_number__v field value.")], minor_version : Annotated[StrictStr, Field(..., description="The document minor_version_number__v field value.")], rendition_type : Annotated[StrictStr, Field(..., description="The document rendition type.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Upload Document Version Rendition  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_post(doc_id, major_version, minor_version, rendition_type, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param major_version: The document major_version_number__v field value. (required)
        :type major_version: str
        :param minor_version: The document minor_version_number__v field value. (required)
        :type minor_version: str
        :param rendition_type: The document rendition type. (required)
        :type rendition_type: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_post_with_http_info(doc_id, major_version, minor_version, rendition_type, authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_post_with_http_info(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], major_version : Annotated[StrictStr, Field(..., description="The document major_version_number__v field value.")], minor_version : Annotated[StrictStr, Field(..., description="The document minor_version_number__v field value.")], rendition_type : Annotated[StrictStr, Field(..., description="The document rendition type.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Upload Document Version Rendition  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_post_with_http_info(doc_id, major_version, minor_version, rendition_type, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param major_version: The document major_version_number__v field value. (required)
        :type major_version: str
        :param minor_version: The document minor_version_number__v field value. (required)
        :type minor_version: str
        :param rendition_type: The document rendition type. (required)
        :type rendition_type: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'doc_id',
            'major_version',
            'minor_version',
            'rendition_type',
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['doc_id'] is not None:
            _path_params['doc_id'] = _params['doc_id']

        if _params['major_version'] is not None:
            _path_params['major_version'] = _params['major_version']

        if _params['minor_version'] is not None:
            _path_params['minor_version'] = _params['minor_version']

        if _params['rendition_type'] is not None:
            _path_params['rendition_type'] = _params['rendition_type']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_put(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], major_version : Annotated[StrictStr, Field(..., description="The document major_version_number__v field value.")], minor_version : Annotated[StrictStr, Field(..., description="The document minor_version_number__v field value.")], rendition_type : Annotated[StrictStr, Field(..., description="The document rendition type.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Replace Document Version Rendition  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_put(doc_id, major_version, minor_version, rendition_type, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param major_version: The document major_version_number__v field value. (required)
        :type major_version: str
        :param minor_version: The document minor_version_number__v field value. (required)
        :type minor_version: str
        :param rendition_type: The document rendition type. (required)
        :type rendition_type: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_put_with_http_info(doc_id, major_version, minor_version, rendition_type, authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_put_with_http_info(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], major_version : Annotated[StrictStr, Field(..., description="The document major_version_number__v field value.")], minor_version : Annotated[StrictStr, Field(..., description="The document minor_version_number__v field value.")], rendition_type : Annotated[StrictStr, Field(..., description="The document rendition type.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Replace Document Version Rendition  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_put_with_http_info(doc_id, major_version, minor_version, rendition_type, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param major_version: The document major_version_number__v field value. (required)
        :type major_version: str
        :param minor_version: The document minor_version_number__v field value. (required)
        :type minor_version: str
        :param rendition_type: The document rendition type. (required)
        :type rendition_type: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'doc_id',
            'major_version',
            'minor_version',
            'rendition_type',
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_put" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['doc_id'] is not None:
            _path_params['doc_id'] = _params['doc_id']

        if _params['major_version'] is not None:
            _path_params['major_version'] = _params['major_version']

        if _params['minor_version'] is not None:
            _path_params['minor_version'] = _params['minor_version']

        if _params['rendition_type'] is not None:
            _path_params['rendition_type'] = _params['rendition_type']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_doc_id_versions_major_version_minor_version_thumbnail_get(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], major_version : Annotated[StrictStr, Field(..., description="The document major_version_number__v field value.")], minor_version : Annotated[StrictStr, Field(..., description="The document minor_version_number__v field value.")], accept : Optional[StrictStr] = None, authorization : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Download Document Version Thumbnail File  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_versions_major_version_minor_version_thumbnail_get(doc_id, major_version, minor_version, accept, authorization, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param major_version: The document major_version_number__v field value. (required)
        :type major_version: str
        :param minor_version: The document minor_version_number__v field value. (required)
        :type minor_version: str
        :param accept:
        :type accept: str
        :param authorization:
        :type authorization: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_doc_id_versions_major_version_minor_version_thumbnail_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_doc_id_versions_major_version_minor_version_thumbnail_get_with_http_info(doc_id, major_version, minor_version, accept, authorization, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_doc_id_versions_major_version_minor_version_thumbnail_get_with_http_info(self, doc_id : Annotated[StrictStr, Field(..., description="The document id field value.")], major_version : Annotated[StrictStr, Field(..., description="The document major_version_number__v field value.")], minor_version : Annotated[StrictStr, Field(..., description="The document minor_version_number__v field value.")], accept : Optional[StrictStr] = None, authorization : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Download Document Version Thumbnail File  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_doc_id_versions_major_version_minor_version_thumbnail_get_with_http_info(doc_id, major_version, minor_version, accept, authorization, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param doc_id: The document id field value. (required)
        :type doc_id: str
        :param major_version: The document major_version_number__v field value. (required)
        :type major_version: str
        :param minor_version: The document minor_version_number__v field value. (required)
        :type minor_version: str
        :param accept:
        :type accept: str
        :param authorization:
        :type authorization: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'doc_id',
            'major_version',
            'minor_version',
            'accept',
            'authorization',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_doc_id_versions_major_version_minor_version_thumbnail_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['doc_id'] is not None:
            _path_params['doc_id'] = _params['doc_id']

        if _params['major_version'] is not None:
            _path_params['major_version'] = _params['major_version']

        if _params['minor_version'] is not None:
            _path_params['minor_version'] = _params['minor_version']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/thumbnail', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_get(self, named_filter : Annotated[Optional[StrictStr], Field(description="Retrieves only documents which you have created.")] = None, scope : Annotated[Optional[StrictStr], Field(description="Searches only within the document content.")] = None, versionscope : Annotated[Optional[StrictStr], Field(description="Retrieves all document versions, rather than only the latest version.")] = None, search : Annotated[Optional[StrictStr], Field(description="Search for documents based on a {keyword} in searchable document fields.")] = None, limit : Annotated[Optional[StrictStr], Field(description="See VQL documentation for more information.")] = None, sort : Annotated[Optional[StrictStr], Field(description="See VQL documentation for more information.")] = None, start : Annotated[Optional[StrictStr], Field(description="See VQL documentation for more information.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve All Documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_get(named_filter, scope, versionscope, search, limit, sort, start, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param named_filter: Retrieves only documents which you have created.
        :type named_filter: str
        :param scope: Searches only within the document content.
        :type scope: str
        :param versionscope: Retrieves all document versions, rather than only the latest version.
        :type versionscope: str
        :param search: Search for documents based on a {keyword} in searchable document fields.
        :type search: str
        :param limit: See VQL documentation for more information.
        :type limit: str
        :param sort: See VQL documentation for more information.
        :type sort: str
        :param start: See VQL documentation for more information.
        :type start: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_get_with_http_info(named_filter, scope, versionscope, search, limit, sort, start, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_get_with_http_info(self, named_filter : Annotated[Optional[StrictStr], Field(description="Retrieves only documents which you have created.")] = None, scope : Annotated[Optional[StrictStr], Field(description="Searches only within the document content.")] = None, versionscope : Annotated[Optional[StrictStr], Field(description="Retrieves all document versions, rather than only the latest version.")] = None, search : Annotated[Optional[StrictStr], Field(description="Search for documents based on a {keyword} in searchable document fields.")] = None, limit : Annotated[Optional[StrictStr], Field(description="See VQL documentation for more information.")] = None, sort : Annotated[Optional[StrictStr], Field(description="See VQL documentation for more information.")] = None, start : Annotated[Optional[StrictStr], Field(description="See VQL documentation for more information.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve All Documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_get_with_http_info(named_filter, scope, versionscope, search, limit, sort, start, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param named_filter: Retrieves only documents which you have created.
        :type named_filter: str
        :param scope: Searches only within the document content.
        :type scope: str
        :param versionscope: Retrieves all document versions, rather than only the latest version.
        :type versionscope: str
        :param search: Search for documents based on a {keyword} in searchable document fields.
        :type search: str
        :param limit: See VQL documentation for more information.
        :type limit: str
        :param sort: See VQL documentation for more information.
        :type sort: str
        :param start: See VQL documentation for more information.
        :type start: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'named_filter',
            'scope',
            'versionscope',
            'search',
            'limit',
            'sort',
            'start',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('named_filter') is not None:  # noqa: E501
            _query_params.append(('named_filter', _params['named_filter']))

        if _params.get('scope') is not None:  # noqa: E501
            _query_params.append(('scope', _params['scope']))

        if _params.get('versionscope') is not None:  # noqa: E501
            _query_params.append(('versionscope', _params['versionscope']))

        if _params.get('search') is not None:  # noqa: E501
            _query_params.append(('search', _params['search']))

        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('sort') is not None:  # noqa: E501
            _query_params.append(('sort', _params['sort']))

        if _params.get('start') is not None:  # noqa: E501
            _query_params.append(('start', _params['start']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_id_roles_get(self, id : StrictStr, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve All Document Roles  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_id_roles_get(id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_id_roles_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_id_roles_get_with_http_info(id, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_id_roles_get_with_http_info(self, id : StrictStr, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve All Document Roles  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_id_roles_get_with_http_info(id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'id',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_id_roles_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id'] is not None:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/{id}/roles', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_id_roles_post(self, id : StrictStr, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Assign Users & Groups to Roles on a Single Document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_id_roles_post(id, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_id_roles_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_id_roles_post_with_http_info(id, authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_id_roles_post_with_http_info(self, id : StrictStr, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Assign Users & Groups to Roles on a Single Document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_id_roles_post_with_http_info(id, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'id',
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_id_roles_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id'] is not None:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/{id}/roles', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_id_roles_role_name_get(self, id : Annotated[StrictStr, Field(..., description="The document `id`.")], role_name : Annotated[StrictStr, Field(..., description="The name of the role to retrieve. For example, `owner__v`.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Document Role  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_id_roles_role_name_get(id, role_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param id: The document `id`. (required)
        :type id: str
        :param role_name: The name of the role to retrieve. For example, `owner__v`. (required)
        :type role_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_id_roles_role_name_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_id_roles_role_name_get_with_http_info(id, role_name, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_id_roles_role_name_get_with_http_info(self, id : Annotated[StrictStr, Field(..., description="The document `id`.")], role_name : Annotated[StrictStr, Field(..., description="The name of the role to retrieve. For example, `owner__v`.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Document Role  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_id_roles_role_name_get_with_http_info(id, role_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param id: The document `id`. (required)
        :type id: str
        :param role_name: The name of the role to retrieve. For example, `owner__v`. (required)
        :type role_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'id',
            'role_name',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_id_roles_role_name_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id'] is not None:
            _path_params['id'] = _params['id']

        if _params['role_name'] is not None:
            _path_params['role_name'] = _params['role_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/{id}/roles/{role_name}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_id_versions_major_version_minor_version_lifecycle_actions_get(self, id : Annotated[StrictStr, Field(..., description="The document id field value from which to retrieve available user actions.")], major_version : Annotated[StrictStr, Field(..., description="The major version number of the document.")], minor_version : Annotated[StrictStr, Field(..., description="The minor version number of the document.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Document User Actions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_id_versions_major_version_minor_version_lifecycle_actions_get(id, major_version, minor_version, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param id: The document id field value from which to retrieve available user actions. (required)
        :type id: str
        :param major_version: The major version number of the document. (required)
        :type major_version: str
        :param minor_version: The minor version number of the document. (required)
        :type minor_version: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_id_versions_major_version_minor_version_lifecycle_actions_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_id_versions_major_version_minor_version_lifecycle_actions_get_with_http_info(id, major_version, minor_version, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_id_versions_major_version_minor_version_lifecycle_actions_get_with_http_info(self, id : Annotated[StrictStr, Field(..., description="The document id field value from which to retrieve available user actions.")], major_version : Annotated[StrictStr, Field(..., description="The major version number of the document.")], minor_version : Annotated[StrictStr, Field(..., description="The minor version number of the document.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Document User Actions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_id_versions_major_version_minor_version_lifecycle_actions_get_with_http_info(id, major_version, minor_version, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param id: The document id field value from which to retrieve available user actions. (required)
        :type id: str
        :param major_version: The major version number of the document. (required)
        :type major_version: str
        :param minor_version: The minor version number of the document. (required)
        :type minor_version: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'id',
            'major_version',
            'minor_version',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_id_versions_major_version_minor_version_lifecycle_actions_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id'] is not None:
            _path_params['id'] = _params['id']

        if _params['major_version'] is not None:
            _path_params['major_version'] = _params['major_version']

        if _params['minor_version'] is not None:
            _path_params['minor_version'] = _params['minor_version']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get(self, id : Annotated[StrictStr, Field(..., description="The document id field value from which to retrieve available user actions.")], major_version : Annotated[StrictStr, Field(..., description="The major version number of the document.")], minor_version : Annotated[StrictStr, Field(..., description="The minor version number of the document.")], name__v : Annotated[StrictStr, Field(..., description="The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Document Entry Criteria  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get(id, major_version, minor_version, name__v, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param id: The document id field value from which to retrieve available user actions. (required)
        :type id: str
        :param major_version: The major version number of the document. (required)
        :type major_version: str
        :param minor_version: The minor version number of the document. (required)
        :type minor_version: str
        :param name__v: The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above. (required)
        :type name__v: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get_with_http_info(id, major_version, minor_version, name__v, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get_with_http_info(self, id : Annotated[StrictStr, Field(..., description="The document id field value from which to retrieve available user actions.")], major_version : Annotated[StrictStr, Field(..., description="The major version number of the document.")], minor_version : Annotated[StrictStr, Field(..., description="The minor version number of the document.")], name__v : Annotated[StrictStr, Field(..., description="The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Document Entry Criteria  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get_with_http_info(id, major_version, minor_version, name__v, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param id: The document id field value from which to retrieve available user actions. (required)
        :type id: str
        :param major_version: The major version number of the document. (required)
        :type major_version: str
        :param minor_version: The minor version number of the document. (required)
        :type minor_version: str
        :param name__v: The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above. (required)
        :type name__v: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'id',
            'major_version',
            'minor_version',
            'name__v',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id'] is not None:
            _path_params['id'] = _params['id']

        if _params['major_version'] is not None:
            _path_params['major_version'] = _params['major_version']

        if _params['minor_version'] is not None:
            _path_params['minor_version'] = _params['minor_version']

        if _params['name__v'] is not None:
            _path_params['name__v'] = _params['name__v']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}/entry_requirements', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_put(self, id : Annotated[StrictStr, Field(..., description="The document id field value from which to retrieve available user actions.")], major_version : Annotated[StrictStr, Field(..., description="The major version number of the document.")], minor_version : Annotated[StrictStr, Field(..., description="The minor version number of the document.")], name__v : Annotated[StrictStr, Field(..., description="The action name__v field value to initiate. This is retrieved from the Retrieve User Action request.")], authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Initiate Document User Action  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_put(id, major_version, minor_version, name__v, authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param id: The document id field value from which to retrieve available user actions. (required)
        :type id: str
        :param major_version: The major version number of the document. (required)
        :type major_version: str
        :param minor_version: The minor version number of the document. (required)
        :type minor_version: str
        :param name__v: The action name__v field value to initiate. This is retrieved from the Retrieve User Action request. (required)
        :type name__v: str
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_put_with_http_info(id, major_version, minor_version, name__v, authorization, content_type, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_put_with_http_info(self, id : Annotated[StrictStr, Field(..., description="The document id field value from which to retrieve available user actions.")], major_version : Annotated[StrictStr, Field(..., description="The major version number of the document.")], minor_version : Annotated[StrictStr, Field(..., description="The minor version number of the document.")], name__v : Annotated[StrictStr, Field(..., description="The action name__v field value to initiate. This is retrieved from the Retrieve User Action request.")], authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Initiate Document User Action  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_put_with_http_info(id, major_version, minor_version, name__v, authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param id: The document id field value from which to retrieve available user actions. (required)
        :type id: str
        :param major_version: The major version number of the document. (required)
        :type major_version: str
        :param minor_version: The minor version number of the document. (required)
        :type minor_version: str
        :param name__v: The action name__v field value to initiate. This is retrieved from the Retrieve User Action request. (required)
        :type name__v: str
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'id',
            'major_version',
            'minor_version',
            'name__v',
            'authorization',
            'content_type',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_put" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id'] is not None:
            _path_params['id'] = _params['id']

        if _params['major_version'] is not None:
            _path_params['major_version'] = _params['major_version']

        if _params['minor_version'] is not None:
            _path_params['minor_version'] = _params['minor_version']

        if _params['name__v'] is not None:
            _path_params['name__v'] = _params['name__v']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_lifecycle_actions_post(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve User Actions on Multiple Documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_lifecycle_actions_post(authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_lifecycle_actions_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_lifecycle_actions_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_lifecycle_actions_post_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve User Actions on Multiple Documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_lifecycle_actions_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_lifecycle_actions_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/lifecycle_actions', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_lifecycle_actions_user_action_name_put(self, user_action_name : Annotated[StrictStr, Field(..., description="The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Documents endpoint.")], authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Initiate Bulk Document User Actions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_lifecycle_actions_user_action_name_put(user_action_name, authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param user_action_name: The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Documents endpoint. (required)
        :type user_action_name: str
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_lifecycle_actions_user_action_name_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_lifecycle_actions_user_action_name_put_with_http_info(user_action_name, authorization, content_type, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_lifecycle_actions_user_action_name_put_with_http_info(self, user_action_name : Annotated[StrictStr, Field(..., description="The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Documents endpoint.")], authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Initiate Bulk Document User Actions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_lifecycle_actions_user_action_name_put_with_http_info(user_action_name, authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param user_action_name: The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Documents endpoint. (required)
        :type user_action_name: str
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'user_action_name',
            'authorization',
            'content_type',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_lifecycle_actions_user_action_name_put" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['user_action_name'] is not None:
            _path_params['user_action_name'] = _params['user_action_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/lifecycle_actions/{user_action_name}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_post(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_migration_mode : Annotated[Optional[StrictBool], Field(description="When set to true,  you can use the status__v field to create documents in any lifecycle state. Additionally, you can manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>")] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Create Single Document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_post(authorization, accept, x_vault_api_migration_mode, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_migration_mode: When set to true,  you can use the status__v field to create documents in any lifecycle state. Additionally, you can manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>
        :type x_vault_api_migration_mode: bool
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_post_with_http_info(authorization, accept, x_vault_api_migration_mode, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_post_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_migration_mode : Annotated[Optional[StrictBool], Field(description="When set to true,  you can use the status__v field to create documents in any lifecycle state. Additionally, you can manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>")] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create Single Document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_post_with_http_info(authorization, accept, x_vault_api_migration_mode, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_migration_mode: When set to true,  you can use the status__v field to create documents in any lifecycle state. Additionally, you can manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>
        :type x_vault_api_migration_mode: bool
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'x_vault_api_migration_mode',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_migration_mode'] is not None:
            _header_params['X-VaultAPI-MigrationMode'] = _params['x_vault_api_migration_mode']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_relationships_batch_delete(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Delete Multiple Document Relationships  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_relationships_batch_delete(authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_relationships_batch_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_relationships_batch_delete_with_http_info(authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_relationships_batch_delete_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Delete Multiple Document Relationships  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_relationships_batch_delete_with_http_info(authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_relationships_batch_delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/relationships/batch', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_relationships_batch_post(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Create Multiple Document Relationships  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_relationships_batch_post(authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_relationships_batch_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_relationships_batch_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_relationships_batch_post_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create Multiple Document Relationships  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_relationships_batch_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_relationships_batch_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/relationships/batch', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_renditions_batch_delete(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Delete Multiple Document Renditions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_renditions_batch_delete(authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_renditions_batch_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_renditions_batch_delete_with_http_info(authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_renditions_batch_delete_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Delete Multiple Document Renditions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_renditions_batch_delete_with_http_info(authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_renditions_batch_delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/renditions/batch', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_renditions_batch_post(self, id_param : Annotated[Optional[StrictStr], Field(description="If you’re identifying documents in your input by their external ID")] = None, large_size_asset : Annotated[Optional[StrictStr], Field(description="If set to true, indicates that the renditions to add are of the Large Size Asset (large_size_asset__v) rendition type. Vault applies Document Migration Mode limitations to renditions created with the request, but Document Migration permission is not required and your vault need not be in Migration Mode to use the parameter. Note that the request results in an error if the CSV contains any rendition type other than large_size_asset__v.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_migration_mode : Annotated[Optional[StrictBool], Field(description="Must be set to true when importing any rendition type other than large_size_asset__v. You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>")] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Add Multiple Document Renditions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_renditions_batch_post(id_param, large_size_asset, authorization, accept, content_type, x_vault_api_migration_mode, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param id_param: If you’re identifying documents in your input by their external ID
        :type id_param: str
        :param large_size_asset: If set to true, indicates that the renditions to add are of the Large Size Asset (large_size_asset__v) rendition type. Vault applies Document Migration Mode limitations to renditions created with the request, but Document Migration permission is not required and your vault need not be in Migration Mode to use the parameter. Note that the request results in an error if the CSV contains any rendition type other than large_size_asset__v.
        :type large_size_asset: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_migration_mode: Must be set to true when importing any rendition type other than large_size_asset__v. You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>
        :type x_vault_api_migration_mode: bool
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_renditions_batch_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_renditions_batch_post_with_http_info(id_param, large_size_asset, authorization, accept, content_type, x_vault_api_migration_mode, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_renditions_batch_post_with_http_info(self, id_param : Annotated[Optional[StrictStr], Field(description="If you’re identifying documents in your input by their external ID")] = None, large_size_asset : Annotated[Optional[StrictStr], Field(description="If set to true, indicates that the renditions to add are of the Large Size Asset (large_size_asset__v) rendition type. Vault applies Document Migration Mode limitations to renditions created with the request, but Document Migration permission is not required and your vault need not be in Migration Mode to use the parameter. Note that the request results in an error if the CSV contains any rendition type other than large_size_asset__v.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_migration_mode : Annotated[Optional[StrictBool], Field(description="Must be set to true when importing any rendition type other than large_size_asset__v. You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>")] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Add Multiple Document Renditions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_renditions_batch_post_with_http_info(id_param, large_size_asset, authorization, accept, content_type, x_vault_api_migration_mode, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param id_param: If you’re identifying documents in your input by their external ID
        :type id_param: str
        :param large_size_asset: If set to true, indicates that the renditions to add are of the Large Size Asset (large_size_asset__v) rendition type. Vault applies Document Migration Mode limitations to renditions created with the request, but Document Migration permission is not required and your vault need not be in Migration Mode to use the parameter. Note that the request results in an error if the CSV contains any rendition type other than large_size_asset__v.
        :type large_size_asset: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_migration_mode: Must be set to true when importing any rendition type other than large_size_asset__v. You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>
        :type x_vault_api_migration_mode: bool
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'id_param',
            'large_size_asset',
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_migration_mode',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_renditions_batch_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('id_param') is not None:  # noqa: E501
            _query_params.append(('idParam', _params['id_param']))

        if _params.get('large_size_asset') is not None:  # noqa: E501
            _query_params.append(('largeSizeAsset', _params['large_size_asset']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_migration_mode'] is not None:
            _header_params['X-VaultAPI-MigrationMode'] = _params['x_vault_api_migration_mode']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/renditions/batch', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_roles_batch_delete(self, authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Remove Users and Groups from Roles on Multiple Documents & Binders  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_roles_batch_delete(authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_roles_batch_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_roles_batch_delete_with_http_info(authorization, content_type, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_roles_batch_delete_with_http_info(self, authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Remove Users and Groups from Roles on Multiple Documents & Binders  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_roles_batch_delete_with_http_info(authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'content_type',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_roles_batch_delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/roles/batch', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_roles_batch_post(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Assign Users & Groups to Roles on Multiple Documents & Binders  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_roles_batch_post(authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_roles_batch_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_roles_batch_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_roles_batch_post_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Assign Users & Groups to Roles on Multiple Documents & Binders  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_roles_batch_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_roles_batch_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/roles/batch', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_templates_get(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Document Template Collection  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_templates_get(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_templates_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_templates_get_with_http_info(authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_templates_get_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Document Template Collection  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_templates_get_with_http_info(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_templates_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/templates', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_templates_post(self, authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Create Single Document Template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_templates_post(authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_templates_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_templates_post_with_http_info(authorization, content_type, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_templates_post_with_http_info(self, authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create Single Document Template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_templates_post_with_http_info(authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'content_type',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_templates_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/templates', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_templates_put(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Update Multiple Document Templates  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_templates_put(authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_templates_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_templates_put_with_http_info(authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_templates_put_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Update Multiple Document Templates  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_templates_put_with_http_info(authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_templates_put" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/templates', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_templates_template_name_delete(self, template_name : Annotated[StrictStr, Field(..., description="The document template name__v field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Delete Basic Document Template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_templates_template_name_delete(template_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param template_name: The document template name__v field value. (required)
        :type template_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_templates_template_name_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_templates_template_name_delete_with_http_info(template_name, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_templates_template_name_delete_with_http_info(self, template_name : Annotated[StrictStr, Field(..., description="The document template name__v field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Delete Basic Document Template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_templates_template_name_delete_with_http_info(template_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param template_name: The document template name__v field value. (required)
        :type template_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'template_name',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_templates_template_name_delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['template_name'] is not None:
            _path_params['template_name'] = _params['template_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/templates/{template_name}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_templates_template_name_file_get(self, template_name : Annotated[StrictStr, Field(..., description="The document template name__v field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Download Document Template File  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_templates_template_name_file_get(template_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param template_name: The document template name__v field value. (required)
        :type template_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_templates_template_name_file_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_templates_template_name_file_get_with_http_info(template_name, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_templates_template_name_file_get_with_http_info(self, template_name : Annotated[StrictStr, Field(..., description="The document template name__v field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Download Document Template File  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_templates_template_name_file_get_with_http_info(template_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param template_name: The document template name__v field value. (required)
        :type template_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'template_name',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_templates_template_name_file_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['template_name'] is not None:
            _path_params['template_name'] = _params['template_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/templates/{template_name}/file', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_templates_template_name_get(self, template_name : Annotated[StrictStr, Field(..., description="The document template name__v field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Document Template Attributes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_templates_template_name_get(template_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param template_name: The document template name__v field value. (required)
        :type template_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_templates_template_name_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_templates_template_name_get_with_http_info(template_name, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_templates_template_name_get_with_http_info(self, template_name : Annotated[StrictStr, Field(..., description="The document template name__v field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Document Template Attributes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_templates_template_name_get_with_http_info(template_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param template_name: The document template name__v field value. (required)
        :type template_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'template_name',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_templates_template_name_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['template_name'] is not None:
            _path_params['template_name'] = _params['template_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/templates/{template_name}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_templates_template_name_put(self, template_name : Annotated[StrictStr, Field(..., description="The document template name__v field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Update Single Document Template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_templates_template_name_put(template_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param template_name: The document template name__v field value. (required)
        :type template_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_templates_template_name_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_templates_template_name_put_with_http_info(template_name, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_templates_template_name_put_with_http_info(self, template_name : Annotated[StrictStr, Field(..., description="The document template name__v field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Update Single Document Template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_templates_template_name_put_with_http_info(template_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param template_name: The document template name__v field value. (required)
        :type template_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'template_name',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_templates_template_name_put" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['template_name'] is not None:
            _path_params['template_name'] = _params['template_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/templates/{template_name}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_tokens_post(self, authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Document Tokens  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_tokens_post(authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_tokens_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_tokens_post_with_http_info(authorization, content_type, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_tokens_post_with_http_info(self, authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Document Tokens  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_tokens_post_with_http_info(authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'content_type',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_tokens_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/tokens', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_versions_batch_actions_fileextract_post(self, source : Annotated[Optional[StrictBool], Field(description="Optional: To exclude source files, include a query parameter source=false. If omitted, defaults to true.")] = None, renditions : Annotated[Optional[StrictBool], Field(description="Optional: To include renditions, include a query parameter renditions=true. If omitted, defaults to false.")] = None, authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Export Document Versions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_versions_batch_actions_fileextract_post(source, renditions, authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param source: Optional: To exclude source files, include a query parameter source=false. If omitted, defaults to true.
        :type source: bool
        :param renditions: Optional: To include renditions, include a query parameter renditions=true. If omitted, defaults to false.
        :type renditions: bool
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_versions_batch_actions_fileextract_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_versions_batch_actions_fileextract_post_with_http_info(source, renditions, authorization, content_type, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_versions_batch_actions_fileextract_post_with_http_info(self, source : Annotated[Optional[StrictBool], Field(description="Optional: To exclude source files, include a query parameter source=false. If omitted, defaults to true.")] = None, renditions : Annotated[Optional[StrictBool], Field(description="Optional: To include renditions, include a query parameter renditions=true. If omitted, defaults to false.")] = None, authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Export Document Versions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_versions_batch_actions_fileextract_post_with_http_info(source, renditions, authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param source: Optional: To exclude source files, include a query parameter source=false. If omitted, defaults to true.
        :type source: bool
        :param renditions: Optional: To include renditions, include a query parameter renditions=true. If omitted, defaults to false.
        :type renditions: bool
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'source',
            'renditions',
            'authorization',
            'content_type',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_versions_batch_actions_fileextract_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('source') is not None:  # noqa: E501
            _query_params.append(('source', _params['source']))

        if _params.get('renditions') is not None:  # noqa: E501
            _query_params.append(('renditions', _params['renditions']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/versions/batch/actions/fileextract', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_versions_batch_delete(self, id_param : Annotated[Optional[StrictStr], Field(description="If you’re identifying documents in your input by their external ID")] = None, authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Delete Multiple Document Versions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_versions_batch_delete(id_param, authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param id_param: If you’re identifying documents in your input by their external ID
        :type id_param: str
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_versions_batch_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_versions_batch_delete_with_http_info(id_param, authorization, content_type, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_versions_batch_delete_with_http_info(self, id_param : Annotated[Optional[StrictStr], Field(description="If you’re identifying documents in your input by their external ID")] = None, authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Delete Multiple Document Versions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_versions_batch_delete_with_http_info(id_param, authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param id_param: If you’re identifying documents in your input by their external ID
        :type id_param: str
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'id_param',
            'authorization',
            'content_type',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_versions_batch_delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('id_param') is not None:  # noqa: E501
            _query_params.append(('idParam', _params['id_param']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/versions/batch', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_documents_versions_batch_post(self, id_param : Annotated[Optional[StrictStr], Field(description="If you’re identifying documents in your input by their external ID")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_migration_mode : Annotated[Optional[StrictStr], Field(description="Must be set to true. Vault allows you to manually set the name and version number and to create documents in any lifecycle state using the `status__v` field, but does not allow you to change the document number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>")] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Create Multiple Document Versions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_versions_batch_post(id_param, authorization, accept, content_type, x_vault_api_migration_mode, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param id_param: If you’re identifying documents in your input by their external ID
        :type id_param: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_migration_mode: Must be set to true. Vault allows you to manually set the name and version number and to create documents in any lifecycle state using the `status__v` field, but does not allow you to change the document number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>
        :type x_vault_api_migration_mode: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_documents_versions_batch_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_documents_versions_batch_post_with_http_info(id_param, authorization, accept, content_type, x_vault_api_migration_mode, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_documents_versions_batch_post_with_http_info(self, id_param : Annotated[Optional[StrictStr], Field(description="If you’re identifying documents in your input by their external ID")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_migration_mode : Annotated[Optional[StrictStr], Field(description="Must be set to true. Vault allows you to manually set the name and version number and to create documents in any lifecycle state using the `status__v` field, but does not allow you to change the document number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>")] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create Multiple Document Versions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_documents_versions_batch_post_with_http_info(id_param, authorization, accept, content_type, x_vault_api_migration_mode, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param id_param: If you’re identifying documents in your input by their external ID
        :type id_param: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_migration_mode: Must be set to true. Vault allows you to manually set the name and version number and to create documents in any lifecycle state using the `status__v` field, but does not allow you to change the document number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>
        :type x_vault_api_migration_mode: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'id_param',
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_migration_mode',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_documents_versions_batch_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('id_param') is not None:  # noqa: E501
            _query_params.append(('idParam', _params['id_param']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_migration_mode'] is not None:
            _header_params['X-VaultAPI-MigrationMode'] = _params['x_vault_api_migration_mode']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/documents/versions/batch', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_domain_get(self, include_application : Annotated[Optional[StrictBool], Field(description="To include Vault application type information in the response, set include_application to true. If omitted, defaults to false and application information is not included.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Domain Information  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_domain_get(include_application, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param include_application: To include Vault application type information in the response, set include_application to true. If omitted, defaults to false and application information is not included.
        :type include_application: bool
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_domain_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_domain_get_with_http_info(include_application, authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_domain_get_with_http_info(self, include_application : Annotated[Optional[StrictBool], Field(description="To include Vault application type information in the response, set include_application to true. If omitted, defaults to false and application information is not included.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Domain Information  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_domain_get_with_http_info(include_application, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param include_application: To include Vault application type information in the response, set include_application to true. If omitted, defaults to false and application information is not included.
        :type include_application: bool
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'include_application',
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_domain_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('include_application') is not None:  # noqa: E501
            _query_params.append(('include_application', _params['include_application']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/domain', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_domains_get(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Domains  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_domains_get(authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_domains_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_domains_get_with_http_info(authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_domains_get_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Domains  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_domains_get_with_http_info(authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_domains_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/domains', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_edl_matched_documents_batch_actions_add_post(self, authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Add EDL Matched Documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_edl_matched_documents_batch_actions_add_post(authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_edl_matched_documents_batch_actions_add_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_edl_matched_documents_batch_actions_add_post_with_http_info(authorization, content_type, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_edl_matched_documents_batch_actions_add_post_with_http_info(self, authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Add EDL Matched Documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_edl_matched_documents_batch_actions_add_post_with_http_info(authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'content_type',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_edl_matched_documents_batch_actions_add_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/edl_matched_documents/batch/actions/add', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_edl_matched_documents_batch_actions_remove_post(self, authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Remove EDL Matched Documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_edl_matched_documents_batch_actions_remove_post(authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_edl_matched_documents_batch_actions_remove_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_edl_matched_documents_batch_actions_remove_post_with_http_info(authorization, content_type, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_edl_matched_documents_batch_actions_remove_post_with_http_info(self, authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Remove EDL Matched Documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_edl_matched_documents_batch_actions_remove_post_with_http_info(authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'content_type',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_edl_matched_documents_batch_actions_remove_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/edl_matched_documents/batch/actions/remove', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_groups_auto_get(self, limit : Annotated[Optional[StrictStr], Field(description="Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 1000. ")] = None, offset : Annotated[Optional[StrictStr], Field(description="Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51. If omitted, defaults to 0.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Auto Managed Groups  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_groups_auto_get(limit, offset, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param limit: Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 1000. 
        :type limit: str
        :param offset: Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51. If omitted, defaults to 0.
        :type offset: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_groups_auto_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_groups_auto_get_with_http_info(limit, offset, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_groups_auto_get_with_http_info(self, limit : Annotated[Optional[StrictStr], Field(description="Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 1000. ")] = None, offset : Annotated[Optional[StrictStr], Field(description="Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51. If omitted, defaults to 0.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Auto Managed Groups  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_groups_auto_get_with_http_info(limit, offset, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param limit: Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 1000. 
        :type limit: str
        :param offset: Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51. If omitted, defaults to 0.
        :type offset: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'limit',
            'offset',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_groups_auto_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('offset') is not None:  # noqa: E501
            _query_params.append(('offset', _params['offset']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/groups/auto', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_groups_get(self, include_implied : Annotated[Optional[StrictStr], Field(description="When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. If omitted, the response includes only the members__v field. These users are individually added to a group by an Admin.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve All Groups  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_groups_get(include_implied, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param include_implied: When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. If omitted, the response includes only the members__v field. These users are individually added to a group by an Admin.
        :type include_implied: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_groups_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_groups_get_with_http_info(include_implied, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_groups_get_with_http_info(self, include_implied : Annotated[Optional[StrictStr], Field(description="When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. If omitted, the response includes only the members__v field. These users are individually added to a group by an Admin.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve All Groups  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_groups_get_with_http_info(include_implied, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param include_implied: When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. If omitted, the response includes only the members__v field. These users are individually added to a group by an Admin.
        :type include_implied: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'include_implied',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_groups_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('include_implied') is not None:  # noqa: E501
            _query_params.append(('includeImplied', _params['include_implied']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/groups', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_groups_group_id_delete(self, group_id : Annotated[StrictStr, Field(..., description="The group id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Delete Group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_groups_group_id_delete(group_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param group_id: The group id field value. (required)
        :type group_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_groups_group_id_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_groups_group_id_delete_with_http_info(group_id, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_groups_group_id_delete_with_http_info(self, group_id : Annotated[StrictStr, Field(..., description="The group id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Delete Group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_groups_group_id_delete_with_http_info(group_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param group_id: The group id field value. (required)
        :type group_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'group_id',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_groups_group_id_delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['group_id'] is not None:
            _path_params['group_id'] = _params['group_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/groups/{group_id}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_groups_group_id_get(self, group_id : Annotated[StrictStr, Field(..., description="The group id field value.")], include_implied : Annotated[Optional[StrictBool], Field(description="When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. When not used, the response includes only the members__v field. These users are individually added to a group by Admin.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_groups_group_id_get(group_id, include_implied, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param group_id: The group id field value. (required)
        :type group_id: str
        :param include_implied: When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. When not used, the response includes only the members__v field. These users are individually added to a group by Admin.
        :type include_implied: bool
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_groups_group_id_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_groups_group_id_get_with_http_info(group_id, include_implied, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_groups_group_id_get_with_http_info(self, group_id : Annotated[StrictStr, Field(..., description="The group id field value.")], include_implied : Annotated[Optional[StrictBool], Field(description="When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. When not used, the response includes only the members__v field. These users are individually added to a group by Admin.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_groups_group_id_get_with_http_info(group_id, include_implied, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param group_id: The group id field value. (required)
        :type group_id: str
        :param include_implied: When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. When not used, the response includes only the members__v field. These users are individually added to a group by Admin.
        :type include_implied: bool
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'group_id',
            'include_implied',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_groups_group_id_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['group_id'] is not None:
            _path_params['group_id'] = _params['group_id']


        # process the query parameters
        _query_params = []
        if _params.get('include_implied') is not None:  # noqa: E501
            _query_params.append(('includeImplied', _params['include_implied']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/groups/{group_id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_groups_group_id_put(self, group_id : Annotated[StrictStr, Field(..., description="The group id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Update Group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_groups_group_id_put(group_id, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param group_id: The group id field value. (required)
        :type group_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_groups_group_id_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_groups_group_id_put_with_http_info(group_id, authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_groups_group_id_put_with_http_info(self, group_id : Annotated[StrictStr, Field(..., description="The group id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Update Group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_groups_group_id_put_with_http_info(group_id, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param group_id: The group id field value. (required)
        :type group_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'group_id',
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_groups_group_id_put" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['group_id'] is not None:
            _path_params['group_id'] = _params['group_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/groups/{group_id}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_groups_post(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Create Group   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_groups_post(authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_groups_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_groups_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_groups_post_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create Group   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_groups_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_groups_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/groups', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_licenses_get(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Application License Usage  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_licenses_get(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_licenses_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_licenses_get_with_http_info(authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_licenses_get_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Application License Usage  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_licenses_get_with_http_info(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_licenses_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/licenses', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_objectworkflows_actions_get(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve All Multi-Record Workflows  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_objectworkflows_actions_get(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_objectworkflows_actions_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_objectworkflows_actions_get_with_http_info(authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_objectworkflows_actions_get_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve All Multi-Record Workflows  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_objectworkflows_actions_get_with_http_info(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_objectworkflows_actions_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/objectworkflows/actions', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_objectworkflows_actions_workflow_name_get(self, workflow_name : StrictStr, authorization : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Multi-Record Workflow Details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_objectworkflows_actions_workflow_name_get(workflow_name, authorization, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param workflow_name: (required)
        :type workflow_name: str
        :param authorization:
        :type authorization: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_objectworkflows_actions_workflow_name_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_objectworkflows_actions_workflow_name_get_with_http_info(workflow_name, authorization, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_objectworkflows_actions_workflow_name_get_with_http_info(self, workflow_name : StrictStr, authorization : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Multi-Record Workflow Details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_objectworkflows_actions_workflow_name_get_with_http_info(workflow_name, authorization, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param workflow_name: (required)
        :type workflow_name: str
        :param authorization:
        :type authorization: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'workflow_name',
            'authorization',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_objectworkflows_actions_workflow_name_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['workflow_name'] is not None:
            _path_params['workflow_name'] = _params['workflow_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/objectworkflows/actions/{workflow_name}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_objectworkflows_actions_workflow_name_post(self, workflow_name : StrictStr, authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Initiate Multi-Record Workflow  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_objectworkflows_actions_workflow_name_post(workflow_name, authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param workflow_name: (required)
        :type workflow_name: str
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_objectworkflows_actions_workflow_name_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_objectworkflows_actions_workflow_name_post_with_http_info(workflow_name, authorization, content_type, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_objectworkflows_actions_workflow_name_post_with_http_info(self, workflow_name : StrictStr, authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Initiate Multi-Record Workflow  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_objectworkflows_actions_workflow_name_post_with_http_info(workflow_name, authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param workflow_name: (required)
        :type workflow_name: str
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'workflow_name',
            'authorization',
            'content_type',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_objectworkflows_actions_workflow_name_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['workflow_name'] is not None:
            _path_params['workflow_name'] = _params['workflow_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/objectworkflows/actions/{workflow_name}', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_objectworkflows_get(self, object__v : Annotated[Optional[StrictStr], Field(description="To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v={name__v}&record_id__v={id}. These two parameters are required when the participant parameter is not used. ")] = None, record_id__v : Annotated[Optional[StrictStr], Field(description="To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v={name__v}&record_id__v={id}. These two parameters are required when the participant parameter is not used. ")] = None, participant : Annotated[Optional[StrictStr], Field(description="To retrieve all workflows available to a particular user, include the user id field value as ?participant={id}. To retrieve your own workflows, set this value to ?participant=me. This parameter is required when the object__v and record_id__v parameters are not used. ")] = None, status__v : Annotated[Optional[StrictStr], Field(description="To retrieve all workflows with specific statuses, include one or more status name__v field values. For example: status__v=active__v, status__v=active__v,completed__v. Workflows with `status__v=active__v` are in progress for the indicated object record. Valid statuses include: active__v completed__v cancelled__v")] = None, offset : Annotated[Optional[StrictStr], Field(description="This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset=201. ")] = None, page_size : Annotated[Optional[StrictStr], Field(description="This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size=1000. ")] = None, loc : Annotated[Optional[StrictStr], Field(description="When localized (translated) strings are available, retrieve them by including ?loc=true. ")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Workflows  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_objectworkflows_get(object__v, record_id__v, participant, status__v, offset, page_size, loc, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object__v: To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v={name__v}&record_id__v={id}. These two parameters are required when the participant parameter is not used. 
        :type object__v: str
        :param record_id__v: To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v={name__v}&record_id__v={id}. These two parameters are required when the participant parameter is not used. 
        :type record_id__v: str
        :param participant: To retrieve all workflows available to a particular user, include the user id field value as ?participant={id}. To retrieve your own workflows, set this value to ?participant=me. This parameter is required when the object__v and record_id__v parameters are not used. 
        :type participant: str
        :param status__v: To retrieve all workflows with specific statuses, include one or more status name__v field values. For example: status__v=active__v, status__v=active__v,completed__v. Workflows with `status__v=active__v` are in progress for the indicated object record. Valid statuses include: active__v completed__v cancelled__v
        :type status__v: str
        :param offset: This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset=201. 
        :type offset: str
        :param page_size: This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size=1000. 
        :type page_size: str
        :param loc: When localized (translated) strings are available, retrieve them by including ?loc=true. 
        :type loc: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_objectworkflows_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_objectworkflows_get_with_http_info(object__v, record_id__v, participant, status__v, offset, page_size, loc, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_objectworkflows_get_with_http_info(self, object__v : Annotated[Optional[StrictStr], Field(description="To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v={name__v}&record_id__v={id}. These two parameters are required when the participant parameter is not used. ")] = None, record_id__v : Annotated[Optional[StrictStr], Field(description="To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v={name__v}&record_id__v={id}. These two parameters are required when the participant parameter is not used. ")] = None, participant : Annotated[Optional[StrictStr], Field(description="To retrieve all workflows available to a particular user, include the user id field value as ?participant={id}. To retrieve your own workflows, set this value to ?participant=me. This parameter is required when the object__v and record_id__v parameters are not used. ")] = None, status__v : Annotated[Optional[StrictStr], Field(description="To retrieve all workflows with specific statuses, include one or more status name__v field values. For example: status__v=active__v, status__v=active__v,completed__v. Workflows with `status__v=active__v` are in progress for the indicated object record. Valid statuses include: active__v completed__v cancelled__v")] = None, offset : Annotated[Optional[StrictStr], Field(description="This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset=201. ")] = None, page_size : Annotated[Optional[StrictStr], Field(description="This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size=1000. ")] = None, loc : Annotated[Optional[StrictStr], Field(description="When localized (translated) strings are available, retrieve them by including ?loc=true. ")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Workflows  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_objectworkflows_get_with_http_info(object__v, record_id__v, participant, status__v, offset, page_size, loc, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object__v: To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v={name__v}&record_id__v={id}. These two parameters are required when the participant parameter is not used. 
        :type object__v: str
        :param record_id__v: To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v={name__v}&record_id__v={id}. These two parameters are required when the participant parameter is not used. 
        :type record_id__v: str
        :param participant: To retrieve all workflows available to a particular user, include the user id field value as ?participant={id}. To retrieve your own workflows, set this value to ?participant=me. This parameter is required when the object__v and record_id__v parameters are not used. 
        :type participant: str
        :param status__v: To retrieve all workflows with specific statuses, include one or more status name__v field values. For example: status__v=active__v, status__v=active__v,completed__v. Workflows with `status__v=active__v` are in progress for the indicated object record. Valid statuses include: active__v completed__v cancelled__v
        :type status__v: str
        :param offset: This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset=201. 
        :type offset: str
        :param page_size: This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size=1000. 
        :type page_size: str
        :param loc: When localized (translated) strings are available, retrieve them by including ?loc=true. 
        :type loc: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'object__v',
            'record_id__v',
            'participant',
            'status__v',
            'offset',
            'page_size',
            'loc',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_objectworkflows_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('object__v') is not None:  # noqa: E501
            _query_params.append(('object__v', _params['object__v']))

        if _params.get('record_id__v') is not None:  # noqa: E501
            _query_params.append(('record_id__v', _params['record_id__v']))

        if _params.get('participant') is not None:  # noqa: E501
            _query_params.append(('participant', _params['participant']))

        if _params.get('status__v') is not None:  # noqa: E501
            _query_params.append(('status__v', _params['status__v']))

        if _params.get('offset') is not None:  # noqa: E501
            _query_params.append(('offset', _params['offset']))

        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('page_size', _params['page_size']))

        if _params.get('loc') is not None:  # noqa: E501
            _query_params.append(('loc', _params['loc']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/objectworkflows', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_objectworkflows_tasks_get(self, object__v : Annotated[Optional[StrictStr], Field(description="To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v={name__v}&record_id__v={id}. These two parameters are required when the assignee__v parameter is not used.")] = None, record_id__v : Annotated[Optional[StrictStr], Field(description="To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v={name__v}&record_id__v={id}. These two parameters are required when the assignee__v parameter is not used.")] = None, assignee__v : Annotated[Optional[StrictStr], Field(description="To retrieve all workflow tasks available to a particular user, include the user id field value as ?assignee__v={id}. To retrieve your own workflow tasks, set this value to ?assignee__v=me. This parameter is required when the object__v and record_id__v parameters are not used. ")] = None, status__v : Annotated[Optional[StrictStr], Field(description="To retrieve all workflow tasks with specific statuses, include one or more status name__v field values. For example: ?status__v=available__v or ?status__v=available__v,completed__v. ")] = None, offset : Annotated[Optional[StrictStr], Field(description="This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset=201. ")] = None, page_size : Annotated[Optional[StrictStr], Field(description="This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size=1000. ")] = None, loc : Annotated[Optional[StrictStr], Field(description="When localized (translated) strings are available, retrieve them by including ?loc=true. ")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Workflow Tasks  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_objectworkflows_tasks_get(object__v, record_id__v, assignee__v, status__v, offset, page_size, loc, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object__v: To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v={name__v}&record_id__v={id}. These two parameters are required when the assignee__v parameter is not used.
        :type object__v: str
        :param record_id__v: To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v={name__v}&record_id__v={id}. These two parameters are required when the assignee__v parameter is not used.
        :type record_id__v: str
        :param assignee__v: To retrieve all workflow tasks available to a particular user, include the user id field value as ?assignee__v={id}. To retrieve your own workflow tasks, set this value to ?assignee__v=me. This parameter is required when the object__v and record_id__v parameters are not used. 
        :type assignee__v: str
        :param status__v: To retrieve all workflow tasks with specific statuses, include one or more status name__v field values. For example: ?status__v=available__v or ?status__v=available__v,completed__v. 
        :type status__v: str
        :param offset: This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset=201. 
        :type offset: str
        :param page_size: This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size=1000. 
        :type page_size: str
        :param loc: When localized (translated) strings are available, retrieve them by including ?loc=true. 
        :type loc: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_objectworkflows_tasks_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_objectworkflows_tasks_get_with_http_info(object__v, record_id__v, assignee__v, status__v, offset, page_size, loc, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_objectworkflows_tasks_get_with_http_info(self, object__v : Annotated[Optional[StrictStr], Field(description="To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v={name__v}&record_id__v={id}. These two parameters are required when the assignee__v parameter is not used.")] = None, record_id__v : Annotated[Optional[StrictStr], Field(description="To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v={name__v}&record_id__v={id}. These two parameters are required when the assignee__v parameter is not used.")] = None, assignee__v : Annotated[Optional[StrictStr], Field(description="To retrieve all workflow tasks available to a particular user, include the user id field value as ?assignee__v={id}. To retrieve your own workflow tasks, set this value to ?assignee__v=me. This parameter is required when the object__v and record_id__v parameters are not used. ")] = None, status__v : Annotated[Optional[StrictStr], Field(description="To retrieve all workflow tasks with specific statuses, include one or more status name__v field values. For example: ?status__v=available__v or ?status__v=available__v,completed__v. ")] = None, offset : Annotated[Optional[StrictStr], Field(description="This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset=201. ")] = None, page_size : Annotated[Optional[StrictStr], Field(description="This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size=1000. ")] = None, loc : Annotated[Optional[StrictStr], Field(description="When localized (translated) strings are available, retrieve them by including ?loc=true. ")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Workflow Tasks  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_objectworkflows_tasks_get_with_http_info(object__v, record_id__v, assignee__v, status__v, offset, page_size, loc, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object__v: To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v={name__v}&record_id__v={id}. These two parameters are required when the assignee__v parameter is not used.
        :type object__v: str
        :param record_id__v: To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v={name__v}&record_id__v={id}. These two parameters are required when the assignee__v parameter is not used.
        :type record_id__v: str
        :param assignee__v: To retrieve all workflow tasks available to a particular user, include the user id field value as ?assignee__v={id}. To retrieve your own workflow tasks, set this value to ?assignee__v=me. This parameter is required when the object__v and record_id__v parameters are not used. 
        :type assignee__v: str
        :param status__v: To retrieve all workflow tasks with specific statuses, include one or more status name__v field values. For example: ?status__v=available__v or ?status__v=available__v,completed__v. 
        :type status__v: str
        :param offset: This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset=201. 
        :type offset: str
        :param page_size: This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size=1000. 
        :type page_size: str
        :param loc: When localized (translated) strings are available, retrieve them by including ?loc=true. 
        :type loc: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'object__v',
            'record_id__v',
            'assignee__v',
            'status__v',
            'offset',
            'page_size',
            'loc',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_objectworkflows_tasks_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('object__v') is not None:  # noqa: E501
            _query_params.append(('object__v', _params['object__v']))

        if _params.get('record_id__v') is not None:  # noqa: E501
            _query_params.append(('record_id__v', _params['record_id__v']))

        if _params.get('assignee__v') is not None:  # noqa: E501
            _query_params.append(('assignee__v', _params['assignee__v']))

        if _params.get('status__v') is not None:  # noqa: E501
            _query_params.append(('status__v', _params['status__v']))

        if _params.get('offset') is not None:  # noqa: E501
            _query_params.append(('offset', _params['offset']))

        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('page_size', _params['page_size']))

        if _params.get('loc') is not None:  # noqa: E501
            _query_params.append(('loc', _params['loc']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/objectworkflows/tasks', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_objectworkflows_tasks_task_id_actions_accept_post(self, task_id : Annotated[StrictStr, Field(..., description="The task id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Accept Single Record Workflow Task  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_objectworkflows_tasks_task_id_actions_accept_post(task_id, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param task_id: The task id field value. (required)
        :type task_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_objectworkflows_tasks_task_id_actions_accept_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_objectworkflows_tasks_task_id_actions_accept_post_with_http_info(task_id, authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_objectworkflows_tasks_task_id_actions_accept_post_with_http_info(self, task_id : Annotated[StrictStr, Field(..., description="The task id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Accept Single Record Workflow Task  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_objectworkflows_tasks_task_id_actions_accept_post_with_http_info(task_id, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param task_id: The task id field value. (required)
        :type task_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'task_id',
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_objectworkflows_tasks_task_id_actions_accept_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['task_id'] is not None:
            _path_params['task_id'] = _params['task_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/objectworkflows/tasks/{task_id}/actions/accept', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_objectworkflows_tasks_task_id_actions_cancel_post(self, task_id : Annotated[StrictStr, Field(..., description="The task id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Cancel Workflow Task  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_objectworkflows_tasks_task_id_actions_cancel_post(task_id, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param task_id: The task id field value. (required)
        :type task_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_objectworkflows_tasks_task_id_actions_cancel_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_objectworkflows_tasks_task_id_actions_cancel_post_with_http_info(task_id, authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_objectworkflows_tasks_task_id_actions_cancel_post_with_http_info(self, task_id : Annotated[StrictStr, Field(..., description="The task id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Cancel Workflow Task  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_objectworkflows_tasks_task_id_actions_cancel_post_with_http_info(task_id, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param task_id: The task id field value. (required)
        :type task_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'task_id',
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_objectworkflows_tasks_task_id_actions_cancel_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['task_id'] is not None:
            _path_params['task_id'] = _params['task_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/objectworkflows/tasks/{task_id}/actions/cancel', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_objectworkflows_tasks_task_id_actions_complete_post(self, task_id : Annotated[StrictStr, Field(..., description="The task id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Complete Single Record Workflow Task  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_objectworkflows_tasks_task_id_actions_complete_post(task_id, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param task_id: The task id field value. (required)
        :type task_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_objectworkflows_tasks_task_id_actions_complete_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_objectworkflows_tasks_task_id_actions_complete_post_with_http_info(task_id, authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_objectworkflows_tasks_task_id_actions_complete_post_with_http_info(self, task_id : Annotated[StrictStr, Field(..., description="The task id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Complete Single Record Workflow Task  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_objectworkflows_tasks_task_id_actions_complete_post_with_http_info(task_id, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param task_id: The task id field value. (required)
        :type task_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'task_id',
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_objectworkflows_tasks_task_id_actions_complete_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['task_id'] is not None:
            _path_params['task_id'] = _params['task_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/objectworkflows/tasks/{task_id}/actions/complete', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_objectworkflows_tasks_task_id_actions_get(self, task_id : Annotated[StrictStr, Field(..., description="The task id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Workflow Task Actions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_objectworkflows_tasks_task_id_actions_get(task_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param task_id: The task id field value. (required)
        :type task_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_objectworkflows_tasks_task_id_actions_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_objectworkflows_tasks_task_id_actions_get_with_http_info(task_id, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_objectworkflows_tasks_task_id_actions_get_with_http_info(self, task_id : Annotated[StrictStr, Field(..., description="The task id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Workflow Task Actions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_objectworkflows_tasks_task_id_actions_get_with_http_info(task_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param task_id: The task id field value. (required)
        :type task_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'task_id',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_objectworkflows_tasks_task_id_actions_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['task_id'] is not None:
            _path_params['task_id'] = _params['task_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/objectworkflows/tasks/{task_id}/actions', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_objectworkflows_tasks_task_id_actions_mdwaccept_post(self, task_id : Annotated[StrictStr, Field(..., description="The task id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Accept Multi-item Workflow Task  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_objectworkflows_tasks_task_id_actions_mdwaccept_post(task_id, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param task_id: The task id field value. (required)
        :type task_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_objectworkflows_tasks_task_id_actions_mdwaccept_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_objectworkflows_tasks_task_id_actions_mdwaccept_post_with_http_info(task_id, authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_objectworkflows_tasks_task_id_actions_mdwaccept_post_with_http_info(self, task_id : Annotated[StrictStr, Field(..., description="The task id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Accept Multi-item Workflow Task  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_objectworkflows_tasks_task_id_actions_mdwaccept_post_with_http_info(task_id, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param task_id: The task id field value. (required)
        :type task_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'task_id',
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_objectworkflows_tasks_task_id_actions_mdwaccept_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['task_id'] is not None:
            _path_params['task_id'] = _params['task_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/objectworkflows/tasks/{task_id}/actions/mdwaccept', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_objectworkflows_tasks_task_id_actions_mdwcomplete_post(self, task_id : Annotated[StrictStr, Field(..., description="The task id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Complete Multi-item Workflow Task  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_objectworkflows_tasks_task_id_actions_mdwcomplete_post(task_id, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param task_id: The task id field value. (required)
        :type task_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_objectworkflows_tasks_task_id_actions_mdwcomplete_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_objectworkflows_tasks_task_id_actions_mdwcomplete_post_with_http_info(task_id, authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_objectworkflows_tasks_task_id_actions_mdwcomplete_post_with_http_info(self, task_id : Annotated[StrictStr, Field(..., description="The task id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Complete Multi-item Workflow Task  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_objectworkflows_tasks_task_id_actions_mdwcomplete_post_with_http_info(task_id, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param task_id: The task id field value. (required)
        :type task_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'task_id',
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_objectworkflows_tasks_task_id_actions_mdwcomplete_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['task_id'] is not None:
            _path_params['task_id'] = _params['task_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/objectworkflows/tasks/{task_id}/actions/mdwcomplete', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_objectworkflows_tasks_task_id_actions_mdwmanagecontent_post(self, task_id : Annotated[StrictStr, Field(..., description="The task id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Manage Multi-Item Workflow Content  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_objectworkflows_tasks_task_id_actions_mdwmanagecontent_post(task_id, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param task_id: The task id field value. (required)
        :type task_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_objectworkflows_tasks_task_id_actions_mdwmanagecontent_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_objectworkflows_tasks_task_id_actions_mdwmanagecontent_post_with_http_info(task_id, authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_objectworkflows_tasks_task_id_actions_mdwmanagecontent_post_with_http_info(self, task_id : Annotated[StrictStr, Field(..., description="The task id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Manage Multi-Item Workflow Content  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_objectworkflows_tasks_task_id_actions_mdwmanagecontent_post_with_http_info(task_id, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param task_id: The task id field value. (required)
        :type task_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'task_id',
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_objectworkflows_tasks_task_id_actions_mdwmanagecontent_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['task_id'] is not None:
            _path_params['task_id'] = _params['task_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/objectworkflows/tasks/{task_id}/actions/mdwmanagecontent', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_objectworkflows_tasks_task_id_actions_mdwreassign_post(self, task_id : Annotated[StrictStr, Field(..., description="The id of the task to reassign.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Reassign Multi-item Workflow Task  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_objectworkflows_tasks_task_id_actions_mdwreassign_post(task_id, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param task_id: The id of the task to reassign. (required)
        :type task_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_objectworkflows_tasks_task_id_actions_mdwreassign_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_objectworkflows_tasks_task_id_actions_mdwreassign_post_with_http_info(task_id, authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_objectworkflows_tasks_task_id_actions_mdwreassign_post_with_http_info(self, task_id : Annotated[StrictStr, Field(..., description="The id of the task to reassign.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Reassign Multi-item Workflow Task  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_objectworkflows_tasks_task_id_actions_mdwreassign_post_with_http_info(task_id, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param task_id: The id of the task to reassign. (required)
        :type task_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'task_id',
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_objectworkflows_tasks_task_id_actions_mdwreassign_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['task_id'] is not None:
            _path_params['task_id'] = _params['task_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/objectworkflows/tasks/{task_id}/actions/mdwreassign', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_objectworkflows_tasks_task_id_actions_reassign_post(self, task_id : Annotated[StrictStr, Field(..., description="The id of the task to reassign.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Reassign Single Record Workflow Task  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_objectworkflows_tasks_task_id_actions_reassign_post(task_id, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param task_id: The id of the task to reassign. (required)
        :type task_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_objectworkflows_tasks_task_id_actions_reassign_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_objectworkflows_tasks_task_id_actions_reassign_post_with_http_info(task_id, authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_objectworkflows_tasks_task_id_actions_reassign_post_with_http_info(self, task_id : Annotated[StrictStr, Field(..., description="The id of the task to reassign.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Reassign Single Record Workflow Task  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_objectworkflows_tasks_task_id_actions_reassign_post_with_http_info(task_id, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param task_id: The id of the task to reassign. (required)
        :type task_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'task_id',
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_objectworkflows_tasks_task_id_actions_reassign_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['task_id'] is not None:
            _path_params['task_id'] = _params['task_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/objectworkflows/tasks/{task_id}/actions/reassign', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_objectworkflows_tasks_task_id_actions_task_action_get(self, task_id : Annotated[StrictStr, Field(..., description="The task id field value.")], task_action : Annotated[StrictStr, Field(..., description="The name of the task action retrieved from Retrieve Workflow Task Actions.")], loc : Annotated[Optional[StrictStr], Field(description="When localized (translated) strings are available, retrieve them by including loc=true. ")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Workflow Task Action Details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_objectworkflows_tasks_task_id_actions_task_action_get(task_id, task_action, loc, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param task_id: The task id field value. (required)
        :type task_id: str
        :param task_action: The name of the task action retrieved from Retrieve Workflow Task Actions. (required)
        :type task_action: str
        :param loc: When localized (translated) strings are available, retrieve them by including loc=true. 
        :type loc: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_objectworkflows_tasks_task_id_actions_task_action_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_objectworkflows_tasks_task_id_actions_task_action_get_with_http_info(task_id, task_action, loc, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_objectworkflows_tasks_task_id_actions_task_action_get_with_http_info(self, task_id : Annotated[StrictStr, Field(..., description="The task id field value.")], task_action : Annotated[StrictStr, Field(..., description="The name of the task action retrieved from Retrieve Workflow Task Actions.")], loc : Annotated[Optional[StrictStr], Field(description="When localized (translated) strings are available, retrieve them by including loc=true. ")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Workflow Task Action Details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_objectworkflows_tasks_task_id_actions_task_action_get_with_http_info(task_id, task_action, loc, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param task_id: The task id field value. (required)
        :type task_id: str
        :param task_action: The name of the task action retrieved from Retrieve Workflow Task Actions. (required)
        :type task_action: str
        :param loc: When localized (translated) strings are available, retrieve them by including loc=true. 
        :type loc: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'task_id',
            'task_action',
            'loc',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_objectworkflows_tasks_task_id_actions_task_action_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['task_id'] is not None:
            _path_params['task_id'] = _params['task_id']

        if _params['task_action'] is not None:
            _path_params['task_action'] = _params['task_action']


        # process the query parameters
        _query_params = []
        if _params.get('loc') is not None:  # noqa: E501
            _query_params.append(('loc', _params['loc']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/objectworkflows/tasks/{task_id}/actions/{task_action}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_objectworkflows_tasks_task_id_actions_undoaccept_post(self, task_id : Annotated[StrictStr, Field(..., description="The task id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Undo Workflow Task Acceptance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_objectworkflows_tasks_task_id_actions_undoaccept_post(task_id, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param task_id: The task id field value. (required)
        :type task_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_objectworkflows_tasks_task_id_actions_undoaccept_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_objectworkflows_tasks_task_id_actions_undoaccept_post_with_http_info(task_id, authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_objectworkflows_tasks_task_id_actions_undoaccept_post_with_http_info(self, task_id : Annotated[StrictStr, Field(..., description="The task id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Undo Workflow Task Acceptance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_objectworkflows_tasks_task_id_actions_undoaccept_post_with_http_info(task_id, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param task_id: The task id field value. (required)
        :type task_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'task_id',
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_objectworkflows_tasks_task_id_actions_undoaccept_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['task_id'] is not None:
            _path_params['task_id'] = _params['task_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/objectworkflows/tasks/{task_id}/actions/undoaccept', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_objectworkflows_tasks_task_id_actions_updateduedate_post(self, task_id : Annotated[StrictStr, Field(..., description="The id of the task.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Update Workflow Task Due Date  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_objectworkflows_tasks_task_id_actions_updateduedate_post(task_id, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param task_id: The id of the task. (required)
        :type task_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_objectworkflows_tasks_task_id_actions_updateduedate_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_objectworkflows_tasks_task_id_actions_updateduedate_post_with_http_info(task_id, authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_objectworkflows_tasks_task_id_actions_updateduedate_post_with_http_info(self, task_id : Annotated[StrictStr, Field(..., description="The id of the task.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Update Workflow Task Due Date  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_objectworkflows_tasks_task_id_actions_updateduedate_post_with_http_info(task_id, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param task_id: The id of the task. (required)
        :type task_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'task_id',
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_objectworkflows_tasks_task_id_actions_updateduedate_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['task_id'] is not None:
            _path_params['task_id'] = _params['task_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/objectworkflows/tasks/{task_id}/actions/updateduedate', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_objectworkflows_tasks_task_id_get(self, task_id : Annotated[StrictStr, Field(..., description="The task id field value.")], loc : Annotated[Optional[StrictBool], Field(description="When localized (translated) strings are available, retrieve them by including loc=true.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Workflow Task Details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_objectworkflows_tasks_task_id_get(task_id, loc, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param task_id: The task id field value. (required)
        :type task_id: str
        :param loc: When localized (translated) strings are available, retrieve them by including loc=true.
        :type loc: bool
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_objectworkflows_tasks_task_id_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_objectworkflows_tasks_task_id_get_with_http_info(task_id, loc, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_objectworkflows_tasks_task_id_get_with_http_info(self, task_id : Annotated[StrictStr, Field(..., description="The task id field value.")], loc : Annotated[Optional[StrictBool], Field(description="When localized (translated) strings are available, retrieve them by including loc=true.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Workflow Task Details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_objectworkflows_tasks_task_id_get_with_http_info(task_id, loc, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param task_id: The task id field value. (required)
        :type task_id: str
        :param loc: When localized (translated) strings are available, retrieve them by including loc=true.
        :type loc: bool
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'task_id',
            'loc',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_objectworkflows_tasks_task_id_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['task_id'] is not None:
            _path_params['task_id'] = _params['task_id']


        # process the query parameters
        _query_params = []
        if _params.get('loc') is not None:  # noqa: E501
            _query_params.append(('loc', _params['loc']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/objectworkflows/tasks/{task_id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_objectworkflows_workflow_id_actions_get(self, workflow_id : Annotated[StrictStr, Field(..., description="The workflow id field value.")], loc : Annotated[Optional[StrictStr], Field(description="When localized (translated) strings are available, retrieve them by including loc=true. ")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Workflow Actions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_objectworkflows_workflow_id_actions_get(workflow_id, loc, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param workflow_id: The workflow id field value. (required)
        :type workflow_id: str
        :param loc: When localized (translated) strings are available, retrieve them by including loc=true. 
        :type loc: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_objectworkflows_workflow_id_actions_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_objectworkflows_workflow_id_actions_get_with_http_info(workflow_id, loc, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_objectworkflows_workflow_id_actions_get_with_http_info(self, workflow_id : Annotated[StrictStr, Field(..., description="The workflow id field value.")], loc : Annotated[Optional[StrictStr], Field(description="When localized (translated) strings are available, retrieve them by including loc=true. ")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Workflow Actions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_objectworkflows_workflow_id_actions_get_with_http_info(workflow_id, loc, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param workflow_id: The workflow id field value. (required)
        :type workflow_id: str
        :param loc: When localized (translated) strings are available, retrieve them by including loc=true. 
        :type loc: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'workflow_id',
            'loc',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_objectworkflows_workflow_id_actions_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['workflow_id'] is not None:
            _path_params['workflow_id'] = _params['workflow_id']


        # process the query parameters
        _query_params = []
        if _params.get('loc') is not None:  # noqa: E501
            _query_params.append(('loc', _params['loc']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/objectworkflows/{workflow_id}/actions', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_objectworkflows_workflow_id_actions_workflow_action_get(self, workflow_id : Annotated[StrictStr, Field(..., description="The workflow id field value.")], workflow_action : Annotated[StrictStr, Field(..., description="The workflow action name retrieved from Retrieve Workflow Actions.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Workflow Action Details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_objectworkflows_workflow_id_actions_workflow_action_get(workflow_id, workflow_action, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param workflow_id: The workflow id field value. (required)
        :type workflow_id: str
        :param workflow_action: The workflow action name retrieved from Retrieve Workflow Actions. (required)
        :type workflow_action: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_objectworkflows_workflow_id_actions_workflow_action_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_objectworkflows_workflow_id_actions_workflow_action_get_with_http_info(workflow_id, workflow_action, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_objectworkflows_workflow_id_actions_workflow_action_get_with_http_info(self, workflow_id : Annotated[StrictStr, Field(..., description="The workflow id field value.")], workflow_action : Annotated[StrictStr, Field(..., description="The workflow action name retrieved from Retrieve Workflow Actions.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Workflow Action Details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_objectworkflows_workflow_id_actions_workflow_action_get_with_http_info(workflow_id, workflow_action, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param workflow_id: The workflow id field value. (required)
        :type workflow_id: str
        :param workflow_action: The workflow action name retrieved from Retrieve Workflow Actions. (required)
        :type workflow_action: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'workflow_id',
            'workflow_action',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_objectworkflows_workflow_id_actions_workflow_action_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['workflow_id'] is not None:
            _path_params['workflow_id'] = _params['workflow_id']

        if _params['workflow_action'] is not None:
            _path_params['workflow_action'] = _params['workflow_action']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/objectworkflows/{workflow_id}/actions/{workflow_action}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_objectworkflows_workflow_id_actions_workflow_action_post(self, workflow_id : Annotated[StrictStr, Field(..., description="The workflow id field value.")], workflow_action : Annotated[StrictStr, Field(..., description="The workflow action name retrieved from Retrieve Workflow Actions.")], documents__sys : Annotated[Optional[StrictStr], Field(description="Include the id or ids as a comma-separated list of the document(s) to be removed from a document workflow when using the removecontent action. If your workflow_action is remove_content, include the id of the document to remove the workflow. To remove multiple documents, use a comma-separated list of ids.")] = None, authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Initiate Workflow Action  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_objectworkflows_workflow_id_actions_workflow_action_post(workflow_id, workflow_action, documents__sys, authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param workflow_id: The workflow id field value. (required)
        :type workflow_id: str
        :param workflow_action: The workflow action name retrieved from Retrieve Workflow Actions. (required)
        :type workflow_action: str
        :param documents__sys: Include the id or ids as a comma-separated list of the document(s) to be removed from a document workflow when using the removecontent action. If your workflow_action is remove_content, include the id of the document to remove the workflow. To remove multiple documents, use a comma-separated list of ids.
        :type documents__sys: str
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_objectworkflows_workflow_id_actions_workflow_action_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_objectworkflows_workflow_id_actions_workflow_action_post_with_http_info(workflow_id, workflow_action, documents__sys, authorization, content_type, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_objectworkflows_workflow_id_actions_workflow_action_post_with_http_info(self, workflow_id : Annotated[StrictStr, Field(..., description="The workflow id field value.")], workflow_action : Annotated[StrictStr, Field(..., description="The workflow action name retrieved from Retrieve Workflow Actions.")], documents__sys : Annotated[Optional[StrictStr], Field(description="Include the id or ids as a comma-separated list of the document(s) to be removed from a document workflow when using the removecontent action. If your workflow_action is remove_content, include the id of the document to remove the workflow. To remove multiple documents, use a comma-separated list of ids.")] = None, authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Initiate Workflow Action  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_objectworkflows_workflow_id_actions_workflow_action_post_with_http_info(workflow_id, workflow_action, documents__sys, authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param workflow_id: The workflow id field value. (required)
        :type workflow_id: str
        :param workflow_action: The workflow action name retrieved from Retrieve Workflow Actions. (required)
        :type workflow_action: str
        :param documents__sys: Include the id or ids as a comma-separated list of the document(s) to be removed from a document workflow when using the removecontent action. If your workflow_action is remove_content, include the id of the document to remove the workflow. To remove multiple documents, use a comma-separated list of ids.
        :type documents__sys: str
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'workflow_id',
            'workflow_action',
            'documents__sys',
            'authorization',
            'content_type',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_objectworkflows_workflow_id_actions_workflow_action_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['workflow_id'] is not None:
            _path_params['workflow_id'] = _params['workflow_id']

        if _params['workflow_action'] is not None:
            _path_params['workflow_action'] = _params['workflow_action']


        # process the query parameters
        _query_params = []
        if _params.get('documents__sys') is not None:  # noqa: E501
            _query_params.append(('documents__sys', _params['documents__sys']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/objectworkflows/{workflow_id}/actions/{workflow_action}', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_objectworkflows_workflow_id_get(self, workflow_id : Annotated[StrictStr, Field(..., description="The workflow id field value.")], loc : Annotated[Optional[StrictBool], Field(description="When localized (translated) strings are available, retrieve them by including loc=true.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Workflow Details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_objectworkflows_workflow_id_get(workflow_id, loc, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param workflow_id: The workflow id field value. (required)
        :type workflow_id: str
        :param loc: When localized (translated) strings are available, retrieve them by including loc=true.
        :type loc: bool
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_objectworkflows_workflow_id_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_objectworkflows_workflow_id_get_with_http_info(workflow_id, loc, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_objectworkflows_workflow_id_get_with_http_info(self, workflow_id : Annotated[StrictStr, Field(..., description="The workflow id field value.")], loc : Annotated[Optional[StrictBool], Field(description="When localized (translated) strings are available, retrieve them by including loc=true.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Workflow Details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_objectworkflows_workflow_id_get_with_http_info(workflow_id, loc, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param workflow_id: The workflow id field value. (required)
        :type workflow_id: str
        :param loc: When localized (translated) strings are available, retrieve them by including loc=true.
        :type loc: bool
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'workflow_id',
            'loc',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_objectworkflows_workflow_id_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['workflow_id'] is not None:
            _path_params['workflow_id'] = _params['workflow_id']


        # process the query parameters
        _query_params = []
        if _params.get('loc') is not None:  # noqa: E501
            _query_params.append(('loc', _params['loc']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/objectworkflows/{workflow_id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_picklists_get(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve All Picklists  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_picklists_get(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_picklists_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_picklists_get_with_http_info(authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_picklists_get_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve All Picklists  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_picklists_get_with_http_info(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_picklists_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/picklists', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_picklists_picklist_name_get(self, picklist_name : Annotated[StrictStr, Field(..., description="The picklist name field value (license_type__v, product_family__c, region__c, etc.)")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Picklist Values  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_picklists_picklist_name_get(picklist_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param picklist_name: The picklist name field value (license_type__v, product_family__c, region__c, etc.) (required)
        :type picklist_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_picklists_picklist_name_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_picklists_picklist_name_get_with_http_info(picklist_name, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_picklists_picklist_name_get_with_http_info(self, picklist_name : Annotated[StrictStr, Field(..., description="The picklist name field value (license_type__v, product_family__c, region__c, etc.)")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Picklist Values  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_picklists_picklist_name_get_with_http_info(picklist_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param picklist_name: The picklist name field value (license_type__v, product_family__c, region__c, etc.) (required)
        :type picklist_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'picklist_name',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_picklists_picklist_name_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['picklist_name'] is not None:
            _path_params['picklist_name'] = _params['picklist_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/picklists/{picklist_name}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_picklists_picklist_name_picklist_value_name_delete(self, picklist_name : Annotated[StrictStr, Field(..., description="The picklist name field value (license_type__v, product_family__c, region__c, etc.)")], picklist_value_name : Annotated[StrictStr, Field(..., description="The picklist value name field value (north_america__c, south_america__c, etc.)")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Inactivate Picklist Value  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_picklists_picklist_name_picklist_value_name_delete(picklist_name, picklist_value_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param picklist_name: The picklist name field value (license_type__v, product_family__c, region__c, etc.) (required)
        :type picklist_name: str
        :param picklist_value_name: The picklist value name field value (north_america__c, south_america__c, etc.) (required)
        :type picklist_value_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_picklists_picklist_name_picklist_value_name_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_picklists_picklist_name_picklist_value_name_delete_with_http_info(picklist_name, picklist_value_name, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_picklists_picklist_name_picklist_value_name_delete_with_http_info(self, picklist_name : Annotated[StrictStr, Field(..., description="The picklist name field value (license_type__v, product_family__c, region__c, etc.)")], picklist_value_name : Annotated[StrictStr, Field(..., description="The picklist value name field value (north_america__c, south_america__c, etc.)")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Inactivate Picklist Value  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_picklists_picklist_name_picklist_value_name_delete_with_http_info(picklist_name, picklist_value_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param picklist_name: The picklist name field value (license_type__v, product_family__c, region__c, etc.) (required)
        :type picklist_name: str
        :param picklist_value_name: The picklist value name field value (north_america__c, south_america__c, etc.) (required)
        :type picklist_value_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'picklist_name',
            'picklist_value_name',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_picklists_picklist_name_picklist_value_name_delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['picklist_name'] is not None:
            _path_params['picklist_name'] = _params['picklist_name']

        if _params['picklist_value_name'] is not None:
            _path_params['picklist_value_name'] = _params['picklist_value_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/picklists/{picklist_name}/{picklist_value_name}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_picklists_picklist_name_picklist_value_name_put(self, picklist_name : Annotated[StrictStr, Field(..., description="The picklist name field value (license_type__v, product_family__c, region__c, etc.)")], picklist_value_name : Annotated[StrictStr, Field(..., description="The picklist value name field value (north_america__c, south_america__c, etc.)")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Update Picklist Value  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_picklists_picklist_name_picklist_value_name_put(picklist_name, picklist_value_name, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param picklist_name: The picklist name field value (license_type__v, product_family__c, region__c, etc.) (required)
        :type picklist_name: str
        :param picklist_value_name: The picklist value name field value (north_america__c, south_america__c, etc.) (required)
        :type picklist_value_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_picklists_picklist_name_picklist_value_name_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_picklists_picklist_name_picklist_value_name_put_with_http_info(picklist_name, picklist_value_name, authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_picklists_picklist_name_picklist_value_name_put_with_http_info(self, picklist_name : Annotated[StrictStr, Field(..., description="The picklist name field value (license_type__v, product_family__c, region__c, etc.)")], picklist_value_name : Annotated[StrictStr, Field(..., description="The picklist value name field value (north_america__c, south_america__c, etc.)")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Update Picklist Value  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_picklists_picklist_name_picklist_value_name_put_with_http_info(picklist_name, picklist_value_name, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param picklist_name: The picklist name field value (license_type__v, product_family__c, region__c, etc.) (required)
        :type picklist_name: str
        :param picklist_value_name: The picklist value name field value (north_america__c, south_america__c, etc.) (required)
        :type picklist_value_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'picklist_name',
            'picklist_value_name',
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_picklists_picklist_name_picklist_value_name_put" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['picklist_name'] is not None:
            _path_params['picklist_name'] = _params['picklist_name']

        if _params['picklist_value_name'] is not None:
            _path_params['picklist_value_name'] = _params['picklist_value_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/picklists/{picklist_name}/{picklist_value_name}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_picklists_picklist_name_post(self, picklist_name : Annotated[StrictStr, Field(..., description="The picklist name field value (license_type__v, product_family__c, region__c, etc.)")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Create Picklist Values  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_picklists_picklist_name_post(picklist_name, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param picklist_name: The picklist name field value (license_type__v, product_family__c, region__c, etc.) (required)
        :type picklist_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_picklists_picklist_name_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_picklists_picklist_name_post_with_http_info(picklist_name, authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_picklists_picklist_name_post_with_http_info(self, picklist_name : Annotated[StrictStr, Field(..., description="The picklist name field value (license_type__v, product_family__c, region__c, etc.)")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create Picklist Values  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_picklists_picklist_name_post_with_http_info(picklist_name, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param picklist_name: The picklist name field value (license_type__v, product_family__c, region__c, etc.) (required)
        :type picklist_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'picklist_name',
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_picklists_picklist_name_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['picklist_name'] is not None:
            _path_params['picklist_name'] = _params['picklist_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/picklists/{picklist_name}', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_picklists_picklist_name_put(self, picklist_name : Annotated[StrictStr, Field(..., description="The picklist name field value (license_type__v, product_family__c, region__c, etc.)")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Update Picklist Value Label  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_picklists_picklist_name_put(picklist_name, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param picklist_name: The picklist name field value (license_type__v, product_family__c, region__c, etc.) (required)
        :type picklist_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_picklists_picklist_name_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_picklists_picklist_name_put_with_http_info(picklist_name, authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_picklists_picklist_name_put_with_http_info(self, picklist_name : Annotated[StrictStr, Field(..., description="The picklist name field value (license_type__v, product_family__c, region__c, etc.)")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Update Picklist Value Label  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_picklists_picklist_name_put_with_http_info(picklist_name, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param picklist_name: The picklist name field value (license_type__v, product_family__c, region__c, etc.) (required)
        :type picklist_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'picklist_name',
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_picklists_picklist_name_put" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['picklist_name'] is not None:
            _path_params['picklist_name'] = _params['picklist_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/picklists/{picklist_name}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_sandbox_actions_buildproduction_post(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Build Production Vault  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_sandbox_actions_buildproduction_post(authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_sandbox_actions_buildproduction_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_sandbox_actions_buildproduction_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_sandbox_actions_buildproduction_post_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Build Production Vault  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_sandbox_actions_buildproduction_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_sandbox_actions_buildproduction_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/sandbox/actions/buildproduction', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_sandbox_actions_promoteproduction_post(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Promote to Production  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_sandbox_actions_promoteproduction_post(authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_sandbox_actions_promoteproduction_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_sandbox_actions_promoteproduction_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_sandbox_actions_promoteproduction_post_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Promote to Production  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_sandbox_actions_promoteproduction_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_sandbox_actions_promoteproduction_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/sandbox/actions/promoteproduction', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_sandbox_actions_recheckusage_post(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Recheck Sandbox Usage Limit  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_sandbox_actions_recheckusage_post(authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_sandbox_actions_recheckusage_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_sandbox_actions_recheckusage_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_sandbox_actions_recheckusage_post_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Recheck Sandbox Usage Limit  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_sandbox_actions_recheckusage_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_sandbox_actions_recheckusage_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/sandbox/actions/recheckusage', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_sandbox_batch_changesize_post(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Change Sandbox Size  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_sandbox_batch_changesize_post(authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_sandbox_batch_changesize_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_sandbox_batch_changesize_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_sandbox_batch_changesize_post_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Change Sandbox Size  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_sandbox_batch_changesize_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_sandbox_batch_changesize_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/sandbox/batch/changesize', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_sandbox_entitlements_set_post(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Set Sandbox Entitlements  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_sandbox_entitlements_set_post(authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_sandbox_entitlements_set_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_sandbox_entitlements_set_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_sandbox_entitlements_set_post_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Set Sandbox Entitlements  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_sandbox_entitlements_set_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_sandbox_entitlements_set_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/sandbox/entitlements/set', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_sandbox_get(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Sandboxes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_sandbox_get(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_sandbox_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_sandbox_get_with_http_info(authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_sandbox_get_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Sandboxes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_sandbox_get_with_http_info(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_sandbox_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/sandbox', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_sandbox_name_delete(self, name : Annotated[StrictStr, Field(..., description="The name of the sandbox vault to delete. This is the name which appears on the My Vaults page.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Delete Sandbox  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_sandbox_name_delete(name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param name: The name of the sandbox vault to delete. This is the name which appears on the My Vaults page. (required)
        :type name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_sandbox_name_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_sandbox_name_delete_with_http_info(name, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_sandbox_name_delete_with_http_info(self, name : Annotated[StrictStr, Field(..., description="The name of the sandbox vault to delete. This is the name which appears on the My Vaults page.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Delete Sandbox  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_sandbox_name_delete_with_http_info(name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param name: The name of the sandbox vault to delete. This is the name which appears on the My Vaults page. (required)
        :type name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'name',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_sandbox_name_delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['name'] is not None:
            _path_params['name'] = _params['name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/sandbox/{name}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_sandbox_post(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Create or Refresh Sandbox  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_sandbox_post(authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_sandbox_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_sandbox_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_sandbox_post_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create or Refresh Sandbox  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_sandbox_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_sandbox_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/sandbox', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_sandbox_snapshot_api_name_actions_update_post(self, api_name : Annotated[StrictStr, Field(..., description="The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Update Sandbox Snapshot  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_sandbox_snapshot_api_name_actions_update_post(api_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param api_name: The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request. (required)
        :type api_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_sandbox_snapshot_api_name_actions_update_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_sandbox_snapshot_api_name_actions_update_post_with_http_info(api_name, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_sandbox_snapshot_api_name_actions_update_post_with_http_info(self, api_name : Annotated[StrictStr, Field(..., description="The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Update Sandbox Snapshot  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_sandbox_snapshot_api_name_actions_update_post_with_http_info(api_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param api_name: The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request. (required)
        :type api_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'api_name',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_sandbox_snapshot_api_name_actions_update_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['api_name'] is not None:
            _path_params['api_name'] = _params['api_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/sandbox/snapshot/{api_name}/actions/update', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_sandbox_snapshot_api_name_actions_upgrade_post(self, api_name : Annotated[StrictStr, Field(..., description="The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Upgrade Sandbox Snapshot  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_sandbox_snapshot_api_name_actions_upgrade_post(api_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param api_name: The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request. (required)
        :type api_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_sandbox_snapshot_api_name_actions_upgrade_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_sandbox_snapshot_api_name_actions_upgrade_post_with_http_info(api_name, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_sandbox_snapshot_api_name_actions_upgrade_post_with_http_info(self, api_name : Annotated[StrictStr, Field(..., description="The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Upgrade Sandbox Snapshot  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_sandbox_snapshot_api_name_actions_upgrade_post_with_http_info(api_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param api_name: The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request. (required)
        :type api_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'api_name',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_sandbox_snapshot_api_name_actions_upgrade_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['api_name'] is not None:
            _path_params['api_name'] = _params['api_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/sandbox/snapshot/{api_name}/actions/upgrade', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_sandbox_snapshot_api_name_delete(self, api_name : Annotated[StrictStr, Field(..., description="The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Delete Sandbox Snapshot  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_sandbox_snapshot_api_name_delete(api_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param api_name: The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request. (required)
        :type api_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_sandbox_snapshot_api_name_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_sandbox_snapshot_api_name_delete_with_http_info(api_name, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_sandbox_snapshot_api_name_delete_with_http_info(self, api_name : Annotated[StrictStr, Field(..., description="The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Delete Sandbox Snapshot  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_sandbox_snapshot_api_name_delete_with_http_info(api_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param api_name: The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request. (required)
        :type api_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'api_name',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_sandbox_snapshot_api_name_delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['api_name'] is not None:
            _path_params['api_name'] = _params['api_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/sandbox/snapshot/{api_name}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_sandbox_snapshot_get(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Sandbox Snapshots  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_sandbox_snapshot_get(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_sandbox_snapshot_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_sandbox_snapshot_get_with_http_info(authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_sandbox_snapshot_get_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Sandbox Snapshots  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_sandbox_snapshot_get_with_http_info(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_sandbox_snapshot_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/sandbox/snapshot', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_sandbox_snapshot_post(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Create Sandbox Snapshot  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_sandbox_snapshot_post(authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_sandbox_snapshot_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_sandbox_snapshot_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_sandbox_snapshot_post_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create Sandbox Snapshot  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_sandbox_snapshot_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_sandbox_snapshot_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/sandbox/snapshot', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_sandbox_vault_id_actions_refresh_post(self, vault_id : Annotated[StrictStr, Field(..., description="The Vault ID of the sandbox to be refreshed.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Refresh Sandbox from Snapshot  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_sandbox_vault_id_actions_refresh_post(vault_id, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param vault_id: The Vault ID of the sandbox to be refreshed. (required)
        :type vault_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_sandbox_vault_id_actions_refresh_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_sandbox_vault_id_actions_refresh_post_with_http_info(vault_id, authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_sandbox_vault_id_actions_refresh_post_with_http_info(self, vault_id : Annotated[StrictStr, Field(..., description="The Vault ID of the sandbox to be refreshed.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Refresh Sandbox from Snapshot  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_sandbox_vault_id_actions_refresh_post_with_http_info(vault_id, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param vault_id: The Vault ID of the sandbox to be refreshed. (required)
        :type vault_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'vault_id',
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_sandbox_vault_id_actions_refresh_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['vault_id'] is not None:
            _path_params['vault_id'] = _params['vault_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/sandbox/{vault_id}/actions/refresh', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_sandbox_vault_id_get(self, vault_id : StrictStr, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Sandbox Details by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_sandbox_vault_id_get(vault_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param vault_id: (required)
        :type vault_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_sandbox_vault_id_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_sandbox_vault_id_get_with_http_info(vault_id, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_sandbox_vault_id_get_with_http_info(self, vault_id : StrictStr, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Sandbox Details by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_sandbox_vault_id_get_with_http_info(vault_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param vault_id: (required)
        :type vault_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'vault_id',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_sandbox_vault_id_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['vault_id'] is not None:
            _path_params['vault_id'] = _params['vault_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/sandbox/{vault_id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_securitypolicies_get(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve All Security Policies  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_securitypolicies_get(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_securitypolicies_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_securitypolicies_get_with_http_info(authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_securitypolicies_get_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve All Security Policies  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_securitypolicies_get_with_http_info(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_securitypolicies_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/securitypolicies', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_securitypolicies_security_policy_name_get(self, security_policy_name : Annotated[StrictStr, Field(..., description="Security policy name__v field value (retrieved from previous request). This is typically a numeric value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Security Policy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_securitypolicies_security_policy_name_get(security_policy_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param security_policy_name: Security policy name__v field value (retrieved from previous request). This is typically a numeric value. (required)
        :type security_policy_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_securitypolicies_security_policy_name_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_securitypolicies_security_policy_name_get_with_http_info(security_policy_name, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_securitypolicies_security_policy_name_get_with_http_info(self, security_policy_name : Annotated[StrictStr, Field(..., description="Security policy name__v field value (retrieved from previous request). This is typically a numeric value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Security Policy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_securitypolicies_security_policy_name_get_with_http_info(security_policy_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param security_policy_name: Security policy name__v field value (retrieved from previous request). This is typically a numeric value. (required)
        :type security_policy_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'security_policy_name',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_securitypolicies_security_policy_name_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['security_policy_name'] is not None:
            _path_params['security_policy_name'] = _params['security_policy_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/securitypolicies/{security_policy_name}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_users_get(self, vaults : Annotated[Optional[StrictStr], Field(description="Retrieve all users assigned to all Vaults in your domain.")] = None, exclude_vault_membership : Annotated[Optional[StrictStr], Field(description="Optional: Set to false to include vault_membership fields. If true or omitted, vault_membership fields are not included in the response.")] = None, exclude_app_licensing : Annotated[Optional[StrictStr], Field(description="Optional: Set to false to include app_licensing fields. If true or omitted, app_licensing fields are not included in the response.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve All Users  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_users_get(vaults, exclude_vault_membership, exclude_app_licensing, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param vaults: Retrieve all users assigned to all Vaults in your domain.
        :type vaults: str
        :param exclude_vault_membership: Optional: Set to false to include vault_membership fields. If true or omitted, vault_membership fields are not included in the response.
        :type exclude_vault_membership: str
        :param exclude_app_licensing: Optional: Set to false to include app_licensing fields. If true or omitted, app_licensing fields are not included in the response.
        :type exclude_app_licensing: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_users_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_users_get_with_http_info(vaults, exclude_vault_membership, exclude_app_licensing, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_users_get_with_http_info(self, vaults : Annotated[Optional[StrictStr], Field(description="Retrieve all users assigned to all Vaults in your domain.")] = None, exclude_vault_membership : Annotated[Optional[StrictStr], Field(description="Optional: Set to false to include vault_membership fields. If true or omitted, vault_membership fields are not included in the response.")] = None, exclude_app_licensing : Annotated[Optional[StrictStr], Field(description="Optional: Set to false to include app_licensing fields. If true or omitted, app_licensing fields are not included in the response.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve All Users  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_users_get_with_http_info(vaults, exclude_vault_membership, exclude_app_licensing, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param vaults: Retrieve all users assigned to all Vaults in your domain.
        :type vaults: str
        :param exclude_vault_membership: Optional: Set to false to include vault_membership fields. If true or omitted, vault_membership fields are not included in the response.
        :type exclude_vault_membership: str
        :param exclude_app_licensing: Optional: Set to false to include app_licensing fields. If true or omitted, app_licensing fields are not included in the response.
        :type exclude_app_licensing: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'vaults',
            'exclude_vault_membership',
            'exclude_app_licensing',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_users_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('vaults') is not None:  # noqa: E501
            _query_params.append(('vaults', _params['vaults']))

        if _params.get('exclude_vault_membership') is not None:  # noqa: E501
            _query_params.append(('exclude_vault_membership', _params['exclude_vault_membership']))

        if _params.get('exclude_app_licensing') is not None:  # noqa: E501
            _query_params.append(('exclude_app_licensing', _params['exclude_app_licensing']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/users/', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_users_id_get(self, id : Annotated[StrictStr, Field(..., description="The user id field value. Use the value me to get information for the currently authenticated user.")], exclude_vault_membership : Annotated[Optional[StrictStr], Field(description="Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response.")] = None, exclude_app_licensing : Annotated[Optional[StrictStr], Field(description="Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve User  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_users_id_get(id, exclude_vault_membership, exclude_app_licensing, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param id: The user id field value. Use the value me to get information for the currently authenticated user. (required)
        :type id: str
        :param exclude_vault_membership: Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response.
        :type exclude_vault_membership: str
        :param exclude_app_licensing: Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response.
        :type exclude_app_licensing: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_users_id_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_users_id_get_with_http_info(id, exclude_vault_membership, exclude_app_licensing, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_users_id_get_with_http_info(self, id : Annotated[StrictStr, Field(..., description="The user id field value. Use the value me to get information for the currently authenticated user.")], exclude_vault_membership : Annotated[Optional[StrictStr], Field(description="Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response.")] = None, exclude_app_licensing : Annotated[Optional[StrictStr], Field(description="Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve User  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_users_id_get_with_http_info(id, exclude_vault_membership, exclude_app_licensing, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param id: The user id field value. Use the value me to get information for the currently authenticated user. (required)
        :type id: str
        :param exclude_vault_membership: Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response.
        :type exclude_vault_membership: str
        :param exclude_app_licensing: Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response.
        :type exclude_app_licensing: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'id',
            'exclude_vault_membership',
            'exclude_app_licensing',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_users_id_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id'] is not None:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        if _params.get('exclude_vault_membership') is not None:  # noqa: E501
            _query_params.append(('exclude_vault_membership', _params['exclude_vault_membership']))

        if _params.get('exclude_app_licensing') is not None:  # noqa: E501
            _query_params.append(('exclude_app_licensing', _params['exclude_app_licensing']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/users/{id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_users_id_permissions_get(self, id : Annotated[StrictStr, Field(..., description="The ID of the user. Use the value me to retrieve information for the currently authenticated user.")], filter : Annotated[Optional[StrictStr], Field(description="Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve User Permissions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_users_id_permissions_get(id, filter, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param id: The ID of the user. Use the value me to retrieve information for the currently authenticated user. (required)
        :type id: str
        :param filter: Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below.
        :type filter: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_users_id_permissions_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_users_id_permissions_get_with_http_info(id, filter, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_users_id_permissions_get_with_http_info(self, id : Annotated[StrictStr, Field(..., description="The ID of the user. Use the value me to retrieve information for the currently authenticated user.")], filter : Annotated[Optional[StrictStr], Field(description="Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve User Permissions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_users_id_permissions_get_with_http_info(id, filter, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param id: The ID of the user. Use the value me to retrieve information for the currently authenticated user. (required)
        :type id: str
        :param filter: Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below.
        :type filter: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'id',
            'filter',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_users_id_permissions_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id'] is not None:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        if _params.get('filter') is not None:  # noqa: E501
            _query_params.append(('filter', _params['filter']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/users/{id}/permissions', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_users_id_put(self, id : Annotated[StrictStr, Field(..., description="The user id field value. Use the value me to get information for the currently authenticated user.")], authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Update Single User  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_users_id_put(id, authorization, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param id: The user id field value. Use the value me to get information for the currently authenticated user. (required)
        :type id: str
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_users_id_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_users_id_put_with_http_info(id, authorization, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_users_id_put_with_http_info(self, id : Annotated[StrictStr, Field(..., description="The user id field value. Use the value me to get information for the currently authenticated user.")], authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Update Single User  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_users_id_put_with_http_info(id, authorization, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param id: The user id field value. Use the value me to get information for the currently authenticated user. (required)
        :type id: str
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'id',
            'authorization',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_users_id_put" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id'] is not None:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/users/{id}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_users_me_get(self, exclude_vault_membership : Annotated[Optional[StrictStr], Field(description="Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response.")] = None, exclude_app_licensing : Annotated[Optional[StrictStr], Field(description="Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Validate Session User  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_users_me_get(exclude_vault_membership, exclude_app_licensing, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param exclude_vault_membership: Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response.
        :type exclude_vault_membership: str
        :param exclude_app_licensing: Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response.
        :type exclude_app_licensing: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_users_me_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_users_me_get_with_http_info(exclude_vault_membership, exclude_app_licensing, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_users_me_get_with_http_info(self, exclude_vault_membership : Annotated[Optional[StrictStr], Field(description="Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response.")] = None, exclude_app_licensing : Annotated[Optional[StrictStr], Field(description="Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Validate Session User  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_users_me_get_with_http_info(exclude_vault_membership, exclude_app_licensing, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param exclude_vault_membership: Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response.
        :type exclude_vault_membership: str
        :param exclude_app_licensing: Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response.
        :type exclude_app_licensing: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'exclude_vault_membership',
            'exclude_app_licensing',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_users_me_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('exclude_vault_membership') is not None:  # noqa: E501
            _query_params.append(('exclude_vault_membership', _params['exclude_vault_membership']))

        if _params.get('exclude_app_licensing') is not None:  # noqa: E501
            _query_params.append(('exclude_app_licensing', _params['exclude_app_licensing']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/users/me', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_users_me_password_post(self, authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Change My Password  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_users_me_password_post(authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_users_me_password_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_users_me_password_post_with_http_info(authorization, content_type, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_users_me_password_post_with_http_info(self, authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Change My Password  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_users_me_password_post_with_http_info(authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'content_type',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_users_me_password_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/users/me/password', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_users_me_permissions_get(self, filter : Annotated[Optional[StrictStr], Field(description="Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve My User Permissions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_users_me_permissions_get(filter, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param filter: Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below.
        :type filter: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_users_me_permissions_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_users_me_permissions_get_with_http_info(filter, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_users_me_permissions_get_with_http_info(self, filter : Annotated[Optional[StrictStr], Field(description="Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve My User Permissions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_users_me_permissions_get_with_http_info(filter, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param filter: Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below.
        :type filter: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'filter',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_users_me_permissions_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('filter') is not None:  # noqa: E501
            _query_params.append(('filter', _params['filter']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/users/me/permissions', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_users_me_put(self, authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Update My User  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_users_me_put(authorization, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_users_me_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_users_me_put_with_http_info(authorization, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_users_me_put_with_http_info(self, authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Update My User  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_users_me_put_with_http_info(authorization, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_users_me_put" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/users/me', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_users_post(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Create Single User  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_users_post(authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_users_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_users_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_users_post_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create Single User  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_users_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_users_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/users', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_users_put(self, authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Update Multiple Users  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_users_put(authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_users_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_users_put_with_http_info(authorization, content_type, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_users_put_with_http_info(self, authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Update Multiple Users  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_users_put_with_http_info(authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'content_type',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_users_put" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/users', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_users_user_id_delete(self, user_id : Annotated[StrictStr, Field(..., description="The user id field value. ")], domain : Annotated[Optional[StrictBool], Field(description="When true, this disables the user account in all vaults in the domain.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Disable User  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_users_user_id_delete(user_id, domain, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param user_id: The user id field value.  (required)
        :type user_id: str
        :param domain: When true, this disables the user account in all vaults in the domain.
        :type domain: bool
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_users_user_id_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_users_user_id_delete_with_http_info(user_id, domain, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_users_user_id_delete_with_http_info(self, user_id : Annotated[StrictStr, Field(..., description="The user id field value. ")], domain : Annotated[Optional[StrictBool], Field(description="When true, this disables the user account in all vaults in the domain.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Disable User  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_users_user_id_delete_with_http_info(user_id, domain, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param user_id: The user id field value.  (required)
        :type user_id: str
        :param domain: When true, this disables the user account in all vaults in the domain.
        :type domain: bool
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'user_id',
            'domain',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_users_user_id_delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['user_id'] is not None:
            _path_params['user_id'] = _params['user_id']


        # process the query parameters
        _query_params = []
        if _params.get('domain') is not None:  # noqa: E501
            _query_params.append(('domain', _params['domain']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/users/{user_id}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_users_user_id_vault_membership_vault_id_put(self, user_id : Annotated[StrictStr, Field(..., description="The user id field value.")], vault_id : Annotated[StrictStr, Field(..., description="The system-managed id field value assigned to each vault in the domain.")], authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Update Vault Membership  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_users_user_id_vault_membership_vault_id_put(user_id, vault_id, authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param user_id: The user id field value. (required)
        :type user_id: str
        :param vault_id: The system-managed id field value assigned to each vault in the domain. (required)
        :type vault_id: str
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_users_user_id_vault_membership_vault_id_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_users_user_id_vault_membership_vault_id_put_with_http_info(user_id, vault_id, authorization, content_type, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_users_user_id_vault_membership_vault_id_put_with_http_info(self, user_id : Annotated[StrictStr, Field(..., description="The user id field value.")], vault_id : Annotated[StrictStr, Field(..., description="The system-managed id field value assigned to each vault in the domain.")], authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Update Vault Membership  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_users_user_id_vault_membership_vault_id_put_with_http_info(user_id, vault_id, authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param user_id: The user id field value. (required)
        :type user_id: str
        :param vault_id: The system-managed id field value assigned to each vault in the domain. (required)
        :type vault_id: str
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'user_id',
            'vault_id',
            'authorization',
            'content_type',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_users_user_id_vault_membership_vault_id_put" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['user_id'] is not None:
            _path_params['user_id'] = _params['user_id']

        if _params['vault_id'] is not None:
            _path_params['vault_id'] = _params['vault_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/users/{user_id}/vault_membership/{vault_id}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_vault_actions_compare_post(self, authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Vault Compare  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_vault_actions_compare_post(authorization, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_vault_actions_compare_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_vault_actions_compare_post_with_http_info(authorization, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_vault_actions_compare_post_with_http_info(self, authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Vault Compare  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_vault_actions_compare_post_with_http_info(authorization, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_vault_actions_compare_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/vault/actions/compare', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def objects_vault_actions_configreport_post(self, authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Vault Configuration Report  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_vault_actions_configreport_post(authorization, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_vault_actions_configreport_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.objects_vault_actions_configreport_post_with_http_info(authorization, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def objects_vault_actions_configreport_post_with_http_info(self, authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Vault Configuration Report  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.objects_vault_actions_configreport_post_with_http_info(authorization, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_vault_actions_configreport_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/objects/vault/actions/configreport', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def query_components_post(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Component Definition Query  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.query_components_post(authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the query_components_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.query_components_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def query_components_post_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Component Definition Query  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.query_components_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method query_components_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/query/components', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def query_next_page_post(self, next_page : StrictStr, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_describe_query : Optional[StrictBool] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Next Page URL  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.query_next_page_post(next_page, authorization, accept, x_vault_api_describe_query, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param next_page: (required)
        :type next_page: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_describe_query:
        :type x_vault_api_describe_query: bool
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the query_next_page_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.query_next_page_post_with_http_info(next_page, authorization, accept, x_vault_api_describe_query, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def query_next_page_post_with_http_info(self, next_page : StrictStr, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_describe_query : Optional[StrictBool] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Next Page URL  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.query_next_page_post_with_http_info(next_page, authorization, accept, x_vault_api_describe_query, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param next_page: (required)
        :type next_page: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_describe_query:
        :type x_vault_api_describe_query: bool
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'next_page',
            'authorization',
            'accept',
            'x_vault_api_describe_query',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method query_next_page_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['next_page'] is not None:
            _path_params['next_page'] = _params['next_page']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_describe_query'] is not None:
            _header_params['X-VaultAPI-DescribeQuery'] = _params['x_vault_api_describe_query']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/query/{next_page}', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def query_post(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_describe_query : Optional[StrictBool] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Submitting a Query  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.query_post(authorization, accept, x_vault_api_describe_query, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_describe_query:
        :type x_vault_api_describe_query: bool
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the query_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.query_post_with_http_info(authorization, accept, x_vault_api_describe_query, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def query_post_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_describe_query : Optional[StrictBool] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Submitting a Query  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.query_post_with_http_info(authorization, accept, x_vault_api_describe_query, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_describe_query:
        :type x_vault_api_describe_query: bool
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'x_vault_api_describe_query',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method query_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_describe_query'] is not None:
            _header_params['X-VaultAPI-DescribeQuery'] = _params['x_vault_api_describe_query']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/query', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def query_previous_page_post(self, previous_page : StrictStr, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_describe_query : Optional[StrictBool] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Previous Page URL  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.query_previous_page_post(previous_page, authorization, accept, x_vault_api_describe_query, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param previous_page: (required)
        :type previous_page: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_describe_query:
        :type x_vault_api_describe_query: bool
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the query_previous_page_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.query_previous_page_post_with_http_info(previous_page, authorization, accept, x_vault_api_describe_query, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def query_previous_page_post_with_http_info(self, previous_page : StrictStr, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_describe_query : Optional[StrictBool] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Previous Page URL  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.query_previous_page_post_with_http_info(previous_page, authorization, accept, x_vault_api_describe_query, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param previous_page: (required)
        :type previous_page: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_describe_query:
        :type x_vault_api_describe_query: bool
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'previous_page',
            'authorization',
            'accept',
            'x_vault_api_describe_query',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method query_previous_page_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['previous_page'] is not None:
            _path_params['previous_page'] = _params['previous_page']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_describe_query'] is not None:
            _header_params['X-VaultAPI-DescribeQuery'] = _params['x_vault_api_describe_query']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/query/{previous_page}', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def scim_v2_me_get(self, attributes : Annotated[Optional[StrictStr], Field(description="Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.")] = None, excluded_attributes : Annotated[Optional[StrictStr], Field(description="Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Current User with SCIM  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.scim_v2_me_get(attributes, excluded_attributes, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param attributes: Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.
        :type attributes: str
        :param excluded_attributes: Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
        :type excluded_attributes: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the scim_v2_me_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.scim_v2_me_get_with_http_info(attributes, excluded_attributes, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def scim_v2_me_get_with_http_info(self, attributes : Annotated[Optional[StrictStr], Field(description="Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.")] = None, excluded_attributes : Annotated[Optional[StrictStr], Field(description="Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Current User with SCIM  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.scim_v2_me_get_with_http_info(attributes, excluded_attributes, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param attributes: Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.
        :type attributes: str
        :param excluded_attributes: Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
        :type excluded_attributes: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'attributes',
            'excluded_attributes',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method scim_v2_me_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('attributes') is not None:  # noqa: E501
            _query_params.append(('attributes', _params['attributes']))

        if _params.get('excluded_attributes') is not None:  # noqa: E501
            _query_params.append(('excludedAttributes', _params['excluded_attributes']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/scim/v2/Me', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def scim_v2_me_put(self, attributes : Annotated[Optional[StrictStr], Field(description="Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.")] = None, excluded_attributes : Annotated[Optional[StrictStr], Field(description="Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Update Current User with SCIM  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.scim_v2_me_put(attributes, excluded_attributes, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param attributes: Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.
        :type attributes: str
        :param excluded_attributes: Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
        :type excluded_attributes: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the scim_v2_me_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.scim_v2_me_put_with_http_info(attributes, excluded_attributes, authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def scim_v2_me_put_with_http_info(self, attributes : Annotated[Optional[StrictStr], Field(description="Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.")] = None, excluded_attributes : Annotated[Optional[StrictStr], Field(description="Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Update Current User with SCIM  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.scim_v2_me_put_with_http_info(attributes, excluded_attributes, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param attributes: Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.
        :type attributes: str
        :param excluded_attributes: Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
        :type excluded_attributes: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'attributes',
            'excluded_attributes',
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method scim_v2_me_put" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('attributes') is not None:  # noqa: E501
            _query_params.append(('attributes', _params['attributes']))

        if _params.get('excluded_attributes') is not None:  # noqa: E501
            _query_params.append(('excludedAttributes', _params['excluded_attributes']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/scim/v2/Me', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def scim_v2_resource_types_get(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve All SCIM Resource Types  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.scim_v2_resource_types_get(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the scim_v2_resource_types_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.scim_v2_resource_types_get_with_http_info(authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def scim_v2_resource_types_get_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve All SCIM Resource Types  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.scim_v2_resource_types_get_with_http_info(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method scim_v2_resource_types_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/scim/v2/ResourceTypes', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def scim_v2_resource_types_type_get(self, type : Annotated[StrictStr, Field(..., description="A specific resource type. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the id value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Single SCIM Resource Type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.scim_v2_resource_types_type_get(type, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param type: A specific resource type. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the id value. (required)
        :type type: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the scim_v2_resource_types_type_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.scim_v2_resource_types_type_get_with_http_info(type, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def scim_v2_resource_types_type_get_with_http_info(self, type : Annotated[StrictStr, Field(..., description="A specific resource type. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the id value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Single SCIM Resource Type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.scim_v2_resource_types_type_get_with_http_info(type, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param type: A specific resource type. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the id value. (required)
        :type type: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'type',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method scim_v2_resource_types_type_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['type'] is not None:
            _path_params['type'] = _params['type']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/scim/v2/ResourceTypes/{type}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def scim_v2_schemas_get(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve All SCIM Schema Information  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.scim_v2_schemas_get(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the scim_v2_schemas_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.scim_v2_schemas_get_with_http_info(authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def scim_v2_schemas_get_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve All SCIM Schema Information  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.scim_v2_schemas_get_with_http_info(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method scim_v2_schemas_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/scim/v2/Schemas', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def scim_v2_schemas_id_get(self, id : Annotated[StrictStr, Field(..., description="The ID of a specific schema. For example, urn:ietf:params:scim:schemas:extension:veevavault:2.0:User.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Single SCIM Schema Information  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.scim_v2_schemas_id_get(id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param id: The ID of a specific schema. For example, urn:ietf:params:scim:schemas:extension:veevavault:2.0:User. (required)
        :type id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the scim_v2_schemas_id_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.scim_v2_schemas_id_get_with_http_info(id, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def scim_v2_schemas_id_get_with_http_info(self, id : Annotated[StrictStr, Field(..., description="The ID of a specific schema. For example, urn:ietf:params:scim:schemas:extension:veevavault:2.0:User.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Single SCIM Schema Information  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.scim_v2_schemas_id_get_with_http_info(id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param id: The ID of a specific schema. For example, urn:ietf:params:scim:schemas:extension:veevavault:2.0:User. (required)
        :type id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'id',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method scim_v2_schemas_id_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id'] is not None:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/scim/v2/Schemas/{id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def scim_v2_service_provider_config_get(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve SCIM Provider  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.scim_v2_service_provider_config_get(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the scim_v2_service_provider_config_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.scim_v2_service_provider_config_get_with_http_info(authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def scim_v2_service_provider_config_get_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve SCIM Provider  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.scim_v2_service_provider_config_get_with_http_info(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method scim_v2_service_provider_config_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/scim/v2/ServiceProviderConfig', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def scim_v2_type_get(self, type : Annotated[StrictStr, Field(..., description="The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value.")], filter : Annotated[Optional[StrictStr], Field(description="Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \"{value}\". For example, to filter for a particular user name, userName eq \"john\". Complex expressions are not supported, and eq is the only supported operator.")] = None, attributes : Annotated[Optional[StrictStr], Field(description="Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.")] = None, excluded_attributes : Annotated[Optional[StrictStr], Field(description="Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.")] = None, sort_by : Annotated[Optional[StrictStr], Field(description="Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage")] = None, sort_order : Annotated[Optional[StrictStr], Field(description="Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000.")] = None, start_index : Annotated[Optional[StrictStr], Field(description="Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve SCIM Resources  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.scim_v2_type_get(type, filter, attributes, excluded_attributes, sort_by, sort_order, start_index, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param type: The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value. (required)
        :type type: str
        :param filter: Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \"{value}\". For example, to filter for a particular user name, userName eq \"john\". Complex expressions are not supported, and eq is the only supported operator.
        :type filter: str
        :param attributes: Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.
        :type attributes: str
        :param excluded_attributes: Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
        :type excluded_attributes: str
        :param sort_by: Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage
        :type sort_by: str
        :param sort_order: Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000.
        :type sort_order: str
        :param start_index: Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1.
        :type start_index: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the scim_v2_type_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.scim_v2_type_get_with_http_info(type, filter, attributes, excluded_attributes, sort_by, sort_order, start_index, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def scim_v2_type_get_with_http_info(self, type : Annotated[StrictStr, Field(..., description="The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value.")], filter : Annotated[Optional[StrictStr], Field(description="Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \"{value}\". For example, to filter for a particular user name, userName eq \"john\". Complex expressions are not supported, and eq is the only supported operator.")] = None, attributes : Annotated[Optional[StrictStr], Field(description="Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.")] = None, excluded_attributes : Annotated[Optional[StrictStr], Field(description="Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.")] = None, sort_by : Annotated[Optional[StrictStr], Field(description="Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage")] = None, sort_order : Annotated[Optional[StrictStr], Field(description="Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000.")] = None, start_index : Annotated[Optional[StrictStr], Field(description="Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve SCIM Resources  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.scim_v2_type_get_with_http_info(type, filter, attributes, excluded_attributes, sort_by, sort_order, start_index, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param type: The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value. (required)
        :type type: str
        :param filter: Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \"{value}\". For example, to filter for a particular user name, userName eq \"john\". Complex expressions are not supported, and eq is the only supported operator.
        :type filter: str
        :param attributes: Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.
        :type attributes: str
        :param excluded_attributes: Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
        :type excluded_attributes: str
        :param sort_by: Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage
        :type sort_by: str
        :param sort_order: Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000.
        :type sort_order: str
        :param start_index: Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1.
        :type start_index: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'type',
            'filter',
            'attributes',
            'excluded_attributes',
            'sort_by',
            'sort_order',
            'start_index',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method scim_v2_type_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['type'] is not None:
            _path_params['type'] = _params['type']


        # process the query parameters
        _query_params = []
        if _params.get('filter') is not None:  # noqa: E501
            _query_params.append(('filter', _params['filter']))

        if _params.get('attributes') is not None:  # noqa: E501
            _query_params.append(('attributes', _params['attributes']))

        if _params.get('excluded_attributes') is not None:  # noqa: E501
            _query_params.append(('excludedAttributes', _params['excluded_attributes']))

        if _params.get('sort_by') is not None:  # noqa: E501
            _query_params.append(('sortBy', _params['sort_by']))

        if _params.get('sort_order') is not None:  # noqa: E501
            _query_params.append(('sortOrder', _params['sort_order']))

        if _params.get('start_index') is not None:  # noqa: E501
            _query_params.append(('startIndex', _params['start_index']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/scim/v2/{type}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def scim_v2_type_id_get(self, type : Annotated[StrictStr, Field(..., description="The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value.")], id : Annotated[StrictStr, Field(..., description="The ID of the resource to retrieve. You can retrieve all resource IDs from a particular resource type with the Retrieve SCIM Resources endpoint. For example, business_admin__v.")], attributes : Annotated[Optional[StrictStr], Field(description="Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.")] = None, excluded_attributes : Annotated[Optional[StrictStr], Field(description="Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Single SCIM Resource  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.scim_v2_type_id_get(type, id, attributes, excluded_attributes, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param type: The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value. (required)
        :type type: str
        :param id: The ID of the resource to retrieve. You can retrieve all resource IDs from a particular resource type with the Retrieve SCIM Resources endpoint. For example, business_admin__v. (required)
        :type id: str
        :param attributes: Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.
        :type attributes: str
        :param excluded_attributes: Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
        :type excluded_attributes: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the scim_v2_type_id_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.scim_v2_type_id_get_with_http_info(type, id, attributes, excluded_attributes, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def scim_v2_type_id_get_with_http_info(self, type : Annotated[StrictStr, Field(..., description="The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value.")], id : Annotated[StrictStr, Field(..., description="The ID of the resource to retrieve. You can retrieve all resource IDs from a particular resource type with the Retrieve SCIM Resources endpoint. For example, business_admin__v.")], attributes : Annotated[Optional[StrictStr], Field(description="Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.")] = None, excluded_attributes : Annotated[Optional[StrictStr], Field(description="Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Single SCIM Resource  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.scim_v2_type_id_get_with_http_info(type, id, attributes, excluded_attributes, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param type: The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value. (required)
        :type type: str
        :param id: The ID of the resource to retrieve. You can retrieve all resource IDs from a particular resource type with the Retrieve SCIM Resources endpoint. For example, business_admin__v. (required)
        :type id: str
        :param attributes: Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.
        :type attributes: str
        :param excluded_attributes: Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
        :type excluded_attributes: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'type',
            'id',
            'attributes',
            'excluded_attributes',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method scim_v2_type_id_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['type'] is not None:
            _path_params['type'] = _params['type']

        if _params['id'] is not None:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        if _params.get('attributes') is not None:  # noqa: E501
            _query_params.append(('attributes', _params['attributes']))

        if _params.get('excluded_attributes') is not None:  # noqa: E501
            _query_params.append(('excludedAttributes', _params['excluded_attributes']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/scim/v2/{type}/{id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def scim_v2_users_get(self, filter : Annotated[Optional[StrictStr], Field(description="Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \"{value}\". For example, to filter for a particular user name, userName eq \"john\". Complex expressions are not supported, and eq is the only supported operator.")] = None, attributes : Annotated[Optional[StrictStr], Field(description="Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.")] = None, excluded_attributes : Annotated[Optional[StrictStr], Field(description="Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.")] = None, sort_by : Annotated[Optional[StrictStr], Field(description="Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage")] = None, sort_order : Annotated[Optional[StrictStr], Field(description="Optional: Specify the order in which the sortBy parameter is applied. Allowed values are ascending or descending. If omitted, defaults to ascending.")] = None, count : Annotated[Optional[StrictStr], Field(description="Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000.")] = None, start_index : Annotated[Optional[StrictStr], Field(description="Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve All Users with SCIM  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.scim_v2_users_get(filter, attributes, excluded_attributes, sort_by, sort_order, count, start_index, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param filter: Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \"{value}\". For example, to filter for a particular user name, userName eq \"john\". Complex expressions are not supported, and eq is the only supported operator.
        :type filter: str
        :param attributes: Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.
        :type attributes: str
        :param excluded_attributes: Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
        :type excluded_attributes: str
        :param sort_by: Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage
        :type sort_by: str
        :param sort_order: Optional: Specify the order in which the sortBy parameter is applied. Allowed values are ascending or descending. If omitted, defaults to ascending.
        :type sort_order: str
        :param count: Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000.
        :type count: str
        :param start_index: Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1.
        :type start_index: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the scim_v2_users_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.scim_v2_users_get_with_http_info(filter, attributes, excluded_attributes, sort_by, sort_order, count, start_index, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def scim_v2_users_get_with_http_info(self, filter : Annotated[Optional[StrictStr], Field(description="Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \"{value}\". For example, to filter for a particular user name, userName eq \"john\". Complex expressions are not supported, and eq is the only supported operator.")] = None, attributes : Annotated[Optional[StrictStr], Field(description="Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.")] = None, excluded_attributes : Annotated[Optional[StrictStr], Field(description="Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.")] = None, sort_by : Annotated[Optional[StrictStr], Field(description="Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage")] = None, sort_order : Annotated[Optional[StrictStr], Field(description="Optional: Specify the order in which the sortBy parameter is applied. Allowed values are ascending or descending. If omitted, defaults to ascending.")] = None, count : Annotated[Optional[StrictStr], Field(description="Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000.")] = None, start_index : Annotated[Optional[StrictStr], Field(description="Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve All Users with SCIM  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.scim_v2_users_get_with_http_info(filter, attributes, excluded_attributes, sort_by, sort_order, count, start_index, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param filter: Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \"{value}\". For example, to filter for a particular user name, userName eq \"john\". Complex expressions are not supported, and eq is the only supported operator.
        :type filter: str
        :param attributes: Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.
        :type attributes: str
        :param excluded_attributes: Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
        :type excluded_attributes: str
        :param sort_by: Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage
        :type sort_by: str
        :param sort_order: Optional: Specify the order in which the sortBy parameter is applied. Allowed values are ascending or descending. If omitted, defaults to ascending.
        :type sort_order: str
        :param count: Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000.
        :type count: str
        :param start_index: Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1.
        :type start_index: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'filter',
            'attributes',
            'excluded_attributes',
            'sort_by',
            'sort_order',
            'count',
            'start_index',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method scim_v2_users_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('filter') is not None:  # noqa: E501
            _query_params.append(('filter', _params['filter']))

        if _params.get('attributes') is not None:  # noqa: E501
            _query_params.append(('attributes', _params['attributes']))

        if _params.get('excluded_attributes') is not None:  # noqa: E501
            _query_params.append(('excludedAttributes', _params['excluded_attributes']))

        if _params.get('sort_by') is not None:  # noqa: E501
            _query_params.append(('sortBy', _params['sort_by']))

        if _params.get('sort_order') is not None:  # noqa: E501
            _query_params.append(('sortOrder', _params['sort_order']))

        if _params.get('count') is not None:  # noqa: E501
            _query_params.append(('count', _params['count']))

        if _params.get('start_index') is not None:  # noqa: E501
            _query_params.append(('startIndex', _params['start_index']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/scim/v2/Users', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def scim_v2_users_id_get(self, id : Annotated[StrictStr, Field(..., description="The id of the user you wish to update.")], filter : Annotated[Optional[StrictStr], Field(description="Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \"{value}\". For example, to filter for a particular user name, userName eq \"john\". Complex expressions are not supported, and eq is the only supported operator.")] = None, attributes : Annotated[Optional[StrictStr], Field(description="Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.")] = None, excluded_attributes : Annotated[Optional[StrictStr], Field(description="Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Single User with SCIM  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.scim_v2_users_id_get(id, filter, attributes, excluded_attributes, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param id: The id of the user you wish to update. (required)
        :type id: str
        :param filter: Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \"{value}\". For example, to filter for a particular user name, userName eq \"john\". Complex expressions are not supported, and eq is the only supported operator.
        :type filter: str
        :param attributes: Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.
        :type attributes: str
        :param excluded_attributes: Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
        :type excluded_attributes: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the scim_v2_users_id_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.scim_v2_users_id_get_with_http_info(id, filter, attributes, excluded_attributes, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def scim_v2_users_id_get_with_http_info(self, id : Annotated[StrictStr, Field(..., description="The id of the user you wish to update.")], filter : Annotated[Optional[StrictStr], Field(description="Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \"{value}\". For example, to filter for a particular user name, userName eq \"john\". Complex expressions are not supported, and eq is the only supported operator.")] = None, attributes : Annotated[Optional[StrictStr], Field(description="Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.")] = None, excluded_attributes : Annotated[Optional[StrictStr], Field(description="Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Single User with SCIM  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.scim_v2_users_id_get_with_http_info(id, filter, attributes, excluded_attributes, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param id: The id of the user you wish to update. (required)
        :type id: str
        :param filter: Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \"{value}\". For example, to filter for a particular user name, userName eq \"john\". Complex expressions are not supported, and eq is the only supported operator.
        :type filter: str
        :param attributes: Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.
        :type attributes: str
        :param excluded_attributes: Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
        :type excluded_attributes: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'id',
            'filter',
            'attributes',
            'excluded_attributes',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method scim_v2_users_id_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id'] is not None:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        if _params.get('filter') is not None:  # noqa: E501
            _query_params.append(('filter', _params['filter']))

        if _params.get('attributes') is not None:  # noqa: E501
            _query_params.append(('attributes', _params['attributes']))

        if _params.get('excluded_attributes') is not None:  # noqa: E501
            _query_params.append(('excludedAttributes', _params['excluded_attributes']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/scim/v2/Users/{id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def scim_v2_users_id_put(self, id : Annotated[StrictStr, Field(..., description="The id of the user you wish to update.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Update User with SCIM  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.scim_v2_users_id_put(id, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param id: The id of the user you wish to update. (required)
        :type id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the scim_v2_users_id_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.scim_v2_users_id_put_with_http_info(id, authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def scim_v2_users_id_put_with_http_info(self, id : Annotated[StrictStr, Field(..., description="The id of the user you wish to update.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Update User with SCIM  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.scim_v2_users_id_put_with_http_info(id, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param id: The id of the user you wish to update. (required)
        :type id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'id',
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method scim_v2_users_id_put" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id'] is not None:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/scim/v2/Users/{id}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def scim_v2_users_post(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Create User with SCIM  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.scim_v2_users_post(authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the scim_v2_users_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.scim_v2_users_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def scim_v2_users_post_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create User with SCIM  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.scim_v2_users_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method scim_v2_users_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/scim/v2/Users', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def services_certificate_cert_id_get(self, cert_id : Annotated[StrictStr, Field(..., description="The cert_id is provided in each Spark message in the X-VaultAPISignature-CertificateId header.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Signing Certificate  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_certificate_cert_id_get(cert_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param cert_id: The cert_id is provided in each Spark message in the X-VaultAPISignature-CertificateId header. (required)
        :type cert_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the services_certificate_cert_id_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.services_certificate_cert_id_get_with_http_info(cert_id, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def services_certificate_cert_id_get_with_http_info(self, cert_id : Annotated[StrictStr, Field(..., description="The cert_id is provided in each Spark message in the X-VaultAPISignature-CertificateId header.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Signing Certificate  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_certificate_cert_id_get_with_http_info(cert_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param cert_id: The cert_id is provided in each Spark message in the X-VaultAPISignature-CertificateId header. (required)
        :type cert_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'cert_id',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method services_certificate_cert_id_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['cert_id'] is not None:
            _path_params['cert_id'] = _params['cert_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/services/certificate/{cert_id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def services_configuration_mode_actions_disable_post(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Disable Configuration Mode  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_configuration_mode_actions_disable_post(authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the services_configuration_mode_actions_disable_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.services_configuration_mode_actions_disable_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def services_configuration_mode_actions_disable_post_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Disable Configuration Mode  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_configuration_mode_actions_disable_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method services_configuration_mode_actions_disable_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/services/configuration_mode/actions/disable', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def services_configuration_mode_actions_enable_post(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Enable Configuration Mode  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_configuration_mode_actions_enable_post(authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the services_configuration_mode_actions_enable_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.services_configuration_mode_actions_enable_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def services_configuration_mode_actions_enable_post_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Enable Configuration Mode  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_configuration_mode_actions_enable_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method services_configuration_mode_actions_enable_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/services/configuration_mode/actions/enable', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def services_directdata_files_get(self, extract_type : Annotated[Optional[StrictStr], Field(description="The Direct Data file type: incremental_directdata, full_directdata, or log_directdata. If omitted, returns all files.")] = None, start_time : Annotated[Optional[StrictInt], Field(description="Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 7AM on January 15, 2024 would use 2024-01-15T07:00:00Z. If omitted, defaults to the Vault’s creation date and time.")] = None, stop_time : Annotated[Optional[StrictInt], Field(description="Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 9AM on January 15, 2024 would use 2024-01-15T09:00:00Z. If omitted, defaults to today’s date and current time.")] = None, accept : Optional[StrictStr] = None, authorization : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Available Direct Data Files  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_directdata_files_get(extract_type, start_time, stop_time, accept, authorization, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param extract_type: The Direct Data file type: incremental_directdata, full_directdata, or log_directdata. If omitted, returns all files.
        :type extract_type: str
        :param start_time: Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 7AM on January 15, 2024 would use 2024-01-15T07:00:00Z. If omitted, defaults to the Vault’s creation date and time.
        :type start_time: int
        :param stop_time: Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 9AM on January 15, 2024 would use 2024-01-15T09:00:00Z. If omitted, defaults to today’s date and current time.
        :type stop_time: int
        :param accept:
        :type accept: str
        :param authorization:
        :type authorization: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the services_directdata_files_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.services_directdata_files_get_with_http_info(extract_type, start_time, stop_time, accept, authorization, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def services_directdata_files_get_with_http_info(self, extract_type : Annotated[Optional[StrictStr], Field(description="The Direct Data file type: incremental_directdata, full_directdata, or log_directdata. If omitted, returns all files.")] = None, start_time : Annotated[Optional[StrictInt], Field(description="Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 7AM on January 15, 2024 would use 2024-01-15T07:00:00Z. If omitted, defaults to the Vault’s creation date and time.")] = None, stop_time : Annotated[Optional[StrictInt], Field(description="Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 9AM on January 15, 2024 would use 2024-01-15T09:00:00Z. If omitted, defaults to today’s date and current time.")] = None, accept : Optional[StrictStr] = None, authorization : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Available Direct Data Files  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_directdata_files_get_with_http_info(extract_type, start_time, stop_time, accept, authorization, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param extract_type: The Direct Data file type: incremental_directdata, full_directdata, or log_directdata. If omitted, returns all files.
        :type extract_type: str
        :param start_time: Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 7AM on January 15, 2024 would use 2024-01-15T07:00:00Z. If omitted, defaults to the Vault’s creation date and time.
        :type start_time: int
        :param stop_time: Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 9AM on January 15, 2024 would use 2024-01-15T09:00:00Z. If omitted, defaults to today’s date and current time.
        :type stop_time: int
        :param accept:
        :type accept: str
        :param authorization:
        :type authorization: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'extract_type',
            'start_time',
            'stop_time',
            'accept',
            'authorization',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method services_directdata_files_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('extract_type') is not None:  # noqa: E501
            _query_params.append(('extract_type', _params['extract_type']))

        if _params.get('start_time') is not None:  # noqa: E501
            _query_params.append(('start_time', _params['start_time']))

        if _params.get('stop_time') is not None:  # noqa: E501
            _query_params.append(('stop_time', _params['stop_time']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/services/directdata/files', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def services_directdata_files_name_get(self, name : Annotated[StrictStr, Field(..., description="The name of the Direct Data file part. Obtain this from the Retrieve Available Direct Data Files request. For example, 146478-20240213-0000-F.001.")], accept : Optional[StrictStr] = None, authorization : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Download Direct Data File  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_directdata_files_name_get(name, accept, authorization, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param name: The name of the Direct Data file part. Obtain this from the Retrieve Available Direct Data Files request. For example, 146478-20240213-0000-F.001. (required)
        :type name: str
        :param accept:
        :type accept: str
        :param authorization:
        :type authorization: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the services_directdata_files_name_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.services_directdata_files_name_get_with_http_info(name, accept, authorization, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def services_directdata_files_name_get_with_http_info(self, name : Annotated[StrictStr, Field(..., description="The name of the Direct Data file part. Obtain this from the Retrieve Available Direct Data Files request. For example, 146478-20240213-0000-F.001.")], accept : Optional[StrictStr] = None, authorization : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Download Direct Data File  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_directdata_files_name_get_with_http_info(name, accept, authorization, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param name: The name of the Direct Data file part. Obtain this from the Retrieve Available Direct Data Files request. For example, 146478-20240213-0000-F.001. (required)
        :type name: str
        :param accept:
        :type accept: str
        :param authorization:
        :type authorization: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'name',
            'accept',
            'authorization',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method services_directdata_files_name_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['name'] is not None:
            _path_params['name'] = _params['name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/services/directdata/files/{name}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def services_file_staging_items_content_item_get(self, item : Annotated[StrictStr, Field(..., description="The absolute path to a file or folder. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, range : Annotated[Optional[StrictStr], Field(description="Optional: Specifies a partial range of bytes to include in the upload. Maximum 50 MB. Must be in the format `bytes={min}-{max}`. For example, `bytes=0-1000`.")] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Download Item Content  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_file_staging_items_content_item_get(item, authorization, accept, range, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param item: The absolute path to a file or folder. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory. (required)
        :type item: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param range: Optional: Specifies a partial range of bytes to include in the upload. Maximum 50 MB. Must be in the format `bytes={min}-{max}`. For example, `bytes=0-1000`.
        :type range: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the services_file_staging_items_content_item_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.services_file_staging_items_content_item_get_with_http_info(item, authorization, accept, range, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def services_file_staging_items_content_item_get_with_http_info(self, item : Annotated[StrictStr, Field(..., description="The absolute path to a file or folder. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, range : Annotated[Optional[StrictStr], Field(description="Optional: Specifies a partial range of bytes to include in the upload. Maximum 50 MB. Must be in the format `bytes={min}-{max}`. For example, `bytes=0-1000`.")] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Download Item Content  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_file_staging_items_content_item_get_with_http_info(item, authorization, accept, range, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param item: The absolute path to a file or folder. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory. (required)
        :type item: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param range: Optional: Specifies a partial range of bytes to include in the upload. Maximum 50 MB. Must be in the format `bytes={min}-{max}`. For example, `bytes=0-1000`.
        :type range: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'item',
            'authorization',
            'accept',
            'range',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method services_file_staging_items_content_item_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['item'] is not None:
            _path_params['item'] = _params['item']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['range'] is not None:
            _header_params['Range'] = _params['range']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/services/file_staging/items/content/{item}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def services_file_staging_items_item_delete(self, item : Annotated[StrictStr, Field(..., description="The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.")], recursive : Annotated[Optional[StrictStr], Field(description="Applicable to deleting folders only. If true, the request will delete the contents of a folder and all subfolders. The default is false.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Delete File or Folder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_file_staging_items_item_delete(item, recursive, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param item: The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory. (required)
        :type item: str
        :param recursive: Applicable to deleting folders only. If true, the request will delete the contents of a folder and all subfolders. The default is false.
        :type recursive: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the services_file_staging_items_item_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.services_file_staging_items_item_delete_with_http_info(item, recursive, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def services_file_staging_items_item_delete_with_http_info(self, item : Annotated[StrictStr, Field(..., description="The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.")], recursive : Annotated[Optional[StrictStr], Field(description="Applicable to deleting folders only. If true, the request will delete the contents of a folder and all subfolders. The default is false.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Delete File or Folder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_file_staging_items_item_delete_with_http_info(item, recursive, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param item: The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory. (required)
        :type item: str
        :param recursive: Applicable to deleting folders only. If true, the request will delete the contents of a folder and all subfolders. The default is false.
        :type recursive: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'item',
            'recursive',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method services_file_staging_items_item_delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['item'] is not None:
            _path_params['item'] = _params['item']


        # process the query parameters
        _query_params = []
        if _params.get('recursive') is not None:  # noqa: E501
            _query_params.append(('recursive', _params['recursive']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/services/file_staging/items/{item}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def services_file_staging_items_item_get(self, item : Annotated[StrictStr, Field(..., description="The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.")], recursive : Annotated[Optional[StrictStr], Field(description="If true, the response will contain the contents of all subfolders. If not specified, the default value is false.")] = None, limit : Annotated[Optional[StrictStr], Field(description="Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000.")] = None, format_result : Annotated[Optional[StrictStr], Field(description="If set to csv, the response includes a job_id. Use the Job ID value to retrieve the status and results of the request.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """List Items at a Path  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_file_staging_items_item_get(item, recursive, limit, format_result, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param item: The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory. (required)
        :type item: str
        :param recursive: If true, the response will contain the contents of all subfolders. If not specified, the default value is false.
        :type recursive: str
        :param limit: Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000.
        :type limit: str
        :param format_result: If set to csv, the response includes a job_id. Use the Job ID value to retrieve the status and results of the request.
        :type format_result: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the services_file_staging_items_item_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.services_file_staging_items_item_get_with_http_info(item, recursive, limit, format_result, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def services_file_staging_items_item_get_with_http_info(self, item : Annotated[StrictStr, Field(..., description="The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.")], recursive : Annotated[Optional[StrictStr], Field(description="If true, the response will contain the contents of all subfolders. If not specified, the default value is false.")] = None, limit : Annotated[Optional[StrictStr], Field(description="Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000.")] = None, format_result : Annotated[Optional[StrictStr], Field(description="If set to csv, the response includes a job_id. Use the Job ID value to retrieve the status and results of the request.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """List Items at a Path  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_file_staging_items_item_get_with_http_info(item, recursive, limit, format_result, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param item: The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory. (required)
        :type item: str
        :param recursive: If true, the response will contain the contents of all subfolders. If not specified, the default value is false.
        :type recursive: str
        :param limit: Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000.
        :type limit: str
        :param format_result: If set to csv, the response includes a job_id. Use the Job ID value to retrieve the status and results of the request.
        :type format_result: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'item',
            'recursive',
            'limit',
            'format_result',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method services_file_staging_items_item_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['item'] is not None:
            _path_params['item'] = _params['item']


        # process the query parameters
        _query_params = []
        if _params.get('recursive') is not None:  # noqa: E501
            _query_params.append(('recursive', _params['recursive']))

        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('format_result') is not None:  # noqa: E501
            _query_params.append(('format_result', _params['format_result']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/services/file_staging/items/{item}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def services_file_staging_items_item_put(self, item : Annotated[StrictStr, Field(..., description="The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Update Folder or File  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_file_staging_items_item_put(item, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param item: The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory. (required)
        :type item: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the services_file_staging_items_item_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.services_file_staging_items_item_put_with_http_info(item, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def services_file_staging_items_item_put_with_http_info(self, item : Annotated[StrictStr, Field(..., description="The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Update Folder or File  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_file_staging_items_item_put_with_http_info(item, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param item: The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory. (required)
        :type item: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'item',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method services_file_staging_items_item_put" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['item'] is not None:
            _path_params['item'] = _params['item']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/services/file_staging/items/{item}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def services_file_staging_items_post(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_md5 : Annotated[Optional[StrictStr], Field(description="Optional: The MD5 checksum of the file being uploaded.")] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Create Folder or File  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_file_staging_items_post(authorization, accept, content_md5, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_md5: Optional: The MD5 checksum of the file being uploaded.
        :type content_md5: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the services_file_staging_items_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.services_file_staging_items_post_with_http_info(authorization, accept, content_md5, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def services_file_staging_items_post_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_md5 : Annotated[Optional[StrictStr], Field(description="Optional: The MD5 checksum of the file being uploaded.")] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create Folder or File  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_file_staging_items_post_with_http_info(authorization, accept, content_md5, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_md5: Optional: The MD5 checksum of the file being uploaded.
        :type content_md5: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'content_md5',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method services_file_staging_items_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_md5'] is not None:
            _header_params['Content-MD5'] = _params['content_md5']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/services/file_staging/items', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def services_file_staging_upload_get(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """List Upload Sessions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_file_staging_upload_get(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the services_file_staging_upload_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.services_file_staging_upload_get_with_http_info(authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def services_file_staging_upload_get_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """List Upload Sessions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_file_staging_upload_get_with_http_info(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method services_file_staging_upload_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/services/file_staging/upload/', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def services_file_staging_upload_post(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Create Resumable Upload Session  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_file_staging_upload_post(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the services_file_staging_upload_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.services_file_staging_upload_post_with_http_info(authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def services_file_staging_upload_post_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create Resumable Upload Session  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_file_staging_upload_post_with_http_info(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method services_file_staging_upload_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/services/file_staging/upload', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def services_file_staging_upload_upload_session_id_delete(self, upload_session_id : StrictStr, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Abort Upload Session  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_file_staging_upload_upload_session_id_delete(upload_session_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param upload_session_id: (required)
        :type upload_session_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the services_file_staging_upload_upload_session_id_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.services_file_staging_upload_upload_session_id_delete_with_http_info(upload_session_id, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def services_file_staging_upload_upload_session_id_delete_with_http_info(self, upload_session_id : StrictStr, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Abort Upload Session  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_file_staging_upload_upload_session_id_delete_with_http_info(upload_session_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param upload_session_id: (required)
        :type upload_session_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'upload_session_id',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method services_file_staging_upload_upload_session_id_delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['upload_session_id'] is not None:
            _path_params['upload_session_id'] = _params['upload_session_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/services/file_staging/upload/{upload_session_id}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def services_file_staging_upload_upload_session_id_get(self, upload_session_id : StrictStr, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Get Upload Session Details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_file_staging_upload_upload_session_id_get(upload_session_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param upload_session_id: (required)
        :type upload_session_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the services_file_staging_upload_upload_session_id_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.services_file_staging_upload_upload_session_id_get_with_http_info(upload_session_id, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def services_file_staging_upload_upload_session_id_get_with_http_info(self, upload_session_id : StrictStr, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Get Upload Session Details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_file_staging_upload_upload_session_id_get_with_http_info(upload_session_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param upload_session_id: (required)
        :type upload_session_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'upload_session_id',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method services_file_staging_upload_upload_session_id_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['upload_session_id'] is not None:
            _path_params['upload_session_id'] = _params['upload_session_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/services/file_staging/upload/{upload_session_id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def services_file_staging_upload_upload_session_id_parts_get(self, upload_session_id : StrictStr, limit : Annotated[Optional[StrictStr], Field(description="Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """List File Parts Uploaded to Session  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_file_staging_upload_upload_session_id_parts_get(upload_session_id, limit, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param upload_session_id: (required)
        :type upload_session_id: str
        :param limit: Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000.
        :type limit: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the services_file_staging_upload_upload_session_id_parts_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.services_file_staging_upload_upload_session_id_parts_get_with_http_info(upload_session_id, limit, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def services_file_staging_upload_upload_session_id_parts_get_with_http_info(self, upload_session_id : StrictStr, limit : Annotated[Optional[StrictStr], Field(description="Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """List File Parts Uploaded to Session  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_file_staging_upload_upload_session_id_parts_get_with_http_info(upload_session_id, limit, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param upload_session_id: (required)
        :type upload_session_id: str
        :param limit: Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000.
        :type limit: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'upload_session_id',
            'limit',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method services_file_staging_upload_upload_session_id_parts_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['upload_session_id'] is not None:
            _path_params['upload_session_id'] = _params['upload_session_id']


        # process the query parameters
        _query_params = []
        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/services/file_staging/upload/{upload_session_id}/parts', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def services_file_staging_upload_upload_session_id_post(self, upload_session_id : StrictStr, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Commit Upload Session  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_file_staging_upload_upload_session_id_post(upload_session_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param upload_session_id: (required)
        :type upload_session_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the services_file_staging_upload_upload_session_id_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.services_file_staging_upload_upload_session_id_post_with_http_info(upload_session_id, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def services_file_staging_upload_upload_session_id_post_with_http_info(self, upload_session_id : StrictStr, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Commit Upload Session  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_file_staging_upload_upload_session_id_post_with_http_info(upload_session_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param upload_session_id: (required)
        :type upload_session_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'upload_session_id',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method services_file_staging_upload_upload_session_id_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['upload_session_id'] is not None:
            _path_params['upload_session_id'] = _params['upload_session_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/services/file_staging/upload/{upload_session_id}', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def services_file_staging_upload_upload_session_id_put(self, upload_session_id : StrictStr, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_file_part_number : Annotated[Optional[StrictStr], Field(description="The part number, which uniquely identifies a file part and defines its position within the file as a whole. If a part is uploaded using a part number that has already been used, Vault overwrites the previously uploaded file part. You must upload parts in numerical order. For example, you cannot upload part 3 without first uploading parts 1 and 2.")] = None, content_md5 : Annotated[Optional[StrictStr], Field(description="Optional: The MD5 checksum of the file part being uploaded.")] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Upload to a Session  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_file_staging_upload_upload_session_id_put(upload_session_id, authorization, accept, content_type, x_vault_api_file_part_number, content_md5, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param upload_session_id: (required)
        :type upload_session_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_file_part_number: The part number, which uniquely identifies a file part and defines its position within the file as a whole. If a part is uploaded using a part number that has already been used, Vault overwrites the previously uploaded file part. You must upload parts in numerical order. For example, you cannot upload part 3 without first uploading parts 1 and 2.
        :type x_vault_api_file_part_number: str
        :param content_md5: Optional: The MD5 checksum of the file part being uploaded.
        :type content_md5: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the services_file_staging_upload_upload_session_id_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.services_file_staging_upload_upload_session_id_put_with_http_info(upload_session_id, authorization, accept, content_type, x_vault_api_file_part_number, content_md5, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def services_file_staging_upload_upload_session_id_put_with_http_info(self, upload_session_id : StrictStr, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_file_part_number : Annotated[Optional[StrictStr], Field(description="The part number, which uniquely identifies a file part and defines its position within the file as a whole. If a part is uploaded using a part number that has already been used, Vault overwrites the previously uploaded file part. You must upload parts in numerical order. For example, you cannot upload part 3 without first uploading parts 1 and 2.")] = None, content_md5 : Annotated[Optional[StrictStr], Field(description="Optional: The MD5 checksum of the file part being uploaded.")] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Upload to a Session  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_file_staging_upload_upload_session_id_put_with_http_info(upload_session_id, authorization, accept, content_type, x_vault_api_file_part_number, content_md5, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param upload_session_id: (required)
        :type upload_session_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_file_part_number: The part number, which uniquely identifies a file part and defines its position within the file as a whole. If a part is uploaded using a part number that has already been used, Vault overwrites the previously uploaded file part. You must upload parts in numerical order. For example, you cannot upload part 3 without first uploading parts 1 and 2.
        :type x_vault_api_file_part_number: str
        :param content_md5: Optional: The MD5 checksum of the file part being uploaded.
        :type content_md5: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'upload_session_id',
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_file_part_number',
            'content_md5',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method services_file_staging_upload_upload_session_id_put" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['upload_session_id'] is not None:
            _path_params['upload_session_id'] = _params['upload_session_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_file_part_number'] is not None:
            _header_params['X-VaultAPI-FilePartNumber'] = _params['x_vault_api_file_part_number']

        if _params['content_md5'] is not None:
            _header_params['Content-MD5'] = _params['content_md5']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/services/file_staging/upload/{upload_session_id}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def services_jobs_histories_get(self, start_date : Annotated[Optional[StrictStr], Field(description="Sets the date to start retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job.")] = None, end_date : Annotated[Optional[StrictStr], Field(description="Sets the date to end retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time.")] = None, status : Annotated[Optional[StrictStr], Field(description="Filter to only retrieve jobs in a certain status. Allowed values are success, errors_encountered, failed_to_run, missed_schedule, cancelled. If omitted, retrieves all statuses.")] = None, limit : Annotated[Optional[StrictStr], Field(description="Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50.")] = None, offset : Annotated[Optional[StrictStr], Field(description="Paginate the results displayed per page by specifying the amount of offset from the first job history returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Job Histories  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_jobs_histories_get(start_date, end_date, status, limit, offset, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param start_date: Sets the date to start retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job.
        :type start_date: str
        :param end_date: Sets the date to end retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time.
        :type end_date: str
        :param status: Filter to only retrieve jobs in a certain status. Allowed values are success, errors_encountered, failed_to_run, missed_schedule, cancelled. If omitted, retrieves all statuses.
        :type status: str
        :param limit: Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50.
        :type limit: str
        :param offset: Paginate the results displayed per page by specifying the amount of offset from the first job history returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51.
        :type offset: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the services_jobs_histories_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.services_jobs_histories_get_with_http_info(start_date, end_date, status, limit, offset, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def services_jobs_histories_get_with_http_info(self, start_date : Annotated[Optional[StrictStr], Field(description="Sets the date to start retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job.")] = None, end_date : Annotated[Optional[StrictStr], Field(description="Sets the date to end retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time.")] = None, status : Annotated[Optional[StrictStr], Field(description="Filter to only retrieve jobs in a certain status. Allowed values are success, errors_encountered, failed_to_run, missed_schedule, cancelled. If omitted, retrieves all statuses.")] = None, limit : Annotated[Optional[StrictStr], Field(description="Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50.")] = None, offset : Annotated[Optional[StrictStr], Field(description="Paginate the results displayed per page by specifying the amount of offset from the first job history returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Job Histories  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_jobs_histories_get_with_http_info(start_date, end_date, status, limit, offset, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param start_date: Sets the date to start retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job.
        :type start_date: str
        :param end_date: Sets the date to end retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time.
        :type end_date: str
        :param status: Filter to only retrieve jobs in a certain status. Allowed values are success, errors_encountered, failed_to_run, missed_schedule, cancelled. If omitted, retrieves all statuses.
        :type status: str
        :param limit: Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50.
        :type limit: str
        :param offset: Paginate the results displayed per page by specifying the amount of offset from the first job history returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51.
        :type offset: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'start_date',
            'end_date',
            'status',
            'limit',
            'offset',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method services_jobs_histories_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('start_date') is not None:  # noqa: E501
            _query_params.append(('start_date', _params['start_date']))

        if _params.get('end_date') is not None:  # noqa: E501
            _query_params.append(('end_date', _params['end_date']))

        if _params.get('status') is not None:  # noqa: E501
            _query_params.append(('status', _params['status']))

        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('offset') is not None:  # noqa: E501
            _query_params.append(('offset', _params['offset']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/services/jobs/histories', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def services_jobs_job_id_errors_get(self, job_id : Annotated[StrictStr, Field(..., description="The id value of the requested import job. This was returned from the Import Bulk Translation File request.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Import Bulk Translation File Job Errors  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_jobs_job_id_errors_get(job_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param job_id: The id value of the requested import job. This was returned from the Import Bulk Translation File request. (required)
        :type job_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the services_jobs_job_id_errors_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.services_jobs_job_id_errors_get_with_http_info(job_id, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def services_jobs_job_id_errors_get_with_http_info(self, job_id : Annotated[StrictStr, Field(..., description="The id value of the requested import job. This was returned from the Import Bulk Translation File request.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Import Bulk Translation File Job Errors  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_jobs_job_id_errors_get_with_http_info(job_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param job_id: The id value of the requested import job. This was returned from the Import Bulk Translation File request. (required)
        :type job_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'job_id',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method services_jobs_job_id_errors_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['job_id'] is not None:
            _path_params['job_id'] = _params['job_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/services/jobs/{job_id}/errors', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def services_jobs_job_id_get(self, job_id : Annotated[StrictStr, Field(..., description="The ID of the job, returned from the original job request.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Job Status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_jobs_job_id_get(job_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param job_id: The ID of the job, returned from the original job request. (required)
        :type job_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the services_jobs_job_id_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.services_jobs_job_id_get_with_http_info(job_id, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def services_jobs_job_id_get_with_http_info(self, job_id : Annotated[StrictStr, Field(..., description="The ID of the job, returned from the original job request.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Job Status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_jobs_job_id_get_with_http_info(job_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param job_id: The ID of the job, returned from the original job request. (required)
        :type job_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'job_id',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method services_jobs_job_id_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['job_id'] is not None:
            _path_params['job_id'] = _params['job_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/services/jobs/{job_id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def services_jobs_job_id_summary_get(self, job_id : Annotated[StrictStr, Field(..., description="The id value of the requested import job. This was returned from the Import Bulk Translation File request.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Import Bulk Translation File Job Summary  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_jobs_job_id_summary_get(job_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param job_id: The id value of the requested import job. This was returned from the Import Bulk Translation File request. (required)
        :type job_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the services_jobs_job_id_summary_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.services_jobs_job_id_summary_get_with_http_info(job_id, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def services_jobs_job_id_summary_get_with_http_info(self, job_id : Annotated[StrictStr, Field(..., description="The id value of the requested import job. This was returned from the Import Bulk Translation File request.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Import Bulk Translation File Job Summary  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_jobs_job_id_summary_get_with_http_info(job_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param job_id: The id value of the requested import job. This was returned from the Import Bulk Translation File request. (required)
        :type job_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'job_id',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method services_jobs_job_id_summary_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['job_id'] is not None:
            _path_params['job_id'] = _params['job_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/services/jobs/{job_id}/summary', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def services_jobs_job_id_tasks_get(self, job_id : Annotated[StrictStr, Field(..., description="The ID of the SDK job, returned from the original job request.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve SDK Job Tasks  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_jobs_job_id_tasks_get(job_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param job_id: The ID of the SDK job, returned from the original job request. (required)
        :type job_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the services_jobs_job_id_tasks_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.services_jobs_job_id_tasks_get_with_http_info(job_id, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def services_jobs_job_id_tasks_get_with_http_info(self, job_id : Annotated[StrictStr, Field(..., description="The ID of the SDK job, returned from the original job request.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve SDK Job Tasks  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_jobs_job_id_tasks_get_with_http_info(job_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param job_id: The ID of the SDK job, returned from the original job request. (required)
        :type job_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'job_id',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method services_jobs_job_id_tasks_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['job_id'] is not None:
            _path_params['job_id'] = _params['job_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/services/jobs/{job_id}/tasks', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def services_jobs_monitors_get(self, start_date : Annotated[Optional[StrictStr], Field(description="Sets the date to start retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job.")] = None, end_date : Annotated[Optional[StrictStr], Field(description="Sets the date to end retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time.")] = None, status : Annotated[Optional[StrictStr], Field(description="Filter to only retrieve jobs in a certain status. Allowed values are scheduled, queued, running. If omitted, retrieves all statuses.")] = None, limit : Annotated[Optional[StrictStr], Field(description="Paginate the results by specifying the maximum number of jobs per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50.")] = None, offset : Annotated[Optional[StrictStr], Field(description="Paginate the results displayed per page by specifying the amount of offset from the first job instance returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Job Monitors  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_jobs_monitors_get(start_date, end_date, status, limit, offset, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param start_date: Sets the date to start retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job.
        :type start_date: str
        :param end_date: Sets the date to end retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time.
        :type end_date: str
        :param status: Filter to only retrieve jobs in a certain status. Allowed values are scheduled, queued, running. If omitted, retrieves all statuses.
        :type status: str
        :param limit: Paginate the results by specifying the maximum number of jobs per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50.
        :type limit: str
        :param offset: Paginate the results displayed per page by specifying the amount of offset from the first job instance returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51.
        :type offset: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the services_jobs_monitors_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.services_jobs_monitors_get_with_http_info(start_date, end_date, status, limit, offset, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def services_jobs_monitors_get_with_http_info(self, start_date : Annotated[Optional[StrictStr], Field(description="Sets the date to start retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job.")] = None, end_date : Annotated[Optional[StrictStr], Field(description="Sets the date to end retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time.")] = None, status : Annotated[Optional[StrictStr], Field(description="Filter to only retrieve jobs in a certain status. Allowed values are scheduled, queued, running. If omitted, retrieves all statuses.")] = None, limit : Annotated[Optional[StrictStr], Field(description="Paginate the results by specifying the maximum number of jobs per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50.")] = None, offset : Annotated[Optional[StrictStr], Field(description="Paginate the results displayed per page by specifying the amount of offset from the first job instance returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Job Monitors  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_jobs_monitors_get_with_http_info(start_date, end_date, status, limit, offset, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param start_date: Sets the date to start retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job.
        :type start_date: str
        :param end_date: Sets the date to end retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time.
        :type end_date: str
        :param status: Filter to only retrieve jobs in a certain status. Allowed values are scheduled, queued, running. If omitted, retrieves all statuses.
        :type status: str
        :param limit: Paginate the results by specifying the maximum number of jobs per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50.
        :type limit: str
        :param offset: Paginate the results displayed per page by specifying the amount of offset from the first job instance returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51.
        :type offset: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'start_date',
            'end_date',
            'status',
            'limit',
            'offset',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method services_jobs_monitors_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('start_date') is not None:  # noqa: E501
            _query_params.append(('start_date', _params['start_date']))

        if _params.get('end_date') is not None:  # noqa: E501
            _query_params.append(('end_date', _params['end_date']))

        if _params.get('status') is not None:  # noqa: E501
            _query_params.append(('status', _params['status']))

        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('offset') is not None:  # noqa: E501
            _query_params.append(('offset', _params['offset']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/services/jobs/monitors', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def services_jobs_start_now_job_id_post(self, job_id : Annotated[StrictStr, Field(..., description="The ID of the scheduled job instance to start.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Start Job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_jobs_start_now_job_id_post(job_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param job_id: The ID of the scheduled job instance to start. (required)
        :type job_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the services_jobs_start_now_job_id_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.services_jobs_start_now_job_id_post_with_http_info(job_id, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def services_jobs_start_now_job_id_post_with_http_info(self, job_id : Annotated[StrictStr, Field(..., description="The ID of the scheduled job instance to start.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Start Job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_jobs_start_now_job_id_post_with_http_info(job_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param job_id: The ID of the scheduled job instance to start. (required)
        :type job_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'job_id',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method services_jobs_start_now_job_id_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['job_id'] is not None:
            _path_params['job_id'] = _params['job_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/services/jobs/start_now/{job_id}', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def services_loader_extract_post(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Extract Data Files  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_loader_extract_post(authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the services_loader_extract_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.services_loader_extract_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def services_loader_extract_post_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Extract Data Files  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_loader_extract_post_with_http_info(authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method services_loader_extract_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/services/loader/extract', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def services_loader_job_id_tasks_task_id_failurelog_get(self, job_id : Annotated[StrictStr, Field(..., description="The id value of the requested extract job.")], task_id : Annotated[StrictStr, Field(..., description="The id value of the requested extract task.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Load Failure Log Results  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_loader_job_id_tasks_task_id_failurelog_get(job_id, task_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param job_id: The id value of the requested extract job. (required)
        :type job_id: str
        :param task_id: The id value of the requested extract task. (required)
        :type task_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the services_loader_job_id_tasks_task_id_failurelog_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.services_loader_job_id_tasks_task_id_failurelog_get_with_http_info(job_id, task_id, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def services_loader_job_id_tasks_task_id_failurelog_get_with_http_info(self, job_id : Annotated[StrictStr, Field(..., description="The id value of the requested extract job.")], task_id : Annotated[StrictStr, Field(..., description="The id value of the requested extract task.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Load Failure Log Results  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_loader_job_id_tasks_task_id_failurelog_get_with_http_info(job_id, task_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param job_id: The id value of the requested extract job. (required)
        :type job_id: str
        :param task_id: The id value of the requested extract task. (required)
        :type task_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'job_id',
            'task_id',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method services_loader_job_id_tasks_task_id_failurelog_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['job_id'] is not None:
            _path_params['job_id'] = _params['job_id']

        if _params['task_id'] is not None:
            _path_params['task_id'] = _params['task_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/services/loader/{job_id}/tasks/{task_id}/failurelog', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def services_loader_job_id_tasks_task_id_results_get(self, job_id : Annotated[StrictStr, Field(..., description="The id value of the requested extract job.")], task_id : Annotated[StrictStr, Field(..., description="The id value of the requested extract task.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Loader Extract Results  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_loader_job_id_tasks_task_id_results_get(job_id, task_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param job_id: The id value of the requested extract job. (required)
        :type job_id: str
        :param task_id: The id value of the requested extract task. (required)
        :type task_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the services_loader_job_id_tasks_task_id_results_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.services_loader_job_id_tasks_task_id_results_get_with_http_info(job_id, task_id, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def services_loader_job_id_tasks_task_id_results_get_with_http_info(self, job_id : Annotated[StrictStr, Field(..., description="The id value of the requested extract job.")], task_id : Annotated[StrictStr, Field(..., description="The id value of the requested extract task.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Loader Extract Results  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_loader_job_id_tasks_task_id_results_get_with_http_info(job_id, task_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param job_id: The id value of the requested extract job. (required)
        :type job_id: str
        :param task_id: The id value of the requested extract task. (required)
        :type task_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'job_id',
            'task_id',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method services_loader_job_id_tasks_task_id_results_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['job_id'] is not None:
            _path_params['job_id'] = _params['job_id']

        if _params['task_id'] is not None:
            _path_params['task_id'] = _params['task_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/services/loader/{job_id}/tasks/{task_id}/results', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def services_loader_job_id_tasks_task_id_results_renditions_get(self, job_id : Annotated[StrictStr, Field(..., description="The id value of the requested extract job.")], task_id : Annotated[StrictStr, Field(..., description="The id value of the requested extract task.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Loader Extract Renditions Results  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_loader_job_id_tasks_task_id_results_renditions_get(job_id, task_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param job_id: The id value of the requested extract job. (required)
        :type job_id: str
        :param task_id: The id value of the requested extract task. (required)
        :type task_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the services_loader_job_id_tasks_task_id_results_renditions_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.services_loader_job_id_tasks_task_id_results_renditions_get_with_http_info(job_id, task_id, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def services_loader_job_id_tasks_task_id_results_renditions_get_with_http_info(self, job_id : Annotated[StrictStr, Field(..., description="The id value of the requested extract job.")], task_id : Annotated[StrictStr, Field(..., description="The id value of the requested extract task.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Loader Extract Renditions Results  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_loader_job_id_tasks_task_id_results_renditions_get_with_http_info(job_id, task_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param job_id: The id value of the requested extract job. (required)
        :type job_id: str
        :param task_id: The id value of the requested extract task. (required)
        :type task_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'job_id',
            'task_id',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method services_loader_job_id_tasks_task_id_results_renditions_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['job_id'] is not None:
            _path_params['job_id'] = _params['job_id']

        if _params['task_id'] is not None:
            _path_params['task_id'] = _params['task_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/services/loader/{job_id}/tasks/{task_id}/results/renditions', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def services_loader_job_id_tasks_task_id_successlog_get(self, job_id : Annotated[StrictStr, Field(..., description="The id value of the requested extract job.")], task_id : Annotated[StrictStr, Field(..., description="The id value of the requested extract task.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Load Success Log Results  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_loader_job_id_tasks_task_id_successlog_get(job_id, task_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param job_id: The id value of the requested extract job. (required)
        :type job_id: str
        :param task_id: The id value of the requested extract task. (required)
        :type task_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the services_loader_job_id_tasks_task_id_successlog_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.services_loader_job_id_tasks_task_id_successlog_get_with_http_info(job_id, task_id, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def services_loader_job_id_tasks_task_id_successlog_get_with_http_info(self, job_id : Annotated[StrictStr, Field(..., description="The id value of the requested extract job.")], task_id : Annotated[StrictStr, Field(..., description="The id value of the requested extract task.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Load Success Log Results  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_loader_job_id_tasks_task_id_successlog_get_with_http_info(job_id, task_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param job_id: The id value of the requested extract job. (required)
        :type job_id: str
        :param task_id: The id value of the requested extract task. (required)
        :type task_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'job_id',
            'task_id',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method services_loader_job_id_tasks_task_id_successlog_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['job_id'] is not None:
            _path_params['job_id'] = _params['job_id']

        if _params['task_id'] is not None:
            _path_params['task_id'] = _params['task_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/services/loader/{job_id}/tasks/{task_id}/successlog', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def services_loader_load_post(self, authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Load Data Objects  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_loader_load_post(authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the services_loader_load_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.services_loader_load_post_with_http_info(authorization, content_type, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def services_loader_load_post_with_http_info(self, authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Load Data Objects  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_loader_load_post_with_http_info(authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'content_type',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method services_loader_load_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/services/loader/load', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def services_package_actions_validate_post(self, authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Validate Package  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_package_actions_validate_post(authorization, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the services_package_actions_validate_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.services_package_actions_validate_post_with_http_info(authorization, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def services_package_actions_validate_post_with_http_info(self, authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Validate Package  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_package_actions_validate_post_with_http_info(authorization, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method services_package_actions_validate_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/services/package/actions/validate', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def services_package_post(self, authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Export Package  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_package_post(authorization, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the services_package_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.services_package_post_with_http_info(authorization, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def services_package_post_with_http_info(self, authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Export Package  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_package_post_with_http_info(authorization, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method services_package_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/services/package', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def services_package_put(self, authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Import Package  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_package_put(authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the services_package_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.services_package_put_with_http_info(authorization, content_type, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def services_package_put_with_http_info(self, authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Import Package  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_package_put_with_http_info(authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'content_type',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method services_package_put" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/services/package', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def services_queues_get(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve All Queues  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_queues_get(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the services_queues_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.services_queues_get_with_http_info(authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def services_queues_get_with_http_info(self, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve All Queues  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_queues_get_with_http_info(authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method services_queues_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/services/queues', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def services_queues_queue_name_actions_disable_delivery_put(self, queue_name : Annotated[StrictStr, Field(..., description="The name of a specific Queue.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Disable Delivery  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_queues_queue_name_actions_disable_delivery_put(queue_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param queue_name: The name of a specific Queue. (required)
        :type queue_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the services_queues_queue_name_actions_disable_delivery_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.services_queues_queue_name_actions_disable_delivery_put_with_http_info(queue_name, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def services_queues_queue_name_actions_disable_delivery_put_with_http_info(self, queue_name : Annotated[StrictStr, Field(..., description="The name of a specific Queue.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Disable Delivery  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_queues_queue_name_actions_disable_delivery_put_with_http_info(queue_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param queue_name: The name of a specific Queue. (required)
        :type queue_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'queue_name',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method services_queues_queue_name_actions_disable_delivery_put" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['queue_name'] is not None:
            _path_params['queue_name'] = _params['queue_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/services/queues/{queue_name}/actions/disable_delivery', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def services_queues_queue_name_actions_enable_delivery_put(self, queue_name : Annotated[StrictStr, Field(..., description="The name of a specific Queue.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Enable Delivery  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_queues_queue_name_actions_enable_delivery_put(queue_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param queue_name: The name of a specific Queue. (required)
        :type queue_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the services_queues_queue_name_actions_enable_delivery_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.services_queues_queue_name_actions_enable_delivery_put_with_http_info(queue_name, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def services_queues_queue_name_actions_enable_delivery_put_with_http_info(self, queue_name : Annotated[StrictStr, Field(..., description="The name of a specific Queue.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Enable Delivery  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_queues_queue_name_actions_enable_delivery_put_with_http_info(queue_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param queue_name: The name of a specific Queue. (required)
        :type queue_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'queue_name',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method services_queues_queue_name_actions_enable_delivery_put" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['queue_name'] is not None:
            _path_params['queue_name'] = _params['queue_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/services/queues/{queue_name}/actions/enable_delivery', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def services_queues_queue_name_actions_reset_put(self, queue_name : Annotated[StrictStr, Field(..., description="The name of a specific Queue.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Reset Queue  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_queues_queue_name_actions_reset_put(queue_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param queue_name: The name of a specific Queue. (required)
        :type queue_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the services_queues_queue_name_actions_reset_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.services_queues_queue_name_actions_reset_put_with_http_info(queue_name, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def services_queues_queue_name_actions_reset_put_with_http_info(self, queue_name : Annotated[StrictStr, Field(..., description="The name of a specific Queue.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Reset Queue  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_queues_queue_name_actions_reset_put_with_http_info(queue_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param queue_name: The name of a specific Queue. (required)
        :type queue_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'queue_name',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method services_queues_queue_name_actions_reset_put" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['queue_name'] is not None:
            _path_params['queue_name'] = _params['queue_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/services/queues/{queue_name}/actions/reset', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def services_queues_queue_name_get(self, queue_name : Annotated[StrictStr, Field(..., description="The name of a specific queue. For example, queue__c.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Queue Status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_queues_queue_name_get(queue_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param queue_name: The name of a specific queue. For example, queue__c. (required)
        :type queue_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the services_queues_queue_name_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.services_queues_queue_name_get_with_http_info(queue_name, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def services_queues_queue_name_get_with_http_info(self, queue_name : Annotated[StrictStr, Field(..., description="The name of a specific queue. For example, queue__c.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Queue Status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_queues_queue_name_get_with_http_info(queue_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param queue_name: The name of a specific queue. For example, queue__c. (required)
        :type queue_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'queue_name',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method services_queues_queue_name_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['queue_name'] is not None:
            _path_params['queue_name'] = _params['queue_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/services/queues/{queue_name}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def services_vobject_vault_package_v_package_id_actions_validate_post(self, package_id : Annotated[StrictStr, Field(..., description="The ID of the package to validate. You can find this in the API response of a package import, or in the URL of package in the Vault UI.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Validate Imported Package  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_vobject_vault_package_v_package_id_actions_validate_post(package_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param package_id: The ID of the package to validate. You can find this in the API response of a package import, or in the URL of package in the Vault UI. (required)
        :type package_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the services_vobject_vault_package_v_package_id_actions_validate_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.services_vobject_vault_package_v_package_id_actions_validate_post_with_http_info(package_id, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def services_vobject_vault_package_v_package_id_actions_validate_post_with_http_info(self, package_id : Annotated[StrictStr, Field(..., description="The ID of the package to validate. You can find this in the API response of a package import, or in the URL of package in the Vault UI.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Validate Imported Package  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.services_vobject_vault_package_v_package_id_actions_validate_post_with_http_info(package_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param package_id: The ID of the package to validate. You can find this in the API response of a package import, or in the URL of package in the Vault UI. (required)
        :type package_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'package_id',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method services_vobject_vault_package_v_package_id_actions_validate_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['package_id'] is not None:
            _path_params['package_id'] = _params['package_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/services/vobject/vault_package__v/{package_id}/actions/validate', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def session_delete(self, accept : Optional[StrictStr] = None, authorization : Annotated[Optional[StrictStr], Field(description="The Vault sessionId to end.")] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """End Session  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.session_delete(accept, authorization, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param accept:
        :type accept: str
        :param authorization: The Vault sessionId to end.
        :type authorization: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the session_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.session_delete_with_http_info(accept, authorization, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def session_delete_with_http_info(self, accept : Optional[StrictStr] = None, authorization : Annotated[Optional[StrictStr], Field(description="The Vault sessionId to end.")] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """End Session  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.session_delete_with_http_info(accept, authorization, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param accept:
        :type accept: str
        :param authorization: The Vault sessionId to end.
        :type authorization: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'accept',
            'authorization',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method session_delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/session', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def uicode_distributions_distribution_name_code_get(self, distribution_name : Annotated[StrictStr, Field(..., description="The name attribute of the client code distribution to download.")], accept : Optional[StrictStr] = None, authorization : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Download Single Client Code Distribution  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.uicode_distributions_distribution_name_code_get(distribution_name, accept, authorization, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param distribution_name: The name attribute of the client code distribution to download. (required)
        :type distribution_name: str
        :param accept:
        :type accept: str
        :param authorization:
        :type authorization: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the uicode_distributions_distribution_name_code_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.uicode_distributions_distribution_name_code_get_with_http_info(distribution_name, accept, authorization, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def uicode_distributions_distribution_name_code_get_with_http_info(self, distribution_name : Annotated[StrictStr, Field(..., description="The name attribute of the client code distribution to download.")], accept : Optional[StrictStr] = None, authorization : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Download Single Client Code Distribution  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.uicode_distributions_distribution_name_code_get_with_http_info(distribution_name, accept, authorization, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param distribution_name: The name attribute of the client code distribution to download. (required)
        :type distribution_name: str
        :param accept:
        :type accept: str
        :param authorization:
        :type authorization: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'distribution_name',
            'accept',
            'authorization',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method uicode_distributions_distribution_name_code_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['distribution_name'] is not None:
            _path_params['distribution_name'] = _params['distribution_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/uicode/distributions/{distribution_name}/code', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def uicode_distributions_distribution_name_delete(self, distribution_name : Annotated[StrictStr, Field(..., description="The name attribute of the client code distribution to delete.")], accept : Optional[StrictStr] = None, authorization : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Delete Single Client Code Distribution  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.uicode_distributions_distribution_name_delete(distribution_name, accept, authorization, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param distribution_name: The name attribute of the client code distribution to delete. (required)
        :type distribution_name: str
        :param accept:
        :type accept: str
        :param authorization:
        :type authorization: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the uicode_distributions_distribution_name_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.uicode_distributions_distribution_name_delete_with_http_info(distribution_name, accept, authorization, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def uicode_distributions_distribution_name_delete_with_http_info(self, distribution_name : Annotated[StrictStr, Field(..., description="The name attribute of the client code distribution to delete.")], accept : Optional[StrictStr] = None, authorization : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Delete Single Client Code Distribution  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.uicode_distributions_distribution_name_delete_with_http_info(distribution_name, accept, authorization, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param distribution_name: The name attribute of the client code distribution to delete. (required)
        :type distribution_name: str
        :param accept:
        :type accept: str
        :param authorization:
        :type authorization: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'distribution_name',
            'accept',
            'authorization',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method uicode_distributions_distribution_name_delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['distribution_name'] is not None:
            _path_params['distribution_name'] = _params['distribution_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/uicode/distributions/{distribution_name}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def uicode_distributions_distribution_name_get(self, distribution_name : Annotated[StrictStr, Field(..., description="The name attribute of the client code distribution to delete.")], accept : Optional[StrictStr] = None, authorization : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Single Client Code Distribution Metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.uicode_distributions_distribution_name_get(distribution_name, accept, authorization, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param distribution_name: The name attribute of the client code distribution to delete. (required)
        :type distribution_name: str
        :param accept:
        :type accept: str
        :param authorization:
        :type authorization: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the uicode_distributions_distribution_name_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.uicode_distributions_distribution_name_get_with_http_info(distribution_name, accept, authorization, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def uicode_distributions_distribution_name_get_with_http_info(self, distribution_name : Annotated[StrictStr, Field(..., description="The name attribute of the client code distribution to delete.")], accept : Optional[StrictStr] = None, authorization : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Single Client Code Distribution Metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.uicode_distributions_distribution_name_get_with_http_info(distribution_name, accept, authorization, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param distribution_name: The name attribute of the client code distribution to delete. (required)
        :type distribution_name: str
        :param accept:
        :type accept: str
        :param authorization:
        :type authorization: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'distribution_name',
            'accept',
            'authorization',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method uicode_distributions_distribution_name_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['distribution_name'] is not None:
            _path_params['distribution_name'] = _params['distribution_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/uicode/distributions/{distribution_name}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def uicode_distributions_get(self, accept : Optional[StrictStr] = None, authorization : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve All Client Code Distribution Metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.uicode_distributions_get(accept, authorization, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param accept:
        :type accept: str
        :param authorization:
        :type authorization: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the uicode_distributions_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.uicode_distributions_get_with_http_info(accept, authorization, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def uicode_distributions_get_with_http_info(self, accept : Optional[StrictStr] = None, authorization : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve All Client Code Distribution Metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.uicode_distributions_get_with_http_info(accept, authorization, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param accept:
        :type accept: str
        :param authorization:
        :type authorization: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'accept',
            'authorization',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method uicode_distributions_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/uicode/distributions', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def uicode_distributions_post(self, accept : Optional[StrictStr] = None, authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Add or Replace Single Client Code Distribution  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.uicode_distributions_post(accept, authorization, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param accept:
        :type accept: str
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the uicode_distributions_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.uicode_distributions_post_with_http_info(accept, authorization, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def uicode_distributions_post_with_http_info(self, accept : Optional[StrictStr] = None, authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Add or Replace Single Client Code Distribution  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.uicode_distributions_post_with_http_info(accept, authorization, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param accept:
        :type accept: str
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'accept',
            'authorization',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method uicode_distributions_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/uicode/distributions', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def vobject_vault_package_v_package_id_actions_deploy_post(self, package_id : Annotated[StrictStr, Field(..., description="The id field value of the vault_package__v object record used for deployment. See Import Package.")], authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Deploy Package  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobject_vault_package_v_package_id_actions_deploy_post(package_id, authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param package_id: The id field value of the vault_package__v object record used for deployment. See Import Package. (required)
        :type package_id: str
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the vobject_vault_package_v_package_id_actions_deploy_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.vobject_vault_package_v_package_id_actions_deploy_post_with_http_info(package_id, authorization, content_type, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def vobject_vault_package_v_package_id_actions_deploy_post_with_http_info(self, package_id : Annotated[StrictStr, Field(..., description="The id field value of the vault_package__v object record used for deployment. See Import Package.")], authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Deploy Package  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobject_vault_package_v_package_id_actions_deploy_post_with_http_info(package_id, authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param package_id: The id field value of the vault_package__v object record used for deployment. See Import Package. (required)
        :type package_id: str
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'package_id',
            'authorization',
            'content_type',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vobject_vault_package_v_package_id_actions_deploy_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['package_id'] is not None:
            _path_params['package_id'] = _params['package_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/vobject/vault_package__v/{package_id}/actions/deploy', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def vobject_vault_package_v_package_id_actions_deploy_results_get(self, package_id : Annotated[StrictStr, Field(..., description="The id field value of the vault_package__v object record used for deployment. See Deploy Package.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Package Deploy Results  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobject_vault_package_v_package_id_actions_deploy_results_get(package_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param package_id: The id field value of the vault_package__v object record used for deployment. See Deploy Package. (required)
        :type package_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the vobject_vault_package_v_package_id_actions_deploy_results_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.vobject_vault_package_v_package_id_actions_deploy_results_get_with_http_info(package_id, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def vobject_vault_package_v_package_id_actions_deploy_results_get_with_http_info(self, package_id : Annotated[StrictStr, Field(..., description="The id field value of the vault_package__v object record used for deployment. See Deploy Package.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Package Deploy Results  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobject_vault_package_v_package_id_actions_deploy_results_get_with_http_info(package_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param package_id: The id field value of the vault_package__v object record used for deployment. See Deploy Package. (required)
        :type package_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'package_id',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vobject_vault_package_v_package_id_actions_deploy_results_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['package_id'] is not None:
            _path_params['package_id'] = _params['package_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/vobject/vault_package__v/{package_id}/actions/deploy/results', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def vobjects_cascadedelete_results_object_name_job_status_job_id_get(self, object_name : Annotated[StrictStr, Field(..., description="The object name__v field value (product__v, country__v, custom_object__c, etc.).")], job_status : StrictStr, job_id : StrictStr, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Results of Cascade Delete Job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_cascadedelete_results_object_name_job_status_job_id_get(object_name, job_status, job_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
        :type object_name: str
        :param job_status: (required)
        :type job_status: str
        :param job_id: (required)
        :type job_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the vobjects_cascadedelete_results_object_name_job_status_job_id_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.vobjects_cascadedelete_results_object_name_job_status_job_id_get_with_http_info(object_name, job_status, job_id, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def vobjects_cascadedelete_results_object_name_job_status_job_id_get_with_http_info(self, object_name : Annotated[StrictStr, Field(..., description="The object name__v field value (product__v, country__v, custom_object__c, etc.).")], job_status : StrictStr, job_id : StrictStr, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Results of Cascade Delete Job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_cascadedelete_results_object_name_job_status_job_id_get_with_http_info(object_name, job_status, job_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
        :type object_name: str
        :param job_status: (required)
        :type job_status: str
        :param job_id: (required)
        :type job_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'object_name',
            'job_status',
            'job_id',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vobjects_cascadedelete_results_object_name_job_status_job_id_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['object_name'] is not None:
            _path_params['object_name'] = _params['object_name']

        if _params['job_status'] is not None:
            _path_params['job_status'] = _params['job_status']

        if _params['job_id'] is not None:
            _path_params['job_id'] = _params['job_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/vobjects/cascadedelete/results/{object_name}/{job_status}/{job_id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def vobjects_deepcopy_results_object_name_job_status_job_id_get(self, object_name : Annotated[StrictStr, Field(..., description="The object name__v field value (product__v, country__v, custom_object__c, etc.).")], job_status : Annotated[StrictStr, Field(..., description="The ID of the job, retrieved from the response of the job request.")], job_id : Annotated[StrictStr, Field(..., description="Possible values are success or failure. Find if your job succeeded or failed by retrieving the job status.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Results of Deep Copy Job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_deepcopy_results_object_name_job_status_job_id_get(object_name, job_status, job_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
        :type object_name: str
        :param job_status: The ID of the job, retrieved from the response of the job request. (required)
        :type job_status: str
        :param job_id: Possible values are success or failure. Find if your job succeeded or failed by retrieving the job status. (required)
        :type job_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the vobjects_deepcopy_results_object_name_job_status_job_id_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.vobjects_deepcopy_results_object_name_job_status_job_id_get_with_http_info(object_name, job_status, job_id, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def vobjects_deepcopy_results_object_name_job_status_job_id_get_with_http_info(self, object_name : Annotated[StrictStr, Field(..., description="The object name__v field value (product__v, country__v, custom_object__c, etc.).")], job_status : Annotated[StrictStr, Field(..., description="The ID of the job, retrieved from the response of the job request.")], job_id : Annotated[StrictStr, Field(..., description="Possible values are success or failure. Find if your job succeeded or failed by retrieving the job status.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Results of Deep Copy Job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_deepcopy_results_object_name_job_status_job_id_get_with_http_info(object_name, job_status, job_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
        :type object_name: str
        :param job_status: The ID of the job, retrieved from the response of the job request. (required)
        :type job_status: str
        :param job_id: Possible values are success or failure. Find if your job succeeded or failed by retrieving the job status. (required)
        :type job_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'object_name',
            'job_status',
            'job_id',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vobjects_deepcopy_results_object_name_job_status_job_id_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['object_name'] is not None:
            _path_params['object_name'] = _params['object_name']

        if _params['job_status'] is not None:
            _path_params['job_status'] = _params['job_status']

        if _params['job_id'] is not None:
            _path_params['job_id'] = _params['job_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/vobjects/deepcopy/results/{object_name}/{job_status}/{job_id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def vobjects_edl_item_v_actions_createplaceholder_post(self, authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Create a Placeholder from an EDL Item  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_edl_item_v_actions_createplaceholder_post(authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the vobjects_edl_item_v_actions_createplaceholder_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.vobjects_edl_item_v_actions_createplaceholder_post_with_http_info(authorization, content_type, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def vobjects_edl_item_v_actions_createplaceholder_post_with_http_info(self, authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create a Placeholder from an EDL Item  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_edl_item_v_actions_createplaceholder_post_with_http_info(authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'authorization',
            'content_type',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vobjects_edl_item_v_actions_createplaceholder_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/vobjects/edl_item__v/actions/createplaceholder', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def vobjects_merges_job_id_log_get(self, job_id : Annotated[StrictStr, Field(..., description="The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Download Merge Records Job Log  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_merges_job_id_log_get(job_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param job_id: The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK. (required)
        :type job_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the vobjects_merges_job_id_log_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.vobjects_merges_job_id_log_get_with_http_info(job_id, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def vobjects_merges_job_id_log_get_with_http_info(self, job_id : Annotated[StrictStr, Field(..., description="The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Download Merge Records Job Log  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_merges_job_id_log_get_with_http_info(job_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param job_id: The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK. (required)
        :type job_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'job_id',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vobjects_merges_job_id_log_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['job_id'] is not None:
            _path_params['job_id'] = _params['job_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/vobjects/merges/{job_id}/log', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def vobjects_merges_job_id_results_get(self, job_id : Annotated[StrictStr, Field(..., description="The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Record Merge Results  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_merges_job_id_results_get(job_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param job_id: The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK. (required)
        :type job_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the vobjects_merges_job_id_results_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.vobjects_merges_job_id_results_get_with_http_info(job_id, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def vobjects_merges_job_id_results_get_with_http_info(self, job_id : Annotated[StrictStr, Field(..., description="The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Record Merge Results  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_merges_job_id_results_get_with_http_info(job_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param job_id: The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK. (required)
        :type job_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'job_id',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vobjects_merges_job_id_results_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['job_id'] is not None:
            _path_params['job_id'] = _params['job_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/vobjects/merges/{job_id}/results', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def vobjects_merges_job_id_status_get(self, job_id : Annotated[StrictStr, Field(..., description="The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Record Merge Status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_merges_job_id_status_get(job_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param job_id: The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK. (required)
        :type job_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the vobjects_merges_job_id_status_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.vobjects_merges_job_id_status_get_with_http_info(job_id, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def vobjects_merges_job_id_status_get_with_http_info(self, job_id : Annotated[StrictStr, Field(..., description="The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Record Merge Status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_merges_job_id_status_get_with_http_info(job_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param job_id: The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK. (required)
        :type job_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'job_id',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vobjects_merges_job_id_status_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['job_id'] is not None:
            _path_params['job_id'] = _params['job_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/vobjects/merges/{job_id}/status', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def vobjects_object_name_actions_action_name_post(self, object_name : Annotated[StrictStr, Field(..., description="The object name__v field value.")], action_name : Annotated[StrictStr, Field(..., description="Either the name of the Objectaction or Objectlifecyclestateuseraction to initiate. This is obtained from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.")], authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Initiate Object Action on Multiple Records  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_object_name_actions_action_name_post(object_name, action_name, authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The object name__v field value. (required)
        :type object_name: str
        :param action_name: Either the name of the Objectaction or Objectlifecyclestateuseraction to initiate. This is obtained from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action. (required)
        :type action_name: str
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the vobjects_object_name_actions_action_name_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.vobjects_object_name_actions_action_name_post_with_http_info(object_name, action_name, authorization, content_type, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def vobjects_object_name_actions_action_name_post_with_http_info(self, object_name : Annotated[StrictStr, Field(..., description="The object name__v field value.")], action_name : Annotated[StrictStr, Field(..., description="Either the name of the Objectaction or Objectlifecyclestateuseraction to initiate. This is obtained from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.")], authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Initiate Object Action on Multiple Records  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_object_name_actions_action_name_post_with_http_info(object_name, action_name, authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The object name__v field value. (required)
        :type object_name: str
        :param action_name: Either the name of the Objectaction or Objectlifecyclestateuseraction to initiate. This is obtained from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action. (required)
        :type action_name: str
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'object_name',
            'action_name',
            'authorization',
            'content_type',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vobjects_object_name_actions_action_name_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['object_name'] is not None:
            _path_params['object_name'] = _params['object_name']

        if _params['action_name'] is not None:
            _path_params['action_name'] = _params['action_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/vobjects/{object_name}/actions/{action_name}', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def vobjects_object_name_actions_changetype_post(self, object_name : Annotated[StrictStr, Field(..., description="The name of the object.")], authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Change Object Type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_object_name_actions_changetype_post(object_name, authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The name of the object. (required)
        :type object_name: str
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the vobjects_object_name_actions_changetype_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.vobjects_object_name_actions_changetype_post_with_http_info(object_name, authorization, content_type, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def vobjects_object_name_actions_changetype_post_with_http_info(self, object_name : Annotated[StrictStr, Field(..., description="The name of the object.")], authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Change Object Type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_object_name_actions_changetype_post_with_http_info(object_name, authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The name of the object. (required)
        :type object_name: str
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'object_name',
            'authorization',
            'content_type',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vobjects_object_name_actions_changetype_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['object_name'] is not None:
            _path_params['object_name'] = _params['object_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/vobjects/{object_name}/actions/changetype', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def vobjects_object_name_actions_merge_post(self, object_name : Annotated[StrictStr, Field(..., description="The object name__v field value. For example, account__v. This object must have Enable Merges configured.")], authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, vobjects_object_name_actions_merge_post_request_inner : Optional[conlist(VobjectsObjectNameActionsMergePostRequestInner)] = None, **kwargs) -> None:  # noqa: E501
        """Initiate Record Merge  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_object_name_actions_merge_post(object_name, authorization, content_type, accept, x_vault_api_client_id, vobjects_object_name_actions_merge_post_request_inner, async_req=True)
        >>> result = thread.get()

        :param object_name: The object name__v field value. For example, account__v. This object must have Enable Merges configured. (required)
        :type object_name: str
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param vobjects_object_name_actions_merge_post_request_inner:
        :type vobjects_object_name_actions_merge_post_request_inner: List[VobjectsObjectNameActionsMergePostRequestInner]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the vobjects_object_name_actions_merge_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.vobjects_object_name_actions_merge_post_with_http_info(object_name, authorization, content_type, accept, x_vault_api_client_id, vobjects_object_name_actions_merge_post_request_inner, **kwargs)  # noqa: E501

    @validate_arguments
    def vobjects_object_name_actions_merge_post_with_http_info(self, object_name : Annotated[StrictStr, Field(..., description="The object name__v field value. For example, account__v. This object must have Enable Merges configured.")], authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, vobjects_object_name_actions_merge_post_request_inner : Optional[conlist(VobjectsObjectNameActionsMergePostRequestInner)] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Initiate Record Merge  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_object_name_actions_merge_post_with_http_info(object_name, authorization, content_type, accept, x_vault_api_client_id, vobjects_object_name_actions_merge_post_request_inner, async_req=True)
        >>> result = thread.get()

        :param object_name: The object name__v field value. For example, account__v. This object must have Enable Merges configured. (required)
        :type object_name: str
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param vobjects_object_name_actions_merge_post_request_inner:
        :type vobjects_object_name_actions_merge_post_request_inner: List[VobjectsObjectNameActionsMergePostRequestInner]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'object_name',
            'authorization',
            'content_type',
            'accept',
            'x_vault_api_client_id',
            'vobjects_object_name_actions_merge_post_request_inner'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vobjects_object_name_actions_merge_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['object_name'] is not None:
            _path_params['object_name'] = _params['object_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['vobjects_object_name_actions_merge_post_request_inner'] is not None:
            _body_params = _params['vobjects_object_name_actions_merge_post_request_inner']

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/vobjects/{object_name}/actions/merge', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def vobjects_object_name_actions_recalculaterollups_get(self, object_name : Annotated[StrictStr, Field(..., description="The name of the object for which to check the status of a Roll-up field recalculation.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Roll-up Field Recalculation Status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_object_name_actions_recalculaterollups_get(object_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The name of the object for which to check the status of a Roll-up field recalculation. (required)
        :type object_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the vobjects_object_name_actions_recalculaterollups_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.vobjects_object_name_actions_recalculaterollups_get_with_http_info(object_name, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def vobjects_object_name_actions_recalculaterollups_get_with_http_info(self, object_name : Annotated[StrictStr, Field(..., description="The name of the object for which to check the status of a Roll-up field recalculation.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Roll-up Field Recalculation Status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_object_name_actions_recalculaterollups_get_with_http_info(object_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The name of the object for which to check the status of a Roll-up field recalculation. (required)
        :type object_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'object_name',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vobjects_object_name_actions_recalculaterollups_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['object_name'] is not None:
            _path_params['object_name'] = _params['object_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/vobjects/{object_name}/actions/recalculaterollups', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def vobjects_object_name_actions_recalculaterollups_post(self, object_name : Annotated[StrictStr, Field(..., description="The name of the object for which to check the status of a Roll-up field recalculation.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Recalculate Roll-up Fields  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_object_name_actions_recalculaterollups_post(object_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The name of the object for which to check the status of a Roll-up field recalculation. (required)
        :type object_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the vobjects_object_name_actions_recalculaterollups_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.vobjects_object_name_actions_recalculaterollups_post_with_http_info(object_name, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def vobjects_object_name_actions_recalculaterollups_post_with_http_info(self, object_name : Annotated[StrictStr, Field(..., description="The name of the object for which to check the status of a Roll-up field recalculation.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Recalculate Roll-up Fields  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_object_name_actions_recalculaterollups_post_with_http_info(object_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The name of the object for which to check the status of a Roll-up field recalculation. (required)
        :type object_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'object_name',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vobjects_object_name_actions_recalculaterollups_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['object_name'] is not None:
            _path_params['object_name'] = _params['object_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/vobjects/{object_name}/actions/recalculaterollups', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def vobjects_object_name_actions_updatecorporatecurrency_put(self, object_name : Annotated[StrictStr, Field(..., description="The object name__v field value (product__v, country__v, custom_object__c, etc.).")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Update Corporate Currency Fields  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_object_name_actions_updatecorporatecurrency_put(object_name, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
        :type object_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the vobjects_object_name_actions_updatecorporatecurrency_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.vobjects_object_name_actions_updatecorporatecurrency_put_with_http_info(object_name, authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def vobjects_object_name_actions_updatecorporatecurrency_put_with_http_info(self, object_name : Annotated[StrictStr, Field(..., description="The object name__v field value (product__v, country__v, custom_object__c, etc.).")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Update Corporate Currency Fields  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_object_name_actions_updatecorporatecurrency_put_with_http_info(object_name, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
        :type object_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'object_name',
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vobjects_object_name_actions_updatecorporatecurrency_put" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['object_name'] is not None:
            _path_params['object_name'] = _params['object_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/vobjects/{object_name}/actions/updatecorporatecurrency', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def vobjects_object_name_attachments_batch_delete(self, object_name : Annotated[StrictStr, Field(..., description="The object name__v field value (product__v, country__v, custom_object__c, etc.).")], id_param : Optional[StrictStr] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Delete Multiple Object Record Attachments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_object_name_attachments_batch_delete(object_name, id_param, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
        :type object_name: str
        :param id_param:
        :type id_param: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the vobjects_object_name_attachments_batch_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.vobjects_object_name_attachments_batch_delete_with_http_info(object_name, id_param, authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def vobjects_object_name_attachments_batch_delete_with_http_info(self, object_name : Annotated[StrictStr, Field(..., description="The object name__v field value (product__v, country__v, custom_object__c, etc.).")], id_param : Optional[StrictStr] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Delete Multiple Object Record Attachments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_object_name_attachments_batch_delete_with_http_info(object_name, id_param, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
        :type object_name: str
        :param id_param:
        :type id_param: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'object_name',
            'id_param',
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vobjects_object_name_attachments_batch_delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['object_name'] is not None:
            _path_params['object_name'] = _params['object_name']


        # process the query parameters
        _query_params = []
        if _params.get('id_param') is not None:  # noqa: E501
            _query_params.append(('idParam', _params['id_param']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/vobjects/{object_name}/attachments/batch', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def vobjects_object_name_attachments_batch_post(self, object_name : Annotated[StrictStr, Field(..., description="The object name__v field value (product__v, country__v, custom_object__c, etc.).")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Create Multiple Object Record Attachments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_object_name_attachments_batch_post(object_name, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
        :type object_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the vobjects_object_name_attachments_batch_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.vobjects_object_name_attachments_batch_post_with_http_info(object_name, authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def vobjects_object_name_attachments_batch_post_with_http_info(self, object_name : Annotated[StrictStr, Field(..., description="The object name__v field value (product__v, country__v, custom_object__c, etc.).")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create Multiple Object Record Attachments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_object_name_attachments_batch_post_with_http_info(object_name, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
        :type object_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'object_name',
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vobjects_object_name_attachments_batch_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['object_name'] is not None:
            _path_params['object_name'] = _params['object_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/vobjects/{object_name}/attachments/batch', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def vobjects_object_name_attachments_batch_put(self, object_name : Annotated[StrictStr, Field(..., description="The object name__v field value (product__v, country__v, custom_object__c, etc.).")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Update Multiple Object Record Attachment Descriptions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_object_name_attachments_batch_put(object_name, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
        :type object_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the vobjects_object_name_attachments_batch_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.vobjects_object_name_attachments_batch_put_with_http_info(object_name, authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def vobjects_object_name_attachments_batch_put_with_http_info(self, object_name : Annotated[StrictStr, Field(..., description="The object name__v field value (product__v, country__v, custom_object__c, etc.).")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Update Multiple Object Record Attachment Descriptions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_object_name_attachments_batch_put_with_http_info(object_name, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
        :type object_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'object_name',
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vobjects_object_name_attachments_batch_put" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['object_name'] is not None:
            _path_params['object_name'] = _params['object_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/vobjects/{object_name}/attachments/batch', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def vobjects_object_name_delete(self, object_name : Annotated[StrictStr, Field(..., description="The object name__v field value (product__v, country__v, custom_object__c, etc.).")], authorization : Optional[StrictStr] = None, content_type : Annotated[Optional[StrictStr], Field(description="Can be text/csv or application/json")] = None, accept : Annotated[Optional[StrictStr], Field(description="Can be text/csv or application/json")] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Delete Object Records  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_object_name_delete(object_name, authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
        :type object_name: str
        :param authorization:
        :type authorization: str
        :param content_type: Can be text/csv or application/json
        :type content_type: str
        :param accept: Can be text/csv or application/json
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the vobjects_object_name_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.vobjects_object_name_delete_with_http_info(object_name, authorization, content_type, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def vobjects_object_name_delete_with_http_info(self, object_name : Annotated[StrictStr, Field(..., description="The object name__v field value (product__v, country__v, custom_object__c, etc.).")], authorization : Optional[StrictStr] = None, content_type : Annotated[Optional[StrictStr], Field(description="Can be text/csv or application/json")] = None, accept : Annotated[Optional[StrictStr], Field(description="Can be text/csv or application/json")] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Delete Object Records  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_object_name_delete_with_http_info(object_name, authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
        :type object_name: str
        :param authorization:
        :type authorization: str
        :param content_type: Can be text/csv or application/json
        :type content_type: str
        :param accept: Can be text/csv or application/json
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'object_name',
            'authorization',
            'content_type',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vobjects_object_name_delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['object_name'] is not None:
            _path_params['object_name'] = _params['object_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/vobjects/{object_name}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def vobjects_object_name_id_roles_role_name_get(self, object_name : Annotated[StrictStr, Field(..., description="The object name.")], id : Annotated[StrictStr, Field(..., description="The id of the document, binder, or object record.")], role_name : Annotated[StrictStr, Field(..., description="Optional: Include a role name to filter for a specific role. For example, owner__v.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Object Record Roles  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_object_name_id_roles_role_name_get(object_name, id, role_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The object name. (required)
        :type object_name: str
        :param id: The id of the document, binder, or object record. (required)
        :type id: str
        :param role_name: Optional: Include a role name to filter for a specific role. For example, owner__v. (required)
        :type role_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the vobjects_object_name_id_roles_role_name_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.vobjects_object_name_id_roles_role_name_get_with_http_info(object_name, id, role_name, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def vobjects_object_name_id_roles_role_name_get_with_http_info(self, object_name : Annotated[StrictStr, Field(..., description="The object name.")], id : Annotated[StrictStr, Field(..., description="The id of the document, binder, or object record.")], role_name : Annotated[StrictStr, Field(..., description="Optional: Include a role name to filter for a specific role. For example, owner__v.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Object Record Roles  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_object_name_id_roles_role_name_get_with_http_info(object_name, id, role_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The object name. (required)
        :type object_name: str
        :param id: The id of the document, binder, or object record. (required)
        :type id: str
        :param role_name: Optional: Include a role name to filter for a specific role. For example, owner__v. (required)
        :type role_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'object_name',
            'id',
            'role_name',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vobjects_object_name_id_roles_role_name_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['object_name'] is not None:
            _path_params['object_name'] = _params['object_name']

        if _params['id'] is not None:
            _path_params['id'] = _params['id']

        if _params['role_name'] is not None:
            _path_params['role_name'] = _params['role_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/vobjects/{object_name}/{id}/roles/{role_name}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def vobjects_object_name_object_record_id_actions_action_name_get(self, object_name : Annotated[StrictStr, Field(..., description="The object name__v field value.")], object_record_id : Annotated[StrictStr, Field(..., description="The object record id field value from which to retrieve user actions.")], action_name : Annotated[StrictStr, Field(..., description="The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Object User Actions Details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_object_name_object_record_id_actions_action_name_get(object_name, object_record_id, action_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The object name__v field value. (required)
        :type object_name: str
        :param object_record_id: The object record id field value from which to retrieve user actions. (required)
        :type object_record_id: str
        :param action_name: The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action. (required)
        :type action_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the vobjects_object_name_object_record_id_actions_action_name_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.vobjects_object_name_object_record_id_actions_action_name_get_with_http_info(object_name, object_record_id, action_name, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def vobjects_object_name_object_record_id_actions_action_name_get_with_http_info(self, object_name : Annotated[StrictStr, Field(..., description="The object name__v field value.")], object_record_id : Annotated[StrictStr, Field(..., description="The object record id field value from which to retrieve user actions.")], action_name : Annotated[StrictStr, Field(..., description="The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Object User Actions Details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_object_name_object_record_id_actions_action_name_get_with_http_info(object_name, object_record_id, action_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The object name__v field value. (required)
        :type object_name: str
        :param object_record_id: The object record id field value from which to retrieve user actions. (required)
        :type object_record_id: str
        :param action_name: The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action. (required)
        :type action_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'object_name',
            'object_record_id',
            'action_name',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vobjects_object_name_object_record_id_actions_action_name_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['object_name'] is not None:
            _path_params['object_name'] = _params['object_name']

        if _params['object_record_id'] is not None:
            _path_params['object_record_id'] = _params['object_record_id']

        if _params['action_name'] is not None:
            _path_params['action_name'] = _params['action_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/vobjects/{object_name}/{object_record_id}/actions/{action_name}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def vobjects_object_name_object_record_id_actions_action_name_post(self, object_name : Annotated[StrictStr, Field(..., description="The object name__v field value.")], object_record_id : Annotated[StrictStr, Field(..., description="The object record id field value from which to retrieve user actions.")], action_name : Annotated[StrictStr, Field(..., description="The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.")], authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Initiate Object Action on a Single Record  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_object_name_object_record_id_actions_action_name_post(object_name, object_record_id, action_name, authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The object name__v field value. (required)
        :type object_name: str
        :param object_record_id: The object record id field value from which to retrieve user actions. (required)
        :type object_record_id: str
        :param action_name: The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action. (required)
        :type action_name: str
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the vobjects_object_name_object_record_id_actions_action_name_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.vobjects_object_name_object_record_id_actions_action_name_post_with_http_info(object_name, object_record_id, action_name, authorization, content_type, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def vobjects_object_name_object_record_id_actions_action_name_post_with_http_info(self, object_name : Annotated[StrictStr, Field(..., description="The object name__v field value.")], object_record_id : Annotated[StrictStr, Field(..., description="The object record id field value from which to retrieve user actions.")], action_name : Annotated[StrictStr, Field(..., description="The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.")], authorization : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Initiate Object Action on a Single Record  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_object_name_object_record_id_actions_action_name_post_with_http_info(object_name, object_record_id, action_name, authorization, content_type, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The object name__v field value. (required)
        :type object_name: str
        :param object_record_id: The object record id field value from which to retrieve user actions. (required)
        :type object_record_id: str
        :param action_name: The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action. (required)
        :type action_name: str
        :param authorization:
        :type authorization: str
        :param content_type:
        :type content_type: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'object_name',
            'object_record_id',
            'action_name',
            'authorization',
            'content_type',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vobjects_object_name_object_record_id_actions_action_name_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['object_name'] is not None:
            _path_params['object_name'] = _params['object_name']

        if _params['object_record_id'] is not None:
            _path_params['object_record_id'] = _params['object_record_id']

        if _params['action_name'] is not None:
            _path_params['action_name'] = _params['action_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/vobjects/{object_name}/{object_record_id}/actions/{action_name}', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def vobjects_object_name_object_record_id_actions_cascadedelete_post(self, object_name : Annotated[StrictStr, Field(..., description="The object name__v field value (product__v, country__v, custom_object__c, etc.).")], object_record_id : Annotated[StrictStr, Field(..., description="The object record id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Cascade Delete Object Record  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_object_name_object_record_id_actions_cascadedelete_post(object_name, object_record_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
        :type object_name: str
        :param object_record_id: The object record id field value. (required)
        :type object_record_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the vobjects_object_name_object_record_id_actions_cascadedelete_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.vobjects_object_name_object_record_id_actions_cascadedelete_post_with_http_info(object_name, object_record_id, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def vobjects_object_name_object_record_id_actions_cascadedelete_post_with_http_info(self, object_name : Annotated[StrictStr, Field(..., description="The object name__v field value (product__v, country__v, custom_object__c, etc.).")], object_record_id : Annotated[StrictStr, Field(..., description="The object record id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Cascade Delete Object Record  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_object_name_object_record_id_actions_cascadedelete_post_with_http_info(object_name, object_record_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
        :type object_name: str
        :param object_record_id: The object record id field value. (required)
        :type object_record_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'object_name',
            'object_record_id',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vobjects_object_name_object_record_id_actions_cascadedelete_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['object_name'] is not None:
            _path_params['object_name'] = _params['object_name']

        if _params['object_record_id'] is not None:
            _path_params['object_record_id'] = _params['object_record_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/vobjects/{object_name}/{object_record_id}/actions/cascadedelete', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def vobjects_object_name_object_record_id_actions_deepcopy_post(self, object_name : Annotated[StrictStr, Field(..., description="The object name__v field value (product__v, country__v, custom_object__c, etc.).")], object_record_id : Annotated[StrictStr, Field(..., description="The object record id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Deep Copy Object Record  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_object_name_object_record_id_actions_deepcopy_post(object_name, object_record_id, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
        :type object_name: str
        :param object_record_id: The object record id field value. (required)
        :type object_record_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the vobjects_object_name_object_record_id_actions_deepcopy_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.vobjects_object_name_object_record_id_actions_deepcopy_post_with_http_info(object_name, object_record_id, authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def vobjects_object_name_object_record_id_actions_deepcopy_post_with_http_info(self, object_name : Annotated[StrictStr, Field(..., description="The object name__v field value (product__v, country__v, custom_object__c, etc.).")], object_record_id : Annotated[StrictStr, Field(..., description="The object record id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Deep Copy Object Record  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_object_name_object_record_id_actions_deepcopy_post_with_http_info(object_name, object_record_id, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
        :type object_name: str
        :param object_record_id: The object record id field value. (required)
        :type object_record_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'object_name',
            'object_record_id',
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vobjects_object_name_object_record_id_actions_deepcopy_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['object_name'] is not None:
            _path_params['object_name'] = _params['object_name']

        if _params['object_record_id'] is not None:
            _path_params['object_record_id'] = _params['object_record_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/vobjects/{object_name}/{object_record_id}/actions/deepcopy', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def vobjects_object_name_object_record_id_actions_get(self, object_name : Annotated[StrictStr, Field(..., description="The object name__v field value.")], object_record_id : Annotated[StrictStr, Field(..., description="The object record id field value.")], loc : Annotated[Optional[StrictBool], Field(description="Optional: When true, retrieves localized (translated) strings for the label. ")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Object Record User Actions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_object_name_object_record_id_actions_get(object_name, object_record_id, loc, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The object name__v field value. (required)
        :type object_name: str
        :param object_record_id: The object record id field value. (required)
        :type object_record_id: str
        :param loc: Optional: When true, retrieves localized (translated) strings for the label. 
        :type loc: bool
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the vobjects_object_name_object_record_id_actions_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.vobjects_object_name_object_record_id_actions_get_with_http_info(object_name, object_record_id, loc, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def vobjects_object_name_object_record_id_actions_get_with_http_info(self, object_name : Annotated[StrictStr, Field(..., description="The object name__v field value.")], object_record_id : Annotated[StrictStr, Field(..., description="The object record id field value.")], loc : Annotated[Optional[StrictBool], Field(description="Optional: When true, retrieves localized (translated) strings for the label. ")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Object Record User Actions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_object_name_object_record_id_actions_get_with_http_info(object_name, object_record_id, loc, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The object name__v field value. (required)
        :type object_name: str
        :param object_record_id: The object record id field value. (required)
        :type object_record_id: str
        :param loc: Optional: When true, retrieves localized (translated) strings for the label. 
        :type loc: bool
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'object_name',
            'object_record_id',
            'loc',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vobjects_object_name_object_record_id_actions_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['object_name'] is not None:
            _path_params['object_name'] = _params['object_name']

        if _params['object_record_id'] is not None:
            _path_params['object_record_id'] = _params['object_record_id']


        # process the query parameters
        _query_params = []
        if _params.get('loc') is not None:  # noqa: E501
            _query_params.append(('loc', _params['loc']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/vobjects/{object_name}/{object_record_id}/actions', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def vobjects_object_name_object_record_id_attachment_fields_attachment_field_name_file_get(self, object_name : Annotated[StrictStr, Field(..., description="The object name__v field value. For example, product__v.")], object_record_id : Annotated[StrictStr, Field(..., description="The object record id field value.")], attachment_field_name : Annotated[StrictStr, Field(..., description="The name of the Attachment field to update.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Download Attachment Field File  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_object_name_object_record_id_attachment_fields_attachment_field_name_file_get(object_name, object_record_id, attachment_field_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The object name__v field value. For example, product__v. (required)
        :type object_name: str
        :param object_record_id: The object record id field value. (required)
        :type object_record_id: str
        :param attachment_field_name: The name of the Attachment field to update. (required)
        :type attachment_field_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the vobjects_object_name_object_record_id_attachment_fields_attachment_field_name_file_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.vobjects_object_name_object_record_id_attachment_fields_attachment_field_name_file_get_with_http_info(object_name, object_record_id, attachment_field_name, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def vobjects_object_name_object_record_id_attachment_fields_attachment_field_name_file_get_with_http_info(self, object_name : Annotated[StrictStr, Field(..., description="The object name__v field value. For example, product__v.")], object_record_id : Annotated[StrictStr, Field(..., description="The object record id field value.")], attachment_field_name : Annotated[StrictStr, Field(..., description="The name of the Attachment field to update.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Download Attachment Field File  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_object_name_object_record_id_attachment_fields_attachment_field_name_file_get_with_http_info(object_name, object_record_id, attachment_field_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The object name__v field value. For example, product__v. (required)
        :type object_name: str
        :param object_record_id: The object record id field value. (required)
        :type object_record_id: str
        :param attachment_field_name: The name of the Attachment field to update. (required)
        :type attachment_field_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'object_name',
            'object_record_id',
            'attachment_field_name',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vobjects_object_name_object_record_id_attachment_fields_attachment_field_name_file_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['object_name'] is not None:
            _path_params['object_name'] = _params['object_name']

        if _params['object_record_id'] is not None:
            _path_params['object_record_id'] = _params['object_record_id']

        if _params['attachment_field_name'] is not None:
            _path_params['attachment_field_name'] = _params['attachment_field_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/vobjects/{object_name}/{object_record_id}/attachment_fields/{attachment_field_name}/file', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def vobjects_object_name_object_record_id_attachment_fields_attachment_field_name_file_post(self, object_name : Annotated[StrictStr, Field(..., description="The object name__v field value. For example, product__v.")], object_record_id : Annotated[StrictStr, Field(..., description="The object record id field value.")], attachment_field_name : Annotated[StrictStr, Field(..., description="The name of the Attachment field to update.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Update Attachment Field File  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_object_name_object_record_id_attachment_fields_attachment_field_name_file_post(object_name, object_record_id, attachment_field_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The object name__v field value. For example, product__v. (required)
        :type object_name: str
        :param object_record_id: The object record id field value. (required)
        :type object_record_id: str
        :param attachment_field_name: The name of the Attachment field to update. (required)
        :type attachment_field_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the vobjects_object_name_object_record_id_attachment_fields_attachment_field_name_file_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.vobjects_object_name_object_record_id_attachment_fields_attachment_field_name_file_post_with_http_info(object_name, object_record_id, attachment_field_name, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def vobjects_object_name_object_record_id_attachment_fields_attachment_field_name_file_post_with_http_info(self, object_name : Annotated[StrictStr, Field(..., description="The object name__v field value. For example, product__v.")], object_record_id : Annotated[StrictStr, Field(..., description="The object record id field value.")], attachment_field_name : Annotated[StrictStr, Field(..., description="The name of the Attachment field to update.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Update Attachment Field File  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_object_name_object_record_id_attachment_fields_attachment_field_name_file_post_with_http_info(object_name, object_record_id, attachment_field_name, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The object name__v field value. For example, product__v. (required)
        :type object_name: str
        :param object_record_id: The object record id field value. (required)
        :type object_record_id: str
        :param attachment_field_name: The name of the Attachment field to update. (required)
        :type attachment_field_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'object_name',
            'object_record_id',
            'attachment_field_name',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vobjects_object_name_object_record_id_attachment_fields_attachment_field_name_file_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['object_name'] is not None:
            _path_params['object_name'] = _params['object_name']

        if _params['object_record_id'] is not None:
            _path_params['object_record_id'] = _params['object_record_id']

        if _params['attachment_field_name'] is not None:
            _path_params['attachment_field_name'] = _params['attachment_field_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/vobjects/{object_name}/{object_record_id}/attachment_fields/{attachment_field_name}/file', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def vobjects_object_name_object_record_id_attachment_fields_file_get(self, object_name : Annotated[StrictStr, Field(..., description="The object name__v field value. For example, product__v.")], object_record_id : Annotated[StrictStr, Field(..., description="The object record id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Download All Attachment Field Files  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_object_name_object_record_id_attachment_fields_file_get(object_name, object_record_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The object name__v field value. For example, product__v. (required)
        :type object_name: str
        :param object_record_id: The object record id field value. (required)
        :type object_record_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the vobjects_object_name_object_record_id_attachment_fields_file_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.vobjects_object_name_object_record_id_attachment_fields_file_get_with_http_info(object_name, object_record_id, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def vobjects_object_name_object_record_id_attachment_fields_file_get_with_http_info(self, object_name : Annotated[StrictStr, Field(..., description="The object name__v field value. For example, product__v.")], object_record_id : Annotated[StrictStr, Field(..., description="The object record id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Download All Attachment Field Files  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_object_name_object_record_id_attachment_fields_file_get_with_http_info(object_name, object_record_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The object name__v field value. For example, product__v. (required)
        :type object_name: str
        :param object_record_id: The object record id field value. (required)
        :type object_record_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'object_name',
            'object_record_id',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vobjects_object_name_object_record_id_attachment_fields_file_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['object_name'] is not None:
            _path_params['object_name'] = _params['object_name']

        if _params['object_record_id'] is not None:
            _path_params['object_record_id'] = _params['object_record_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/vobjects/{object_name}/{object_record_id}/attachment_fields/file', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def vobjects_object_name_object_record_id_attachments_attachment_id_delete(self, object_name : Annotated[StrictStr, Field(..., description="The object name__v field value (product__v, country__v, custom_object__c, etc.).")], object_record_id : Annotated[StrictStr, Field(..., description="The object record id field value.")], attachment_id : Annotated[StrictStr, Field(..., description="The attachment id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Delete Object Record Attachment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_object_name_object_record_id_attachments_attachment_id_delete(object_name, object_record_id, attachment_id, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
        :type object_name: str
        :param object_record_id: The object record id field value. (required)
        :type object_record_id: str
        :param attachment_id: The attachment id field value. (required)
        :type attachment_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the vobjects_object_name_object_record_id_attachments_attachment_id_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.vobjects_object_name_object_record_id_attachments_attachment_id_delete_with_http_info(object_name, object_record_id, attachment_id, authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def vobjects_object_name_object_record_id_attachments_attachment_id_delete_with_http_info(self, object_name : Annotated[StrictStr, Field(..., description="The object name__v field value (product__v, country__v, custom_object__c, etc.).")], object_record_id : Annotated[StrictStr, Field(..., description="The object record id field value.")], attachment_id : Annotated[StrictStr, Field(..., description="The attachment id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Delete Object Record Attachment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_object_name_object_record_id_attachments_attachment_id_delete_with_http_info(object_name, object_record_id, attachment_id, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
        :type object_name: str
        :param object_record_id: The object record id field value. (required)
        :type object_record_id: str
        :param attachment_id: The attachment id field value. (required)
        :type attachment_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'object_name',
            'object_record_id',
            'attachment_id',
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vobjects_object_name_object_record_id_attachments_attachment_id_delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['object_name'] is not None:
            _path_params['object_name'] = _params['object_name']

        if _params['object_record_id'] is not None:
            _path_params['object_record_id'] = _params['object_record_id']

        if _params['attachment_id'] is not None:
            _path_params['attachment_id'] = _params['attachment_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def vobjects_object_name_object_record_id_attachments_attachment_id_get(self, object_name : Annotated[StrictStr, Field(..., description="The object name__v field value (product__v, country__v, custom_object__c, etc.).")], object_record_id : Annotated[StrictStr, Field(..., description="The object record id field value.")], attachment_id : Annotated[StrictStr, Field(..., description="The attachment id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Object Record Attachment Metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_object_name_object_record_id_attachments_attachment_id_get(object_name, object_record_id, attachment_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
        :type object_name: str
        :param object_record_id: The object record id field value. (required)
        :type object_record_id: str
        :param attachment_id: The attachment id field value. (required)
        :type attachment_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the vobjects_object_name_object_record_id_attachments_attachment_id_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.vobjects_object_name_object_record_id_attachments_attachment_id_get_with_http_info(object_name, object_record_id, attachment_id, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def vobjects_object_name_object_record_id_attachments_attachment_id_get_with_http_info(self, object_name : Annotated[StrictStr, Field(..., description="The object name__v field value (product__v, country__v, custom_object__c, etc.).")], object_record_id : Annotated[StrictStr, Field(..., description="The object record id field value.")], attachment_id : Annotated[StrictStr, Field(..., description="The attachment id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Object Record Attachment Metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_object_name_object_record_id_attachments_attachment_id_get_with_http_info(object_name, object_record_id, attachment_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
        :type object_name: str
        :param object_record_id: The object record id field value. (required)
        :type object_record_id: str
        :param attachment_id: The attachment id field value. (required)
        :type attachment_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'object_name',
            'object_record_id',
            'attachment_id',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vobjects_object_name_object_record_id_attachments_attachment_id_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['object_name'] is not None:
            _path_params['object_name'] = _params['object_name']

        if _params['object_record_id'] is not None:
            _path_params['object_record_id'] = _params['object_record_id']

        if _params['attachment_id'] is not None:
            _path_params['attachment_id'] = _params['attachment_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def vobjects_object_name_object_record_id_attachments_attachment_id_put(self, object_name : Annotated[StrictStr, Field(..., description="The object name__v field value (product__v, country__v, custom_object__c, etc.).")], object_record_id : Annotated[StrictStr, Field(..., description="The object record id field value.")], attachment_id : Annotated[StrictStr, Field(..., description="The attachment id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Update Object Record Attachment Description  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_object_name_object_record_id_attachments_attachment_id_put(object_name, object_record_id, attachment_id, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
        :type object_name: str
        :param object_record_id: The object record id field value. (required)
        :type object_record_id: str
        :param attachment_id: The attachment id field value. (required)
        :type attachment_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the vobjects_object_name_object_record_id_attachments_attachment_id_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.vobjects_object_name_object_record_id_attachments_attachment_id_put_with_http_info(object_name, object_record_id, attachment_id, authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def vobjects_object_name_object_record_id_attachments_attachment_id_put_with_http_info(self, object_name : Annotated[StrictStr, Field(..., description="The object name__v field value (product__v, country__v, custom_object__c, etc.).")], object_record_id : Annotated[StrictStr, Field(..., description="The object record id field value.")], attachment_id : Annotated[StrictStr, Field(..., description="The attachment id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Update Object Record Attachment Description  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_object_name_object_record_id_attachments_attachment_id_put_with_http_info(object_name, object_record_id, attachment_id, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
        :type object_name: str
        :param object_record_id: The object record id field value. (required)
        :type object_record_id: str
        :param attachment_id: The attachment id field value. (required)
        :type attachment_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'object_name',
            'object_record_id',
            'attachment_id',
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vobjects_object_name_object_record_id_attachments_attachment_id_put" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['object_name'] is not None:
            _path_params['object_name'] = _params['object_name']

        if _params['object_record_id'] is not None:
            _path_params['object_record_id'] = _params['object_record_id']

        if _params['attachment_id'] is not None:
            _path_params['attachment_id'] = _params['attachment_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_delete(self, object_name : Annotated[StrictStr, Field(..., description="The object name__v field value (product__v, country__v, custom_object__c, etc.).")], object_record_id : Annotated[StrictStr, Field(..., description="The object record id field value.")], attachment_id : Annotated[StrictStr, Field(..., description="The attachment id field value.")], attachment_version : Annotated[StrictStr, Field(..., description="The attachment version__v field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Delete Object Record Attachment Version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_delete(object_name, object_record_id, attachment_id, attachment_version, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
        :type object_name: str
        :param object_record_id: The object record id field value. (required)
        :type object_record_id: str
        :param attachment_id: The attachment id field value. (required)
        :type attachment_id: str
        :param attachment_version: The attachment version__v field value. (required)
        :type attachment_version: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_delete_with_http_info(object_name, object_record_id, attachment_id, attachment_version, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_delete_with_http_info(self, object_name : Annotated[StrictStr, Field(..., description="The object name__v field value (product__v, country__v, custom_object__c, etc.).")], object_record_id : Annotated[StrictStr, Field(..., description="The object record id field value.")], attachment_id : Annotated[StrictStr, Field(..., description="The attachment id field value.")], attachment_version : Annotated[StrictStr, Field(..., description="The attachment version__v field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Delete Object Record Attachment Version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_delete_with_http_info(object_name, object_record_id, attachment_id, attachment_version, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
        :type object_name: str
        :param object_record_id: The object record id field value. (required)
        :type object_record_id: str
        :param attachment_id: The attachment id field value. (required)
        :type attachment_id: str
        :param attachment_version: The attachment version__v field value. (required)
        :type attachment_version: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'object_name',
            'object_record_id',
            'attachment_id',
            'attachment_version',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['object_name'] is not None:
            _path_params['object_name'] = _params['object_name']

        if _params['object_record_id'] is not None:
            _path_params['object_record_id'] = _params['object_record_id']

        if _params['attachment_id'] is not None:
            _path_params['attachment_id'] = _params['attachment_id']

        if _params['attachment_version'] is not None:
            _path_params['attachment_version'] = _params['attachment_version']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_file_get(self, object_name : Annotated[StrictStr, Field(..., description="The object name__v field value (product__v, country__v, custom_object__c, etc.).")], object_record_id : Annotated[StrictStr, Field(..., description="The object record id field value.")], attachment_id : Annotated[StrictStr, Field(..., description="The attachment id field value.")], attachment_version : StrictStr, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Download Object Record Attachment File  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_file_get(object_name, object_record_id, attachment_id, attachment_version, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
        :type object_name: str
        :param object_record_id: The object record id field value. (required)
        :type object_record_id: str
        :param attachment_id: The attachment id field value. (required)
        :type attachment_id: str
        :param attachment_version: (required)
        :type attachment_version: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_file_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_file_get_with_http_info(object_name, object_record_id, attachment_id, attachment_version, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_file_get_with_http_info(self, object_name : Annotated[StrictStr, Field(..., description="The object name__v field value (product__v, country__v, custom_object__c, etc.).")], object_record_id : Annotated[StrictStr, Field(..., description="The object record id field value.")], attachment_id : Annotated[StrictStr, Field(..., description="The attachment id field value.")], attachment_version : StrictStr, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Download Object Record Attachment File  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_file_get_with_http_info(object_name, object_record_id, attachment_id, attachment_version, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
        :type object_name: str
        :param object_record_id: The object record id field value. (required)
        :type object_record_id: str
        :param attachment_id: The attachment id field value. (required)
        :type attachment_id: str
        :param attachment_version: (required)
        :type attachment_version: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'object_name',
            'object_record_id',
            'attachment_id',
            'attachment_version',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_file_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['object_name'] is not None:
            _path_params['object_name'] = _params['object_name']

        if _params['object_record_id'] is not None:
            _path_params['object_record_id'] = _params['object_record_id']

        if _params['attachment_id'] is not None:
            _path_params['attachment_id'] = _params['attachment_id']

        if _params['attachment_version'] is not None:
            _path_params['attachment_version'] = _params['attachment_version']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}/file', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_get(self, object_name : Annotated[StrictStr, Field(..., description="The object name__v field value (product__v, country__v, custom_object__c, etc.).")], object_record_id : Annotated[StrictStr, Field(..., description="The object record id field value.")], attachment_id : Annotated[StrictStr, Field(..., description="The attachment id field value.")], attachment_version : Annotated[StrictStr, Field(..., description="The attachment version__v field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Object Record Attachment Version Metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_get(object_name, object_record_id, attachment_id, attachment_version, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
        :type object_name: str
        :param object_record_id: The object record id field value. (required)
        :type object_record_id: str
        :param attachment_id: The attachment id field value. (required)
        :type attachment_id: str
        :param attachment_version: The attachment version__v field value. (required)
        :type attachment_version: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_get_with_http_info(object_name, object_record_id, attachment_id, attachment_version, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_get_with_http_info(self, object_name : Annotated[StrictStr, Field(..., description="The object name__v field value (product__v, country__v, custom_object__c, etc.).")], object_record_id : Annotated[StrictStr, Field(..., description="The object record id field value.")], attachment_id : Annotated[StrictStr, Field(..., description="The attachment id field value.")], attachment_version : Annotated[StrictStr, Field(..., description="The attachment version__v field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Object Record Attachment Version Metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_get_with_http_info(object_name, object_record_id, attachment_id, attachment_version, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
        :type object_name: str
        :param object_record_id: The object record id field value. (required)
        :type object_record_id: str
        :param attachment_id: The attachment id field value. (required)
        :type attachment_id: str
        :param attachment_version: The attachment version__v field value. (required)
        :type attachment_version: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'object_name',
            'object_record_id',
            'attachment_id',
            'attachment_version',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['object_name'] is not None:
            _path_params['object_name'] = _params['object_name']

        if _params['object_record_id'] is not None:
            _path_params['object_record_id'] = _params['object_record_id']

        if _params['attachment_id'] is not None:
            _path_params['attachment_id'] = _params['attachment_id']

        if _params['attachment_version'] is not None:
            _path_params['attachment_version'] = _params['attachment_version']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_post(self, object_name : Annotated[StrictStr, Field(..., description="The object name__v field value (product__v, country__v, custom_object__c, etc.).")], object_record_id : Annotated[StrictStr, Field(..., description="The object record id field value.")], attachment_id : Annotated[StrictStr, Field(..., description="The attachment id field value.")], attachment_version : Annotated[StrictStr, Field(..., description="The attachment version__v field value.")], restore : Optional[StrictBool] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Restore Object Record Attachment Version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_post(object_name, object_record_id, attachment_id, attachment_version, restore, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
        :type object_name: str
        :param object_record_id: The object record id field value. (required)
        :type object_record_id: str
        :param attachment_id: The attachment id field value. (required)
        :type attachment_id: str
        :param attachment_version: The attachment version__v field value. (required)
        :type attachment_version: str
        :param restore:
        :type restore: bool
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_post_with_http_info(object_name, object_record_id, attachment_id, attachment_version, restore, authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_post_with_http_info(self, object_name : Annotated[StrictStr, Field(..., description="The object name__v field value (product__v, country__v, custom_object__c, etc.).")], object_record_id : Annotated[StrictStr, Field(..., description="The object record id field value.")], attachment_id : Annotated[StrictStr, Field(..., description="The attachment id field value.")], attachment_version : Annotated[StrictStr, Field(..., description="The attachment version__v field value.")], restore : Optional[StrictBool] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Restore Object Record Attachment Version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_post_with_http_info(object_name, object_record_id, attachment_id, attachment_version, restore, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
        :type object_name: str
        :param object_record_id: The object record id field value. (required)
        :type object_record_id: str
        :param attachment_id: The attachment id field value. (required)
        :type attachment_id: str
        :param attachment_version: The attachment version__v field value. (required)
        :type attachment_version: str
        :param restore:
        :type restore: bool
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'object_name',
            'object_record_id',
            'attachment_id',
            'attachment_version',
            'restore',
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['object_name'] is not None:
            _path_params['object_name'] = _params['object_name']

        if _params['object_record_id'] is not None:
            _path_params['object_record_id'] = _params['object_record_id']

        if _params['attachment_id'] is not None:
            _path_params['attachment_id'] = _params['attachment_id']

        if _params['attachment_version'] is not None:
            _path_params['attachment_version'] = _params['attachment_version']


        # process the query parameters
        _query_params = []
        if _params.get('restore') is not None:  # noqa: E501
            _query_params.append(('restore', _params['restore']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def vobjects_object_name_object_record_id_attachments_attachment_id_versions_get(self, object_name : Annotated[StrictStr, Field(..., description="The object name__v field value (product__v, country__v, custom_object__c, etc.).")], object_record_id : Annotated[StrictStr, Field(..., description="The object record id field value.")], attachment_id : Annotated[StrictStr, Field(..., description="The attachment id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Object Record Attachment Versions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_object_name_object_record_id_attachments_attachment_id_versions_get(object_name, object_record_id, attachment_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
        :type object_name: str
        :param object_record_id: The object record id field value. (required)
        :type object_record_id: str
        :param attachment_id: The attachment id field value. (required)
        :type attachment_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the vobjects_object_name_object_record_id_attachments_attachment_id_versions_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.vobjects_object_name_object_record_id_attachments_attachment_id_versions_get_with_http_info(object_name, object_record_id, attachment_id, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def vobjects_object_name_object_record_id_attachments_attachment_id_versions_get_with_http_info(self, object_name : Annotated[StrictStr, Field(..., description="The object name__v field value (product__v, country__v, custom_object__c, etc.).")], object_record_id : Annotated[StrictStr, Field(..., description="The object record id field value.")], attachment_id : Annotated[StrictStr, Field(..., description="The attachment id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Object Record Attachment Versions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_object_name_object_record_id_attachments_attachment_id_versions_get_with_http_info(object_name, object_record_id, attachment_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
        :type object_name: str
        :param object_record_id: The object record id field value. (required)
        :type object_record_id: str
        :param attachment_id: The attachment id field value. (required)
        :type attachment_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'object_name',
            'object_record_id',
            'attachment_id',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vobjects_object_name_object_record_id_attachments_attachment_id_versions_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['object_name'] is not None:
            _path_params['object_name'] = _params['object_name']

        if _params['object_record_id'] is not None:
            _path_params['object_record_id'] = _params['object_record_id']

        if _params['attachment_id'] is not None:
            _path_params['attachment_id'] = _params['attachment_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def vobjects_object_name_object_record_id_attachments_file_get(self, object_name : Annotated[StrictStr, Field(..., description="The object name__v field value (product__v, country__v, custom_object__c, etc.).")], object_record_id : Annotated[StrictStr, Field(..., description="The object record id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Download All Object Record Attachment Files  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_object_name_object_record_id_attachments_file_get(object_name, object_record_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
        :type object_name: str
        :param object_record_id: The object record id field value. (required)
        :type object_record_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the vobjects_object_name_object_record_id_attachments_file_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.vobjects_object_name_object_record_id_attachments_file_get_with_http_info(object_name, object_record_id, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def vobjects_object_name_object_record_id_attachments_file_get_with_http_info(self, object_name : Annotated[StrictStr, Field(..., description="The object name__v field value (product__v, country__v, custom_object__c, etc.).")], object_record_id : Annotated[StrictStr, Field(..., description="The object record id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Download All Object Record Attachment Files  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_object_name_object_record_id_attachments_file_get_with_http_info(object_name, object_record_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
        :type object_name: str
        :param object_record_id: The object record id field value. (required)
        :type object_record_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'object_name',
            'object_record_id',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vobjects_object_name_object_record_id_attachments_file_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['object_name'] is not None:
            _path_params['object_name'] = _params['object_name']

        if _params['object_record_id'] is not None:
            _path_params['object_record_id'] = _params['object_record_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/vobjects/{object_name}/{object_record_id}/attachments/file', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def vobjects_object_name_object_record_id_attachments_get(self, object_name : Annotated[StrictStr, Field(..., description="The object name__v field value (product__v, country__v, custom_object__c, etc.).")], object_record_id : Annotated[StrictStr, Field(..., description="The object record id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Object Record Attachments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_object_name_object_record_id_attachments_get(object_name, object_record_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
        :type object_name: str
        :param object_record_id: The object record id field value. (required)
        :type object_record_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the vobjects_object_name_object_record_id_attachments_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.vobjects_object_name_object_record_id_attachments_get_with_http_info(object_name, object_record_id, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def vobjects_object_name_object_record_id_attachments_get_with_http_info(self, object_name : Annotated[StrictStr, Field(..., description="The object name__v field value (product__v, country__v, custom_object__c, etc.).")], object_record_id : Annotated[StrictStr, Field(..., description="The object record id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Object Record Attachments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_object_name_object_record_id_attachments_get_with_http_info(object_name, object_record_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
        :type object_name: str
        :param object_record_id: The object record id field value. (required)
        :type object_record_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'object_name',
            'object_record_id',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vobjects_object_name_object_record_id_attachments_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['object_name'] is not None:
            _path_params['object_name'] = _params['object_name']

        if _params['object_record_id'] is not None:
            _path_params['object_record_id'] = _params['object_record_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/vobjects/{object_name}/{object_record_id}/attachments', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def vobjects_object_name_object_record_id_attachments_post(self, object_name : Annotated[StrictStr, Field(..., description="The object name__v field value (product__v, country__v, custom_object__c, etc.).")], object_record_id : Annotated[StrictStr, Field(..., description="The object record id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Create Object Record Attachment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_object_name_object_record_id_attachments_post(object_name, object_record_id, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
        :type object_name: str
        :param object_record_id: The object record id field value. (required)
        :type object_record_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the vobjects_object_name_object_record_id_attachments_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.vobjects_object_name_object_record_id_attachments_post_with_http_info(object_name, object_record_id, authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def vobjects_object_name_object_record_id_attachments_post_with_http_info(self, object_name : Annotated[StrictStr, Field(..., description="The object name__v field value (product__v, country__v, custom_object__c, etc.).")], object_record_id : Annotated[StrictStr, Field(..., description="The object record id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create Object Record Attachment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_object_name_object_record_id_attachments_post_with_http_info(object_name, object_record_id, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
        :type object_name: str
        :param object_record_id: The object record id field value. (required)
        :type object_record_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'object_name',
            'object_record_id',
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vobjects_object_name_object_record_id_attachments_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['object_name'] is not None:
            _path_params['object_name'] = _params['object_name']

        if _params['object_record_id'] is not None:
            _path_params['object_record_id'] = _params['object_record_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/vobjects/{object_name}/{object_record_id}/attachments', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def vobjects_object_name_object_record_id_audittrail_get(self, object_name : Annotated[StrictStr, Field(..., description="The object name__v field value.")], object_record_id : Annotated[StrictStr, Field(..., description="The object record id field value from which to retrieve user actions.")], start_date : Annotated[Optional[StrictStr], Field(description="Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vVault’s creation date. ")] = None, end_date : Annotated[Optional[StrictStr], Field(description="Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date. ")] = None, format_result : Annotated[Optional[StrictStr], Field(description="To request a CSV file of your audit history, use csv. ")] = None, limit : Annotated[Optional[StrictStr], Field(description="Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.")] = None, offset : Annotated[Optional[StrictStr], Field(description="Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51. If omitted, defaults to 0.")] = None, events : Annotated[Optional[StrictStr], Field(description="Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of object audit events. The values passed to this parameter are case sensitive. For example, events=Copy,Edit,Delete. If omitted, defaults to all audit events.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Complete Audit History for a Single Object Record  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_object_name_object_record_id_audittrail_get(object_name, object_record_id, start_date, end_date, format_result, limit, offset, events, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The object name__v field value. (required)
        :type object_name: str
        :param object_record_id: The object record id field value from which to retrieve user actions. (required)
        :type object_record_id: str
        :param start_date: Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vVault’s creation date. 
        :type start_date: str
        :param end_date: Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date. 
        :type end_date: str
        :param format_result: To request a CSV file of your audit history, use csv. 
        :type format_result: str
        :param limit: Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
        :type limit: str
        :param offset: Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51. If omitted, defaults to 0.
        :type offset: str
        :param events: Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of object audit events. The values passed to this parameter are case sensitive. For example, events=Copy,Edit,Delete. If omitted, defaults to all audit events.
        :type events: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the vobjects_object_name_object_record_id_audittrail_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.vobjects_object_name_object_record_id_audittrail_get_with_http_info(object_name, object_record_id, start_date, end_date, format_result, limit, offset, events, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def vobjects_object_name_object_record_id_audittrail_get_with_http_info(self, object_name : Annotated[StrictStr, Field(..., description="The object name__v field value.")], object_record_id : Annotated[StrictStr, Field(..., description="The object record id field value from which to retrieve user actions.")], start_date : Annotated[Optional[StrictStr], Field(description="Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vVault’s creation date. ")] = None, end_date : Annotated[Optional[StrictStr], Field(description="Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date. ")] = None, format_result : Annotated[Optional[StrictStr], Field(description="To request a CSV file of your audit history, use csv. ")] = None, limit : Annotated[Optional[StrictStr], Field(description="Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.")] = None, offset : Annotated[Optional[StrictStr], Field(description="Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51. If omitted, defaults to 0.")] = None, events : Annotated[Optional[StrictStr], Field(description="Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of object audit events. The values passed to this parameter are case sensitive. For example, events=Copy,Edit,Delete. If omitted, defaults to all audit events.")] = None, authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Complete Audit History for a Single Object Record  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_object_name_object_record_id_audittrail_get_with_http_info(object_name, object_record_id, start_date, end_date, format_result, limit, offset, events, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The object name__v field value. (required)
        :type object_name: str
        :param object_record_id: The object record id field value from which to retrieve user actions. (required)
        :type object_record_id: str
        :param start_date: Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vVault’s creation date. 
        :type start_date: str
        :param end_date: Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date. 
        :type end_date: str
        :param format_result: To request a CSV file of your audit history, use csv. 
        :type format_result: str
        :param limit: Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
        :type limit: str
        :param offset: Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51. If omitted, defaults to 0.
        :type offset: str
        :param events: Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of object audit events. The values passed to this parameter are case sensitive. For example, events=Copy,Edit,Delete. If omitted, defaults to all audit events.
        :type events: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'object_name',
            'object_record_id',
            'start_date',
            'end_date',
            'format_result',
            'limit',
            'offset',
            'events',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vobjects_object_name_object_record_id_audittrail_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['object_name'] is not None:
            _path_params['object_name'] = _params['object_name']

        if _params['object_record_id'] is not None:
            _path_params['object_record_id'] = _params['object_record_id']


        # process the query parameters
        _query_params = []
        if _params.get('start_date') is not None:  # noqa: E501
            _query_params.append(('start_date', _params['start_date']))

        if _params.get('end_date') is not None:  # noqa: E501
            _query_params.append(('end_date', _params['end_date']))

        if _params.get('format_result') is not None:  # noqa: E501
            _query_params.append(('format_result', _params['format_result']))

        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('offset') is not None:  # noqa: E501
            _query_params.append(('offset', _params['offset']))

        if _params.get('events') is not None:  # noqa: E501
            _query_params.append(('events', _params['events']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/vobjects/{object_name}/{object_record_id}/audittrail', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def vobjects_object_name_object_record_id_get(self, object_name : Annotated[StrictStr, Field(..., description="The object name__v field value (product__v, country__v, custom_object__c, etc.).")], object_record_id : Annotated[StrictStr, Field(..., description="The object record id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Object Record  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_object_name_object_record_id_get(object_name, object_record_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
        :type object_name: str
        :param object_record_id: The object record id field value. (required)
        :type object_record_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the vobjects_object_name_object_record_id_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.vobjects_object_name_object_record_id_get_with_http_info(object_name, object_record_id, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def vobjects_object_name_object_record_id_get_with_http_info(self, object_name : Annotated[StrictStr, Field(..., description="The object name__v field value (product__v, country__v, custom_object__c, etc.).")], object_record_id : Annotated[StrictStr, Field(..., description="The object record id field value.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Object Record  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_object_name_object_record_id_get_with_http_info(object_name, object_record_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
        :type object_name: str
        :param object_record_id: The object record id field value. (required)
        :type object_record_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'object_name',
            'object_record_id',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vobjects_object_name_object_record_id_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['object_name'] is not None:
            _path_params['object_name'] = _params['object_name']

        if _params['object_record_id'] is not None:
            _path_params['object_record_id'] = _params['object_record_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/vobjects/{object_name}/{object_record_id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def vobjects_object_name_post(self, object_name : Annotated[StrictStr, Field(..., description="The object name__v field value (product__v, country__v, custom_object__c, etc.).")], id_param : Annotated[Optional[StrictStr], Field(description="To upsert object records, add `idParam={field_name}` to the request endpoint. You can use any object field which has `unique` set to `true` in the object metadata. For example, `idParam=external_id__v`.")] = None, authorization : Optional[StrictStr] = None, content_type : Annotated[Optional[StrictStr], Field(description="Can be text/csv or application/json")] = None, accept : Annotated[Optional[StrictStr], Field(description="Can be text/csv or application/json")] = None, x_vault_api_migration_mode : Annotated[Optional[StrictBool], Field(description="If set to `true`, Vault allows you to create or update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as `created_by__v`. Does not bypass record triggers. Use the `X-VaultAPI-NoTriggers` header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header.")] = None, x_vault_api_no_triggers : Annotated[Optional[StrictBool], Field(description="If set to `true` and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers.")] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Create & Upsert Object Records  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_object_name_post(object_name, id_param, authorization, content_type, accept, x_vault_api_migration_mode, x_vault_api_no_triggers, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
        :type object_name: str
        :param id_param: To upsert object records, add `idParam={field_name}` to the request endpoint. You can use any object field which has `unique` set to `true` in the object metadata. For example, `idParam=external_id__v`.
        :type id_param: str
        :param authorization:
        :type authorization: str
        :param content_type: Can be text/csv or application/json
        :type content_type: str
        :param accept: Can be text/csv or application/json
        :type accept: str
        :param x_vault_api_migration_mode: If set to `true`, Vault allows you to create or update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as `created_by__v`. Does not bypass record triggers. Use the `X-VaultAPI-NoTriggers` header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header.
        :type x_vault_api_migration_mode: bool
        :param x_vault_api_no_triggers: If set to `true` and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers.
        :type x_vault_api_no_triggers: bool
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the vobjects_object_name_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.vobjects_object_name_post_with_http_info(object_name, id_param, authorization, content_type, accept, x_vault_api_migration_mode, x_vault_api_no_triggers, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def vobjects_object_name_post_with_http_info(self, object_name : Annotated[StrictStr, Field(..., description="The object name__v field value (product__v, country__v, custom_object__c, etc.).")], id_param : Annotated[Optional[StrictStr], Field(description="To upsert object records, add `idParam={field_name}` to the request endpoint. You can use any object field which has `unique` set to `true` in the object metadata. For example, `idParam=external_id__v`.")] = None, authorization : Optional[StrictStr] = None, content_type : Annotated[Optional[StrictStr], Field(description="Can be text/csv or application/json")] = None, accept : Annotated[Optional[StrictStr], Field(description="Can be text/csv or application/json")] = None, x_vault_api_migration_mode : Annotated[Optional[StrictBool], Field(description="If set to `true`, Vault allows you to create or update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as `created_by__v`. Does not bypass record triggers. Use the `X-VaultAPI-NoTriggers` header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header.")] = None, x_vault_api_no_triggers : Annotated[Optional[StrictBool], Field(description="If set to `true` and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers.")] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create & Upsert Object Records  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_object_name_post_with_http_info(object_name, id_param, authorization, content_type, accept, x_vault_api_migration_mode, x_vault_api_no_triggers, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
        :type object_name: str
        :param id_param: To upsert object records, add `idParam={field_name}` to the request endpoint. You can use any object field which has `unique` set to `true` in the object metadata. For example, `idParam=external_id__v`.
        :type id_param: str
        :param authorization:
        :type authorization: str
        :param content_type: Can be text/csv or application/json
        :type content_type: str
        :param accept: Can be text/csv or application/json
        :type accept: str
        :param x_vault_api_migration_mode: If set to `true`, Vault allows you to create or update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as `created_by__v`. Does not bypass record triggers. Use the `X-VaultAPI-NoTriggers` header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header.
        :type x_vault_api_migration_mode: bool
        :param x_vault_api_no_triggers: If set to `true` and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers.
        :type x_vault_api_no_triggers: bool
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'object_name',
            'id_param',
            'authorization',
            'content_type',
            'accept',
            'x_vault_api_migration_mode',
            'x_vault_api_no_triggers',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vobjects_object_name_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['object_name'] is not None:
            _path_params['object_name'] = _params['object_name']


        # process the query parameters
        _query_params = []
        if _params.get('id_param') is not None:  # noqa: E501
            _query_params.append(('idParam', _params['id_param']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_migration_mode'] is not None:
            _header_params['X-VaultAPI-MigrationMode'] = _params['x_vault_api_migration_mode']

        if _params['x_vault_api_no_triggers'] is not None:
            _header_params['X-VaultAPI-NoTriggers'] = _params['x_vault_api_no_triggers']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/vobjects/{object_name}', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def vobjects_object_name_put(self, object_name : Annotated[StrictStr, Field(..., description="The object name__v field value (product__v, country__v, custom_object__c, etc.).")], authorization : Optional[StrictStr] = None, content_type : Annotated[Optional[StrictStr], Field(description="Can be text/csv or application/json")] = None, accept : Annotated[Optional[StrictStr], Field(description="Can be text/csv or application/json")] = None, x_vault_api_migration_mode : Annotated[Optional[StrictBool], Field(description="If set to `true`, Vault allows you to update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as `created_by__v`. Does not bypass record triggers. Use the `X-VaultAPI-NoTriggers` header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header.")] = None, x_vault_api_no_triggers : Annotated[Optional[StrictBool], Field(description="If set to `true` and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers.")] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Update Object Records  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_object_name_put(object_name, authorization, content_type, accept, x_vault_api_migration_mode, x_vault_api_no_triggers, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
        :type object_name: str
        :param authorization:
        :type authorization: str
        :param content_type: Can be text/csv or application/json
        :type content_type: str
        :param accept: Can be text/csv or application/json
        :type accept: str
        :param x_vault_api_migration_mode: If set to `true`, Vault allows you to update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as `created_by__v`. Does not bypass record triggers. Use the `X-VaultAPI-NoTriggers` header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header.
        :type x_vault_api_migration_mode: bool
        :param x_vault_api_no_triggers: If set to `true` and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers.
        :type x_vault_api_no_triggers: bool
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the vobjects_object_name_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.vobjects_object_name_put_with_http_info(object_name, authorization, content_type, accept, x_vault_api_migration_mode, x_vault_api_no_triggers, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def vobjects_object_name_put_with_http_info(self, object_name : Annotated[StrictStr, Field(..., description="The object name__v field value (product__v, country__v, custom_object__c, etc.).")], authorization : Optional[StrictStr] = None, content_type : Annotated[Optional[StrictStr], Field(description="Can be text/csv or application/json")] = None, accept : Annotated[Optional[StrictStr], Field(description="Can be text/csv or application/json")] = None, x_vault_api_migration_mode : Annotated[Optional[StrictBool], Field(description="If set to `true`, Vault allows you to update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as `created_by__v`. Does not bypass record triggers. Use the `X-VaultAPI-NoTriggers` header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header.")] = None, x_vault_api_no_triggers : Annotated[Optional[StrictBool], Field(description="If set to `true` and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers.")] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Update Object Records  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_object_name_put_with_http_info(object_name, authorization, content_type, accept, x_vault_api_migration_mode, x_vault_api_no_triggers, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
        :type object_name: str
        :param authorization:
        :type authorization: str
        :param content_type: Can be text/csv or application/json
        :type content_type: str
        :param accept: Can be text/csv or application/json
        :type accept: str
        :param x_vault_api_migration_mode: If set to `true`, Vault allows you to update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as `created_by__v`. Does not bypass record triggers. Use the `X-VaultAPI-NoTriggers` header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header.
        :type x_vault_api_migration_mode: bool
        :param x_vault_api_no_triggers: If set to `true` and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers.
        :type x_vault_api_no_triggers: bool
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'object_name',
            'authorization',
            'content_type',
            'accept',
            'x_vault_api_migration_mode',
            'x_vault_api_no_triggers',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vobjects_object_name_put" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['object_name'] is not None:
            _path_params['object_name'] = _params['object_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_migration_mode'] is not None:
            _header_params['X-VaultAPI-MigrationMode'] = _params['x_vault_api_migration_mode']

        if _params['x_vault_api_no_triggers'] is not None:
            _header_params['X-VaultAPI-NoTriggers'] = _params['x_vault_api_no_triggers']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/vobjects/{object_name}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def vobjects_object_name_roles_delete(self, object_name : Annotated[StrictStr, Field(..., description="The name of the object where you want to remove roles.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Remove Users & Groups from Roles on Object Records  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_object_name_roles_delete(object_name, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The name of the object where you want to remove roles. (required)
        :type object_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the vobjects_object_name_roles_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.vobjects_object_name_roles_delete_with_http_info(object_name, authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def vobjects_object_name_roles_delete_with_http_info(self, object_name : Annotated[StrictStr, Field(..., description="The name of the object where you want to remove roles.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Remove Users & Groups from Roles on Object Records  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_object_name_roles_delete_with_http_info(object_name, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The name of the object where you want to remove roles. (required)
        :type object_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'object_name',
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vobjects_object_name_roles_delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['object_name'] is not None:
            _path_params['object_name'] = _params['object_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/vobjects/{object_name}/roles', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def vobjects_object_name_roles_post(self, object_name : Annotated[StrictStr, Field(..., description="The name of the object where you want to remove roles.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Assign Users & Groups to Roles on Object Records  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_object_name_roles_post(object_name, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The name of the object where you want to remove roles. (required)
        :type object_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the vobjects_object_name_roles_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.vobjects_object_name_roles_post_with_http_info(object_name, authorization, accept, content_type, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def vobjects_object_name_roles_post_with_http_info(self, object_name : Annotated[StrictStr, Field(..., description="The name of the object where you want to remove roles.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, content_type : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Assign Users & Groups to Roles on Object Records  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_object_name_roles_post_with_http_info(object_name, authorization, accept, content_type, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param object_name: The name of the object where you want to remove roles. (required)
        :type object_name: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param content_type:
        :type content_type: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'object_name',
            'authorization',
            'accept',
            'content_type',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vobjects_object_name_roles_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['object_name'] is not None:
            _path_params['object_name'] = _params['object_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['content_type'] is not None:
            _header_params['Content-Type'] = _params['content_type']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/vobjects/{object_name}/roles', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def vobjects_outbound_package_v_package_id_dependencies_get(self, package_id : Annotated[StrictStr, Field(..., description="The ID of the outbound_package__v record from which to retrieve dependencies.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> None:  # noqa: E501
        """Retrieve Outbound Package Dependencies  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_outbound_package_v_package_id_dependencies_get(package_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param package_id: The ID of the outbound_package__v record from which to retrieve dependencies. (required)
        :type package_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the vobjects_outbound_package_v_package_id_dependencies_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.vobjects_outbound_package_v_package_id_dependencies_get_with_http_info(package_id, authorization, accept, x_vault_api_client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def vobjects_outbound_package_v_package_id_dependencies_get_with_http_info(self, package_id : Annotated[StrictStr, Field(..., description="The ID of the outbound_package__v record from which to retrieve dependencies.")], authorization : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, x_vault_api_client_id : Annotated[Optional[StrictStr], Field(description="Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Outbound Package Dependencies  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vobjects_outbound_package_v_package_id_dependencies_get_with_http_info(package_id, authorization, accept, x_vault_api_client_id, async_req=True)
        >>> result = thread.get()

        :param package_id: The ID of the outbound_package__v record from which to retrieve dependencies. (required)
        :type package_id: str
        :param authorization:
        :type authorization: str
        :param accept:
        :type accept: str
        :param x_vault_api_client_id: Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
        :type x_vault_api_client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'package_id',
            'authorization',
            'accept',
            'x_vault_api_client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vobjects_outbound_package_v_package_id_dependencies_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['package_id'] is not None:
            _path_params['package_id'] = _params['package_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization'] is not None:
            _header_params['Authorization'] = _params['authorization']

        if _params['accept'] is not None:
            _header_params['Accept'] = _params['accept']

        if _params['x_vault_api_client_id'] is not None:
            _header_params['X-VaultAPI-ClientID'] = _params['x_vault_api_client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/vobjects/outbound_package__v/{package_id}/dependencies', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
