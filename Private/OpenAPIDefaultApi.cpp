/**
 * Veeva Vault API v25.1
 * The latest GA version of the Vault REST API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIDefaultApi.h"

#include "OpenAPIDefaultApiOperations.h"
#include "OpenAPIModule.h"

#include "HttpModule.h"
#include "Serialization/JsonSerializer.h"

namespace OpenAPI
{

OpenAPIDefaultApi::OpenAPIDefaultApi()
: Url(TEXT("http://}/api/v25.1"))
{
}

OpenAPIDefaultApi::~OpenAPIDefaultApi() {}

void OpenAPIDefaultApi::SetURL(const FString& InUrl)
{
	Url = InUrl;
}

void OpenAPIDefaultApi::AddHeaderParam(const FString& Key, const FString& Value)
{
	AdditionalHeaderParams.Add(Key, Value);
}

void OpenAPIDefaultApi::ClearHeaderParams()
{
	AdditionalHeaderParams.Reset();
}

bool OpenAPIDefaultApi::IsValid() const
{
	if (Url.IsEmpty())
	{
		UE_LOG(LogOpenAPI, Error, TEXT("OpenAPIDefaultApi: Endpoint Url is not set, request cannot be performed"));
		return false;
	}

	return true;
}

void OpenAPIDefaultApi::SetHttpRetryManager(FHttpRetrySystem::FManager& InRetryManager)
{
	if (RetryManager != &InRetryManager)
	{
		DefaultRetryManager.Reset();
		RetryManager = &InRetryManager;
	}
}

FHttpRetrySystem::FManager& OpenAPIDefaultApi::GetHttpRetryManager()
{
	checkf(RetryManager, TEXT("OpenAPIDefaultApi: RetryManager is null.  You may have meant to set it with SetHttpRetryManager first, or you may not be using a custom RetryManager at all."))
	return *RetryManager;
}

FHttpRequestRef OpenAPIDefaultApi::CreateHttpRequest(const Request& Request) const
{
	if (!Request.GetRetryParams().IsSet())
	{
		return FHttpModule::Get().CreateRequest();
	}
	else
	{
		if (!RetryManager)
		{
			// Create default retry manager if none was specified
			DefaultRetryManager = MakeUnique<HttpRetryManager>(6, 60);
			RetryManager = DefaultRetryManager.Get();
		}

		const HttpRetryParams& Params = Request.GetRetryParams().GetValue();
		return RetryManager->CreateRequest(Params.RetryLimitCountOverride, Params.RetryTimeoutRelativeSecondsOverride, Params.RetryResponseCodes, Params.RetryVerbs, Params.RetryDomains);
	}
}

void OpenAPIDefaultApi::HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const
{
	InOutResponse.SetHttpResponse(HttpResponse);
	InOutResponse.SetSuccessful(bSucceeded);

	if (bSucceeded && HttpResponse.IsValid())
	{
		InOutResponse.SetHttpResponseCode((EHttpResponseCodes::Type)HttpResponse->GetResponseCode());
		FString ContentType = HttpResponse->GetContentType();
		FString Content;

		if (ContentType.IsEmpty())
		{
			return; // Nothing to parse
		}
		else if (ContentType.StartsWith(TEXT("application/json")) || ContentType.StartsWith("text/json"))
		{
			Content = HttpResponse->GetContentAsString();

			TSharedPtr<FJsonValue> JsonValue;
			auto Reader = TJsonReaderFactory<>::Create(Content);

			if (FJsonSerializer::Deserialize(Reader, JsonValue) && JsonValue.IsValid())
			{
				if (InOutResponse.FromJson(JsonValue))
					return; // Successfully parsed
			}
		}
		else if(ContentType.StartsWith(TEXT("text/plain")))
		{
			Content = HttpResponse->GetContentAsString();
			InOutResponse.SetResponseString(Content);
			return; // Successfully parsed
		}

		// Report the parse error but do not mark the request as unsuccessful. Data could be partial or malformed, but the request succeeded.
		UE_LOG(LogOpenAPI, Error, TEXT("Failed to deserialize Http response content (type:%s):\n%s"), *ContentType , *Content);
		return;
	}

	// By default, assume we failed to establish connection
	InOutResponse.SetHttpResponseCode(EHttpResponseCodes::RequestTimeout);
}

FHttpRequestPtr OpenAPIDefaultApi::ApiGet(const ApiGetRequest& Request, const FApiGetDelegate& Delegate /*= FApiGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnApiGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnApiGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FApiGetDelegate Delegate) const
{
	ApiGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ApiMdlComponentsComponentTypeAndRecordNameFilesGet(const ApiMdlComponentsComponentTypeAndRecordNameFilesGetRequest& Request, const FApiMdlComponentsComponentTypeAndRecordNameFilesGetDelegate& Delegate /*= FApiMdlComponentsComponentTypeAndRecordNameFilesGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnApiMdlComponentsComponentTypeAndRecordNameFilesGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnApiMdlComponentsComponentTypeAndRecordNameFilesGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FApiMdlComponentsComponentTypeAndRecordNameFilesGetDelegate Delegate) const
{
	ApiMdlComponentsComponentTypeAndRecordNameFilesGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ApiMdlComponentsComponentTypeAndRecordNameGet(const ApiMdlComponentsComponentTypeAndRecordNameGetRequest& Request, const FApiMdlComponentsComponentTypeAndRecordNameGetDelegate& Delegate /*= FApiMdlComponentsComponentTypeAndRecordNameGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnApiMdlComponentsComponentTypeAndRecordNameGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnApiMdlComponentsComponentTypeAndRecordNameGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FApiMdlComponentsComponentTypeAndRecordNameGetDelegate Delegate) const
{
	ApiMdlComponentsComponentTypeAndRecordNameGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ApiMdlExecuteAsyncJobIdResultsGet(const ApiMdlExecuteAsyncJobIdResultsGetRequest& Request, const FApiMdlExecuteAsyncJobIdResultsGetDelegate& Delegate /*= FApiMdlExecuteAsyncJobIdResultsGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnApiMdlExecuteAsyncJobIdResultsGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnApiMdlExecuteAsyncJobIdResultsGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FApiMdlExecuteAsyncJobIdResultsGetDelegate Delegate) const
{
	ApiMdlExecuteAsyncJobIdResultsGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ApiMdlExecuteAsyncPost(const ApiMdlExecuteAsyncPostRequest& Request, const FApiMdlExecuteAsyncPostDelegate& Delegate /*= FApiMdlExecuteAsyncPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnApiMdlExecuteAsyncPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnApiMdlExecuteAsyncPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FApiMdlExecuteAsyncPostDelegate Delegate) const
{
	ApiMdlExecuteAsyncPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ApiMdlExecutePost(const ApiMdlExecutePostRequest& Request, const FApiMdlExecutePostDelegate& Delegate /*= FApiMdlExecutePostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnApiMdlExecutePostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnApiMdlExecutePostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FApiMdlExecutePostDelegate Delegate) const
{
	ApiMdlExecutePostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ApiMdlFilesPost(const ApiMdlFilesPostRequest& Request, const FApiMdlFilesPostDelegate& Delegate /*= FApiMdlFilesPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnApiMdlFilesPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnApiMdlFilesPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FApiMdlFilesPostDelegate Delegate) const
{
	ApiMdlFilesPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::AudittrailAuditTrailTypeGet(const AudittrailAuditTrailTypeGetRequest& Request, const FAudittrailAuditTrailTypeGetDelegate& Delegate /*= FAudittrailAuditTrailTypeGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnAudittrailAuditTrailTypeGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnAudittrailAuditTrailTypeGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FAudittrailAuditTrailTypeGetDelegate Delegate) const
{
	AudittrailAuditTrailTypeGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::AuthDiscoveryPost(const AuthDiscoveryPostRequest& Request, const FAuthDiscoveryPostDelegate& Delegate /*= FAuthDiscoveryPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnAuthDiscoveryPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnAuthDiscoveryPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FAuthDiscoveryPostDelegate Delegate) const
{
	AuthDiscoveryPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::AuthOauthSessionOathOidcProfileIdPost(const AuthOauthSessionOathOidcProfileIdPostRequest& Request, const FAuthOauthSessionOathOidcProfileIdPostDelegate& Delegate /*= FAuthOauthSessionOathOidcProfileIdPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnAuthOauthSessionOathOidcProfileIdPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnAuthOauthSessionOathOidcProfileIdPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FAuthOauthSessionOathOidcProfileIdPostDelegate Delegate) const
{
	AuthOauthSessionOathOidcProfileIdPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::AuthPost(const AuthPostRequest& Request, const FAuthPostDelegate& Delegate /*= FAuthPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnAuthPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnAuthPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FAuthPostDelegate Delegate) const
{
	AuthPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::CodeClassNameDelete(const CodeClassNameDeleteRequest& Request, const FCodeClassNameDeleteDelegate& Delegate /*= FCodeClassNameDeleteDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnCodeClassNameDeleteResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnCodeClassNameDeleteResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCodeClassNameDeleteDelegate Delegate) const
{
	CodeClassNameDeleteResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::CodeClassNameDisablePut(const CodeClassNameDisablePutRequest& Request, const FCodeClassNameDisablePutDelegate& Delegate /*= FCodeClassNameDisablePutDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnCodeClassNameDisablePutResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnCodeClassNameDisablePutResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCodeClassNameDisablePutDelegate Delegate) const
{
	CodeClassNameDisablePutResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::CodeClassNameEnablePut(const CodeClassNameEnablePutRequest& Request, const FCodeClassNameEnablePutDelegate& Delegate /*= FCodeClassNameEnablePutDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnCodeClassNameEnablePutResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnCodeClassNameEnablePutResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCodeClassNameEnablePutDelegate Delegate) const
{
	CodeClassNameEnablePutResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::CodeClassNameGet(const CodeClassNameGetRequest& Request, const FCodeClassNameGetDelegate& Delegate /*= FCodeClassNameGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnCodeClassNameGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnCodeClassNameGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCodeClassNameGetDelegate Delegate) const
{
	CodeClassNameGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::CodeProfilerGet(const CodeProfilerGetRequest& Request, const FCodeProfilerGetDelegate& Delegate /*= FCodeProfilerGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnCodeProfilerGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnCodeProfilerGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCodeProfilerGetDelegate Delegate) const
{
	CodeProfilerGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::CodeProfilerPost(const CodeProfilerPostRequest& Request, const FCodeProfilerPostDelegate& Delegate /*= FCodeProfilerPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnCodeProfilerPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnCodeProfilerPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCodeProfilerPostDelegate Delegate) const
{
	CodeProfilerPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::CodeProfilerSessionNameActionsEndPost(const CodeProfilerSessionNameActionsEndPostRequest& Request, const FCodeProfilerSessionNameActionsEndPostDelegate& Delegate /*= FCodeProfilerSessionNameActionsEndPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnCodeProfilerSessionNameActionsEndPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnCodeProfilerSessionNameActionsEndPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCodeProfilerSessionNameActionsEndPostDelegate Delegate) const
{
	CodeProfilerSessionNameActionsEndPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::CodeProfilerSessionNameDelete(const CodeProfilerSessionNameDeleteRequest& Request, const FCodeProfilerSessionNameDeleteDelegate& Delegate /*= FCodeProfilerSessionNameDeleteDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnCodeProfilerSessionNameDeleteResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnCodeProfilerSessionNameDeleteResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCodeProfilerSessionNameDeleteDelegate Delegate) const
{
	CodeProfilerSessionNameDeleteResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::CodeProfilerSessionNameGet(const CodeProfilerSessionNameGetRequest& Request, const FCodeProfilerSessionNameGetDelegate& Delegate /*= FCodeProfilerSessionNameGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnCodeProfilerSessionNameGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnCodeProfilerSessionNameGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCodeProfilerSessionNameGetDelegate Delegate) const
{
	CodeProfilerSessionNameGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::CodeProfilerSessionNameResultsGet(const CodeProfilerSessionNameResultsGetRequest& Request, const FCodeProfilerSessionNameResultsGetDelegate& Delegate /*= FCodeProfilerSessionNameResultsGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnCodeProfilerSessionNameResultsGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnCodeProfilerSessionNameResultsGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCodeProfilerSessionNameResultsGetDelegate Delegate) const
{
	CodeProfilerSessionNameResultsGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::CodePut(const CodePutRequest& Request, const FCodePutDelegate& Delegate /*= FCodePutDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnCodePutResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnCodePutResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCodePutDelegate Delegate) const
{
	CodePutResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::CompositesTreesEdlHierarchyOrTemplateActionsListnodesPost(const CompositesTreesEdlHierarchyOrTemplateActionsListnodesPostRequest& Request, const FCompositesTreesEdlHierarchyOrTemplateActionsListnodesPostDelegate& Delegate /*= FCompositesTreesEdlHierarchyOrTemplateActionsListnodesPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnCompositesTreesEdlHierarchyOrTemplateActionsListnodesPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnCompositesTreesEdlHierarchyOrTemplateActionsListnodesPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCompositesTreesEdlHierarchyOrTemplateActionsListnodesPostDelegate Delegate) const
{
	CompositesTreesEdlHierarchyOrTemplateActionsListnodesPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::CompositesTreesEdlHierarchyOrTemplateGet(const CompositesTreesEdlHierarchyOrTemplateGetRequest& Request, const FCompositesTreesEdlHierarchyOrTemplateGetDelegate& Delegate /*= FCompositesTreesEdlHierarchyOrTemplateGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnCompositesTreesEdlHierarchyOrTemplateGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnCompositesTreesEdlHierarchyOrTemplateGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCompositesTreesEdlHierarchyOrTemplateGetDelegate Delegate) const
{
	CompositesTreesEdlHierarchyOrTemplateGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::CompositesTreesEdlHierarchyVParentNodeIdChildrenGet(const CompositesTreesEdlHierarchyVParentNodeIdChildrenGetRequest& Request, const FCompositesTreesEdlHierarchyVParentNodeIdChildrenGetDelegate& Delegate /*= FCompositesTreesEdlHierarchyVParentNodeIdChildrenGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnCompositesTreesEdlHierarchyVParentNodeIdChildrenGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnCompositesTreesEdlHierarchyVParentNodeIdChildrenGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCompositesTreesEdlHierarchyVParentNodeIdChildrenGetDelegate Delegate) const
{
	CompositesTreesEdlHierarchyVParentNodeIdChildrenGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::CompositesTreesEdlHierarchyVParentNodeIdChildrenPut(const CompositesTreesEdlHierarchyVParentNodeIdChildrenPutRequest& Request, const FCompositesTreesEdlHierarchyVParentNodeIdChildrenPutDelegate& Delegate /*= FCompositesTreesEdlHierarchyVParentNodeIdChildrenPutDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnCompositesTreesEdlHierarchyVParentNodeIdChildrenPutResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnCompositesTreesEdlHierarchyVParentNodeIdChildrenPutResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCompositesTreesEdlHierarchyVParentNodeIdChildrenPutDelegate Delegate) const
{
	CompositesTreesEdlHierarchyVParentNodeIdChildrenPutResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ConfigurationComponentTypeAndRecordNameGet(const ConfigurationComponentTypeAndRecordNameGetRequest& Request, const FConfigurationComponentTypeAndRecordNameGetDelegate& Delegate /*= FConfigurationComponentTypeAndRecordNameGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnConfigurationComponentTypeAndRecordNameGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnConfigurationComponentTypeAndRecordNameGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FConfigurationComponentTypeAndRecordNameGetDelegate Delegate) const
{
	ConfigurationComponentTypeAndRecordNameGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ConfigurationComponentTypeGet(const ConfigurationComponentTypeGetRequest& Request, const FConfigurationComponentTypeGetDelegate& Delegate /*= FConfigurationComponentTypeGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnConfigurationComponentTypeGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnConfigurationComponentTypeGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FConfigurationComponentTypeGetDelegate Delegate) const
{
	ConfigurationComponentTypeGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ConfigurationObjectNameAndObjectTypeGet(const ConfigurationObjectNameAndObjectTypeGetRequest& Request, const FConfigurationObjectNameAndObjectTypeGetDelegate& Delegate /*= FConfigurationObjectNameAndObjectTypeGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnConfigurationObjectNameAndObjectTypeGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnConfigurationObjectNameAndObjectTypeGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FConfigurationObjectNameAndObjectTypeGetDelegate Delegate) const
{
	ConfigurationObjectNameAndObjectTypeGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ConfigurationObjecttypeGet(const ConfigurationObjecttypeGetRequest& Request, const FConfigurationObjecttypeGetDelegate& Delegate /*= FConfigurationObjecttypeGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnConfigurationObjecttypeGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnConfigurationObjecttypeGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FConfigurationObjecttypeGetDelegate Delegate) const
{
	ConfigurationObjecttypeGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ConfigurationRoleAssignmentRuleDelete(const ConfigurationRoleAssignmentRuleDeleteRequest& Request, const FConfigurationRoleAssignmentRuleDeleteDelegate& Delegate /*= FConfigurationRoleAssignmentRuleDeleteDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnConfigurationRoleAssignmentRuleDeleteResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnConfigurationRoleAssignmentRuleDeleteResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FConfigurationRoleAssignmentRuleDeleteDelegate Delegate) const
{
	ConfigurationRoleAssignmentRuleDeleteResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ConfigurationRoleAssignmentRuleGet(const ConfigurationRoleAssignmentRuleGetRequest& Request, const FConfigurationRoleAssignmentRuleGetDelegate& Delegate /*= FConfigurationRoleAssignmentRuleGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnConfigurationRoleAssignmentRuleGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnConfigurationRoleAssignmentRuleGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FConfigurationRoleAssignmentRuleGetDelegate Delegate) const
{
	ConfigurationRoleAssignmentRuleGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ConfigurationRoleAssignmentRulePost(const ConfigurationRoleAssignmentRulePostRequest& Request, const FConfigurationRoleAssignmentRulePostDelegate& Delegate /*= FConfigurationRoleAssignmentRulePostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnConfigurationRoleAssignmentRulePostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnConfigurationRoleAssignmentRulePostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FConfigurationRoleAssignmentRulePostDelegate Delegate) const
{
	ConfigurationRoleAssignmentRulePostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ConfigurationRoleAssignmentRulePut(const ConfigurationRoleAssignmentRulePutRequest& Request, const FConfigurationRoleAssignmentRulePutDelegate& Delegate /*= FConfigurationRoleAssignmentRulePutDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnConfigurationRoleAssignmentRulePutResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnConfigurationRoleAssignmentRulePutResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FConfigurationRoleAssignmentRulePutDelegate Delegate) const
{
	ConfigurationRoleAssignmentRulePutResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::DelegationLoginPost(const DelegationLoginPostRequest& Request, const FDelegationLoginPostDelegate& Delegate /*= FDelegationLoginPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnDelegationLoginPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnDelegationLoginPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegationLoginPostDelegate Delegate) const
{
	DelegationLoginPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::DelegationVaultsGet(const DelegationVaultsGetRequest& Request, const FDelegationVaultsGetDelegate& Delegate /*= FDelegationVaultsGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnDelegationVaultsGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnDelegationVaultsGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegationVaultsGetDelegate Delegate) const
{
	DelegationVaultsGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::KeepAlivePost(const KeepAlivePostRequest& Request, const FKeepAlivePostDelegate& Delegate /*= FKeepAlivePostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnKeepAlivePostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnKeepAlivePostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FKeepAlivePostDelegate Delegate) const
{
	KeepAlivePostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::LimitsGet(const LimitsGetRequest& Request, const FLimitsGetDelegate& Delegate /*= FLimitsGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnLimitsGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnLimitsGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLimitsGetDelegate Delegate) const
{
	LimitsGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::LogsApiUsageGet(const LogsApiUsageGetRequest& Request, const FLogsApiUsageGetDelegate& Delegate /*= FLogsApiUsageGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnLogsApiUsageGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnLogsApiUsageGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLogsApiUsageGetDelegate Delegate) const
{
	LogsApiUsageGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::LogsCodeDebugGet(const LogsCodeDebugGetRequest& Request, const FLogsCodeDebugGetDelegate& Delegate /*= FLogsCodeDebugGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnLogsCodeDebugGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnLogsCodeDebugGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLogsCodeDebugGetDelegate Delegate) const
{
	LogsCodeDebugGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::LogsCodeDebugIdActionsResetDelete(const LogsCodeDebugIdActionsResetDeleteRequest& Request, const FLogsCodeDebugIdActionsResetDeleteDelegate& Delegate /*= FLogsCodeDebugIdActionsResetDeleteDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnLogsCodeDebugIdActionsResetDeleteResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnLogsCodeDebugIdActionsResetDeleteResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLogsCodeDebugIdActionsResetDeleteDelegate Delegate) const
{
	LogsCodeDebugIdActionsResetDeleteResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::LogsCodeDebugIdActionsResetPost(const LogsCodeDebugIdActionsResetPostRequest& Request, const FLogsCodeDebugIdActionsResetPostDelegate& Delegate /*= FLogsCodeDebugIdActionsResetPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnLogsCodeDebugIdActionsResetPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnLogsCodeDebugIdActionsResetPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLogsCodeDebugIdActionsResetPostDelegate Delegate) const
{
	LogsCodeDebugIdActionsResetPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::LogsCodeDebugIdFilesGet(const LogsCodeDebugIdFilesGetRequest& Request, const FLogsCodeDebugIdFilesGetDelegate& Delegate /*= FLogsCodeDebugIdFilesGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnLogsCodeDebugIdFilesGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnLogsCodeDebugIdFilesGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLogsCodeDebugIdFilesGetDelegate Delegate) const
{
	LogsCodeDebugIdFilesGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::LogsCodeDebugIdGet(const LogsCodeDebugIdGetRequest& Request, const FLogsCodeDebugIdGetDelegate& Delegate /*= FLogsCodeDebugIdGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnLogsCodeDebugIdGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnLogsCodeDebugIdGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLogsCodeDebugIdGetDelegate Delegate) const
{
	LogsCodeDebugIdGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::LogsCodeDebugPost(const LogsCodeDebugPostRequest& Request, const FLogsCodeDebugPostDelegate& Delegate /*= FLogsCodeDebugPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnLogsCodeDebugPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnLogsCodeDebugPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLogsCodeDebugPostDelegate Delegate) const
{
	LogsCodeDebugPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::LogsCodeRuntimeGet(const LogsCodeRuntimeGetRequest& Request, const FLogsCodeRuntimeGetDelegate& Delegate /*= FLogsCodeRuntimeGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnLogsCodeRuntimeGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnLogsCodeRuntimeGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLogsCodeRuntimeGetDelegate Delegate) const
{
	LogsCodeRuntimeGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::MessagesMessageTypeActionsImportPost(const MessagesMessageTypeActionsImportPostRequest& Request, const FMessagesMessageTypeActionsImportPostDelegate& Delegate /*= FMessagesMessageTypeActionsImportPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnMessagesMessageTypeActionsImportPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnMessagesMessageTypeActionsImportPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FMessagesMessageTypeActionsImportPostDelegate Delegate) const
{
	MessagesMessageTypeActionsImportPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::MessagesMessageTypeLanguageLangActionsExportPost(const MessagesMessageTypeLanguageLangActionsExportPostRequest& Request, const FMessagesMessageTypeLanguageLangActionsExportPostDelegate& Delegate /*= FMessagesMessageTypeLanguageLangActionsExportPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnMessagesMessageTypeLanguageLangActionsExportPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnMessagesMessageTypeLanguageLangActionsExportPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FMessagesMessageTypeLanguageLangActionsExportPostDelegate Delegate) const
{
	MessagesMessageTypeLanguageLangActionsExportPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::MetadataAudittrailAuditTrailTypeGet(const MetadataAudittrailAuditTrailTypeGetRequest& Request, const FMetadataAudittrailAuditTrailTypeGetDelegate& Delegate /*= FMetadataAudittrailAuditTrailTypeGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnMetadataAudittrailAuditTrailTypeGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnMetadataAudittrailAuditTrailTypeGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FMetadataAudittrailAuditTrailTypeGetDelegate Delegate) const
{
	MetadataAudittrailAuditTrailTypeGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::MetadataAudittrailGet(const MetadataAudittrailGetRequest& Request, const FMetadataAudittrailGetDelegate& Delegate /*= FMetadataAudittrailGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnMetadataAudittrailGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnMetadataAudittrailGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FMetadataAudittrailGetDelegate Delegate) const
{
	MetadataAudittrailGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::MetadataComponentsComponentTypeGet(const MetadataComponentsComponentTypeGetRequest& Request, const FMetadataComponentsComponentTypeGetDelegate& Delegate /*= FMetadataComponentsComponentTypeGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnMetadataComponentsComponentTypeGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnMetadataComponentsComponentTypeGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FMetadataComponentsComponentTypeGetDelegate Delegate) const
{
	MetadataComponentsComponentTypeGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::MetadataComponentsGet(const MetadataComponentsGetRequest& Request, const FMetadataComponentsGetDelegate& Delegate /*= FMetadataComponentsGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnMetadataComponentsGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnMetadataComponentsGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FMetadataComponentsGetDelegate Delegate) const
{
	MetadataComponentsGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::MetadataObjectsBindersTemplatesBindernodesGet(const MetadataObjectsBindersTemplatesBindernodesGetRequest& Request, const FMetadataObjectsBindersTemplatesBindernodesGetDelegate& Delegate /*= FMetadataObjectsBindersTemplatesBindernodesGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnMetadataObjectsBindersTemplatesBindernodesGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnMetadataObjectsBindersTemplatesBindernodesGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FMetadataObjectsBindersTemplatesBindernodesGetDelegate Delegate) const
{
	MetadataObjectsBindersTemplatesBindernodesGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::MetadataObjectsBindersTemplatesGet(const MetadataObjectsBindersTemplatesGetRequest& Request, const FMetadataObjectsBindersTemplatesGetDelegate& Delegate /*= FMetadataObjectsBindersTemplatesGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnMetadataObjectsBindersTemplatesGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnMetadataObjectsBindersTemplatesGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FMetadataObjectsBindersTemplatesGetDelegate Delegate) const
{
	MetadataObjectsBindersTemplatesGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::MetadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGet(const MetadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGetRequest& Request, const FMetadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGetDelegate& Delegate /*= FMetadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnMetadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnMetadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FMetadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGetDelegate Delegate) const
{
	MetadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::MetadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGet(const MetadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGetRequest& Request, const FMetadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGetDelegate& Delegate /*= FMetadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnMetadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnMetadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FMetadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGetDelegate Delegate) const
{
	MetadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::MetadataObjectsDocumentsAnnotationsTypesAnnotationTypeGet(const MetadataObjectsDocumentsAnnotationsTypesAnnotationTypeGetRequest& Request, const FMetadataObjectsDocumentsAnnotationsTypesAnnotationTypeGetDelegate& Delegate /*= FMetadataObjectsDocumentsAnnotationsTypesAnnotationTypeGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnMetadataObjectsDocumentsAnnotationsTypesAnnotationTypeGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnMetadataObjectsDocumentsAnnotationsTypesAnnotationTypeGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FMetadataObjectsDocumentsAnnotationsTypesAnnotationTypeGetDelegate Delegate) const
{
	MetadataObjectsDocumentsAnnotationsTypesAnnotationTypeGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::MetadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet(const MetadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGetRequest& Request, const FMetadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGetDelegate& Delegate /*= FMetadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnMetadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnMetadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FMetadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGetDelegate Delegate) const
{
	MetadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::MetadataObjectsDocumentsEventsGet(const MetadataObjectsDocumentsEventsGetRequest& Request, const FMetadataObjectsDocumentsEventsGetDelegate& Delegate /*= FMetadataObjectsDocumentsEventsGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnMetadataObjectsDocumentsEventsGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnMetadataObjectsDocumentsEventsGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FMetadataObjectsDocumentsEventsGetDelegate Delegate) const
{
	MetadataObjectsDocumentsEventsGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::MetadataObjectsDocumentsLockGet(const MetadataObjectsDocumentsLockGetRequest& Request, const FMetadataObjectsDocumentsLockGetDelegate& Delegate /*= FMetadataObjectsDocumentsLockGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnMetadataObjectsDocumentsLockGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnMetadataObjectsDocumentsLockGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FMetadataObjectsDocumentsLockGetDelegate Delegate) const
{
	MetadataObjectsDocumentsLockGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::MetadataObjectsDocumentsPropertiesFindCommonPost(const MetadataObjectsDocumentsPropertiesFindCommonPostRequest& Request, const FMetadataObjectsDocumentsPropertiesFindCommonPostDelegate& Delegate /*= FMetadataObjectsDocumentsPropertiesFindCommonPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnMetadataObjectsDocumentsPropertiesFindCommonPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnMetadataObjectsDocumentsPropertiesFindCommonPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FMetadataObjectsDocumentsPropertiesFindCommonPostDelegate Delegate) const
{
	MetadataObjectsDocumentsPropertiesFindCommonPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::MetadataObjectsDocumentsPropertiesGet(const MetadataObjectsDocumentsPropertiesGetRequest& Request, const FMetadataObjectsDocumentsPropertiesGetDelegate& Delegate /*= FMetadataObjectsDocumentsPropertiesGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnMetadataObjectsDocumentsPropertiesGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnMetadataObjectsDocumentsPropertiesGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FMetadataObjectsDocumentsPropertiesGetDelegate Delegate) const
{
	MetadataObjectsDocumentsPropertiesGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::MetadataObjectsDocumentsTemplatesGet(const MetadataObjectsDocumentsTemplatesGetRequest& Request, const FMetadataObjectsDocumentsTemplatesGetDelegate& Delegate /*= FMetadataObjectsDocumentsTemplatesGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnMetadataObjectsDocumentsTemplatesGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnMetadataObjectsDocumentsTemplatesGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FMetadataObjectsDocumentsTemplatesGetDelegate Delegate) const
{
	MetadataObjectsDocumentsTemplatesGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::MetadataObjectsDocumentsTypesGet(const MetadataObjectsDocumentsTypesGetRequest& Request, const FMetadataObjectsDocumentsTypesGetDelegate& Delegate /*= FMetadataObjectsDocumentsTypesGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnMetadataObjectsDocumentsTypesGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnMetadataObjectsDocumentsTypesGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FMetadataObjectsDocumentsTypesGetDelegate Delegate) const
{
	MetadataObjectsDocumentsTypesGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::MetadataObjectsDocumentsTypesTypeGet(const MetadataObjectsDocumentsTypesTypeGetRequest& Request, const FMetadataObjectsDocumentsTypesTypeGetDelegate& Delegate /*= FMetadataObjectsDocumentsTypesTypeGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnMetadataObjectsDocumentsTypesTypeGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnMetadataObjectsDocumentsTypesTypeGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FMetadataObjectsDocumentsTypesTypeGetDelegate Delegate) const
{
	MetadataObjectsDocumentsTypesTypeGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::MetadataObjectsDocumentsTypesTypeRelationshipsGet(const MetadataObjectsDocumentsTypesTypeRelationshipsGetRequest& Request, const FMetadataObjectsDocumentsTypesTypeRelationshipsGetDelegate& Delegate /*= FMetadataObjectsDocumentsTypesTypeRelationshipsGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnMetadataObjectsDocumentsTypesTypeRelationshipsGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnMetadataObjectsDocumentsTypesTypeRelationshipsGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FMetadataObjectsDocumentsTypesTypeRelationshipsGetDelegate Delegate) const
{
	MetadataObjectsDocumentsTypesTypeRelationshipsGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::MetadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet(const MetadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGetRequest& Request, const FMetadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGetDelegate& Delegate /*= FMetadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnMetadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnMetadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FMetadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGetDelegate Delegate) const
{
	MetadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::MetadataObjectsDocumentsTypesTypeSubtypesSubtypeGet(const MetadataObjectsDocumentsTypesTypeSubtypesSubtypeGetRequest& Request, const FMetadataObjectsDocumentsTypesTypeSubtypesSubtypeGetDelegate& Delegate /*= FMetadataObjectsDocumentsTypesTypeSubtypesSubtypeGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnMetadataObjectsDocumentsTypesTypeSubtypesSubtypeGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnMetadataObjectsDocumentsTypesTypeSubtypesSubtypeGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FMetadataObjectsDocumentsTypesTypeSubtypesSubtypeGetDelegate Delegate) const
{
	MetadataObjectsDocumentsTypesTypeSubtypesSubtypeGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::MetadataObjectsGroupsGet(const MetadataObjectsGroupsGetRequest& Request, const FMetadataObjectsGroupsGetDelegate& Delegate /*= FMetadataObjectsGroupsGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnMetadataObjectsGroupsGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnMetadataObjectsGroupsGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FMetadataObjectsGroupsGetDelegate Delegate) const
{
	MetadataObjectsGroupsGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::MetadataObjectsSecuritypoliciesGet(const MetadataObjectsSecuritypoliciesGetRequest& Request, const FMetadataObjectsSecuritypoliciesGetDelegate& Delegate /*= FMetadataObjectsSecuritypoliciesGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnMetadataObjectsSecuritypoliciesGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnMetadataObjectsSecuritypoliciesGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FMetadataObjectsSecuritypoliciesGetDelegate Delegate) const
{
	MetadataObjectsSecuritypoliciesGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::MetadataObjectsUsersGet(const MetadataObjectsUsersGetRequest& Request, const FMetadataObjectsUsersGetDelegate& Delegate /*= FMetadataObjectsUsersGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnMetadataObjectsUsersGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnMetadataObjectsUsersGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FMetadataObjectsUsersGetDelegate Delegate) const
{
	MetadataObjectsUsersGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::MetadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGet(const MetadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGetRequest& Request, const FMetadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGetDelegate& Delegate /*= FMetadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnMetadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnMetadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FMetadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGetDelegate Delegate) const
{
	MetadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::MetadataQueryDocumentsRelationshipsDocumentSignatureSysrGet(const MetadataQueryDocumentsRelationshipsDocumentSignatureSysrGetRequest& Request, const FMetadataQueryDocumentsRelationshipsDocumentSignatureSysrGetDelegate& Delegate /*= FMetadataQueryDocumentsRelationshipsDocumentSignatureSysrGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnMetadataQueryDocumentsRelationshipsDocumentSignatureSysrGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnMetadataQueryDocumentsRelationshipsDocumentSignatureSysrGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FMetadataQueryDocumentsRelationshipsDocumentSignatureSysrGetDelegate Delegate) const
{
	MetadataQueryDocumentsRelationshipsDocumentSignatureSysrGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::MetadataVobjectsGet(const MetadataVobjectsGetRequest& Request, const FMetadataVobjectsGetDelegate& Delegate /*= FMetadataVobjectsGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnMetadataVobjectsGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnMetadataVobjectsGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FMetadataVobjectsGetDelegate Delegate) const
{
	MetadataVobjectsGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::MetadataVobjectsObjectNameActionsCanceldeploymentPost(const MetadataVobjectsObjectNameActionsCanceldeploymentPostRequest& Request, const FMetadataVobjectsObjectNameActionsCanceldeploymentPostDelegate& Delegate /*= FMetadataVobjectsObjectNameActionsCanceldeploymentPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnMetadataVobjectsObjectNameActionsCanceldeploymentPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnMetadataVobjectsObjectNameActionsCanceldeploymentPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FMetadataVobjectsObjectNameActionsCanceldeploymentPostDelegate Delegate) const
{
	MetadataVobjectsObjectNameActionsCanceldeploymentPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::MetadataVobjectsObjectNameFieldsObjectFieldNameGet(const MetadataVobjectsObjectNameFieldsObjectFieldNameGetRequest& Request, const FMetadataVobjectsObjectNameFieldsObjectFieldNameGetDelegate& Delegate /*= FMetadataVobjectsObjectNameFieldsObjectFieldNameGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnMetadataVobjectsObjectNameFieldsObjectFieldNameGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnMetadataVobjectsObjectNameFieldsObjectFieldNameGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FMetadataVobjectsObjectNameFieldsObjectFieldNameGetDelegate Delegate) const
{
	MetadataVobjectsObjectNameFieldsObjectFieldNameGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::MetadataVobjectsObjectNameGet(const MetadataVobjectsObjectNameGetRequest& Request, const FMetadataVobjectsObjectNameGetDelegate& Delegate /*= FMetadataVobjectsObjectNameGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnMetadataVobjectsObjectNameGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnMetadataVobjectsObjectNameGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FMetadataVobjectsObjectNameGetDelegate Delegate) const
{
	MetadataVobjectsObjectNameGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::MetadataVobjectsObjectNamePageLayoutsGet(const MetadataVobjectsObjectNamePageLayoutsGetRequest& Request, const FMetadataVobjectsObjectNamePageLayoutsGetDelegate& Delegate /*= FMetadataVobjectsObjectNamePageLayoutsGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnMetadataVobjectsObjectNamePageLayoutsGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnMetadataVobjectsObjectNamePageLayoutsGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FMetadataVobjectsObjectNamePageLayoutsGetDelegate Delegate) const
{
	MetadataVobjectsObjectNamePageLayoutsGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::MetadataVobjectsObjectNamePageLayoutsLayoutNameGet(const MetadataVobjectsObjectNamePageLayoutsLayoutNameGetRequest& Request, const FMetadataVobjectsObjectNamePageLayoutsLayoutNameGetDelegate& Delegate /*= FMetadataVobjectsObjectNamePageLayoutsLayoutNameGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnMetadataVobjectsObjectNamePageLayoutsLayoutNameGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnMetadataVobjectsObjectNamePageLayoutsLayoutNameGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FMetadataVobjectsObjectNamePageLayoutsLayoutNameGetDelegate Delegate) const
{
	MetadataVobjectsObjectNamePageLayoutsLayoutNameGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::NotificationsHistoriesGet(const NotificationsHistoriesGetRequest& Request, const FNotificationsHistoriesGetDelegate& Delegate /*= FNotificationsHistoriesGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnNotificationsHistoriesGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnNotificationsHistoriesGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FNotificationsHistoriesGetDelegate Delegate) const
{
	NotificationsHistoriesGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectWorkflowActionsActionGet(const ObjectWorkflowActionsActionGetRequest& Request, const FObjectWorkflowActionsActionGetDelegate& Delegate /*= FObjectWorkflowActionsActionGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectWorkflowActionsActionGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectWorkflowActionsActionGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectWorkflowActionsActionGetDelegate Delegate) const
{
	ObjectWorkflowActionsActionGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectWorkflowActionsActionPost(const ObjectWorkflowActionsActionPostRequest& Request, const FObjectWorkflowActionsActionPostDelegate& Delegate /*= FObjectWorkflowActionsActionPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectWorkflowActionsActionPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectWorkflowActionsActionPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectWorkflowActionsActionPostDelegate Delegate) const
{
	ObjectWorkflowActionsActionPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectWorkflowActionsCanceltasksPost(const ObjectWorkflowActionsCanceltasksPostRequest& Request, const FObjectWorkflowActionsCanceltasksPostDelegate& Delegate /*= FObjectWorkflowActionsCanceltasksPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectWorkflowActionsCanceltasksPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectWorkflowActionsCanceltasksPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectWorkflowActionsCanceltasksPostDelegate Delegate) const
{
	ObjectWorkflowActionsCanceltasksPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectWorkflowActionsCancelworkflowsPost(const ObjectWorkflowActionsCancelworkflowsPostRequest& Request, const FObjectWorkflowActionsCancelworkflowsPostDelegate& Delegate /*= FObjectWorkflowActionsCancelworkflowsPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectWorkflowActionsCancelworkflowsPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectWorkflowActionsCancelworkflowsPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectWorkflowActionsCancelworkflowsPostDelegate Delegate) const
{
	ObjectWorkflowActionsCancelworkflowsPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectWorkflowActionsGet(const ObjectWorkflowActionsGetRequest& Request, const FObjectWorkflowActionsGetDelegate& Delegate /*= FObjectWorkflowActionsGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectWorkflowActionsGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectWorkflowActionsGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectWorkflowActionsGetDelegate Delegate) const
{
	ObjectWorkflowActionsGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectWorkflowActionsReassigntasksPost(const ObjectWorkflowActionsReassigntasksPostRequest& Request, const FObjectWorkflowActionsReassigntasksPostDelegate& Delegate /*= FObjectWorkflowActionsReassigntasksPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectWorkflowActionsReassigntasksPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectWorkflowActionsReassigntasksPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectWorkflowActionsReassigntasksPostDelegate Delegate) const
{
	ObjectWorkflowActionsReassigntasksPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectWorkflowActionsReplaceworkflowownerPost(const ObjectWorkflowActionsReplaceworkflowownerPostRequest& Request, const FObjectWorkflowActionsReplaceworkflowownerPostDelegate& Delegate /*= FObjectWorkflowActionsReplaceworkflowownerPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectWorkflowActionsReplaceworkflowownerPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectWorkflowActionsReplaceworkflowownerPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectWorkflowActionsReplaceworkflowownerPostDelegate Delegate) const
{
	ObjectWorkflowActionsReplaceworkflowownerPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsBindersActionsExportJobIdResultsGet(const ObjectsBindersActionsExportJobIdResultsGetRequest& Request, const FObjectsBindersActionsExportJobIdResultsGetDelegate& Delegate /*= FObjectsBindersActionsExportJobIdResultsGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsBindersActionsExportJobIdResultsGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsBindersActionsExportJobIdResultsGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsBindersActionsExportJobIdResultsGetDelegate Delegate) const
{
	ObjectsBindersActionsExportJobIdResultsGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsBindersBinderIdActionsExportPost(const ObjectsBindersBinderIdActionsExportPostRequest& Request, const FObjectsBindersBinderIdActionsExportPostDelegate& Delegate /*= FObjectsBindersBinderIdActionsExportPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsBindersBinderIdActionsExportPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsBindersBinderIdActionsExportPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsBindersBinderIdActionsExportPostDelegate Delegate) const
{
	ObjectsBindersBinderIdActionsExportPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsBindersBinderIdActionsPost(const ObjectsBindersBinderIdActionsPostRequest& Request, const FObjectsBindersBinderIdActionsPostDelegate& Delegate /*= FObjectsBindersBinderIdActionsPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsBindersBinderIdActionsPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsBindersBinderIdActionsPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsBindersBinderIdActionsPostDelegate Delegate) const
{
	ObjectsBindersBinderIdActionsPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsBindersBinderIdBindingRulePut(const ObjectsBindersBinderIdBindingRulePutRequest& Request, const FObjectsBindersBinderIdBindingRulePutDelegate& Delegate /*= FObjectsBindersBinderIdBindingRulePutDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsBindersBinderIdBindingRulePutResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsBindersBinderIdBindingRulePutResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsBindersBinderIdBindingRulePutDelegate Delegate) const
{
	ObjectsBindersBinderIdBindingRulePutResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsBindersBinderIdDelete(const ObjectsBindersBinderIdDeleteRequest& Request, const FObjectsBindersBinderIdDeleteDelegate& Delegate /*= FObjectsBindersBinderIdDeleteDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsBindersBinderIdDeleteResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsBindersBinderIdDeleteResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsBindersBinderIdDeleteDelegate Delegate) const
{
	ObjectsBindersBinderIdDeleteResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsBindersBinderIdDocumentsNodeIdBindingRulePut(const ObjectsBindersBinderIdDocumentsNodeIdBindingRulePutRequest& Request, const FObjectsBindersBinderIdDocumentsNodeIdBindingRulePutDelegate& Delegate /*= FObjectsBindersBinderIdDocumentsNodeIdBindingRulePutDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsBindersBinderIdDocumentsNodeIdBindingRulePutResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsBindersBinderIdDocumentsNodeIdBindingRulePutResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsBindersBinderIdDocumentsNodeIdBindingRulePutDelegate Delegate) const
{
	ObjectsBindersBinderIdDocumentsNodeIdBindingRulePutResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsBindersBinderIdDocumentsPost(const ObjectsBindersBinderIdDocumentsPostRequest& Request, const FObjectsBindersBinderIdDocumentsPostDelegate& Delegate /*= FObjectsBindersBinderIdDocumentsPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsBindersBinderIdDocumentsPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsBindersBinderIdDocumentsPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsBindersBinderIdDocumentsPostDelegate Delegate) const
{
	ObjectsBindersBinderIdDocumentsPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsBindersBinderIdDocumentsSectionIdDelete(const ObjectsBindersBinderIdDocumentsSectionIdDeleteRequest& Request, const FObjectsBindersBinderIdDocumentsSectionIdDeleteDelegate& Delegate /*= FObjectsBindersBinderIdDocumentsSectionIdDeleteDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsBindersBinderIdDocumentsSectionIdDeleteResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsBindersBinderIdDocumentsSectionIdDeleteResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsBindersBinderIdDocumentsSectionIdDeleteDelegate Delegate) const
{
	ObjectsBindersBinderIdDocumentsSectionIdDeleteResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsBindersBinderIdDocumentsSectionIdPut(const ObjectsBindersBinderIdDocumentsSectionIdPutRequest& Request, const FObjectsBindersBinderIdDocumentsSectionIdPutDelegate& Delegate /*= FObjectsBindersBinderIdDocumentsSectionIdPutDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsBindersBinderIdDocumentsSectionIdPutResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsBindersBinderIdDocumentsSectionIdPutResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsBindersBinderIdDocumentsSectionIdPutDelegate Delegate) const
{
	ObjectsBindersBinderIdDocumentsSectionIdPutResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsBindersBinderIdGet(const ObjectsBindersBinderIdGetRequest& Request, const FObjectsBindersBinderIdGetDelegate& Delegate /*= FObjectsBindersBinderIdGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsBindersBinderIdGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsBindersBinderIdGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsBindersBinderIdGetDelegate Delegate) const
{
	ObjectsBindersBinderIdGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsBindersBinderIdPost(const ObjectsBindersBinderIdPostRequest& Request, const FObjectsBindersBinderIdPostDelegate& Delegate /*= FObjectsBindersBinderIdPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsBindersBinderIdPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsBindersBinderIdPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsBindersBinderIdPostDelegate Delegate) const
{
	ObjectsBindersBinderIdPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsBindersBinderIdPut(const ObjectsBindersBinderIdPutRequest& Request, const FObjectsBindersBinderIdPutDelegate& Delegate /*= FObjectsBindersBinderIdPutDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsBindersBinderIdPutResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsBindersBinderIdPutResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsBindersBinderIdPutDelegate Delegate) const
{
	ObjectsBindersBinderIdPutResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete(const ObjectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDeleteRequest& Request, const FObjectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDeleteDelegate& Delegate /*= FObjectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDeleteDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDeleteResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDeleteResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDeleteDelegate Delegate) const
{
	ObjectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDeleteResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsBindersBinderIdSectionsNodeIdBindingRulePut(const ObjectsBindersBinderIdSectionsNodeIdBindingRulePutRequest& Request, const FObjectsBindersBinderIdSectionsNodeIdBindingRulePutDelegate& Delegate /*= FObjectsBindersBinderIdSectionsNodeIdBindingRulePutDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsBindersBinderIdSectionsNodeIdBindingRulePutResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsBindersBinderIdSectionsNodeIdBindingRulePutResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsBindersBinderIdSectionsNodeIdBindingRulePutDelegate Delegate) const
{
	ObjectsBindersBinderIdSectionsNodeIdBindingRulePutResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsBindersBinderIdSectionsNodeIdPut(const ObjectsBindersBinderIdSectionsNodeIdPutRequest& Request, const FObjectsBindersBinderIdSectionsNodeIdPutDelegate& Delegate /*= FObjectsBindersBinderIdSectionsNodeIdPutDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsBindersBinderIdSectionsNodeIdPutResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsBindersBinderIdSectionsNodeIdPutResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsBindersBinderIdSectionsNodeIdPutDelegate Delegate) const
{
	ObjectsBindersBinderIdSectionsNodeIdPutResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsBindersBinderIdSectionsPost(const ObjectsBindersBinderIdSectionsPostRequest& Request, const FObjectsBindersBinderIdSectionsPostDelegate& Delegate /*= FObjectsBindersBinderIdSectionsPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsBindersBinderIdSectionsPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsBindersBinderIdSectionsPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsBindersBinderIdSectionsPostDelegate Delegate) const
{
	ObjectsBindersBinderIdSectionsPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsBindersBinderIdSectionsSectionIdDelete(const ObjectsBindersBinderIdSectionsSectionIdDeleteRequest& Request, const FObjectsBindersBinderIdSectionsSectionIdDeleteDelegate& Delegate /*= FObjectsBindersBinderIdSectionsSectionIdDeleteDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsBindersBinderIdSectionsSectionIdDeleteResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsBindersBinderIdSectionsSectionIdDeleteResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsBindersBinderIdSectionsSectionIdDeleteDelegate Delegate) const
{
	ObjectsBindersBinderIdSectionsSectionIdDeleteResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsBindersBinderIdSectionsSectionIdGet(const ObjectsBindersBinderIdSectionsSectionIdGetRequest& Request, const FObjectsBindersBinderIdSectionsSectionIdGetDelegate& Delegate /*= FObjectsBindersBinderIdSectionsSectionIdGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsBindersBinderIdSectionsSectionIdGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsBindersBinderIdSectionsSectionIdGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsBindersBinderIdSectionsSectionIdGetDelegate Delegate) const
{
	ObjectsBindersBinderIdSectionsSectionIdGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsBindersBinderIdVersionsGet(const ObjectsBindersBinderIdVersionsGetRequest& Request, const FObjectsBindersBinderIdVersionsGetDelegate& Delegate /*= FObjectsBindersBinderIdVersionsGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsBindersBinderIdVersionsGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsBindersBinderIdVersionsGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsBindersBinderIdVersionsGetDelegate Delegate) const
{
	ObjectsBindersBinderIdVersionsGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost(const ObjectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPostRequest& Request, const FObjectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPostDelegate& Delegate /*= FObjectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPostDelegate Delegate) const
{
	ObjectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsBindersBinderIdVersionsMajorVersionMinorVersionDelete(const ObjectsBindersBinderIdVersionsMajorVersionMinorVersionDeleteRequest& Request, const FObjectsBindersBinderIdVersionsMajorVersionMinorVersionDeleteDelegate& Delegate /*= FObjectsBindersBinderIdVersionsMajorVersionMinorVersionDeleteDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsBindersBinderIdVersionsMajorVersionMinorVersionDeleteResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsBindersBinderIdVersionsMajorVersionMinorVersionDeleteResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsBindersBinderIdVersionsMajorVersionMinorVersionDeleteDelegate Delegate) const
{
	ObjectsBindersBinderIdVersionsMajorVersionMinorVersionDeleteResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsBindersBinderIdVersionsMajorVersionMinorVersionGet(const ObjectsBindersBinderIdVersionsMajorVersionMinorVersionGetRequest& Request, const FObjectsBindersBinderIdVersionsMajorVersionMinorVersionGetDelegate& Delegate /*= FObjectsBindersBinderIdVersionsMajorVersionMinorVersionGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsBindersBinderIdVersionsMajorVersionMinorVersionGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsBindersBinderIdVersionsMajorVersionMinorVersionGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsBindersBinderIdVersionsMajorVersionMinorVersionGetDelegate Delegate) const
{
	ObjectsBindersBinderIdVersionsMajorVersionMinorVersionGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsBindersBinderIdVersionsMajorVersionMinorVersionPut(const ObjectsBindersBinderIdVersionsMajorVersionMinorVersionPutRequest& Request, const FObjectsBindersBinderIdVersionsMajorVersionMinorVersionPutDelegate& Delegate /*= FObjectsBindersBinderIdVersionsMajorVersionMinorVersionPutDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsBindersBinderIdVersionsMajorVersionMinorVersionPutResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsBindersBinderIdVersionsMajorVersionMinorVersionPutResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsBindersBinderIdVersionsMajorVersionMinorVersionPutDelegate Delegate) const
{
	ObjectsBindersBinderIdVersionsMajorVersionMinorVersionPutResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost(const ObjectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPostRequest& Request, const FObjectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPostDelegate& Delegate /*= FObjectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPostDelegate Delegate) const
{
	ObjectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete(const ObjectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteRequest& Request, const FObjectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteDelegate& Delegate /*= FObjectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteDelegate Delegate) const
{
	ObjectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet(const ObjectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetRequest& Request, const FObjectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetDelegate& Delegate /*= FObjectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetDelegate Delegate) const
{
	ObjectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet(const ObjectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGetRequest& Request, const FObjectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGetDelegate& Delegate /*= FObjectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGetDelegate Delegate) const
{
	ObjectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsBindersIdRolesGet(const ObjectsBindersIdRolesGetRequest& Request, const FObjectsBindersIdRolesGetDelegate& Delegate /*= FObjectsBindersIdRolesGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsBindersIdRolesGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsBindersIdRolesGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsBindersIdRolesGetDelegate Delegate) const
{
	ObjectsBindersIdRolesGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsBindersIdRolesPost(const ObjectsBindersIdRolesPostRequest& Request, const FObjectsBindersIdRolesPostDelegate& Delegate /*= FObjectsBindersIdRolesPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsBindersIdRolesPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsBindersIdRolesPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsBindersIdRolesPostDelegate Delegate) const
{
	ObjectsBindersIdRolesPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsBindersIdRolesRoleNameGet(const ObjectsBindersIdRolesRoleNameGetRequest& Request, const FObjectsBindersIdRolesRoleNameGetDelegate& Delegate /*= FObjectsBindersIdRolesRoleNameGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsBindersIdRolesRoleNameGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsBindersIdRolesRoleNameGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsBindersIdRolesRoleNameGetDelegate Delegate) const
{
	ObjectsBindersIdRolesRoleNameGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet(const ObjectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGetRequest& Request, const FObjectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGetDelegate& Delegate /*= FObjectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGetDelegate Delegate) const
{
	ObjectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet(const ObjectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetRequest& Request, const FObjectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetDelegate& Delegate /*= FObjectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetDelegate Delegate) const
{
	ObjectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut(const ObjectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutRequest& Request, const FObjectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutDelegate& Delegate /*= FObjectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutDelegate Delegate) const
{
	ObjectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsBindersLifecycleActionsPost(const ObjectsBindersLifecycleActionsPostRequest& Request, const FObjectsBindersLifecycleActionsPostDelegate& Delegate /*= FObjectsBindersLifecycleActionsPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsBindersLifecycleActionsPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsBindersLifecycleActionsPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsBindersLifecycleActionsPostDelegate Delegate) const
{
	ObjectsBindersLifecycleActionsPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsBindersLifecycleActionsUserActionNamePut(const ObjectsBindersLifecycleActionsUserActionNamePutRequest& Request, const FObjectsBindersLifecycleActionsUserActionNamePutDelegate& Delegate /*= FObjectsBindersLifecycleActionsUserActionNamePutDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsBindersLifecycleActionsUserActionNamePutResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsBindersLifecycleActionsUserActionNamePutResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsBindersLifecycleActionsUserActionNamePutDelegate Delegate) const
{
	ObjectsBindersLifecycleActionsUserActionNamePutResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsBindersPost(const ObjectsBindersPostRequest& Request, const FObjectsBindersPostDelegate& Delegate /*= FObjectsBindersPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsBindersPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsBindersPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsBindersPostDelegate Delegate) const
{
	ObjectsBindersPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsBindersTemplatesGet(const ObjectsBindersTemplatesGetRequest& Request, const FObjectsBindersTemplatesGetDelegate& Delegate /*= FObjectsBindersTemplatesGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsBindersTemplatesGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsBindersTemplatesGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsBindersTemplatesGetDelegate Delegate) const
{
	ObjectsBindersTemplatesGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsBindersTemplatesPost(const ObjectsBindersTemplatesPostRequest& Request, const FObjectsBindersTemplatesPostDelegate& Delegate /*= FObjectsBindersTemplatesPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsBindersTemplatesPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsBindersTemplatesPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsBindersTemplatesPostDelegate Delegate) const
{
	ObjectsBindersTemplatesPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsBindersTemplatesPut(const ObjectsBindersTemplatesPutRequest& Request, const FObjectsBindersTemplatesPutDelegate& Delegate /*= FObjectsBindersTemplatesPutDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsBindersTemplatesPutResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsBindersTemplatesPutResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsBindersTemplatesPutDelegate Delegate) const
{
	ObjectsBindersTemplatesPutResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsBindersTemplatesTemplateNameBindernodesGet(const ObjectsBindersTemplatesTemplateNameBindernodesGetRequest& Request, const FObjectsBindersTemplatesTemplateNameBindernodesGetDelegate& Delegate /*= FObjectsBindersTemplatesTemplateNameBindernodesGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsBindersTemplatesTemplateNameBindernodesGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsBindersTemplatesTemplateNameBindernodesGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsBindersTemplatesTemplateNameBindernodesGetDelegate Delegate) const
{
	ObjectsBindersTemplatesTemplateNameBindernodesGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsBindersTemplatesTemplateNameBindernodesPost(const ObjectsBindersTemplatesTemplateNameBindernodesPostRequest& Request, const FObjectsBindersTemplatesTemplateNameBindernodesPostDelegate& Delegate /*= FObjectsBindersTemplatesTemplateNameBindernodesPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsBindersTemplatesTemplateNameBindernodesPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsBindersTemplatesTemplateNameBindernodesPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsBindersTemplatesTemplateNameBindernodesPostDelegate Delegate) const
{
	ObjectsBindersTemplatesTemplateNameBindernodesPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsBindersTemplatesTemplateNameBindernodesPut(const ObjectsBindersTemplatesTemplateNameBindernodesPutRequest& Request, const FObjectsBindersTemplatesTemplateNameBindernodesPutDelegate& Delegate /*= FObjectsBindersTemplatesTemplateNameBindernodesPutDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsBindersTemplatesTemplateNameBindernodesPutResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsBindersTemplatesTemplateNameBindernodesPutResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsBindersTemplatesTemplateNameBindernodesPutDelegate Delegate) const
{
	ObjectsBindersTemplatesTemplateNameBindernodesPutResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsBindersTemplatesTemplateNameDelete(const ObjectsBindersTemplatesTemplateNameDeleteRequest& Request, const FObjectsBindersTemplatesTemplateNameDeleteDelegate& Delegate /*= FObjectsBindersTemplatesTemplateNameDeleteDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsBindersTemplatesTemplateNameDeleteResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsBindersTemplatesTemplateNameDeleteResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsBindersTemplatesTemplateNameDeleteDelegate Delegate) const
{
	ObjectsBindersTemplatesTemplateNameDeleteResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsBindersTemplatesTemplateNameGet(const ObjectsBindersTemplatesTemplateNameGetRequest& Request, const FObjectsBindersTemplatesTemplateNameGetDelegate& Delegate /*= FObjectsBindersTemplatesTemplateNameGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsBindersTemplatesTemplateNameGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsBindersTemplatesTemplateNameGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsBindersTemplatesTemplateNameGetDelegate Delegate) const
{
	ObjectsBindersTemplatesTemplateNameGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDeletionsDocumentsGet(const ObjectsDeletionsDocumentsGetRequest& Request, const FObjectsDeletionsDocumentsGetDelegate& Delegate /*= FObjectsDeletionsDocumentsGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDeletionsDocumentsGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDeletionsDocumentsGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDeletionsDocumentsGetDelegate Delegate) const
{
	ObjectsDeletionsDocumentsGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDeletionsVobjectsObjectNameGet(const ObjectsDeletionsVobjectsObjectNameGetRequest& Request, const FObjectsDeletionsVobjectsObjectNameGetDelegate& Delegate /*= FObjectsDeletionsVobjectsObjectNameGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDeletionsVobjectsObjectNameGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDeletionsVobjectsObjectNameGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDeletionsVobjectsObjectNameGetDelegate Delegate) const
{
	ObjectsDeletionsVobjectsObjectNameGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsActionsGet(const ObjectsDocumentsActionsGetRequest& Request, const FObjectsDocumentsActionsGetDelegate& Delegate /*= FObjectsDocumentsActionsGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsActionsGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsActionsGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsActionsGetDelegate Delegate) const
{
	ObjectsDocumentsActionsGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet(const ObjectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGetRequest& Request, const FObjectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGetDelegate& Delegate /*= FObjectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGetDelegate Delegate) const
{
	ObjectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsActionsWorkflowNameGet(const ObjectsDocumentsActionsWorkflowNameGetRequest& Request, const FObjectsDocumentsActionsWorkflowNameGetDelegate& Delegate /*= FObjectsDocumentsActionsWorkflowNameGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsActionsWorkflowNameGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsActionsWorkflowNameGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsActionsWorkflowNameGetDelegate Delegate) const
{
	ObjectsDocumentsActionsWorkflowNameGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsActionsWorkflowNamePost(const ObjectsDocumentsActionsWorkflowNamePostRequest& Request, const FObjectsDocumentsActionsWorkflowNamePostDelegate& Delegate /*= FObjectsDocumentsActionsWorkflowNamePostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsActionsWorkflowNamePostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsActionsWorkflowNamePostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsActionsWorkflowNamePostDelegate Delegate) const
{
	ObjectsDocumentsActionsWorkflowNamePostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsAnnotationsBatchDelete(const ObjectsDocumentsAnnotationsBatchDeleteRequest& Request, const FObjectsDocumentsAnnotationsBatchDeleteDelegate& Delegate /*= FObjectsDocumentsAnnotationsBatchDeleteDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsAnnotationsBatchDeleteResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsAnnotationsBatchDeleteResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsAnnotationsBatchDeleteDelegate Delegate) const
{
	ObjectsDocumentsAnnotationsBatchDeleteResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsAnnotationsBatchPost(const ObjectsDocumentsAnnotationsBatchPostRequest& Request, const FObjectsDocumentsAnnotationsBatchPostDelegate& Delegate /*= FObjectsDocumentsAnnotationsBatchPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsAnnotationsBatchPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsAnnotationsBatchPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsAnnotationsBatchPostDelegate Delegate) const
{
	ObjectsDocumentsAnnotationsBatchPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsAnnotationsBatchPut(const ObjectsDocumentsAnnotationsBatchPutRequest& Request, const FObjectsDocumentsAnnotationsBatchPutDelegate& Delegate /*= FObjectsDocumentsAnnotationsBatchPutDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsAnnotationsBatchPutResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsAnnotationsBatchPutResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsAnnotationsBatchPutDelegate Delegate) const
{
	ObjectsDocumentsAnnotationsBatchPutResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsAnnotationsRepliesBatchPost(const ObjectsDocumentsAnnotationsRepliesBatchPostRequest& Request, const FObjectsDocumentsAnnotationsRepliesBatchPostDelegate& Delegate /*= FObjectsDocumentsAnnotationsRepliesBatchPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsAnnotationsRepliesBatchPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsAnnotationsRepliesBatchPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsAnnotationsRepliesBatchPostDelegate Delegate) const
{
	ObjectsDocumentsAnnotationsRepliesBatchPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsAttachmentsBatchDelete(const ObjectsDocumentsAttachmentsBatchDeleteRequest& Request, const FObjectsDocumentsAttachmentsBatchDeleteDelegate& Delegate /*= FObjectsDocumentsAttachmentsBatchDeleteDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsAttachmentsBatchDeleteResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsAttachmentsBatchDeleteResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsAttachmentsBatchDeleteDelegate Delegate) const
{
	ObjectsDocumentsAttachmentsBatchDeleteResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsAttachmentsBatchPost(const ObjectsDocumentsAttachmentsBatchPostRequest& Request, const FObjectsDocumentsAttachmentsBatchPostDelegate& Delegate /*= FObjectsDocumentsAttachmentsBatchPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsAttachmentsBatchPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsAttachmentsBatchPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsAttachmentsBatchPostDelegate Delegate) const
{
	ObjectsDocumentsAttachmentsBatchPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsAttachmentsBatchPut(const ObjectsDocumentsAttachmentsBatchPutRequest& Request, const FObjectsDocumentsAttachmentsBatchPutDelegate& Delegate /*= FObjectsDocumentsAttachmentsBatchPutDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsAttachmentsBatchPutResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsAttachmentsBatchPutResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsAttachmentsBatchPutDelegate Delegate) const
{
	ObjectsDocumentsAttachmentsBatchPutResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsBatchActionsFileextractJobIdResultsGet(const ObjectsDocumentsBatchActionsFileextractJobIdResultsGetRequest& Request, const FObjectsDocumentsBatchActionsFileextractJobIdResultsGetDelegate& Delegate /*= FObjectsDocumentsBatchActionsFileextractJobIdResultsGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsBatchActionsFileextractJobIdResultsGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsBatchActionsFileextractJobIdResultsGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsBatchActionsFileextractJobIdResultsGetDelegate Delegate) const
{
	ObjectsDocumentsBatchActionsFileextractJobIdResultsGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsBatchActionsFileextractPost(const ObjectsDocumentsBatchActionsFileextractPostRequest& Request, const FObjectsDocumentsBatchActionsFileextractPostDelegate& Delegate /*= FObjectsDocumentsBatchActionsFileextractPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsBatchActionsFileextractPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsBatchActionsFileextractPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsBatchActionsFileextractPostDelegate Delegate) const
{
	ObjectsDocumentsBatchActionsFileextractPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsBatchActionsReclassifyPut(const ObjectsDocumentsBatchActionsReclassifyPutRequest& Request, const FObjectsDocumentsBatchActionsReclassifyPutDelegate& Delegate /*= FObjectsDocumentsBatchActionsReclassifyPutDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsBatchActionsReclassifyPutResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsBatchActionsReclassifyPutResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsBatchActionsReclassifyPutDelegate Delegate) const
{
	ObjectsDocumentsBatchActionsReclassifyPutResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsBatchActionsRerenderPost(const ObjectsDocumentsBatchActionsRerenderPostRequest& Request, const FObjectsDocumentsBatchActionsRerenderPostDelegate& Delegate /*= FObjectsDocumentsBatchActionsRerenderPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsBatchActionsRerenderPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsBatchActionsRerenderPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsBatchActionsRerenderPostDelegate Delegate) const
{
	ObjectsDocumentsBatchActionsRerenderPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsBatchDelete(const ObjectsDocumentsBatchDeleteRequest& Request, const FObjectsDocumentsBatchDeleteDelegate& Delegate /*= FObjectsDocumentsBatchDeleteDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsBatchDeleteResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsBatchDeleteResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsBatchDeleteDelegate Delegate) const
{
	ObjectsDocumentsBatchDeleteResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsBatchLockDelete(const ObjectsDocumentsBatchLockDeleteRequest& Request, const FObjectsDocumentsBatchLockDeleteDelegate& Delegate /*= FObjectsDocumentsBatchLockDeleteDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsBatchLockDeleteResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsBatchLockDeleteResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsBatchLockDeleteDelegate Delegate) const
{
	ObjectsDocumentsBatchLockDeleteResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsBatchPost(const ObjectsDocumentsBatchPostRequest& Request, const FObjectsDocumentsBatchPostDelegate& Delegate /*= FObjectsDocumentsBatchPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsBatchPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsBatchPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsBatchPostDelegate Delegate) const
{
	ObjectsDocumentsBatchPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsBatchPut(const ObjectsDocumentsBatchPutRequest& Request, const FObjectsDocumentsBatchPutDelegate& Delegate /*= FObjectsDocumentsBatchPutDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsBatchPutResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsBatchPutResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsBatchPutDelegate Delegate) const
{
	ObjectsDocumentsBatchPutResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsDocIdAnchorsGet(const ObjectsDocumentsDocIdAnchorsGetRequest& Request, const FObjectsDocumentsDocIdAnchorsGetDelegate& Delegate /*= FObjectsDocumentsDocIdAnchorsGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsDocIdAnchorsGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsDocIdAnchorsGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsDocIdAnchorsGetDelegate Delegate) const
{
	ObjectsDocumentsDocIdAnchorsGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsDocIdAnnotationsFileGet(const ObjectsDocumentsDocIdAnnotationsFileGetRequest& Request, const FObjectsDocumentsDocIdAnnotationsFileGetDelegate& Delegate /*= FObjectsDocumentsDocIdAnnotationsFileGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsDocIdAnnotationsFileGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsDocIdAnnotationsFileGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsDocIdAnnotationsFileGetDelegate Delegate) const
{
	ObjectsDocumentsDocIdAnnotationsFileGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsDocIdAnnotationsFilePost(const ObjectsDocumentsDocIdAnnotationsFilePostRequest& Request, const FObjectsDocumentsDocIdAnnotationsFilePostDelegate& Delegate /*= FObjectsDocumentsDocIdAnnotationsFilePostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsDocIdAnnotationsFilePostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsDocIdAnnotationsFilePostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsDocIdAnnotationsFilePostDelegate Delegate) const
{
	ObjectsDocumentsDocIdAnnotationsFilePostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsDocIdAttachmentsAttachmentIdDelete(const ObjectsDocumentsDocIdAttachmentsAttachmentIdDeleteRequest& Request, const FObjectsDocumentsDocIdAttachmentsAttachmentIdDeleteDelegate& Delegate /*= FObjectsDocumentsDocIdAttachmentsAttachmentIdDeleteDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsDocIdAttachmentsAttachmentIdDeleteResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsDocIdAttachmentsAttachmentIdDeleteResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsDocIdAttachmentsAttachmentIdDeleteDelegate Delegate) const
{
	ObjectsDocumentsDocIdAttachmentsAttachmentIdDeleteResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsDocIdAttachmentsAttachmentIdFileGet(const ObjectsDocumentsDocIdAttachmentsAttachmentIdFileGetRequest& Request, const FObjectsDocumentsDocIdAttachmentsAttachmentIdFileGetDelegate& Delegate /*= FObjectsDocumentsDocIdAttachmentsAttachmentIdFileGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsDocIdAttachmentsAttachmentIdFileGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsDocIdAttachmentsAttachmentIdFileGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsDocIdAttachmentsAttachmentIdFileGetDelegate Delegate) const
{
	ObjectsDocumentsDocIdAttachmentsAttachmentIdFileGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsDocIdAttachmentsAttachmentIdGet(const ObjectsDocumentsDocIdAttachmentsAttachmentIdGetRequest& Request, const FObjectsDocumentsDocIdAttachmentsAttachmentIdGetDelegate& Delegate /*= FObjectsDocumentsDocIdAttachmentsAttachmentIdGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsDocIdAttachmentsAttachmentIdGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsDocIdAttachmentsAttachmentIdGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsDocIdAttachmentsAttachmentIdGetDelegate Delegate) const
{
	ObjectsDocumentsDocIdAttachmentsAttachmentIdGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsDocIdAttachmentsAttachmentIdPut(const ObjectsDocumentsDocIdAttachmentsAttachmentIdPutRequest& Request, const FObjectsDocumentsDocIdAttachmentsAttachmentIdPutDelegate& Delegate /*= FObjectsDocumentsDocIdAttachmentsAttachmentIdPutDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsDocIdAttachmentsAttachmentIdPutResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsDocIdAttachmentsAttachmentIdPutResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsDocIdAttachmentsAttachmentIdPutDelegate Delegate) const
{
	ObjectsDocumentsDocIdAttachmentsAttachmentIdPutResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete(const ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteRequest& Request, const FObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteDelegate& Delegate /*= FObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteDelegate Delegate) const
{
	ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(const ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetRequest& Request, const FObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetDelegate& Delegate /*= FObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetDelegate Delegate) const
{
	ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet(const ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGetRequest& Request, const FObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGetDelegate& Delegate /*= FObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGetDelegate Delegate) const
{
	ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost(const ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPostRequest& Request, const FObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPostDelegate& Delegate /*= FObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPostDelegate Delegate) const
{
	ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet(const ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsGetRequest& Request, const FObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsGetDelegate& Delegate /*= FObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsGetDelegate Delegate) const
{
	ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsDocIdAttachmentsFileGet(const ObjectsDocumentsDocIdAttachmentsFileGetRequest& Request, const FObjectsDocumentsDocIdAttachmentsFileGetDelegate& Delegate /*= FObjectsDocumentsDocIdAttachmentsFileGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsDocIdAttachmentsFileGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsDocIdAttachmentsFileGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsDocIdAttachmentsFileGetDelegate Delegate) const
{
	ObjectsDocumentsDocIdAttachmentsFileGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsDocIdAttachmentsGet(const ObjectsDocumentsDocIdAttachmentsGetRequest& Request, const FObjectsDocumentsDocIdAttachmentsGetDelegate& Delegate /*= FObjectsDocumentsDocIdAttachmentsGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsDocIdAttachmentsGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsDocIdAttachmentsGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsDocIdAttachmentsGetDelegate Delegate) const
{
	ObjectsDocumentsDocIdAttachmentsGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsDocIdAttachmentsPost(const ObjectsDocumentsDocIdAttachmentsPostRequest& Request, const FObjectsDocumentsDocIdAttachmentsPostDelegate& Delegate /*= FObjectsDocumentsDocIdAttachmentsPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsDocIdAttachmentsPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsDocIdAttachmentsPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsDocIdAttachmentsPostDelegate Delegate) const
{
	ObjectsDocumentsDocIdAttachmentsPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsDocIdAudittrailGet(const ObjectsDocumentsDocIdAudittrailGetRequest& Request, const FObjectsDocumentsDocIdAudittrailGetDelegate& Delegate /*= FObjectsDocumentsDocIdAudittrailGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsDocIdAudittrailGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsDocIdAudittrailGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsDocIdAudittrailGetDelegate Delegate) const
{
	ObjectsDocumentsDocIdAudittrailGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsDocIdDelete(const ObjectsDocumentsDocIdDeleteRequest& Request, const FObjectsDocumentsDocIdDeleteDelegate& Delegate /*= FObjectsDocumentsDocIdDeleteDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsDocIdDeleteResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsDocIdDeleteResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsDocIdDeleteDelegate Delegate) const
{
	ObjectsDocumentsDocIdDeleteResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsDocIdEventsGet(const ObjectsDocumentsDocIdEventsGetRequest& Request, const FObjectsDocumentsDocIdEventsGetDelegate& Delegate /*= FObjectsDocumentsDocIdEventsGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsDocIdEventsGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsDocIdEventsGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsDocIdEventsGetDelegate Delegate) const
{
	ObjectsDocumentsDocIdEventsGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsDocIdFileGet(const ObjectsDocumentsDocIdFileGetRequest& Request, const FObjectsDocumentsDocIdFileGetDelegate& Delegate /*= FObjectsDocumentsDocIdFileGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsDocIdFileGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsDocIdFileGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsDocIdFileGetDelegate Delegate) const
{
	ObjectsDocumentsDocIdFileGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsDocIdGet(const ObjectsDocumentsDocIdGetRequest& Request, const FObjectsDocumentsDocIdGetDelegate& Delegate /*= FObjectsDocumentsDocIdGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsDocIdGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsDocIdGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsDocIdGetDelegate Delegate) const
{
	ObjectsDocumentsDocIdGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsDocIdLockDelete(const ObjectsDocumentsDocIdLockDeleteRequest& Request, const FObjectsDocumentsDocIdLockDeleteDelegate& Delegate /*= FObjectsDocumentsDocIdLockDeleteDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsDocIdLockDeleteResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsDocIdLockDeleteResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsDocIdLockDeleteDelegate Delegate) const
{
	ObjectsDocumentsDocIdLockDeleteResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsDocIdLockGet(const ObjectsDocumentsDocIdLockGetRequest& Request, const FObjectsDocumentsDocIdLockGetDelegate& Delegate /*= FObjectsDocumentsDocIdLockGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsDocIdLockGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsDocIdLockGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsDocIdLockGetDelegate Delegate) const
{
	ObjectsDocumentsDocIdLockGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsDocIdLockPost(const ObjectsDocumentsDocIdLockPostRequest& Request, const FObjectsDocumentsDocIdLockPostDelegate& Delegate /*= FObjectsDocumentsDocIdLockPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsDocIdLockPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsDocIdLockPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsDocIdLockPostDelegate Delegate) const
{
	ObjectsDocumentsDocIdLockPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet(const ObjectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGetRequest& Request, const FObjectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGetDelegate& Delegate /*= FObjectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGetDelegate Delegate) const
{
	ObjectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsDocIdPost(const ObjectsDocumentsDocIdPostRequest& Request, const FObjectsDocumentsDocIdPostDelegate& Delegate /*= FObjectsDocumentsDocIdPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsDocIdPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsDocIdPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsDocIdPostDelegate Delegate) const
{
	ObjectsDocumentsDocIdPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsDocIdPut(const ObjectsDocumentsDocIdPutRequest& Request, const FObjectsDocumentsDocIdPutDelegate& Delegate /*= FObjectsDocumentsDocIdPutDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsDocIdPutResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsDocIdPutResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsDocIdPutDelegate Delegate) const
{
	ObjectsDocumentsDocIdPutResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsDocIdRenditionsGet(const ObjectsDocumentsDocIdRenditionsGetRequest& Request, const FObjectsDocumentsDocIdRenditionsGetDelegate& Delegate /*= FObjectsDocumentsDocIdRenditionsGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsDocIdRenditionsGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsDocIdRenditionsGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsDocIdRenditionsGetDelegate Delegate) const
{
	ObjectsDocumentsDocIdRenditionsGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsDocIdRenditionsRenditionTypeDelete(const ObjectsDocumentsDocIdRenditionsRenditionTypeDeleteRequest& Request, const FObjectsDocumentsDocIdRenditionsRenditionTypeDeleteDelegate& Delegate /*= FObjectsDocumentsDocIdRenditionsRenditionTypeDeleteDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsDocIdRenditionsRenditionTypeDeleteResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsDocIdRenditionsRenditionTypeDeleteResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsDocIdRenditionsRenditionTypeDeleteDelegate Delegate) const
{
	ObjectsDocumentsDocIdRenditionsRenditionTypeDeleteResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsDocIdRenditionsRenditionTypeGet(const ObjectsDocumentsDocIdRenditionsRenditionTypeGetRequest& Request, const FObjectsDocumentsDocIdRenditionsRenditionTypeGetDelegate& Delegate /*= FObjectsDocumentsDocIdRenditionsRenditionTypeGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsDocIdRenditionsRenditionTypeGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsDocIdRenditionsRenditionTypeGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsDocIdRenditionsRenditionTypeGetDelegate Delegate) const
{
	ObjectsDocumentsDocIdRenditionsRenditionTypeGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsDocIdRenditionsRenditionTypePost(const ObjectsDocumentsDocIdRenditionsRenditionTypePostRequest& Request, const FObjectsDocumentsDocIdRenditionsRenditionTypePostDelegate& Delegate /*= FObjectsDocumentsDocIdRenditionsRenditionTypePostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsDocIdRenditionsRenditionTypePostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsDocIdRenditionsRenditionTypePostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsDocIdRenditionsRenditionTypePostDelegate Delegate) const
{
	ObjectsDocumentsDocIdRenditionsRenditionTypePostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsDocIdRenditionsRenditionTypePut(const ObjectsDocumentsDocIdRenditionsRenditionTypePutRequest& Request, const FObjectsDocumentsDocIdRenditionsRenditionTypePutDelegate& Delegate /*= FObjectsDocumentsDocIdRenditionsRenditionTypePutDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsDocIdRenditionsRenditionTypePutResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsDocIdRenditionsRenditionTypePutResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsDocIdRenditionsRenditionTypePutDelegate Delegate) const
{
	ObjectsDocumentsDocIdRenditionsRenditionTypePutResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete(const ObjectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDeleteRequest& Request, const FObjectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDeleteDelegate& Delegate /*= FObjectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDeleteDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDeleteResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDeleteResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDeleteDelegate Delegate) const
{
	ObjectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDeleteResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet(const ObjectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGetRequest& Request, const FObjectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGetDelegate& Delegate /*= FObjectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGetDelegate Delegate) const
{
	ObjectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsDocIdVersionsGet(const ObjectsDocumentsDocIdVersionsGetRequest& Request, const FObjectsDocumentsDocIdVersionsGetDelegate& Delegate /*= FObjectsDocumentsDocIdVersionsGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsDocIdVersionsGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsDocIdVersionsGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsDocIdVersionsGetDelegate Delegate) const
{
	ObjectsDocumentsDocIdVersionsGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet(const ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGetRequest& Request, const FObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGetDelegate& Delegate /*= FObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGetDelegate Delegate) const
{
	ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet(const ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGetRequest& Request, const FObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGetDelegate& Delegate /*= FObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGetDelegate Delegate) const
{
	ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet(const ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGetRequest& Request, const FObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGetDelegate& Delegate /*= FObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGetDelegate Delegate) const
{
	ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost(const ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePostRequest& Request, const FObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePostDelegate& Delegate /*= FObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePostDelegate Delegate) const
{
	ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet(const ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGetRequest& Request, const FObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGetDelegate& Delegate /*= FObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGetDelegate Delegate) const
{
	ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(const ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGetRequest& Request, const FObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGetDelegate& Delegate /*= FObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGetDelegate Delegate) const
{
	ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet(const ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGetRequest& Request, const FObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGetDelegate& Delegate /*= FObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGetDelegate Delegate) const
{
	ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete(const ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionDeleteRequest& Request, const FObjectsDocumentsDocIdVersionsMajorVersionMinorVersionDeleteDelegate& Delegate /*= FObjectsDocumentsDocIdVersionsMajorVersionMinorVersionDeleteDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsDocIdVersionsMajorVersionMinorVersionDeleteResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsDocIdVersionsMajorVersionMinorVersionDeleteResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsDocIdVersionsMajorVersionMinorVersionDeleteDelegate Delegate) const
{
	ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionDeleteResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet(const ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGetRequest& Request, const FObjectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGetDelegate& Delegate /*= FObjectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGetDelegate Delegate) const
{
	ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost(const ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPostRequest& Request, const FObjectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPostDelegate& Delegate /*= FObjectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPostDelegate Delegate) const
{
	ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet(const ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGetRequest& Request, const FObjectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGetDelegate& Delegate /*= FObjectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGetDelegate Delegate) const
{
	ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet(const ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGetRequest& Request, const FObjectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGetDelegate& Delegate /*= FObjectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGetDelegate Delegate) const
{
	ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionGet(const ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionGetRequest& Request, const FObjectsDocumentsDocIdVersionsMajorVersionMinorVersionGetDelegate& Delegate /*= FObjectsDocumentsDocIdVersionsMajorVersionMinorVersionGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsDocIdVersionsMajorVersionMinorVersionGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsDocIdVersionsMajorVersionMinorVersionGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsDocIdVersionsMajorVersionMinorVersionGetDelegate Delegate) const
{
	ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionPut(const ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionPutRequest& Request, const FObjectsDocumentsDocIdVersionsMajorVersionMinorVersionPutDelegate& Delegate /*= FObjectsDocumentsDocIdVersionsMajorVersionMinorVersionPutDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsDocIdVersionsMajorVersionMinorVersionPutResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsDocIdVersionsMajorVersionMinorVersionPutResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsDocIdVersionsMajorVersionMinorVersionPutDelegate Delegate) const
{
	ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionPutResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet(const ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGetRequest& Request, const FObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGetDelegate& Delegate /*= FObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGetDelegate Delegate) const
{
	ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost(const ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPostRequest& Request, const FObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPostDelegate& Delegate /*= FObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPostDelegate Delegate) const
{
	ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete(const ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteRequest& Request, const FObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteDelegate& Delegate /*= FObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteDelegate Delegate) const
{
	ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet(const ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetRequest& Request, const FObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetDelegate& Delegate /*= FObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetDelegate Delegate) const
{
	ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet(const ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGetRequest& Request, const FObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGetDelegate& Delegate /*= FObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGetDelegate Delegate) const
{
	ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete(const ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDeleteRequest& Request, const FObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDeleteDelegate& Delegate /*= FObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDeleteDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDeleteResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDeleteResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDeleteDelegate Delegate) const
{
	ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDeleteResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet(const ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGetRequest& Request, const FObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGetDelegate& Delegate /*= FObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGetDelegate Delegate) const
{
	ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost(const ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePostRequest& Request, const FObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePostDelegate& Delegate /*= FObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePostDelegate Delegate) const
{
	ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut(const ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePutRequest& Request, const FObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePutDelegate& Delegate /*= FObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePutDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePutResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePutResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePutDelegate Delegate) const
{
	ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePutResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet(const ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGetRequest& Request, const FObjectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGetDelegate& Delegate /*= FObjectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGetDelegate Delegate) const
{
	ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsGet(const ObjectsDocumentsGetRequest& Request, const FObjectsDocumentsGetDelegate& Delegate /*= FObjectsDocumentsGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsGetDelegate Delegate) const
{
	ObjectsDocumentsGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsIdRolesGet(const ObjectsDocumentsIdRolesGetRequest& Request, const FObjectsDocumentsIdRolesGetDelegate& Delegate /*= FObjectsDocumentsIdRolesGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsIdRolesGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsIdRolesGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsIdRolesGetDelegate Delegate) const
{
	ObjectsDocumentsIdRolesGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsIdRolesPost(const ObjectsDocumentsIdRolesPostRequest& Request, const FObjectsDocumentsIdRolesPostDelegate& Delegate /*= FObjectsDocumentsIdRolesPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsIdRolesPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsIdRolesPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsIdRolesPostDelegate Delegate) const
{
	ObjectsDocumentsIdRolesPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsIdRolesRoleNameGet(const ObjectsDocumentsIdRolesRoleNameGetRequest& Request, const FObjectsDocumentsIdRolesRoleNameGetDelegate& Delegate /*= FObjectsDocumentsIdRolesRoleNameGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsIdRolesRoleNameGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsIdRolesRoleNameGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsIdRolesRoleNameGetDelegate Delegate) const
{
	ObjectsDocumentsIdRolesRoleNameGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet(const ObjectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGetRequest& Request, const FObjectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGetDelegate& Delegate /*= FObjectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGetDelegate Delegate) const
{
	ObjectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet(const ObjectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetRequest& Request, const FObjectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetDelegate& Delegate /*= FObjectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetDelegate Delegate) const
{
	ObjectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut(const ObjectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutRequest& Request, const FObjectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutDelegate& Delegate /*= FObjectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutDelegate Delegate) const
{
	ObjectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsLifecycleActionsPost(const ObjectsDocumentsLifecycleActionsPostRequest& Request, const FObjectsDocumentsLifecycleActionsPostDelegate& Delegate /*= FObjectsDocumentsLifecycleActionsPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsLifecycleActionsPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsLifecycleActionsPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsLifecycleActionsPostDelegate Delegate) const
{
	ObjectsDocumentsLifecycleActionsPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsLifecycleActionsUserActionNamePut(const ObjectsDocumentsLifecycleActionsUserActionNamePutRequest& Request, const FObjectsDocumentsLifecycleActionsUserActionNamePutDelegate& Delegate /*= FObjectsDocumentsLifecycleActionsUserActionNamePutDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsLifecycleActionsUserActionNamePutResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsLifecycleActionsUserActionNamePutResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsLifecycleActionsUserActionNamePutDelegate Delegate) const
{
	ObjectsDocumentsLifecycleActionsUserActionNamePutResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsPost(const ObjectsDocumentsPostRequest& Request, const FObjectsDocumentsPostDelegate& Delegate /*= FObjectsDocumentsPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsPostDelegate Delegate) const
{
	ObjectsDocumentsPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsRelationshipsBatchDelete(const ObjectsDocumentsRelationshipsBatchDeleteRequest& Request, const FObjectsDocumentsRelationshipsBatchDeleteDelegate& Delegate /*= FObjectsDocumentsRelationshipsBatchDeleteDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsRelationshipsBatchDeleteResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsRelationshipsBatchDeleteResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsRelationshipsBatchDeleteDelegate Delegate) const
{
	ObjectsDocumentsRelationshipsBatchDeleteResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsRelationshipsBatchPost(const ObjectsDocumentsRelationshipsBatchPostRequest& Request, const FObjectsDocumentsRelationshipsBatchPostDelegate& Delegate /*= FObjectsDocumentsRelationshipsBatchPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsRelationshipsBatchPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsRelationshipsBatchPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsRelationshipsBatchPostDelegate Delegate) const
{
	ObjectsDocumentsRelationshipsBatchPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsRenditionsBatchDelete(const ObjectsDocumentsRenditionsBatchDeleteRequest& Request, const FObjectsDocumentsRenditionsBatchDeleteDelegate& Delegate /*= FObjectsDocumentsRenditionsBatchDeleteDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsRenditionsBatchDeleteResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsRenditionsBatchDeleteResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsRenditionsBatchDeleteDelegate Delegate) const
{
	ObjectsDocumentsRenditionsBatchDeleteResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsRenditionsBatchPost(const ObjectsDocumentsRenditionsBatchPostRequest& Request, const FObjectsDocumentsRenditionsBatchPostDelegate& Delegate /*= FObjectsDocumentsRenditionsBatchPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsRenditionsBatchPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsRenditionsBatchPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsRenditionsBatchPostDelegate Delegate) const
{
	ObjectsDocumentsRenditionsBatchPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsRolesBatchDelete(const ObjectsDocumentsRolesBatchDeleteRequest& Request, const FObjectsDocumentsRolesBatchDeleteDelegate& Delegate /*= FObjectsDocumentsRolesBatchDeleteDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsRolesBatchDeleteResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsRolesBatchDeleteResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsRolesBatchDeleteDelegate Delegate) const
{
	ObjectsDocumentsRolesBatchDeleteResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsRolesBatchPost(const ObjectsDocumentsRolesBatchPostRequest& Request, const FObjectsDocumentsRolesBatchPostDelegate& Delegate /*= FObjectsDocumentsRolesBatchPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsRolesBatchPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsRolesBatchPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsRolesBatchPostDelegate Delegate) const
{
	ObjectsDocumentsRolesBatchPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsTemplatesGet(const ObjectsDocumentsTemplatesGetRequest& Request, const FObjectsDocumentsTemplatesGetDelegate& Delegate /*= FObjectsDocumentsTemplatesGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsTemplatesGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsTemplatesGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsTemplatesGetDelegate Delegate) const
{
	ObjectsDocumentsTemplatesGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsTemplatesPost(const ObjectsDocumentsTemplatesPostRequest& Request, const FObjectsDocumentsTemplatesPostDelegate& Delegate /*= FObjectsDocumentsTemplatesPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsTemplatesPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsTemplatesPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsTemplatesPostDelegate Delegate) const
{
	ObjectsDocumentsTemplatesPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsTemplatesPut(const ObjectsDocumentsTemplatesPutRequest& Request, const FObjectsDocumentsTemplatesPutDelegate& Delegate /*= FObjectsDocumentsTemplatesPutDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsTemplatesPutResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsTemplatesPutResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsTemplatesPutDelegate Delegate) const
{
	ObjectsDocumentsTemplatesPutResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsTemplatesTemplateNameDelete(const ObjectsDocumentsTemplatesTemplateNameDeleteRequest& Request, const FObjectsDocumentsTemplatesTemplateNameDeleteDelegate& Delegate /*= FObjectsDocumentsTemplatesTemplateNameDeleteDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsTemplatesTemplateNameDeleteResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsTemplatesTemplateNameDeleteResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsTemplatesTemplateNameDeleteDelegate Delegate) const
{
	ObjectsDocumentsTemplatesTemplateNameDeleteResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsTemplatesTemplateNameFileGet(const ObjectsDocumentsTemplatesTemplateNameFileGetRequest& Request, const FObjectsDocumentsTemplatesTemplateNameFileGetDelegate& Delegate /*= FObjectsDocumentsTemplatesTemplateNameFileGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsTemplatesTemplateNameFileGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsTemplatesTemplateNameFileGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsTemplatesTemplateNameFileGetDelegate Delegate) const
{
	ObjectsDocumentsTemplatesTemplateNameFileGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsTemplatesTemplateNameGet(const ObjectsDocumentsTemplatesTemplateNameGetRequest& Request, const FObjectsDocumentsTemplatesTemplateNameGetDelegate& Delegate /*= FObjectsDocumentsTemplatesTemplateNameGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsTemplatesTemplateNameGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsTemplatesTemplateNameGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsTemplatesTemplateNameGetDelegate Delegate) const
{
	ObjectsDocumentsTemplatesTemplateNameGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsTemplatesTemplateNamePut(const ObjectsDocumentsTemplatesTemplateNamePutRequest& Request, const FObjectsDocumentsTemplatesTemplateNamePutDelegate& Delegate /*= FObjectsDocumentsTemplatesTemplateNamePutDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsTemplatesTemplateNamePutResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsTemplatesTemplateNamePutResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsTemplatesTemplateNamePutDelegate Delegate) const
{
	ObjectsDocumentsTemplatesTemplateNamePutResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsTokensPost(const ObjectsDocumentsTokensPostRequest& Request, const FObjectsDocumentsTokensPostDelegate& Delegate /*= FObjectsDocumentsTokensPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsTokensPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsTokensPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsTokensPostDelegate Delegate) const
{
	ObjectsDocumentsTokensPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsVersionsBatchActionsFileextractPost(const ObjectsDocumentsVersionsBatchActionsFileextractPostRequest& Request, const FObjectsDocumentsVersionsBatchActionsFileextractPostDelegate& Delegate /*= FObjectsDocumentsVersionsBatchActionsFileextractPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsVersionsBatchActionsFileextractPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsVersionsBatchActionsFileextractPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsVersionsBatchActionsFileextractPostDelegate Delegate) const
{
	ObjectsDocumentsVersionsBatchActionsFileextractPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsVersionsBatchDelete(const ObjectsDocumentsVersionsBatchDeleteRequest& Request, const FObjectsDocumentsVersionsBatchDeleteDelegate& Delegate /*= FObjectsDocumentsVersionsBatchDeleteDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsVersionsBatchDeleteResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsVersionsBatchDeleteResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsVersionsBatchDeleteDelegate Delegate) const
{
	ObjectsDocumentsVersionsBatchDeleteResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDocumentsVersionsBatchPost(const ObjectsDocumentsVersionsBatchPostRequest& Request, const FObjectsDocumentsVersionsBatchPostDelegate& Delegate /*= FObjectsDocumentsVersionsBatchPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDocumentsVersionsBatchPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDocumentsVersionsBatchPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDocumentsVersionsBatchPostDelegate Delegate) const
{
	ObjectsDocumentsVersionsBatchPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDomainGet(const ObjectsDomainGetRequest& Request, const FObjectsDomainGetDelegate& Delegate /*= FObjectsDomainGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDomainGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDomainGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDomainGetDelegate Delegate) const
{
	ObjectsDomainGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsDomainsGet(const ObjectsDomainsGetRequest& Request, const FObjectsDomainsGetDelegate& Delegate /*= FObjectsDomainsGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsDomainsGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsDomainsGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsDomainsGetDelegate Delegate) const
{
	ObjectsDomainsGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsEdlMatchedDocumentsBatchActionsAddPost(const ObjectsEdlMatchedDocumentsBatchActionsAddPostRequest& Request, const FObjectsEdlMatchedDocumentsBatchActionsAddPostDelegate& Delegate /*= FObjectsEdlMatchedDocumentsBatchActionsAddPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsEdlMatchedDocumentsBatchActionsAddPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsEdlMatchedDocumentsBatchActionsAddPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsEdlMatchedDocumentsBatchActionsAddPostDelegate Delegate) const
{
	ObjectsEdlMatchedDocumentsBatchActionsAddPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsEdlMatchedDocumentsBatchActionsRemovePost(const ObjectsEdlMatchedDocumentsBatchActionsRemovePostRequest& Request, const FObjectsEdlMatchedDocumentsBatchActionsRemovePostDelegate& Delegate /*= FObjectsEdlMatchedDocumentsBatchActionsRemovePostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsEdlMatchedDocumentsBatchActionsRemovePostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsEdlMatchedDocumentsBatchActionsRemovePostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsEdlMatchedDocumentsBatchActionsRemovePostDelegate Delegate) const
{
	ObjectsEdlMatchedDocumentsBatchActionsRemovePostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsGroupsAutoGet(const ObjectsGroupsAutoGetRequest& Request, const FObjectsGroupsAutoGetDelegate& Delegate /*= FObjectsGroupsAutoGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsGroupsAutoGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsGroupsAutoGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsGroupsAutoGetDelegate Delegate) const
{
	ObjectsGroupsAutoGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsGroupsGet(const ObjectsGroupsGetRequest& Request, const FObjectsGroupsGetDelegate& Delegate /*= FObjectsGroupsGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsGroupsGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsGroupsGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsGroupsGetDelegate Delegate) const
{
	ObjectsGroupsGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsGroupsGroupIdDelete(const ObjectsGroupsGroupIdDeleteRequest& Request, const FObjectsGroupsGroupIdDeleteDelegate& Delegate /*= FObjectsGroupsGroupIdDeleteDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsGroupsGroupIdDeleteResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsGroupsGroupIdDeleteResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsGroupsGroupIdDeleteDelegate Delegate) const
{
	ObjectsGroupsGroupIdDeleteResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsGroupsGroupIdGet(const ObjectsGroupsGroupIdGetRequest& Request, const FObjectsGroupsGroupIdGetDelegate& Delegate /*= FObjectsGroupsGroupIdGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsGroupsGroupIdGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsGroupsGroupIdGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsGroupsGroupIdGetDelegate Delegate) const
{
	ObjectsGroupsGroupIdGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsGroupsGroupIdPut(const ObjectsGroupsGroupIdPutRequest& Request, const FObjectsGroupsGroupIdPutDelegate& Delegate /*= FObjectsGroupsGroupIdPutDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsGroupsGroupIdPutResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsGroupsGroupIdPutResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsGroupsGroupIdPutDelegate Delegate) const
{
	ObjectsGroupsGroupIdPutResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsGroupsPost(const ObjectsGroupsPostRequest& Request, const FObjectsGroupsPostDelegate& Delegate /*= FObjectsGroupsPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsGroupsPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsGroupsPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsGroupsPostDelegate Delegate) const
{
	ObjectsGroupsPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsLicensesGet(const ObjectsLicensesGetRequest& Request, const FObjectsLicensesGetDelegate& Delegate /*= FObjectsLicensesGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsLicensesGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsLicensesGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsLicensesGetDelegate Delegate) const
{
	ObjectsLicensesGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsObjectworkflowsActionsGet(const ObjectsObjectworkflowsActionsGetRequest& Request, const FObjectsObjectworkflowsActionsGetDelegate& Delegate /*= FObjectsObjectworkflowsActionsGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsObjectworkflowsActionsGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsObjectworkflowsActionsGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsObjectworkflowsActionsGetDelegate Delegate) const
{
	ObjectsObjectworkflowsActionsGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsObjectworkflowsActionsWorkflowNameGet(const ObjectsObjectworkflowsActionsWorkflowNameGetRequest& Request, const FObjectsObjectworkflowsActionsWorkflowNameGetDelegate& Delegate /*= FObjectsObjectworkflowsActionsWorkflowNameGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsObjectworkflowsActionsWorkflowNameGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsObjectworkflowsActionsWorkflowNameGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsObjectworkflowsActionsWorkflowNameGetDelegate Delegate) const
{
	ObjectsObjectworkflowsActionsWorkflowNameGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsObjectworkflowsActionsWorkflowNamePost(const ObjectsObjectworkflowsActionsWorkflowNamePostRequest& Request, const FObjectsObjectworkflowsActionsWorkflowNamePostDelegate& Delegate /*= FObjectsObjectworkflowsActionsWorkflowNamePostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsObjectworkflowsActionsWorkflowNamePostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsObjectworkflowsActionsWorkflowNamePostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsObjectworkflowsActionsWorkflowNamePostDelegate Delegate) const
{
	ObjectsObjectworkflowsActionsWorkflowNamePostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsObjectworkflowsGet(const ObjectsObjectworkflowsGetRequest& Request, const FObjectsObjectworkflowsGetDelegate& Delegate /*= FObjectsObjectworkflowsGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsObjectworkflowsGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsObjectworkflowsGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsObjectworkflowsGetDelegate Delegate) const
{
	ObjectsObjectworkflowsGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsObjectworkflowsTasksGet(const ObjectsObjectworkflowsTasksGetRequest& Request, const FObjectsObjectworkflowsTasksGetDelegate& Delegate /*= FObjectsObjectworkflowsTasksGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsObjectworkflowsTasksGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsObjectworkflowsTasksGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsObjectworkflowsTasksGetDelegate Delegate) const
{
	ObjectsObjectworkflowsTasksGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsObjectworkflowsTasksTaskIdActionsAcceptPost(const ObjectsObjectworkflowsTasksTaskIdActionsAcceptPostRequest& Request, const FObjectsObjectworkflowsTasksTaskIdActionsAcceptPostDelegate& Delegate /*= FObjectsObjectworkflowsTasksTaskIdActionsAcceptPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsObjectworkflowsTasksTaskIdActionsAcceptPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsObjectworkflowsTasksTaskIdActionsAcceptPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsObjectworkflowsTasksTaskIdActionsAcceptPostDelegate Delegate) const
{
	ObjectsObjectworkflowsTasksTaskIdActionsAcceptPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsObjectworkflowsTasksTaskIdActionsCancelPost(const ObjectsObjectworkflowsTasksTaskIdActionsCancelPostRequest& Request, const FObjectsObjectworkflowsTasksTaskIdActionsCancelPostDelegate& Delegate /*= FObjectsObjectworkflowsTasksTaskIdActionsCancelPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsObjectworkflowsTasksTaskIdActionsCancelPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsObjectworkflowsTasksTaskIdActionsCancelPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsObjectworkflowsTasksTaskIdActionsCancelPostDelegate Delegate) const
{
	ObjectsObjectworkflowsTasksTaskIdActionsCancelPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsObjectworkflowsTasksTaskIdActionsCompletePost(const ObjectsObjectworkflowsTasksTaskIdActionsCompletePostRequest& Request, const FObjectsObjectworkflowsTasksTaskIdActionsCompletePostDelegate& Delegate /*= FObjectsObjectworkflowsTasksTaskIdActionsCompletePostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsObjectworkflowsTasksTaskIdActionsCompletePostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsObjectworkflowsTasksTaskIdActionsCompletePostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsObjectworkflowsTasksTaskIdActionsCompletePostDelegate Delegate) const
{
	ObjectsObjectworkflowsTasksTaskIdActionsCompletePostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsObjectworkflowsTasksTaskIdActionsGet(const ObjectsObjectworkflowsTasksTaskIdActionsGetRequest& Request, const FObjectsObjectworkflowsTasksTaskIdActionsGetDelegate& Delegate /*= FObjectsObjectworkflowsTasksTaskIdActionsGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsObjectworkflowsTasksTaskIdActionsGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsObjectworkflowsTasksTaskIdActionsGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsObjectworkflowsTasksTaskIdActionsGetDelegate Delegate) const
{
	ObjectsObjectworkflowsTasksTaskIdActionsGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsObjectworkflowsTasksTaskIdActionsMdwacceptPost(const ObjectsObjectworkflowsTasksTaskIdActionsMdwacceptPostRequest& Request, const FObjectsObjectworkflowsTasksTaskIdActionsMdwacceptPostDelegate& Delegate /*= FObjectsObjectworkflowsTasksTaskIdActionsMdwacceptPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsObjectworkflowsTasksTaskIdActionsMdwacceptPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsObjectworkflowsTasksTaskIdActionsMdwacceptPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsObjectworkflowsTasksTaskIdActionsMdwacceptPostDelegate Delegate) const
{
	ObjectsObjectworkflowsTasksTaskIdActionsMdwacceptPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsObjectworkflowsTasksTaskIdActionsMdwcompletePost(const ObjectsObjectworkflowsTasksTaskIdActionsMdwcompletePostRequest& Request, const FObjectsObjectworkflowsTasksTaskIdActionsMdwcompletePostDelegate& Delegate /*= FObjectsObjectworkflowsTasksTaskIdActionsMdwcompletePostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsObjectworkflowsTasksTaskIdActionsMdwcompletePostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsObjectworkflowsTasksTaskIdActionsMdwcompletePostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsObjectworkflowsTasksTaskIdActionsMdwcompletePostDelegate Delegate) const
{
	ObjectsObjectworkflowsTasksTaskIdActionsMdwcompletePostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPost(const ObjectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPostRequest& Request, const FObjectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPostDelegate& Delegate /*= FObjectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPostDelegate Delegate) const
{
	ObjectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsObjectworkflowsTasksTaskIdActionsMdwreassignPost(const ObjectsObjectworkflowsTasksTaskIdActionsMdwreassignPostRequest& Request, const FObjectsObjectworkflowsTasksTaskIdActionsMdwreassignPostDelegate& Delegate /*= FObjectsObjectworkflowsTasksTaskIdActionsMdwreassignPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsObjectworkflowsTasksTaskIdActionsMdwreassignPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsObjectworkflowsTasksTaskIdActionsMdwreassignPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsObjectworkflowsTasksTaskIdActionsMdwreassignPostDelegate Delegate) const
{
	ObjectsObjectworkflowsTasksTaskIdActionsMdwreassignPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsObjectworkflowsTasksTaskIdActionsReassignPost(const ObjectsObjectworkflowsTasksTaskIdActionsReassignPostRequest& Request, const FObjectsObjectworkflowsTasksTaskIdActionsReassignPostDelegate& Delegate /*= FObjectsObjectworkflowsTasksTaskIdActionsReassignPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsObjectworkflowsTasksTaskIdActionsReassignPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsObjectworkflowsTasksTaskIdActionsReassignPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsObjectworkflowsTasksTaskIdActionsReassignPostDelegate Delegate) const
{
	ObjectsObjectworkflowsTasksTaskIdActionsReassignPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsObjectworkflowsTasksTaskIdActionsTaskActionGet(const ObjectsObjectworkflowsTasksTaskIdActionsTaskActionGetRequest& Request, const FObjectsObjectworkflowsTasksTaskIdActionsTaskActionGetDelegate& Delegate /*= FObjectsObjectworkflowsTasksTaskIdActionsTaskActionGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsObjectworkflowsTasksTaskIdActionsTaskActionGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsObjectworkflowsTasksTaskIdActionsTaskActionGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsObjectworkflowsTasksTaskIdActionsTaskActionGetDelegate Delegate) const
{
	ObjectsObjectworkflowsTasksTaskIdActionsTaskActionGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsObjectworkflowsTasksTaskIdActionsUndoacceptPost(const ObjectsObjectworkflowsTasksTaskIdActionsUndoacceptPostRequest& Request, const FObjectsObjectworkflowsTasksTaskIdActionsUndoacceptPostDelegate& Delegate /*= FObjectsObjectworkflowsTasksTaskIdActionsUndoacceptPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsObjectworkflowsTasksTaskIdActionsUndoacceptPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsObjectworkflowsTasksTaskIdActionsUndoacceptPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsObjectworkflowsTasksTaskIdActionsUndoacceptPostDelegate Delegate) const
{
	ObjectsObjectworkflowsTasksTaskIdActionsUndoacceptPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsObjectworkflowsTasksTaskIdActionsUpdateduedatePost(const ObjectsObjectworkflowsTasksTaskIdActionsUpdateduedatePostRequest& Request, const FObjectsObjectworkflowsTasksTaskIdActionsUpdateduedatePostDelegate& Delegate /*= FObjectsObjectworkflowsTasksTaskIdActionsUpdateduedatePostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsObjectworkflowsTasksTaskIdActionsUpdateduedatePostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsObjectworkflowsTasksTaskIdActionsUpdateduedatePostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsObjectworkflowsTasksTaskIdActionsUpdateduedatePostDelegate Delegate) const
{
	ObjectsObjectworkflowsTasksTaskIdActionsUpdateduedatePostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsObjectworkflowsTasksTaskIdGet(const ObjectsObjectworkflowsTasksTaskIdGetRequest& Request, const FObjectsObjectworkflowsTasksTaskIdGetDelegate& Delegate /*= FObjectsObjectworkflowsTasksTaskIdGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsObjectworkflowsTasksTaskIdGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsObjectworkflowsTasksTaskIdGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsObjectworkflowsTasksTaskIdGetDelegate Delegate) const
{
	ObjectsObjectworkflowsTasksTaskIdGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsObjectworkflowsWorkflowIdActionsGet(const ObjectsObjectworkflowsWorkflowIdActionsGetRequest& Request, const FObjectsObjectworkflowsWorkflowIdActionsGetDelegate& Delegate /*= FObjectsObjectworkflowsWorkflowIdActionsGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsObjectworkflowsWorkflowIdActionsGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsObjectworkflowsWorkflowIdActionsGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsObjectworkflowsWorkflowIdActionsGetDelegate Delegate) const
{
	ObjectsObjectworkflowsWorkflowIdActionsGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsObjectworkflowsWorkflowIdActionsWorkflowActionGet(const ObjectsObjectworkflowsWorkflowIdActionsWorkflowActionGetRequest& Request, const FObjectsObjectworkflowsWorkflowIdActionsWorkflowActionGetDelegate& Delegate /*= FObjectsObjectworkflowsWorkflowIdActionsWorkflowActionGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsObjectworkflowsWorkflowIdActionsWorkflowActionGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsObjectworkflowsWorkflowIdActionsWorkflowActionGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsObjectworkflowsWorkflowIdActionsWorkflowActionGetDelegate Delegate) const
{
	ObjectsObjectworkflowsWorkflowIdActionsWorkflowActionGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsObjectworkflowsWorkflowIdActionsWorkflowActionPost(const ObjectsObjectworkflowsWorkflowIdActionsWorkflowActionPostRequest& Request, const FObjectsObjectworkflowsWorkflowIdActionsWorkflowActionPostDelegate& Delegate /*= FObjectsObjectworkflowsWorkflowIdActionsWorkflowActionPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsObjectworkflowsWorkflowIdActionsWorkflowActionPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsObjectworkflowsWorkflowIdActionsWorkflowActionPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsObjectworkflowsWorkflowIdActionsWorkflowActionPostDelegate Delegate) const
{
	ObjectsObjectworkflowsWorkflowIdActionsWorkflowActionPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsObjectworkflowsWorkflowIdGet(const ObjectsObjectworkflowsWorkflowIdGetRequest& Request, const FObjectsObjectworkflowsWorkflowIdGetDelegate& Delegate /*= FObjectsObjectworkflowsWorkflowIdGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsObjectworkflowsWorkflowIdGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsObjectworkflowsWorkflowIdGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsObjectworkflowsWorkflowIdGetDelegate Delegate) const
{
	ObjectsObjectworkflowsWorkflowIdGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsPicklistsGet(const ObjectsPicklistsGetRequest& Request, const FObjectsPicklistsGetDelegate& Delegate /*= FObjectsPicklistsGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsPicklistsGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsPicklistsGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsPicklistsGetDelegate Delegate) const
{
	ObjectsPicklistsGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsPicklistsPicklistNameGet(const ObjectsPicklistsPicklistNameGetRequest& Request, const FObjectsPicklistsPicklistNameGetDelegate& Delegate /*= FObjectsPicklistsPicklistNameGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsPicklistsPicklistNameGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsPicklistsPicklistNameGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsPicklistsPicklistNameGetDelegate Delegate) const
{
	ObjectsPicklistsPicklistNameGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsPicklistsPicklistNamePicklistValueNameDelete(const ObjectsPicklistsPicklistNamePicklistValueNameDeleteRequest& Request, const FObjectsPicklistsPicklistNamePicklistValueNameDeleteDelegate& Delegate /*= FObjectsPicklistsPicklistNamePicklistValueNameDeleteDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsPicklistsPicklistNamePicklistValueNameDeleteResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsPicklistsPicklistNamePicklistValueNameDeleteResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsPicklistsPicklistNamePicklistValueNameDeleteDelegate Delegate) const
{
	ObjectsPicklistsPicklistNamePicklistValueNameDeleteResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsPicklistsPicklistNamePicklistValueNamePut(const ObjectsPicklistsPicklistNamePicklistValueNamePutRequest& Request, const FObjectsPicklistsPicklistNamePicklistValueNamePutDelegate& Delegate /*= FObjectsPicklistsPicklistNamePicklistValueNamePutDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsPicklistsPicklistNamePicklistValueNamePutResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsPicklistsPicklistNamePicklistValueNamePutResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsPicklistsPicklistNamePicklistValueNamePutDelegate Delegate) const
{
	ObjectsPicklistsPicklistNamePicklistValueNamePutResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsPicklistsPicklistNamePost(const ObjectsPicklistsPicklistNamePostRequest& Request, const FObjectsPicklistsPicklistNamePostDelegate& Delegate /*= FObjectsPicklistsPicklistNamePostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsPicklistsPicklistNamePostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsPicklistsPicklistNamePostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsPicklistsPicklistNamePostDelegate Delegate) const
{
	ObjectsPicklistsPicklistNamePostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsPicklistsPicklistNamePut(const ObjectsPicklistsPicklistNamePutRequest& Request, const FObjectsPicklistsPicklistNamePutDelegate& Delegate /*= FObjectsPicklistsPicklistNamePutDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsPicklistsPicklistNamePutResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsPicklistsPicklistNamePutResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsPicklistsPicklistNamePutDelegate Delegate) const
{
	ObjectsPicklistsPicklistNamePutResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsSandboxActionsBuildproductionPost(const ObjectsSandboxActionsBuildproductionPostRequest& Request, const FObjectsSandboxActionsBuildproductionPostDelegate& Delegate /*= FObjectsSandboxActionsBuildproductionPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsSandboxActionsBuildproductionPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsSandboxActionsBuildproductionPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsSandboxActionsBuildproductionPostDelegate Delegate) const
{
	ObjectsSandboxActionsBuildproductionPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsSandboxActionsPromoteproductionPost(const ObjectsSandboxActionsPromoteproductionPostRequest& Request, const FObjectsSandboxActionsPromoteproductionPostDelegate& Delegate /*= FObjectsSandboxActionsPromoteproductionPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsSandboxActionsPromoteproductionPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsSandboxActionsPromoteproductionPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsSandboxActionsPromoteproductionPostDelegate Delegate) const
{
	ObjectsSandboxActionsPromoteproductionPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsSandboxActionsRecheckusagePost(const ObjectsSandboxActionsRecheckusagePostRequest& Request, const FObjectsSandboxActionsRecheckusagePostDelegate& Delegate /*= FObjectsSandboxActionsRecheckusagePostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsSandboxActionsRecheckusagePostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsSandboxActionsRecheckusagePostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsSandboxActionsRecheckusagePostDelegate Delegate) const
{
	ObjectsSandboxActionsRecheckusagePostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsSandboxBatchChangesizePost(const ObjectsSandboxBatchChangesizePostRequest& Request, const FObjectsSandboxBatchChangesizePostDelegate& Delegate /*= FObjectsSandboxBatchChangesizePostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsSandboxBatchChangesizePostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsSandboxBatchChangesizePostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsSandboxBatchChangesizePostDelegate Delegate) const
{
	ObjectsSandboxBatchChangesizePostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsSandboxEntitlementsSetPost(const ObjectsSandboxEntitlementsSetPostRequest& Request, const FObjectsSandboxEntitlementsSetPostDelegate& Delegate /*= FObjectsSandboxEntitlementsSetPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsSandboxEntitlementsSetPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsSandboxEntitlementsSetPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsSandboxEntitlementsSetPostDelegate Delegate) const
{
	ObjectsSandboxEntitlementsSetPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsSandboxGet(const ObjectsSandboxGetRequest& Request, const FObjectsSandboxGetDelegate& Delegate /*= FObjectsSandboxGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsSandboxGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsSandboxGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsSandboxGetDelegate Delegate) const
{
	ObjectsSandboxGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsSandboxNameDelete(const ObjectsSandboxNameDeleteRequest& Request, const FObjectsSandboxNameDeleteDelegate& Delegate /*= FObjectsSandboxNameDeleteDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsSandboxNameDeleteResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsSandboxNameDeleteResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsSandboxNameDeleteDelegate Delegate) const
{
	ObjectsSandboxNameDeleteResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsSandboxPost(const ObjectsSandboxPostRequest& Request, const FObjectsSandboxPostDelegate& Delegate /*= FObjectsSandboxPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsSandboxPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsSandboxPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsSandboxPostDelegate Delegate) const
{
	ObjectsSandboxPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsSandboxSnapshotApiNameActionsUpdatePost(const ObjectsSandboxSnapshotApiNameActionsUpdatePostRequest& Request, const FObjectsSandboxSnapshotApiNameActionsUpdatePostDelegate& Delegate /*= FObjectsSandboxSnapshotApiNameActionsUpdatePostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsSandboxSnapshotApiNameActionsUpdatePostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsSandboxSnapshotApiNameActionsUpdatePostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsSandboxSnapshotApiNameActionsUpdatePostDelegate Delegate) const
{
	ObjectsSandboxSnapshotApiNameActionsUpdatePostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsSandboxSnapshotApiNameActionsUpgradePost(const ObjectsSandboxSnapshotApiNameActionsUpgradePostRequest& Request, const FObjectsSandboxSnapshotApiNameActionsUpgradePostDelegate& Delegate /*= FObjectsSandboxSnapshotApiNameActionsUpgradePostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsSandboxSnapshotApiNameActionsUpgradePostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsSandboxSnapshotApiNameActionsUpgradePostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsSandboxSnapshotApiNameActionsUpgradePostDelegate Delegate) const
{
	ObjectsSandboxSnapshotApiNameActionsUpgradePostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsSandboxSnapshotApiNameDelete(const ObjectsSandboxSnapshotApiNameDeleteRequest& Request, const FObjectsSandboxSnapshotApiNameDeleteDelegate& Delegate /*= FObjectsSandboxSnapshotApiNameDeleteDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsSandboxSnapshotApiNameDeleteResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsSandboxSnapshotApiNameDeleteResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsSandboxSnapshotApiNameDeleteDelegate Delegate) const
{
	ObjectsSandboxSnapshotApiNameDeleteResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsSandboxSnapshotGet(const ObjectsSandboxSnapshotGetRequest& Request, const FObjectsSandboxSnapshotGetDelegate& Delegate /*= FObjectsSandboxSnapshotGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsSandboxSnapshotGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsSandboxSnapshotGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsSandboxSnapshotGetDelegate Delegate) const
{
	ObjectsSandboxSnapshotGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsSandboxSnapshotPost(const ObjectsSandboxSnapshotPostRequest& Request, const FObjectsSandboxSnapshotPostDelegate& Delegate /*= FObjectsSandboxSnapshotPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsSandboxSnapshotPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsSandboxSnapshotPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsSandboxSnapshotPostDelegate Delegate) const
{
	ObjectsSandboxSnapshotPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsSandboxVaultIdActionsRefreshPost(const ObjectsSandboxVaultIdActionsRefreshPostRequest& Request, const FObjectsSandboxVaultIdActionsRefreshPostDelegate& Delegate /*= FObjectsSandboxVaultIdActionsRefreshPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsSandboxVaultIdActionsRefreshPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsSandboxVaultIdActionsRefreshPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsSandboxVaultIdActionsRefreshPostDelegate Delegate) const
{
	ObjectsSandboxVaultIdActionsRefreshPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsSandboxVaultIdGet(const ObjectsSandboxVaultIdGetRequest& Request, const FObjectsSandboxVaultIdGetDelegate& Delegate /*= FObjectsSandboxVaultIdGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsSandboxVaultIdGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsSandboxVaultIdGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsSandboxVaultIdGetDelegate Delegate) const
{
	ObjectsSandboxVaultIdGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsSecuritypoliciesGet(const ObjectsSecuritypoliciesGetRequest& Request, const FObjectsSecuritypoliciesGetDelegate& Delegate /*= FObjectsSecuritypoliciesGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsSecuritypoliciesGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsSecuritypoliciesGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsSecuritypoliciesGetDelegate Delegate) const
{
	ObjectsSecuritypoliciesGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsSecuritypoliciesSecurityPolicyNameGet(const ObjectsSecuritypoliciesSecurityPolicyNameGetRequest& Request, const FObjectsSecuritypoliciesSecurityPolicyNameGetDelegate& Delegate /*= FObjectsSecuritypoliciesSecurityPolicyNameGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsSecuritypoliciesSecurityPolicyNameGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsSecuritypoliciesSecurityPolicyNameGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsSecuritypoliciesSecurityPolicyNameGetDelegate Delegate) const
{
	ObjectsSecuritypoliciesSecurityPolicyNameGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsUsersGet(const ObjectsUsersGetRequest& Request, const FObjectsUsersGetDelegate& Delegate /*= FObjectsUsersGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsUsersGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsUsersGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsUsersGetDelegate Delegate) const
{
	ObjectsUsersGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsUsersIdGet(const ObjectsUsersIdGetRequest& Request, const FObjectsUsersIdGetDelegate& Delegate /*= FObjectsUsersIdGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsUsersIdGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsUsersIdGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsUsersIdGetDelegate Delegate) const
{
	ObjectsUsersIdGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsUsersIdPermissionsGet(const ObjectsUsersIdPermissionsGetRequest& Request, const FObjectsUsersIdPermissionsGetDelegate& Delegate /*= FObjectsUsersIdPermissionsGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsUsersIdPermissionsGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsUsersIdPermissionsGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsUsersIdPermissionsGetDelegate Delegate) const
{
	ObjectsUsersIdPermissionsGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsUsersIdPut(const ObjectsUsersIdPutRequest& Request, const FObjectsUsersIdPutDelegate& Delegate /*= FObjectsUsersIdPutDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsUsersIdPutResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsUsersIdPutResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsUsersIdPutDelegate Delegate) const
{
	ObjectsUsersIdPutResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsUsersMeGet(const ObjectsUsersMeGetRequest& Request, const FObjectsUsersMeGetDelegate& Delegate /*= FObjectsUsersMeGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsUsersMeGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsUsersMeGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsUsersMeGetDelegate Delegate) const
{
	ObjectsUsersMeGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsUsersMePasswordPost(const ObjectsUsersMePasswordPostRequest& Request, const FObjectsUsersMePasswordPostDelegate& Delegate /*= FObjectsUsersMePasswordPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsUsersMePasswordPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsUsersMePasswordPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsUsersMePasswordPostDelegate Delegate) const
{
	ObjectsUsersMePasswordPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsUsersMePermissionsGet(const ObjectsUsersMePermissionsGetRequest& Request, const FObjectsUsersMePermissionsGetDelegate& Delegate /*= FObjectsUsersMePermissionsGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsUsersMePermissionsGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsUsersMePermissionsGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsUsersMePermissionsGetDelegate Delegate) const
{
	ObjectsUsersMePermissionsGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsUsersMePut(const ObjectsUsersMePutRequest& Request, const FObjectsUsersMePutDelegate& Delegate /*= FObjectsUsersMePutDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsUsersMePutResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsUsersMePutResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsUsersMePutDelegate Delegate) const
{
	ObjectsUsersMePutResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsUsersPost(const ObjectsUsersPostRequest& Request, const FObjectsUsersPostDelegate& Delegate /*= FObjectsUsersPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsUsersPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsUsersPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsUsersPostDelegate Delegate) const
{
	ObjectsUsersPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsUsersPut(const ObjectsUsersPutRequest& Request, const FObjectsUsersPutDelegate& Delegate /*= FObjectsUsersPutDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsUsersPutResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsUsersPutResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsUsersPutDelegate Delegate) const
{
	ObjectsUsersPutResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsUsersUserIdDelete(const ObjectsUsersUserIdDeleteRequest& Request, const FObjectsUsersUserIdDeleteDelegate& Delegate /*= FObjectsUsersUserIdDeleteDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsUsersUserIdDeleteResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsUsersUserIdDeleteResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsUsersUserIdDeleteDelegate Delegate) const
{
	ObjectsUsersUserIdDeleteResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsUsersUserIdVaultMembershipVaultIdPut(const ObjectsUsersUserIdVaultMembershipVaultIdPutRequest& Request, const FObjectsUsersUserIdVaultMembershipVaultIdPutDelegate& Delegate /*= FObjectsUsersUserIdVaultMembershipVaultIdPutDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsUsersUserIdVaultMembershipVaultIdPutResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsUsersUserIdVaultMembershipVaultIdPutResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsUsersUserIdVaultMembershipVaultIdPutDelegate Delegate) const
{
	ObjectsUsersUserIdVaultMembershipVaultIdPutResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsVaultActionsComparePost(const ObjectsVaultActionsComparePostRequest& Request, const FObjectsVaultActionsComparePostDelegate& Delegate /*= FObjectsVaultActionsComparePostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsVaultActionsComparePostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsVaultActionsComparePostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsVaultActionsComparePostDelegate Delegate) const
{
	ObjectsVaultActionsComparePostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ObjectsVaultActionsConfigreportPost(const ObjectsVaultActionsConfigreportPostRequest& Request, const FObjectsVaultActionsConfigreportPostDelegate& Delegate /*= FObjectsVaultActionsConfigreportPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnObjectsVaultActionsConfigreportPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnObjectsVaultActionsConfigreportPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FObjectsVaultActionsConfigreportPostDelegate Delegate) const
{
	ObjectsVaultActionsConfigreportPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::QueryComponentsPost(const QueryComponentsPostRequest& Request, const FQueryComponentsPostDelegate& Delegate /*= FQueryComponentsPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnQueryComponentsPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnQueryComponentsPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FQueryComponentsPostDelegate Delegate) const
{
	QueryComponentsPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::QueryNextPagePost(const QueryNextPagePostRequest& Request, const FQueryNextPagePostDelegate& Delegate /*= FQueryNextPagePostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnQueryNextPagePostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnQueryNextPagePostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FQueryNextPagePostDelegate Delegate) const
{
	QueryNextPagePostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::QueryPost(const QueryPostRequest& Request, const FQueryPostDelegate& Delegate /*= FQueryPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnQueryPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnQueryPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FQueryPostDelegate Delegate) const
{
	QueryPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::QueryPreviousPagePost(const QueryPreviousPagePostRequest& Request, const FQueryPreviousPagePostDelegate& Delegate /*= FQueryPreviousPagePostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnQueryPreviousPagePostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnQueryPreviousPagePostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FQueryPreviousPagePostDelegate Delegate) const
{
	QueryPreviousPagePostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ScimV2MeGet(const ScimV2MeGetRequest& Request, const FScimV2MeGetDelegate& Delegate /*= FScimV2MeGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnScimV2MeGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnScimV2MeGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FScimV2MeGetDelegate Delegate) const
{
	ScimV2MeGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ScimV2MePut(const ScimV2MePutRequest& Request, const FScimV2MePutDelegate& Delegate /*= FScimV2MePutDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnScimV2MePutResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnScimV2MePutResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FScimV2MePutDelegate Delegate) const
{
	ScimV2MePutResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ScimV2ResourceTypesGet(const ScimV2ResourceTypesGetRequest& Request, const FScimV2ResourceTypesGetDelegate& Delegate /*= FScimV2ResourceTypesGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnScimV2ResourceTypesGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnScimV2ResourceTypesGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FScimV2ResourceTypesGetDelegate Delegate) const
{
	ScimV2ResourceTypesGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ScimV2ResourceTypesTypeGet(const ScimV2ResourceTypesTypeGetRequest& Request, const FScimV2ResourceTypesTypeGetDelegate& Delegate /*= FScimV2ResourceTypesTypeGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnScimV2ResourceTypesTypeGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnScimV2ResourceTypesTypeGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FScimV2ResourceTypesTypeGetDelegate Delegate) const
{
	ScimV2ResourceTypesTypeGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ScimV2SchemasGet(const ScimV2SchemasGetRequest& Request, const FScimV2SchemasGetDelegate& Delegate /*= FScimV2SchemasGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnScimV2SchemasGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnScimV2SchemasGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FScimV2SchemasGetDelegate Delegate) const
{
	ScimV2SchemasGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ScimV2SchemasIdGet(const ScimV2SchemasIdGetRequest& Request, const FScimV2SchemasIdGetDelegate& Delegate /*= FScimV2SchemasIdGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnScimV2SchemasIdGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnScimV2SchemasIdGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FScimV2SchemasIdGetDelegate Delegate) const
{
	ScimV2SchemasIdGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ScimV2ServiceProviderConfigGet(const ScimV2ServiceProviderConfigGetRequest& Request, const FScimV2ServiceProviderConfigGetDelegate& Delegate /*= FScimV2ServiceProviderConfigGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnScimV2ServiceProviderConfigGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnScimV2ServiceProviderConfigGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FScimV2ServiceProviderConfigGetDelegate Delegate) const
{
	ScimV2ServiceProviderConfigGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ScimV2TypeGet(const ScimV2TypeGetRequest& Request, const FScimV2TypeGetDelegate& Delegate /*= FScimV2TypeGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnScimV2TypeGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnScimV2TypeGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FScimV2TypeGetDelegate Delegate) const
{
	ScimV2TypeGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ScimV2TypeIdGet(const ScimV2TypeIdGetRequest& Request, const FScimV2TypeIdGetDelegate& Delegate /*= FScimV2TypeIdGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnScimV2TypeIdGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnScimV2TypeIdGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FScimV2TypeIdGetDelegate Delegate) const
{
	ScimV2TypeIdGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ScimV2UsersGet(const ScimV2UsersGetRequest& Request, const FScimV2UsersGetDelegate& Delegate /*= FScimV2UsersGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnScimV2UsersGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnScimV2UsersGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FScimV2UsersGetDelegate Delegate) const
{
	ScimV2UsersGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ScimV2UsersIdGet(const ScimV2UsersIdGetRequest& Request, const FScimV2UsersIdGetDelegate& Delegate /*= FScimV2UsersIdGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnScimV2UsersIdGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnScimV2UsersIdGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FScimV2UsersIdGetDelegate Delegate) const
{
	ScimV2UsersIdGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ScimV2UsersIdPut(const ScimV2UsersIdPutRequest& Request, const FScimV2UsersIdPutDelegate& Delegate /*= FScimV2UsersIdPutDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnScimV2UsersIdPutResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnScimV2UsersIdPutResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FScimV2UsersIdPutDelegate Delegate) const
{
	ScimV2UsersIdPutResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ScimV2UsersPost(const ScimV2UsersPostRequest& Request, const FScimV2UsersPostDelegate& Delegate /*= FScimV2UsersPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnScimV2UsersPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnScimV2UsersPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FScimV2UsersPostDelegate Delegate) const
{
	ScimV2UsersPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ServicesCertificateCertIdGet(const ServicesCertificateCertIdGetRequest& Request, const FServicesCertificateCertIdGetDelegate& Delegate /*= FServicesCertificateCertIdGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnServicesCertificateCertIdGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnServicesCertificateCertIdGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FServicesCertificateCertIdGetDelegate Delegate) const
{
	ServicesCertificateCertIdGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ServicesConfigurationModeActionsDisablePost(const ServicesConfigurationModeActionsDisablePostRequest& Request, const FServicesConfigurationModeActionsDisablePostDelegate& Delegate /*= FServicesConfigurationModeActionsDisablePostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnServicesConfigurationModeActionsDisablePostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnServicesConfigurationModeActionsDisablePostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FServicesConfigurationModeActionsDisablePostDelegate Delegate) const
{
	ServicesConfigurationModeActionsDisablePostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ServicesConfigurationModeActionsEnablePost(const ServicesConfigurationModeActionsEnablePostRequest& Request, const FServicesConfigurationModeActionsEnablePostDelegate& Delegate /*= FServicesConfigurationModeActionsEnablePostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnServicesConfigurationModeActionsEnablePostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnServicesConfigurationModeActionsEnablePostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FServicesConfigurationModeActionsEnablePostDelegate Delegate) const
{
	ServicesConfigurationModeActionsEnablePostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ServicesDirectdataFilesGet(const ServicesDirectdataFilesGetRequest& Request, const FServicesDirectdataFilesGetDelegate& Delegate /*= FServicesDirectdataFilesGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnServicesDirectdataFilesGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnServicesDirectdataFilesGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FServicesDirectdataFilesGetDelegate Delegate) const
{
	ServicesDirectdataFilesGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ServicesDirectdataFilesNameGet(const ServicesDirectdataFilesNameGetRequest& Request, const FServicesDirectdataFilesNameGetDelegate& Delegate /*= FServicesDirectdataFilesNameGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnServicesDirectdataFilesNameGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnServicesDirectdataFilesNameGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FServicesDirectdataFilesNameGetDelegate Delegate) const
{
	ServicesDirectdataFilesNameGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ServicesFileStagingItemsContentItemGet(const ServicesFileStagingItemsContentItemGetRequest& Request, const FServicesFileStagingItemsContentItemGetDelegate& Delegate /*= FServicesFileStagingItemsContentItemGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnServicesFileStagingItemsContentItemGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnServicesFileStagingItemsContentItemGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FServicesFileStagingItemsContentItemGetDelegate Delegate) const
{
	ServicesFileStagingItemsContentItemGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ServicesFileStagingItemsItemDelete(const ServicesFileStagingItemsItemDeleteRequest& Request, const FServicesFileStagingItemsItemDeleteDelegate& Delegate /*= FServicesFileStagingItemsItemDeleteDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnServicesFileStagingItemsItemDeleteResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnServicesFileStagingItemsItemDeleteResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FServicesFileStagingItemsItemDeleteDelegate Delegate) const
{
	ServicesFileStagingItemsItemDeleteResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ServicesFileStagingItemsItemGet(const ServicesFileStagingItemsItemGetRequest& Request, const FServicesFileStagingItemsItemGetDelegate& Delegate /*= FServicesFileStagingItemsItemGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnServicesFileStagingItemsItemGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnServicesFileStagingItemsItemGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FServicesFileStagingItemsItemGetDelegate Delegate) const
{
	ServicesFileStagingItemsItemGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ServicesFileStagingItemsItemPut(const ServicesFileStagingItemsItemPutRequest& Request, const FServicesFileStagingItemsItemPutDelegate& Delegate /*= FServicesFileStagingItemsItemPutDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnServicesFileStagingItemsItemPutResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnServicesFileStagingItemsItemPutResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FServicesFileStagingItemsItemPutDelegate Delegate) const
{
	ServicesFileStagingItemsItemPutResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ServicesFileStagingItemsPost(const ServicesFileStagingItemsPostRequest& Request, const FServicesFileStagingItemsPostDelegate& Delegate /*= FServicesFileStagingItemsPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnServicesFileStagingItemsPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnServicesFileStagingItemsPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FServicesFileStagingItemsPostDelegate Delegate) const
{
	ServicesFileStagingItemsPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ServicesFileStagingUploadGet(const ServicesFileStagingUploadGetRequest& Request, const FServicesFileStagingUploadGetDelegate& Delegate /*= FServicesFileStagingUploadGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnServicesFileStagingUploadGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnServicesFileStagingUploadGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FServicesFileStagingUploadGetDelegate Delegate) const
{
	ServicesFileStagingUploadGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ServicesFileStagingUploadPost(const ServicesFileStagingUploadPostRequest& Request, const FServicesFileStagingUploadPostDelegate& Delegate /*= FServicesFileStagingUploadPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnServicesFileStagingUploadPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnServicesFileStagingUploadPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FServicesFileStagingUploadPostDelegate Delegate) const
{
	ServicesFileStagingUploadPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ServicesFileStagingUploadUploadSessionIdDelete(const ServicesFileStagingUploadUploadSessionIdDeleteRequest& Request, const FServicesFileStagingUploadUploadSessionIdDeleteDelegate& Delegate /*= FServicesFileStagingUploadUploadSessionIdDeleteDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnServicesFileStagingUploadUploadSessionIdDeleteResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnServicesFileStagingUploadUploadSessionIdDeleteResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FServicesFileStagingUploadUploadSessionIdDeleteDelegate Delegate) const
{
	ServicesFileStagingUploadUploadSessionIdDeleteResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ServicesFileStagingUploadUploadSessionIdGet(const ServicesFileStagingUploadUploadSessionIdGetRequest& Request, const FServicesFileStagingUploadUploadSessionIdGetDelegate& Delegate /*= FServicesFileStagingUploadUploadSessionIdGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnServicesFileStagingUploadUploadSessionIdGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnServicesFileStagingUploadUploadSessionIdGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FServicesFileStagingUploadUploadSessionIdGetDelegate Delegate) const
{
	ServicesFileStagingUploadUploadSessionIdGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ServicesFileStagingUploadUploadSessionIdPartsGet(const ServicesFileStagingUploadUploadSessionIdPartsGetRequest& Request, const FServicesFileStagingUploadUploadSessionIdPartsGetDelegate& Delegate /*= FServicesFileStagingUploadUploadSessionIdPartsGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnServicesFileStagingUploadUploadSessionIdPartsGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnServicesFileStagingUploadUploadSessionIdPartsGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FServicesFileStagingUploadUploadSessionIdPartsGetDelegate Delegate) const
{
	ServicesFileStagingUploadUploadSessionIdPartsGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ServicesFileStagingUploadUploadSessionIdPost(const ServicesFileStagingUploadUploadSessionIdPostRequest& Request, const FServicesFileStagingUploadUploadSessionIdPostDelegate& Delegate /*= FServicesFileStagingUploadUploadSessionIdPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnServicesFileStagingUploadUploadSessionIdPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnServicesFileStagingUploadUploadSessionIdPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FServicesFileStagingUploadUploadSessionIdPostDelegate Delegate) const
{
	ServicesFileStagingUploadUploadSessionIdPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ServicesFileStagingUploadUploadSessionIdPut(const ServicesFileStagingUploadUploadSessionIdPutRequest& Request, const FServicesFileStagingUploadUploadSessionIdPutDelegate& Delegate /*= FServicesFileStagingUploadUploadSessionIdPutDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnServicesFileStagingUploadUploadSessionIdPutResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnServicesFileStagingUploadUploadSessionIdPutResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FServicesFileStagingUploadUploadSessionIdPutDelegate Delegate) const
{
	ServicesFileStagingUploadUploadSessionIdPutResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ServicesJobsHistoriesGet(const ServicesJobsHistoriesGetRequest& Request, const FServicesJobsHistoriesGetDelegate& Delegate /*= FServicesJobsHistoriesGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnServicesJobsHistoriesGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnServicesJobsHistoriesGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FServicesJobsHistoriesGetDelegate Delegate) const
{
	ServicesJobsHistoriesGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ServicesJobsJobIdErrorsGet(const ServicesJobsJobIdErrorsGetRequest& Request, const FServicesJobsJobIdErrorsGetDelegate& Delegate /*= FServicesJobsJobIdErrorsGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnServicesJobsJobIdErrorsGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnServicesJobsJobIdErrorsGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FServicesJobsJobIdErrorsGetDelegate Delegate) const
{
	ServicesJobsJobIdErrorsGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ServicesJobsJobIdGet(const ServicesJobsJobIdGetRequest& Request, const FServicesJobsJobIdGetDelegate& Delegate /*= FServicesJobsJobIdGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnServicesJobsJobIdGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnServicesJobsJobIdGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FServicesJobsJobIdGetDelegate Delegate) const
{
	ServicesJobsJobIdGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ServicesJobsJobIdSummaryGet(const ServicesJobsJobIdSummaryGetRequest& Request, const FServicesJobsJobIdSummaryGetDelegate& Delegate /*= FServicesJobsJobIdSummaryGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnServicesJobsJobIdSummaryGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnServicesJobsJobIdSummaryGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FServicesJobsJobIdSummaryGetDelegate Delegate) const
{
	ServicesJobsJobIdSummaryGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ServicesJobsJobIdTasksGet(const ServicesJobsJobIdTasksGetRequest& Request, const FServicesJobsJobIdTasksGetDelegate& Delegate /*= FServicesJobsJobIdTasksGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnServicesJobsJobIdTasksGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnServicesJobsJobIdTasksGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FServicesJobsJobIdTasksGetDelegate Delegate) const
{
	ServicesJobsJobIdTasksGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ServicesJobsMonitorsGet(const ServicesJobsMonitorsGetRequest& Request, const FServicesJobsMonitorsGetDelegate& Delegate /*= FServicesJobsMonitorsGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnServicesJobsMonitorsGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnServicesJobsMonitorsGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FServicesJobsMonitorsGetDelegate Delegate) const
{
	ServicesJobsMonitorsGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ServicesJobsStartNowJobIdPost(const ServicesJobsStartNowJobIdPostRequest& Request, const FServicesJobsStartNowJobIdPostDelegate& Delegate /*= FServicesJobsStartNowJobIdPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnServicesJobsStartNowJobIdPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnServicesJobsStartNowJobIdPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FServicesJobsStartNowJobIdPostDelegate Delegate) const
{
	ServicesJobsStartNowJobIdPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ServicesLoaderExtractPost(const ServicesLoaderExtractPostRequest& Request, const FServicesLoaderExtractPostDelegate& Delegate /*= FServicesLoaderExtractPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnServicesLoaderExtractPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnServicesLoaderExtractPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FServicesLoaderExtractPostDelegate Delegate) const
{
	ServicesLoaderExtractPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ServicesLoaderJobIdTasksTaskIdFailurelogGet(const ServicesLoaderJobIdTasksTaskIdFailurelogGetRequest& Request, const FServicesLoaderJobIdTasksTaskIdFailurelogGetDelegate& Delegate /*= FServicesLoaderJobIdTasksTaskIdFailurelogGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnServicesLoaderJobIdTasksTaskIdFailurelogGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnServicesLoaderJobIdTasksTaskIdFailurelogGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FServicesLoaderJobIdTasksTaskIdFailurelogGetDelegate Delegate) const
{
	ServicesLoaderJobIdTasksTaskIdFailurelogGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ServicesLoaderJobIdTasksTaskIdResultsGet(const ServicesLoaderJobIdTasksTaskIdResultsGetRequest& Request, const FServicesLoaderJobIdTasksTaskIdResultsGetDelegate& Delegate /*= FServicesLoaderJobIdTasksTaskIdResultsGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnServicesLoaderJobIdTasksTaskIdResultsGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnServicesLoaderJobIdTasksTaskIdResultsGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FServicesLoaderJobIdTasksTaskIdResultsGetDelegate Delegate) const
{
	ServicesLoaderJobIdTasksTaskIdResultsGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ServicesLoaderJobIdTasksTaskIdResultsRenditionsGet(const ServicesLoaderJobIdTasksTaskIdResultsRenditionsGetRequest& Request, const FServicesLoaderJobIdTasksTaskIdResultsRenditionsGetDelegate& Delegate /*= FServicesLoaderJobIdTasksTaskIdResultsRenditionsGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnServicesLoaderJobIdTasksTaskIdResultsRenditionsGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnServicesLoaderJobIdTasksTaskIdResultsRenditionsGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FServicesLoaderJobIdTasksTaskIdResultsRenditionsGetDelegate Delegate) const
{
	ServicesLoaderJobIdTasksTaskIdResultsRenditionsGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ServicesLoaderJobIdTasksTaskIdSuccesslogGet(const ServicesLoaderJobIdTasksTaskIdSuccesslogGetRequest& Request, const FServicesLoaderJobIdTasksTaskIdSuccesslogGetDelegate& Delegate /*= FServicesLoaderJobIdTasksTaskIdSuccesslogGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnServicesLoaderJobIdTasksTaskIdSuccesslogGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnServicesLoaderJobIdTasksTaskIdSuccesslogGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FServicesLoaderJobIdTasksTaskIdSuccesslogGetDelegate Delegate) const
{
	ServicesLoaderJobIdTasksTaskIdSuccesslogGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ServicesLoaderLoadPost(const ServicesLoaderLoadPostRequest& Request, const FServicesLoaderLoadPostDelegate& Delegate /*= FServicesLoaderLoadPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnServicesLoaderLoadPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnServicesLoaderLoadPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FServicesLoaderLoadPostDelegate Delegate) const
{
	ServicesLoaderLoadPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ServicesPackageActionsValidatePost(const ServicesPackageActionsValidatePostRequest& Request, const FServicesPackageActionsValidatePostDelegate& Delegate /*= FServicesPackageActionsValidatePostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnServicesPackageActionsValidatePostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnServicesPackageActionsValidatePostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FServicesPackageActionsValidatePostDelegate Delegate) const
{
	ServicesPackageActionsValidatePostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ServicesPackagePost(const ServicesPackagePostRequest& Request, const FServicesPackagePostDelegate& Delegate /*= FServicesPackagePostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnServicesPackagePostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnServicesPackagePostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FServicesPackagePostDelegate Delegate) const
{
	ServicesPackagePostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ServicesPackagePut(const ServicesPackagePutRequest& Request, const FServicesPackagePutDelegate& Delegate /*= FServicesPackagePutDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnServicesPackagePutResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnServicesPackagePutResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FServicesPackagePutDelegate Delegate) const
{
	ServicesPackagePutResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ServicesQueuesGet(const ServicesQueuesGetRequest& Request, const FServicesQueuesGetDelegate& Delegate /*= FServicesQueuesGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnServicesQueuesGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnServicesQueuesGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FServicesQueuesGetDelegate Delegate) const
{
	ServicesQueuesGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ServicesQueuesQueueNameActionsDisableDeliveryPut(const ServicesQueuesQueueNameActionsDisableDeliveryPutRequest& Request, const FServicesQueuesQueueNameActionsDisableDeliveryPutDelegate& Delegate /*= FServicesQueuesQueueNameActionsDisableDeliveryPutDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnServicesQueuesQueueNameActionsDisableDeliveryPutResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnServicesQueuesQueueNameActionsDisableDeliveryPutResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FServicesQueuesQueueNameActionsDisableDeliveryPutDelegate Delegate) const
{
	ServicesQueuesQueueNameActionsDisableDeliveryPutResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ServicesQueuesQueueNameActionsEnableDeliveryPut(const ServicesQueuesQueueNameActionsEnableDeliveryPutRequest& Request, const FServicesQueuesQueueNameActionsEnableDeliveryPutDelegate& Delegate /*= FServicesQueuesQueueNameActionsEnableDeliveryPutDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnServicesQueuesQueueNameActionsEnableDeliveryPutResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnServicesQueuesQueueNameActionsEnableDeliveryPutResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FServicesQueuesQueueNameActionsEnableDeliveryPutDelegate Delegate) const
{
	ServicesQueuesQueueNameActionsEnableDeliveryPutResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ServicesQueuesQueueNameActionsResetPut(const ServicesQueuesQueueNameActionsResetPutRequest& Request, const FServicesQueuesQueueNameActionsResetPutDelegate& Delegate /*= FServicesQueuesQueueNameActionsResetPutDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnServicesQueuesQueueNameActionsResetPutResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnServicesQueuesQueueNameActionsResetPutResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FServicesQueuesQueueNameActionsResetPutDelegate Delegate) const
{
	ServicesQueuesQueueNameActionsResetPutResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ServicesQueuesQueueNameGet(const ServicesQueuesQueueNameGetRequest& Request, const FServicesQueuesQueueNameGetDelegate& Delegate /*= FServicesQueuesQueueNameGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnServicesQueuesQueueNameGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnServicesQueuesQueueNameGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FServicesQueuesQueueNameGetDelegate Delegate) const
{
	ServicesQueuesQueueNameGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ServicesVobjectVaultPackageVPackageIdActionsValidatePost(const ServicesVobjectVaultPackageVPackageIdActionsValidatePostRequest& Request, const FServicesVobjectVaultPackageVPackageIdActionsValidatePostDelegate& Delegate /*= FServicesVobjectVaultPackageVPackageIdActionsValidatePostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnServicesVobjectVaultPackageVPackageIdActionsValidatePostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnServicesVobjectVaultPackageVPackageIdActionsValidatePostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FServicesVobjectVaultPackageVPackageIdActionsValidatePostDelegate Delegate) const
{
	ServicesVobjectVaultPackageVPackageIdActionsValidatePostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::SessionDelete(const SessionDeleteRequest& Request, const FSessionDeleteDelegate& Delegate /*= FSessionDeleteDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnSessionDeleteResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnSessionDeleteResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSessionDeleteDelegate Delegate) const
{
	SessionDeleteResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::UicodeDistributionsDistributionNameCodeGet(const UicodeDistributionsDistributionNameCodeGetRequest& Request, const FUicodeDistributionsDistributionNameCodeGetDelegate& Delegate /*= FUicodeDistributionsDistributionNameCodeGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnUicodeDistributionsDistributionNameCodeGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnUicodeDistributionsDistributionNameCodeGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUicodeDistributionsDistributionNameCodeGetDelegate Delegate) const
{
	UicodeDistributionsDistributionNameCodeGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::UicodeDistributionsDistributionNameDelete(const UicodeDistributionsDistributionNameDeleteRequest& Request, const FUicodeDistributionsDistributionNameDeleteDelegate& Delegate /*= FUicodeDistributionsDistributionNameDeleteDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnUicodeDistributionsDistributionNameDeleteResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnUicodeDistributionsDistributionNameDeleteResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUicodeDistributionsDistributionNameDeleteDelegate Delegate) const
{
	UicodeDistributionsDistributionNameDeleteResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::UicodeDistributionsDistributionNameGet(const UicodeDistributionsDistributionNameGetRequest& Request, const FUicodeDistributionsDistributionNameGetDelegate& Delegate /*= FUicodeDistributionsDistributionNameGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnUicodeDistributionsDistributionNameGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnUicodeDistributionsDistributionNameGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUicodeDistributionsDistributionNameGetDelegate Delegate) const
{
	UicodeDistributionsDistributionNameGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::UicodeDistributionsGet(const UicodeDistributionsGetRequest& Request, const FUicodeDistributionsGetDelegate& Delegate /*= FUicodeDistributionsGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnUicodeDistributionsGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnUicodeDistributionsGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUicodeDistributionsGetDelegate Delegate) const
{
	UicodeDistributionsGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::UicodeDistributionsPost(const UicodeDistributionsPostRequest& Request, const FUicodeDistributionsPostDelegate& Delegate /*= FUicodeDistributionsPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnUicodeDistributionsPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnUicodeDistributionsPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUicodeDistributionsPostDelegate Delegate) const
{
	UicodeDistributionsPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::VobjectVaultPackageVPackageIdActionsDeployPost(const VobjectVaultPackageVPackageIdActionsDeployPostRequest& Request, const FVobjectVaultPackageVPackageIdActionsDeployPostDelegate& Delegate /*= FVobjectVaultPackageVPackageIdActionsDeployPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnVobjectVaultPackageVPackageIdActionsDeployPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnVobjectVaultPackageVPackageIdActionsDeployPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FVobjectVaultPackageVPackageIdActionsDeployPostDelegate Delegate) const
{
	VobjectVaultPackageVPackageIdActionsDeployPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::VobjectVaultPackageVPackageIdActionsDeployResultsGet(const VobjectVaultPackageVPackageIdActionsDeployResultsGetRequest& Request, const FVobjectVaultPackageVPackageIdActionsDeployResultsGetDelegate& Delegate /*= FVobjectVaultPackageVPackageIdActionsDeployResultsGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnVobjectVaultPackageVPackageIdActionsDeployResultsGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnVobjectVaultPackageVPackageIdActionsDeployResultsGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FVobjectVaultPackageVPackageIdActionsDeployResultsGetDelegate Delegate) const
{
	VobjectVaultPackageVPackageIdActionsDeployResultsGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::VobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet(const VobjectsCascadedeleteResultsObjectNameJobStatusJobIdGetRequest& Request, const FVobjectsCascadedeleteResultsObjectNameJobStatusJobIdGetDelegate& Delegate /*= FVobjectsCascadedeleteResultsObjectNameJobStatusJobIdGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnVobjectsCascadedeleteResultsObjectNameJobStatusJobIdGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnVobjectsCascadedeleteResultsObjectNameJobStatusJobIdGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FVobjectsCascadedeleteResultsObjectNameJobStatusJobIdGetDelegate Delegate) const
{
	VobjectsCascadedeleteResultsObjectNameJobStatusJobIdGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::VobjectsDeepcopyResultsObjectNameJobStatusJobIdGet(const VobjectsDeepcopyResultsObjectNameJobStatusJobIdGetRequest& Request, const FVobjectsDeepcopyResultsObjectNameJobStatusJobIdGetDelegate& Delegate /*= FVobjectsDeepcopyResultsObjectNameJobStatusJobIdGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnVobjectsDeepcopyResultsObjectNameJobStatusJobIdGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnVobjectsDeepcopyResultsObjectNameJobStatusJobIdGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FVobjectsDeepcopyResultsObjectNameJobStatusJobIdGetDelegate Delegate) const
{
	VobjectsDeepcopyResultsObjectNameJobStatusJobIdGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::VobjectsEdlItemVActionsCreateplaceholderPost(const VobjectsEdlItemVActionsCreateplaceholderPostRequest& Request, const FVobjectsEdlItemVActionsCreateplaceholderPostDelegate& Delegate /*= FVobjectsEdlItemVActionsCreateplaceholderPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnVobjectsEdlItemVActionsCreateplaceholderPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnVobjectsEdlItemVActionsCreateplaceholderPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FVobjectsEdlItemVActionsCreateplaceholderPostDelegate Delegate) const
{
	VobjectsEdlItemVActionsCreateplaceholderPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::VobjectsMergesJobIdLogGet(const VobjectsMergesJobIdLogGetRequest& Request, const FVobjectsMergesJobIdLogGetDelegate& Delegate /*= FVobjectsMergesJobIdLogGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnVobjectsMergesJobIdLogGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnVobjectsMergesJobIdLogGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FVobjectsMergesJobIdLogGetDelegate Delegate) const
{
	VobjectsMergesJobIdLogGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::VobjectsMergesJobIdResultsGet(const VobjectsMergesJobIdResultsGetRequest& Request, const FVobjectsMergesJobIdResultsGetDelegate& Delegate /*= FVobjectsMergesJobIdResultsGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnVobjectsMergesJobIdResultsGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnVobjectsMergesJobIdResultsGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FVobjectsMergesJobIdResultsGetDelegate Delegate) const
{
	VobjectsMergesJobIdResultsGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::VobjectsMergesJobIdStatusGet(const VobjectsMergesJobIdStatusGetRequest& Request, const FVobjectsMergesJobIdStatusGetDelegate& Delegate /*= FVobjectsMergesJobIdStatusGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnVobjectsMergesJobIdStatusGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnVobjectsMergesJobIdStatusGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FVobjectsMergesJobIdStatusGetDelegate Delegate) const
{
	VobjectsMergesJobIdStatusGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::VobjectsObjectNameActionsActionNamePost(const VobjectsObjectNameActionsActionNamePostRequest& Request, const FVobjectsObjectNameActionsActionNamePostDelegate& Delegate /*= FVobjectsObjectNameActionsActionNamePostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnVobjectsObjectNameActionsActionNamePostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnVobjectsObjectNameActionsActionNamePostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FVobjectsObjectNameActionsActionNamePostDelegate Delegate) const
{
	VobjectsObjectNameActionsActionNamePostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::VobjectsObjectNameActionsChangetypePost(const VobjectsObjectNameActionsChangetypePostRequest& Request, const FVobjectsObjectNameActionsChangetypePostDelegate& Delegate /*= FVobjectsObjectNameActionsChangetypePostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnVobjectsObjectNameActionsChangetypePostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnVobjectsObjectNameActionsChangetypePostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FVobjectsObjectNameActionsChangetypePostDelegate Delegate) const
{
	VobjectsObjectNameActionsChangetypePostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::VobjectsObjectNameActionsMergePost(const VobjectsObjectNameActionsMergePostRequest& Request, const FVobjectsObjectNameActionsMergePostDelegate& Delegate /*= FVobjectsObjectNameActionsMergePostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnVobjectsObjectNameActionsMergePostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnVobjectsObjectNameActionsMergePostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FVobjectsObjectNameActionsMergePostDelegate Delegate) const
{
	VobjectsObjectNameActionsMergePostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::VobjectsObjectNameActionsRecalculaterollupsGet(const VobjectsObjectNameActionsRecalculaterollupsGetRequest& Request, const FVobjectsObjectNameActionsRecalculaterollupsGetDelegate& Delegate /*= FVobjectsObjectNameActionsRecalculaterollupsGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnVobjectsObjectNameActionsRecalculaterollupsGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnVobjectsObjectNameActionsRecalculaterollupsGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FVobjectsObjectNameActionsRecalculaterollupsGetDelegate Delegate) const
{
	VobjectsObjectNameActionsRecalculaterollupsGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::VobjectsObjectNameActionsRecalculaterollupsPost(const VobjectsObjectNameActionsRecalculaterollupsPostRequest& Request, const FVobjectsObjectNameActionsRecalculaterollupsPostDelegate& Delegate /*= FVobjectsObjectNameActionsRecalculaterollupsPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnVobjectsObjectNameActionsRecalculaterollupsPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnVobjectsObjectNameActionsRecalculaterollupsPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FVobjectsObjectNameActionsRecalculaterollupsPostDelegate Delegate) const
{
	VobjectsObjectNameActionsRecalculaterollupsPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::VobjectsObjectNameActionsUpdatecorporatecurrencyPut(const VobjectsObjectNameActionsUpdatecorporatecurrencyPutRequest& Request, const FVobjectsObjectNameActionsUpdatecorporatecurrencyPutDelegate& Delegate /*= FVobjectsObjectNameActionsUpdatecorporatecurrencyPutDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnVobjectsObjectNameActionsUpdatecorporatecurrencyPutResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnVobjectsObjectNameActionsUpdatecorporatecurrencyPutResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FVobjectsObjectNameActionsUpdatecorporatecurrencyPutDelegate Delegate) const
{
	VobjectsObjectNameActionsUpdatecorporatecurrencyPutResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::VobjectsObjectNameAttachmentsBatchDelete(const VobjectsObjectNameAttachmentsBatchDeleteRequest& Request, const FVobjectsObjectNameAttachmentsBatchDeleteDelegate& Delegate /*= FVobjectsObjectNameAttachmentsBatchDeleteDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnVobjectsObjectNameAttachmentsBatchDeleteResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnVobjectsObjectNameAttachmentsBatchDeleteResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FVobjectsObjectNameAttachmentsBatchDeleteDelegate Delegate) const
{
	VobjectsObjectNameAttachmentsBatchDeleteResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::VobjectsObjectNameAttachmentsBatchPost(const VobjectsObjectNameAttachmentsBatchPostRequest& Request, const FVobjectsObjectNameAttachmentsBatchPostDelegate& Delegate /*= FVobjectsObjectNameAttachmentsBatchPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnVobjectsObjectNameAttachmentsBatchPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnVobjectsObjectNameAttachmentsBatchPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FVobjectsObjectNameAttachmentsBatchPostDelegate Delegate) const
{
	VobjectsObjectNameAttachmentsBatchPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::VobjectsObjectNameAttachmentsBatchPut(const VobjectsObjectNameAttachmentsBatchPutRequest& Request, const FVobjectsObjectNameAttachmentsBatchPutDelegate& Delegate /*= FVobjectsObjectNameAttachmentsBatchPutDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnVobjectsObjectNameAttachmentsBatchPutResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnVobjectsObjectNameAttachmentsBatchPutResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FVobjectsObjectNameAttachmentsBatchPutDelegate Delegate) const
{
	VobjectsObjectNameAttachmentsBatchPutResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::VobjectsObjectNameDelete(const VobjectsObjectNameDeleteRequest& Request, const FVobjectsObjectNameDeleteDelegate& Delegate /*= FVobjectsObjectNameDeleteDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnVobjectsObjectNameDeleteResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnVobjectsObjectNameDeleteResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FVobjectsObjectNameDeleteDelegate Delegate) const
{
	VobjectsObjectNameDeleteResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::VobjectsObjectNameIdRolesRoleNameGet(const VobjectsObjectNameIdRolesRoleNameGetRequest& Request, const FVobjectsObjectNameIdRolesRoleNameGetDelegate& Delegate /*= FVobjectsObjectNameIdRolesRoleNameGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnVobjectsObjectNameIdRolesRoleNameGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnVobjectsObjectNameIdRolesRoleNameGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FVobjectsObjectNameIdRolesRoleNameGetDelegate Delegate) const
{
	VobjectsObjectNameIdRolesRoleNameGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::VobjectsObjectNameObjectRecordIdActionsActionNameGet(const VobjectsObjectNameObjectRecordIdActionsActionNameGetRequest& Request, const FVobjectsObjectNameObjectRecordIdActionsActionNameGetDelegate& Delegate /*= FVobjectsObjectNameObjectRecordIdActionsActionNameGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnVobjectsObjectNameObjectRecordIdActionsActionNameGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnVobjectsObjectNameObjectRecordIdActionsActionNameGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FVobjectsObjectNameObjectRecordIdActionsActionNameGetDelegate Delegate) const
{
	VobjectsObjectNameObjectRecordIdActionsActionNameGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::VobjectsObjectNameObjectRecordIdActionsActionNamePost(const VobjectsObjectNameObjectRecordIdActionsActionNamePostRequest& Request, const FVobjectsObjectNameObjectRecordIdActionsActionNamePostDelegate& Delegate /*= FVobjectsObjectNameObjectRecordIdActionsActionNamePostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnVobjectsObjectNameObjectRecordIdActionsActionNamePostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnVobjectsObjectNameObjectRecordIdActionsActionNamePostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FVobjectsObjectNameObjectRecordIdActionsActionNamePostDelegate Delegate) const
{
	VobjectsObjectNameObjectRecordIdActionsActionNamePostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::VobjectsObjectNameObjectRecordIdActionsCascadedeletePost(const VobjectsObjectNameObjectRecordIdActionsCascadedeletePostRequest& Request, const FVobjectsObjectNameObjectRecordIdActionsCascadedeletePostDelegate& Delegate /*= FVobjectsObjectNameObjectRecordIdActionsCascadedeletePostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnVobjectsObjectNameObjectRecordIdActionsCascadedeletePostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnVobjectsObjectNameObjectRecordIdActionsCascadedeletePostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FVobjectsObjectNameObjectRecordIdActionsCascadedeletePostDelegate Delegate) const
{
	VobjectsObjectNameObjectRecordIdActionsCascadedeletePostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::VobjectsObjectNameObjectRecordIdActionsDeepcopyPost(const VobjectsObjectNameObjectRecordIdActionsDeepcopyPostRequest& Request, const FVobjectsObjectNameObjectRecordIdActionsDeepcopyPostDelegate& Delegate /*= FVobjectsObjectNameObjectRecordIdActionsDeepcopyPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnVobjectsObjectNameObjectRecordIdActionsDeepcopyPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnVobjectsObjectNameObjectRecordIdActionsDeepcopyPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FVobjectsObjectNameObjectRecordIdActionsDeepcopyPostDelegate Delegate) const
{
	VobjectsObjectNameObjectRecordIdActionsDeepcopyPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::VobjectsObjectNameObjectRecordIdActionsGet(const VobjectsObjectNameObjectRecordIdActionsGetRequest& Request, const FVobjectsObjectNameObjectRecordIdActionsGetDelegate& Delegate /*= FVobjectsObjectNameObjectRecordIdActionsGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnVobjectsObjectNameObjectRecordIdActionsGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnVobjectsObjectNameObjectRecordIdActionsGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FVobjectsObjectNameObjectRecordIdActionsGetDelegate Delegate) const
{
	VobjectsObjectNameObjectRecordIdActionsGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::VobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet(const VobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGetRequest& Request, const FVobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGetDelegate& Delegate /*= FVobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnVobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnVobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FVobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGetDelegate Delegate) const
{
	VobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::VobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost(const VobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePostRequest& Request, const FVobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePostDelegate& Delegate /*= FVobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnVobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnVobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FVobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePostDelegate Delegate) const
{
	VobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::VobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet(const VobjectsObjectNameObjectRecordIdAttachmentFieldsFileGetRequest& Request, const FVobjectsObjectNameObjectRecordIdAttachmentFieldsFileGetDelegate& Delegate /*= FVobjectsObjectNameObjectRecordIdAttachmentFieldsFileGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnVobjectsObjectNameObjectRecordIdAttachmentFieldsFileGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnVobjectsObjectNameObjectRecordIdAttachmentFieldsFileGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FVobjectsObjectNameObjectRecordIdAttachmentFieldsFileGetDelegate Delegate) const
{
	VobjectsObjectNameObjectRecordIdAttachmentFieldsFileGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete(const VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDeleteRequest& Request, const FVobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDeleteDelegate& Delegate /*= FVobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDeleteDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnVobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDeleteResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnVobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDeleteResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FVobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDeleteDelegate Delegate) const
{
	VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDeleteResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet(const VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGetRequest& Request, const FVobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGetDelegate& Delegate /*= FVobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnVobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnVobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FVobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGetDelegate Delegate) const
{
	VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut(const VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPutRequest& Request, const FVobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPutDelegate& Delegate /*= FVobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPutDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnVobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPutResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnVobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPutResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FVobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPutDelegate Delegate) const
{
	VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPutResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete(const VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteRequest& Request, const FVobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteDelegate& Delegate /*= FVobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnVobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnVobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FVobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteDelegate Delegate) const
{
	VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(const VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetRequest& Request, const FVobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetDelegate& Delegate /*= FVobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnVobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnVobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FVobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetDelegate Delegate) const
{
	VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet(const VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGetRequest& Request, const FVobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGetDelegate& Delegate /*= FVobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnVobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnVobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FVobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGetDelegate Delegate) const
{
	VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost(const VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPostRequest& Request, const FVobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPostDelegate& Delegate /*= FVobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnVobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnVobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FVobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPostDelegate Delegate) const
{
	VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet(const VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGetRequest& Request, const FVobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGetDelegate& Delegate /*= FVobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnVobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnVobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FVobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGetDelegate Delegate) const
{
	VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::VobjectsObjectNameObjectRecordIdAttachmentsFileGet(const VobjectsObjectNameObjectRecordIdAttachmentsFileGetRequest& Request, const FVobjectsObjectNameObjectRecordIdAttachmentsFileGetDelegate& Delegate /*= FVobjectsObjectNameObjectRecordIdAttachmentsFileGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnVobjectsObjectNameObjectRecordIdAttachmentsFileGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnVobjectsObjectNameObjectRecordIdAttachmentsFileGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FVobjectsObjectNameObjectRecordIdAttachmentsFileGetDelegate Delegate) const
{
	VobjectsObjectNameObjectRecordIdAttachmentsFileGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::VobjectsObjectNameObjectRecordIdAttachmentsGet(const VobjectsObjectNameObjectRecordIdAttachmentsGetRequest& Request, const FVobjectsObjectNameObjectRecordIdAttachmentsGetDelegate& Delegate /*= FVobjectsObjectNameObjectRecordIdAttachmentsGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnVobjectsObjectNameObjectRecordIdAttachmentsGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnVobjectsObjectNameObjectRecordIdAttachmentsGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FVobjectsObjectNameObjectRecordIdAttachmentsGetDelegate Delegate) const
{
	VobjectsObjectNameObjectRecordIdAttachmentsGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::VobjectsObjectNameObjectRecordIdAttachmentsPost(const VobjectsObjectNameObjectRecordIdAttachmentsPostRequest& Request, const FVobjectsObjectNameObjectRecordIdAttachmentsPostDelegate& Delegate /*= FVobjectsObjectNameObjectRecordIdAttachmentsPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnVobjectsObjectNameObjectRecordIdAttachmentsPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnVobjectsObjectNameObjectRecordIdAttachmentsPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FVobjectsObjectNameObjectRecordIdAttachmentsPostDelegate Delegate) const
{
	VobjectsObjectNameObjectRecordIdAttachmentsPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::VobjectsObjectNameObjectRecordIdAudittrailGet(const VobjectsObjectNameObjectRecordIdAudittrailGetRequest& Request, const FVobjectsObjectNameObjectRecordIdAudittrailGetDelegate& Delegate /*= FVobjectsObjectNameObjectRecordIdAudittrailGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnVobjectsObjectNameObjectRecordIdAudittrailGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnVobjectsObjectNameObjectRecordIdAudittrailGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FVobjectsObjectNameObjectRecordIdAudittrailGetDelegate Delegate) const
{
	VobjectsObjectNameObjectRecordIdAudittrailGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::VobjectsObjectNameObjectRecordIdGet(const VobjectsObjectNameObjectRecordIdGetRequest& Request, const FVobjectsObjectNameObjectRecordIdGetDelegate& Delegate /*= FVobjectsObjectNameObjectRecordIdGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnVobjectsObjectNameObjectRecordIdGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnVobjectsObjectNameObjectRecordIdGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FVobjectsObjectNameObjectRecordIdGetDelegate Delegate) const
{
	VobjectsObjectNameObjectRecordIdGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::VobjectsObjectNamePost(const VobjectsObjectNamePostRequest& Request, const FVobjectsObjectNamePostDelegate& Delegate /*= FVobjectsObjectNamePostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnVobjectsObjectNamePostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnVobjectsObjectNamePostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FVobjectsObjectNamePostDelegate Delegate) const
{
	VobjectsObjectNamePostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::VobjectsObjectNamePut(const VobjectsObjectNamePutRequest& Request, const FVobjectsObjectNamePutDelegate& Delegate /*= FVobjectsObjectNamePutDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnVobjectsObjectNamePutResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnVobjectsObjectNamePutResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FVobjectsObjectNamePutDelegate Delegate) const
{
	VobjectsObjectNamePutResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::VobjectsObjectNameRolesDelete(const VobjectsObjectNameRolesDeleteRequest& Request, const FVobjectsObjectNameRolesDeleteDelegate& Delegate /*= FVobjectsObjectNameRolesDeleteDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnVobjectsObjectNameRolesDeleteResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnVobjectsObjectNameRolesDeleteResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FVobjectsObjectNameRolesDeleteDelegate Delegate) const
{
	VobjectsObjectNameRolesDeleteResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::VobjectsObjectNameRolesPost(const VobjectsObjectNameRolesPostRequest& Request, const FVobjectsObjectNameRolesPostDelegate& Delegate /*= FVobjectsObjectNameRolesPostDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnVobjectsObjectNameRolesPostResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnVobjectsObjectNameRolesPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FVobjectsObjectNameRolesPostDelegate Delegate) const
{
	VobjectsObjectNameRolesPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::VobjectsOutboundPackageVPackageIdDependenciesGet(const VobjectsOutboundPackageVPackageIdDependenciesGetRequest& Request, const FVobjectsOutboundPackageVPackageIdDependenciesGetDelegate& Delegate /*= FVobjectsOutboundPackageVPackageIdDependenciesGetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIDefaultApi::OnVobjectsOutboundPackageVPackageIdDependenciesGetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnVobjectsOutboundPackageVPackageIdDependenciesGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FVobjectsOutboundPackageVPackageIdDependenciesGetDelegate Delegate) const
{
	VobjectsOutboundPackageVPackageIdDependenciesGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

}
