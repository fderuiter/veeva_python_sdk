/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.DefaultApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * The latest GA version of the Vault REST API.
 * Version: 1.0.0
* Generator version: 7.14.0
 * Generated by: org.openapitools.codegen.languages.JavascriptClosureAngularClientCodegen
 */
goog.provide('API.Client.DefaultApi');

goog.require('API.Client._vobjects__object_name__actions_merge_post_request_inner');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.DefaultApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('DefaultApiBasePath') ?
                   /** @type {!string} */ ($injector.get('DefaultApiBasePath')) :
                   'http://}/api/v25.1';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('DefaultApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('DefaultApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.DefaultApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * Retrieve API Versions
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.apiGet = function(opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/api/';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Content File
 * 
 * @param {!string} componentTypeAndRecordName The component type of the record followed by the name of the record from which to retrieve the content file. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Formattedoutput.my_formatted_output__c&#x60;.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.apiMdlComponentsComponentTypeAndRecordNameFilesGet = function(componentTypeAndRecordName, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/api/mdl/components/{component_type_and_record_name}/files'
      .replace('{' + 'component_type_and_record_name' + '}', String(componentTypeAndRecordName));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'componentTypeAndRecordName' is set
  if (!componentTypeAndRecordName) {
    throw new Error('Missing required parameter componentTypeAndRecordName when calling apiMdlComponentsComponentTypeAndRecordNameFilesGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Component Record (MDL)
 * 
 * @param {!string} componentTypeAndRecordName The component type name (&#x60;Picklist&#x60;, &#x60;Docfield&#x60;, &#x60;Doctype&#x60;, etc.) followed by the name of the record from which to retrieve metadata. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Picklist.color__c&#x60;. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.apiMdlComponentsComponentTypeAndRecordNameGet = function(componentTypeAndRecordName, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/api/mdl/components/{component_type_and_record_name}'
      .replace('{' + 'component_type_and_record_name' + '}', String(componentTypeAndRecordName));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'componentTypeAndRecordName' is set
  if (!componentTypeAndRecordName) {
    throw new Error('Missing required parameter componentTypeAndRecordName when calling apiMdlComponentsComponentTypeAndRecordNameGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Asynchronous MDL Script Results
 * 
 * @param {!string} jobId 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.apiMdlExecuteAsyncJobIdResultsGet = function(jobId, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/api/mdl/execute_async/{job_id}/results'
      .replace('{' + 'job_id' + '}', String(jobId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'jobId' is set
  if (!jobId) {
    throw new Error('Missing required parameter jobId when calling apiMdlExecuteAsyncJobIdResultsGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Execute MDL Script Asynchronously
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.apiMdlExecuteAsyncPost = function(opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/api/mdl/execute_async';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Execute MDL Script
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.apiMdlExecutePost = function(opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/api/mdl/execute';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Upload Content File
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.apiMdlFilesPost = function(opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/api/mdl/files';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Audit Details
 * 
 * @param {!string} auditTrailType The name of the specified audit type (document_audit_trail, object_audit_trail, etc). Use the Retrieve Audit Types API to retrieve types available in your Vault. Requests for login_audit_trail only accept one request per user at a time.
 * @param {!string=} opt_startDate Specify a start date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days.
 * @param {!string=} opt_endDate Specify an end date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days.
 * @param {!string=} opt_allDates Set to true to request audit information for all dates. You must leave start_date and end_date blank when requesting an export of a full audit trail.
 * @param {!string=} opt_formatResult To request a downloadable CSV file of your audit details, use csv. The response contains a jobId to retrieve the job status, which contains a link to download the CSV file. If omitted, the API returns a JSON response and does not start a job. If all_dates is true, this parameter is required.
 * @param {!string=} opt_limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
 * @param {!string=} opt_offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0.
 * @param {!string=} opt_objects This is an optional parameter when specifying object_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more object names to retrieve their audit details. For example, objects&#x3D;product__v,country__v. If omitted, defaults to all objects.
 * @param {!string=} opt_events This is an optional parameter when specifying object_audit_trail or document_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more audit events to retrieve their audit details. For example, events&#x3D;Edit,Delete,TaskAssignment. If omitted, defaults to all audit events. See Vault Help for full lists of object audit events and document audit events.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.audittrailAuditTrailTypeGet = function(auditTrailType, opt_startDate, opt_endDate, opt_allDates, opt_formatResult, opt_limit, opt_offset, opt_objects, opt_events, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/audittrail/{audit_trail_type}'
      .replace('{' + 'audit_trail_type' + '}', String(auditTrailType));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'auditTrailType' is set
  if (!auditTrailType) {
    throw new Error('Missing required parameter auditTrailType when calling audittrailAuditTrailTypeGet');
  }
  if (opt_startDate !== undefined) {
    queryParameters['start_date'] = opt_startDate;
  }

  if (opt_endDate !== undefined) {
    queryParameters['end_date'] = opt_endDate;
  }

  if (opt_allDates !== undefined) {
    queryParameters['all_dates'] = opt_allDates;
  }

  if (opt_formatResult !== undefined) {
    queryParameters['format_result'] = opt_formatResult;
  }

  if (opt_limit !== undefined) {
    queryParameters['limit'] = opt_limit;
  }

  if (opt_offset !== undefined) {
    queryParameters['offset'] = opt_offset;
  }

  if (opt_objects !== undefined) {
    queryParameters['objects'] = opt_objects;
  }

  if (opt_events !== undefined) {
    queryParameters['events'] = opt_events;
  }

  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Authentication Type Discovery
 * 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.authDiscoveryPost = function(opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/auth/discovery';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * OAuth 2.0 / OpenID Connect
 * 
 * @param {!string} oathOidcProfileId 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.authOauthSessionOathOidcProfileIdPost = function(oathOidcProfileId, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/auth/oauth/session/{oath_oidc_profile_id}'
      .replace('{' + 'oath_oidc_profile_id' + '}', String(oathOidcProfileId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'oathOidcProfileId' is set
  if (!oathOidcProfileId) {
    throw new Error('Missing required parameter oathOidcProfileId when calling authOauthSessionOathOidcProfileIdPost');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * User Name and Password
 * 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.authPost = function(opt_contentType, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/auth';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Content-Type'] = opt_contentType;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Delete Single Source Code File
 * 
 * @param {!string} className The fully qualified class name of your file.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.codeClassNameDelete = function(className, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/code/{class_name}'
      .replace('{' + 'class_name' + '}', String(className));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'className' is set
  if (!className) {
    throw new Error('Missing required parameter className when calling codeClassNameDelete');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Disable Vault Extension
 * 
 * @param {!string} className The fully qualified class name of your file.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.codeClassNameDisablePut = function(className, opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/code/{class_name}/disable'
      .replace('{' + 'class_name' + '}', String(className));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'className' is set
  if (!className) {
    throw new Error('Missing required parameter className when calling codeClassNameDisablePut');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Enable Vault Extension
 * 
 * @param {!string} className The fully qualified class name of your file.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.codeClassNameEnablePut = function(className, opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/code/{class_name}/enable'
      .replace('{' + 'class_name' + '}', String(className));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'className' is set
  if (!className) {
    throw new Error('Missing required parameter className when calling codeClassNameEnablePut');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Single Source Code File
 * 
 * @param {!string} className The fully qualified class name of your file.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.codeClassNameGet = function(className, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/code/{class_name}'
      .replace('{' + 'class_name' + '}', String(className));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'className' is set
  if (!className) {
    throw new Error('Missing required parameter className when calling codeClassNameGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve All Profiling Sessions
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.codeProfilerGet = function(opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/code/profiler';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Create Profiling Session
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.codeProfilerPost = function(opt_authorization, opt_contentType, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/code/profiler';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * End Profiling Session
 * 
 * @param {!string} sessionName The name of the session, for example,  baseline__c.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.codeProfilerSessionNameActionsEndPost = function(sessionName, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/code/profiler/{session_name}/actions/end'
      .replace('{' + 'session_name' + '}', String(sessionName));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'sessionName' is set
  if (!sessionName) {
    throw new Error('Missing required parameter sessionName when calling codeProfilerSessionNameActionsEndPost');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Delete Profiling Session
 * 
 * @param {!string} sessionName The name of the session, for example,  baseline__c.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.codeProfilerSessionNameDelete = function(sessionName, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/code/profiler/{session_name}'
      .replace('{' + 'session_name' + '}', String(sessionName));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'sessionName' is set
  if (!sessionName) {
    throw new Error('Missing required parameter sessionName when calling codeProfilerSessionNameDelete');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Profiling Session
 * 
 * @param {!string} sessionName The name of the session, for example,  baseline__c.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.codeProfilerSessionNameGet = function(sessionName, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/code/profiler/{session_name}'
      .replace('{' + 'session_name' + '}', String(sessionName));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'sessionName' is set
  if (!sessionName) {
    throw new Error('Missing required parameter sessionName when calling codeProfilerSessionNameGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Download Profiling Session Results
 * 
 * @param {!string} sessionName The name of the session, for example,  baseline__c.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.codeProfilerSessionNameResultsGet = function(sessionName, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/code/profiler/{session_name}/results'
      .replace('{' + 'session_name' + '}', String(sessionName));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'sessionName' is set
  if (!sessionName) {
    throw new Error('Missing required parameter sessionName when calling codeProfilerSessionNameResultsGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Add or Replace Single Source Code File
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.codePut = function(opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/code';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Specific Root Nodes
 * 
 * @param {!string} edlHierarchyOrTemplate Choose to retrieve either edl_hierarchy__v or edl_template__v
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.compositesTreesEdlHierarchyOrTemplateActionsListnodesPost = function(edlHierarchyOrTemplate, opt_authorization, opt_contentType, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/composites/trees/{edl_hierarchy_or_template}/actions/listnodes'
      .replace('{' + 'edl_hierarchy_or_template' + '}', String(edlHierarchyOrTemplate));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'edlHierarchyOrTemplate' is set
  if (!edlHierarchyOrTemplate) {
    throw new Error('Missing required parameter edlHierarchyOrTemplate when calling compositesTreesEdlHierarchyOrTemplateActionsListnodesPost');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve All Root Nodes
 * 
 * @param {!string} edlHierarchyOrTemplate 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.compositesTreesEdlHierarchyOrTemplateGet = function(edlHierarchyOrTemplate, opt_authorization, opt_contentType, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/composites/trees/{edl_hierarchy_or_template}'
      .replace('{' + 'edl_hierarchy_or_template' + '}', String(edlHierarchyOrTemplate));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'edlHierarchyOrTemplate' is set
  if (!edlHierarchyOrTemplate) {
    throw new Error('Missing required parameter edlHierarchyOrTemplate when calling compositesTreesEdlHierarchyOrTemplateGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve a Node&#39;s Children
 * 
 * @param {!string} parentNodeId The ID of a parent node in the hierarchy.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.compositesTreesEdlHierarchyVParentNodeIdChildrenGet = function(parentNodeId, opt_authorization, opt_contentType, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/composites/trees/edl_hierarchy__v/{parent_node_id}/children'
      .replace('{' + 'parent_node_id' + '}', String(parentNodeId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'parentNodeId' is set
  if (!parentNodeId) {
    throw new Error('Missing required parameter parentNodeId when calling compositesTreesEdlHierarchyVParentNodeIdChildrenGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Update Node Order
 * 
 * @param {!string} parentNodeId The ID of a parent node in the hierarchy.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.compositesTreesEdlHierarchyVParentNodeIdChildrenPut = function(parentNodeId, opt_authorization, opt_contentType, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/composites/trees/edl_hierarchy__v/{parent_node_id}/children'
      .replace('{' + 'parent_node_id' + '}', String(parentNodeId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'parentNodeId' is set
  if (!parentNodeId) {
    throw new Error('Missing required parameter parentNodeId when calling compositesTreesEdlHierarchyVParentNodeIdChildrenPut');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Component Record (XML/JSON)
 * 
 * @param {!string} componentTypeAndRecordName The component type name (&#x60;Picklist&#x60;, &#x60;Docfield&#x60;, &#x60;Doctype&#x60;, etc.) followed by the name of the record from which to retrieve metadata. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Picklist.color__c&#x60;. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint.
 * @param {!string=} opt_loc When localized (translated) strings are available, retrieve them by setting loc to true.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.configurationComponentTypeAndRecordNameGet = function(componentTypeAndRecordName, opt_loc, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/configuration/{component_type_and_record_name}'
      .replace('{' + 'component_type_and_record_name' + '}', String(componentTypeAndRecordName));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'componentTypeAndRecordName' is set
  if (!componentTypeAndRecordName) {
    throw new Error('Missing required parameter componentTypeAndRecordName when calling configurationComponentTypeAndRecordNameGet');
  }
  if (opt_loc !== undefined) {
    queryParameters['loc'] = opt_loc;
  }

  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Component Record Collection
 * 
 * @param {!string} componentType 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.configurationComponentTypeGet = function(componentType, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/configuration/{component_type}'
      .replace('{' + 'component_type' + '}', String(componentType));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'componentType' is set
  if (!componentType) {
    throw new Error('Missing required parameter componentType when calling configurationComponentTypeGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Details from a Specific Object
 * 
 * @param {!string} objectNameAndObjectType The object name followed by the object type in the format &#x60;Objecttype.{object_name}.{object_type}&#x60;. For example, &#x60;Objecttype.product__v.base__v&#x60;.
 * @param {!string=} opt_loc When localized (translated) strings are available, retrieve them by setting loc to true.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.configurationObjectNameAndObjectTypeGet = function(objectNameAndObjectType, opt_loc, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/configuration/{object_name_and_object_type}'
      .replace('{' + 'object_name_and_object_type' + '}', String(objectNameAndObjectType));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'objectNameAndObjectType' is set
  if (!objectNameAndObjectType) {
    throw new Error('Missing required parameter objectNameAndObjectType when calling configurationObjectNameAndObjectTypeGet');
  }
  if (opt_loc !== undefined) {
    queryParameters['loc'] = opt_loc;
  }

  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Details from All Object Types
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.configurationObjecttypeGet = function(opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/configuration/Objecttype';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Delete Lifecycle Role Assignment Override Rules
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.configurationRoleAssignmentRuleDelete = function(opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/configuration/role_assignment_rule';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Lifecycle Role Assignment Rules (Default &amp; Override)
 * 
 * @param {!string=} opt_lifecycleV Include the name of the lifecycle from which to retrieve information. For example: lifecycle_v&#x3D;general_lifecycle__c
 * @param {!string=} opt_roleV Include the name of the role from which to retrieve information. For example: role__v&#x3D;editor__c
 * @param {!string=} opt_productV Include the ID/name of a specific product to see product-based override rules to default users/allowed users for the lifecycle role. For example: product__v&#x3D;0PR0011001 or product__v.name__v&#x3D;CholeCap
 * @param {!string=} opt_countryV Include the ID/name of a specific country to see country-based override rules to default users/allowed users for the lifecycle role. For example: country__v&#x3D;0CR0022002 or country__v.name__v&#x3D;United States
 * @param {!string=} opt_studyV In eTMF Vaults only. Include the ID/name of a specific study to see study-based override rules to default users/allowed users for the lifecycle role. For example: study__v&#x3D;0ST0021J01 or study__v.name__v&#x3D;CholeCap Study
 * @param {!string=} opt_studyCountryV In eTMF Vaults only. Include the ID/name of a specific study country to see study country-based override rules to default users/allowed users for the lifecycle role. For example: study_country__v&#x3D;0SC0001001 or study_country__v.name__v&#x3D;Germany
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.configurationRoleAssignmentRuleGet = function(opt_lifecycleV, opt_roleV, opt_productV, opt_countryV, opt_studyV, opt_studyCountryV, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/configuration/role_assignment_rule';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_lifecycleV !== undefined) {
    queryParameters['lifecycle__v'] = opt_lifecycleV;
  }

  if (opt_roleV !== undefined) {
    queryParameters['role__v'] = opt_roleV;
  }

  if (opt_productV !== undefined) {
    queryParameters['product__v'] = opt_productV;
  }

  if (opt_countryV !== undefined) {
    queryParameters['country__v'] = opt_countryV;
  }

  if (opt_studyV !== undefined) {
    queryParameters['study__v'] = opt_studyV;
  }

  if (opt_studyCountryV !== undefined) {
    queryParameters['study_country__v'] = opt_studyCountryV;
  }

  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Create Lifecycle Role Assignment Override Rules
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.configurationRoleAssignmentRulePost = function(opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/configuration/role_assignment_rule';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Update Lifecycle Role Assignment Rules (Default &amp; Override)
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.configurationRoleAssignmentRulePut = function(opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/configuration/role_assignment_rule';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Initiate Delegated Session
 * 
 * @param {!string=} opt_authorization The sessionId of the currently authenticated user who will initiate the delegated session. Cannot be a delegated_sessionid.
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.delegationLoginPost = function(opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/delegation/login';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Delegations
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.delegationVaultsGet = function(opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/delegation/vaults';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Session Keep Alive
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.keepAlivePost = function(opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/keep-alive';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Limits on Objects
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.limitsGet = function(opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/limits';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Download Daily API Usage
 * 
 * @param {!string=} opt_date The day to retrieve the API Usage log. Date is in UTC and follows the format YYYY-MM-DD. Date cannot be more than 30 days in the past.
 * @param {!string=} opt_logFormat Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP. 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.logsApiUsageGet = function(opt_date, opt_logFormat, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/logs/api_usage';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_date !== undefined) {
    queryParameters['date'] = opt_date;
  }

  if (opt_logFormat !== undefined) {
    queryParameters['log_format'] = opt_logFormat;
  }

  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve All Debug Logs
 * 
 * @param {!string=} opt_userId Filter results to retrieve the debug log for this user ID only. If omitted, this request retrieves debug logs for all users in the Vault.
 * @param {!boolean=} opt_includeInactive Set to &#x60;true&#x60; to include debug log sessions with a status of &#x60;inactive__sys&#x60; in the response. If omitted, defaults to &#x60;false&#x60; and inactive sessions are not included in the response.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.logsCodeDebugGet = function(opt_userId, opt_includeInactive, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/logs/code/debug';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_userId !== undefined) {
    queryParameters['user_id'] = opt_userId;
  }

  if (opt_includeInactive !== undefined) {
    queryParameters['include_inactive'] = opt_includeInactive;
  }

  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Delete Debug Log
 * 
 * @param {!string} id The ID of the debug log to delete.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.logsCodeDebugIdActionsResetDelete = function(id, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/logs/code/debug/{id}/actions/reset'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling logsCodeDebugIdActionsResetDelete');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Reset Debug Log
 * 
 * @param {!string} id The ID of the debug log to delete.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.logsCodeDebugIdActionsResetPost = function(id, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/logs/code/debug/{id}/actions/reset'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling logsCodeDebugIdActionsResetPost');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Download Debug Log Files
 * 
 * @param {!string} id The ID of the debug log to download.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.logsCodeDebugIdFilesGet = function(id, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/logs/code/debug/{id}/files'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling logsCodeDebugIdFilesGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Single Debug Log
 * 
 * @param {!string} id The ID of the debug log to retrieve.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.logsCodeDebugIdGet = function(id, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/logs/code/debug/{id}'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling logsCodeDebugIdGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Create Debug Log
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.logsCodeDebugPost = function(opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/logs/code/debug';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Download SDK Runtime Log
 * 
 * @param {!string=} opt_date 
 * @param {!string=} opt_logFormat Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP. 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.logsCodeRuntimeGet = function(opt_date, opt_logFormat, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/logs/code/runtime';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_date !== undefined) {
    queryParameters['date'] = opt_date;
  }

  if (opt_logFormat !== undefined) {
    queryParameters['log_format'] = opt_logFormat;
  }

  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Import Bulk Translation File
 * 
 * @param {!string} messageType The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.messagesMessageTypeActionsImportPost = function(messageType, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/messages/{message_type}/actions/import'
      .replace('{' + 'message_type' + '}', String(messageType));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'messageType' is set
  if (!messageType) {
    throw new Error('Missing required parameter messageType when calling messagesMessageTypeActionsImportPost');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Export Bulk Translation File
 * 
 * @param {!string} messageType The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys.
 * @param {!string} lang A valid language code value, for example, en. Retrieve available values from the Admin Key (admin_key__sys) field on the Language (language__sys) object. Active and Inactive languages are both valid. 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.messagesMessageTypeLanguageLangActionsExportPost = function(messageType, lang, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/messages/{message_type}/language/{lang}/actions/export'
      .replace('{' + 'message_type' + '}', String(messageType))
      .replace('{' + 'lang' + '}', String(lang));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'messageType' is set
  if (!messageType) {
    throw new Error('Missing required parameter messageType when calling messagesMessageTypeLanguageLangActionsExportPost');
  }
  // verify required parameter 'lang' is set
  if (!lang) {
    throw new Error('Missing required parameter lang when calling messagesMessageTypeLanguageLangActionsExportPost');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Audit Metadata
 * 
 * @param {!string} auditTrailType The name of the specified audit type (document_audit_trail, object_audit_trail, etc).
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.metadataAudittrailAuditTrailTypeGet = function(auditTrailType, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/metadata/audittrail/{audit_trail_type}'
      .replace('{' + 'audit_trail_type' + '}', String(auditTrailType));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'auditTrailType' is set
  if (!auditTrailType) {
    throw new Error('Missing required parameter auditTrailType when calling metadataAudittrailAuditTrailTypeGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Audit Types
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.metadataAudittrailGet = function(opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/metadata/audittrail';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Component Type Metadata
 * 
 * @param {!string} componentType The component type name (Picklist, Docfield, Doctype, etc.).
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.metadataComponentsComponentTypeGet = function(componentType, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/metadata/components/{component_type}'
      .replace('{' + 'component_type' + '}', String(componentType));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'componentType' is set
  if (!componentType) {
    throw new Error('Missing required parameter componentType when calling metadataComponentsComponentTypeGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve All Component Metadata
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.metadataComponentsGet = function(opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/metadata/components';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Binder Template Node Metadata
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.metadataObjectsBindersTemplatesBindernodesGet = function(opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/metadata/objects/binders/templates/bindernodes';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Binder Template Metadata
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.metadataObjectsBindersTemplatesGet = function(opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/metadata/objects/binders/templates';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Annotation Placemark Type Metadata
 * 
 * @param {!string} placemarkType The name of the placemark type. For example, sticky__sys.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGet = function(placemarkType, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/metadata/objects/documents/annotations/placemarks/types/{placemark_type}'
      .replace('{' + 'placemark_type' + '}', String(placemarkType));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'placemarkType' is set
  if (!placemarkType) {
    throw new Error('Missing required parameter placemarkType when calling metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Annotation Reference Type Metadata
 * 
 * @param {!string} referenceType 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGet = function(referenceType, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/metadata/objects/documents/annotations/references/types/{reference_type}'
      .replace('{' + 'reference_type' + '}', String(referenceType));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'referenceType' is set
  if (!referenceType) {
    throw new Error('Missing required parameter referenceType when calling metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Annotation Type Metadata
 * 
 * @param {!string} annotationType The name of the annotation type. Valid annotation types include: &#x60;note__sys&#x60; &#x60;line__sys&#x60; &#x60;document_link__sys&#x60; &#x60;permalink_link__sys&#x60; &#x60;anchor__sys&#x60; &#x60;reply__sys&#x60; &#x60;external_link__sys&#x60;  The following annotation types are only valid in Medical and PromoMats Vaults:  &#x60;suggested_link__sys&#x60; &#x60;approved_link__sys&#x60; &#x60;auto_link__sys&#x60; &#x60;keyword_link__sys&#x60;
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGet = function(annotationType, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/metadata/objects/documents/annotations/types/{annotation_type}'
      .replace('{' + 'annotation_type' + '}', String(annotationType));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'annotationType' is set
  if (!annotationType) {
    throw new Error('Missing required parameter annotationType when calling metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Document Event SubType Metadata
 * 
 * @param {!string} eventType The event type. For example, distribution__v.
 * @param {!string} eventSubtype The event subtype. For example, approved_email__v.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet = function(eventType, eventSubtype, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/metadata/objects/documents/events/{event_type}/types/{event_subtype}'
      .replace('{' + 'event_type' + '}', String(eventType))
      .replace('{' + 'event_subtype' + '}', String(eventSubtype));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'eventType' is set
  if (!eventType) {
    throw new Error('Missing required parameter eventType when calling metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet');
  }
  // verify required parameter 'eventSubtype' is set
  if (!eventSubtype) {
    throw new Error('Missing required parameter eventSubtype when calling metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Document Event Types and Subtypes
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.metadataObjectsDocumentsEventsGet = function(opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/metadata/objects/documents/events';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Document Lock Metadata
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.metadataObjectsDocumentsLockGet = function(opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/metadata/objects/documents/lock';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Common Document Fields
 * 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.metadataObjectsDocumentsPropertiesFindCommonPost = function(opt_contentType, opt_accept, opt_authorization, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/metadata/objects/documents/properties/find_common';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Content-Type'] = opt_contentType;

  headerParams['Accept'] = opt_accept;

  headerParams['Authorization'] = opt_authorization;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve All Document Fields
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.metadataObjectsDocumentsPropertiesGet = function(opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/metadata/objects/documents/properties';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Document Template Metadata
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.metadataObjectsDocumentsTemplatesGet = function(opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/metadata/objects/documents/templates';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve All Document Types
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.metadataObjectsDocumentsTypesGet = function(opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/metadata/objects/documents/types';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Document Type
 * 
 * @param {!string} type The document type. See Retrieve Document Types.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.metadataObjectsDocumentsTypesTypeGet = function(type, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/metadata/objects/documents/types/{type}'
      .replace('{' + 'type' + '}', String(type));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'type' is set
  if (!type) {
    throw new Error('Missing required parameter type when calling metadataObjectsDocumentsTypesTypeGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Document Type Relationships
 * 
 * @param {!string} type The document type. See Retrieve Document Types.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.metadataObjectsDocumentsTypesTypeRelationshipsGet = function(type, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/metadata/objects/documents/types/{type}/relationships'
      .replace('{' + 'type' + '}', String(type));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'type' is set
  if (!type) {
    throw new Error('Missing required parameter type when calling metadataObjectsDocumentsTypesTypeRelationshipsGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Document Classification
 * 
 * @param {!string} type The document type. See Retrieve Document Types.
 * @param {!string} subtype The document subtype. See Retrieve Document Types.
 * @param {!string} classification The document classification. See Retrieve Document Types.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet = function(type, subtype, classification, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/metadata/objects/documents/types/{type}/subtypes/{subtype}/classifications/{classification}'
      .replace('{' + 'type' + '}', String(type))
      .replace('{' + 'subtype' + '}', String(subtype))
      .replace('{' + 'classification' + '}', String(classification));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'type' is set
  if (!type) {
    throw new Error('Missing required parameter type when calling metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet');
  }
  // verify required parameter 'subtype' is set
  if (!subtype) {
    throw new Error('Missing required parameter subtype when calling metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet');
  }
  // verify required parameter 'classification' is set
  if (!classification) {
    throw new Error('Missing required parameter classification when calling metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Document Subtype
 * 
 * @param {!string} type The document type. See Retrieve Document Types.
 * @param {!string} subtype The document subtype. See Retrieve Document Types.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet = function(type, subtype, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/metadata/objects/documents/types/{type}/subtypes/{subtype}'
      .replace('{' + 'type' + '}', String(type))
      .replace('{' + 'subtype' + '}', String(subtype));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'type' is set
  if (!type) {
    throw new Error('Missing required parameter type when calling metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet');
  }
  // verify required parameter 'subtype' is set
  if (!subtype) {
    throw new Error('Missing required parameter subtype when calling metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Group Metadata
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.metadataObjectsGroupsGet = function(opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/metadata/objects/groups';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Security Policy Metadata
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.metadataObjectsSecuritypoliciesGet = function(opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/metadata/objects/securitypolicies';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve User Metadata
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.metadataObjectsUsersGet = function(opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/metadata/objects/users';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Archived Document Signature Metadata
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGet = function(opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/metadata/query/archived_documents/relationships/document_signature__sysr';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Document Signature Metadata
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.metadataQueryDocumentsRelationshipsDocumentSignatureSysrGet = function(opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/metadata/query/documents/relationships/document_signature__sysr';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Object Collection
 * 
 * @param {!boolean=} opt_loc To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.metadataVobjectsGet = function(opt_loc, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/metadata/vobjects';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_loc !== undefined) {
    queryParameters['loc'] = opt_loc;
  }

  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Cancel Raw Object Deployment
 * 
 * @param {!string} objectName 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.metadataVobjectsObjectNameActionsCanceldeploymentPost = function(objectName, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/metadata/vobjects/{object_name}/actions/canceldeployment'
      .replace('{' + 'object_name' + '}', String(objectName));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'objectName' is set
  if (!objectName) {
    throw new Error('Missing required parameter objectName when calling metadataVobjectsObjectNameActionsCanceldeploymentPost');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Object Field Metadata
 * 
 * @param {!string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
 * @param {!string} objectFieldName The object field name value (id, name__v, external_id__v, etc.).
 * @param {!boolean=} opt_loc To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.metadataVobjectsObjectNameFieldsObjectFieldNameGet = function(objectName, objectFieldName, opt_loc, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/metadata/vobjects/{object_name}/fields/{object_field_name}'
      .replace('{' + 'object_name' + '}', String(objectName))
      .replace('{' + 'object_field_name' + '}', String(objectFieldName));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'objectName' is set
  if (!objectName) {
    throw new Error('Missing required parameter objectName when calling metadataVobjectsObjectNameFieldsObjectFieldNameGet');
  }
  // verify required parameter 'objectFieldName' is set
  if (!objectFieldName) {
    throw new Error('Missing required parameter objectFieldName when calling metadataVobjectsObjectNameFieldsObjectFieldNameGet');
  }
  if (opt_loc !== undefined) {
    queryParameters['loc'] = opt_loc;
  }

  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Object Metadata
 * 
 * @param {!string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
 * @param {!boolean=} opt_loc To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.metadataVobjectsObjectNameGet = function(objectName, opt_loc, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/metadata/vobjects/{object_name}'
      .replace('{' + 'object_name' + '}', String(objectName));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'objectName' is set
  if (!objectName) {
    throw new Error('Missing required parameter objectName when calling metadataVobjectsObjectNameGet');
  }
  if (opt_loc !== undefined) {
    queryParameters['loc'] = opt_loc;
  }

  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Page Layouts
 * 
 * @param {!string} objectName 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.metadataVobjectsObjectNamePageLayoutsGet = function(objectName, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/metadata/vobjects/{object_name}/page_layouts'
      .replace('{' + 'object_name' + '}', String(objectName));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'objectName' is set
  if (!objectName) {
    throw new Error('Missing required parameter objectName when calling metadataVobjectsObjectNamePageLayoutsGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Page Layout Metadata
 * 
 * @param {!string} objectName The name of the object from which to retrieve page layout metadata.
 * @param {!string} layoutName The name of the page layout from which to retrieve metadata.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.metadataVobjectsObjectNamePageLayoutsLayoutNameGet = function(objectName, layoutName, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/metadata/vobjects/{object_name}/page_layouts/{layout_name}'
      .replace('{' + 'object_name' + '}', String(objectName))
      .replace('{' + 'layout_name' + '}', String(layoutName));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'objectName' is set
  if (!objectName) {
    throw new Error('Missing required parameter objectName when calling metadataVobjectsObjectNamePageLayoutsLayoutNameGet');
  }
  // verify required parameter 'layoutName' is set
  if (!layoutName) {
    throw new Error('Missing required parameter layoutName when calling metadataVobjectsObjectNamePageLayoutsLayoutNameGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Email Notification Histories
 * 
 * @param {!string=} opt_startDate Specify a start date to retrieve notification history. This date cannot be more than 2 years ago. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the start of the day. If start_date is omitted entirely, defaults to the start of the previous day. If you’ve specified a start_date, you must also specify an end_date.
 * @param {!string=} opt_endDate Specify an end date to retrieve notification history. This date cannot be more than 30 days away from the specified start_date. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the time of the API request. If you’ve specified an end_date, you must also specify a start_date.
 * @param {!boolean=} opt_allDates Set to true to request notification history for all dates. This is the same as requesting a full CSV export from the Vault UI. When requesting a full notification history, you must leave start_date and end_date blank and set format_result to csv. You can request an export of notification history for all_dates once every 24 hours.
 * @param {!string=} opt_formatResult To request a downloadable CSV file of your notification history, set this parameter to csv. The response contains a jobId to retrieve the job status, which provides a link to download the CSV file. If omitted, the API returns a JSON response with notification history and does not start a job. If all_dates is true, this parameter must be csv.
 * @param {!string=} opt_limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
 * @param {!string=} opt_offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. If omitted, defaults to 0.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.notificationsHistoriesGet = function(opt_startDate, opt_endDate, opt_allDates, opt_formatResult, opt_limit, opt_offset, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/notifications/histories';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_startDate !== undefined) {
    queryParameters['start_date'] = opt_startDate;
  }

  if (opt_endDate !== undefined) {
    queryParameters['end_date'] = opt_endDate;
  }

  if (opt_allDates !== undefined) {
    queryParameters['all_dates'] = opt_allDates;
  }

  if (opt_formatResult !== undefined) {
    queryParameters['format_result'] = opt_formatResult;
  }

  if (opt_limit !== undefined) {
    queryParameters['limit'] = opt_limit;
  }

  if (opt_offset !== undefined) {
    queryParameters['offset'] = opt_offset;
  }

  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Bulk Workflow Action Details
 * 
 * @param {!string} action 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectWorkflowActionsActionGet = function(action, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/object/workflow/actions/{action}'
      .replace('{' + 'action' + '}', String(action));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'action' is set
  if (!action) {
    throw new Error('Missing required parameter action when calling objectWorkflowActionsActionGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Initiate Workflow Actions on Multiple Workflows
 * 
 * @param {!string} action 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectWorkflowActionsActionPost = function(action, opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/object/workflow/actions/{action}'
      .replace('{' + 'action' + '}', String(action));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'action' is set
  if (!action) {
    throw new Error('Missing required parameter action when calling objectWorkflowActionsActionPost');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Cancel Workflow Tasks
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectWorkflowActionsCanceltasksPost = function(opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/object/workflow/actions/canceltasks';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Cancel Workflows
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectWorkflowActionsCancelworkflowsPost = function(opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/object/workflow/actions/cancelworkflows';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Bulk Workflow Actions
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectWorkflowActionsGet = function(opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/object/workflow/actions';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Reassign Workflow Tasks
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectWorkflowActionsReassigntasksPost = function(opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/object/workflow/actions/reassigntasks';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Replace Workflow Owner
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectWorkflowActionsReplaceworkflowownerPost = function(opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/object/workflow/actions/replaceworkflowowner';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Binder Export Results
 * 
 * @param {!string} jobId The id value of the requested export job. This is returned with the export binder requests above.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsBindersActionsExportJobIdResultsGet = function(jobId, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/binders/actions/export/{job_id}/results'
      .replace('{' + 'job_id' + '}', String(jobId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'jobId' is set
  if (!jobId) {
    throw new Error('Missing required parameter jobId when calling objectsBindersActionsExportJobIdResultsGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Export Binder (Latest Version)
 * 
 * @param {!string} binderId The binder id field value.
 * @param {!boolean=} opt_source to include source content or not
 * @param {!string=} opt_renditiontype to include viewable renditions
 * @param {!string=} opt_docversion to include all major versions
 * @param {!string=} opt_attachments to include all versions of attachments
 * @param {!string=} opt_export configurable filename metadata
 * @param {!boolean=} opt_docfield to exclude document metadata csv
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsBindersBinderIdActionsExportPost = function(binderId, opt_source, opt_renditiontype, opt_docversion, opt_attachments, opt_export, opt_docfield, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/binders/{binder_id}/actions/export'
      .replace('{' + 'binder_id' + '}', String(binderId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'binderId' is set
  if (!binderId) {
    throw new Error('Missing required parameter binderId when calling objectsBindersBinderIdActionsExportPost');
  }
  if (opt_source !== undefined) {
    queryParameters['source'] = opt_source;
  }

  if (opt_renditiontype !== undefined) {
    queryParameters['renditiontype'] = opt_renditiontype;
  }

  if (opt_docversion !== undefined) {
    queryParameters['docversion'] = opt_docversion;
  }

  if (opt_attachments !== undefined) {
    queryParameters['attachments'] = opt_attachments;
  }

  if (opt_export !== undefined) {
    queryParameters['export'] = opt_export;
  }

  if (opt_docfield !== undefined) {
    queryParameters['docfield'] = opt_docfield;
  }

  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Refresh Binder Auto-Filing
 * 
 * @param {!string} binderId The binder id field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsBindersBinderIdActionsPost = function(binderId, opt_authorization, opt_contentType, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/binders/{binder_id}/actions'
      .replace('{' + 'binder_id' + '}', String(binderId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'binderId' is set
  if (!binderId) {
    throw new Error('Missing required parameter binderId when calling objectsBindersBinderIdActionsPost');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Update Binding Rule
 * 
 * @param {!string} binderId The binder id field value.
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsBindersBinderIdBindingRulePut = function(binderId, opt_contentType, opt_accept, opt_authorization, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/binders/{binder_id}/binding_rule'
      .replace('{' + 'binder_id' + '}', String(binderId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'binderId' is set
  if (!binderId) {
    throw new Error('Missing required parameter binderId when calling objectsBindersBinderIdBindingRulePut');
  }
  headerParams['Content-Type'] = opt_contentType;

  headerParams['Accept'] = opt_accept;

  headerParams['Authorization'] = opt_authorization;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Delete Binder
 * 
 * @param {!string} binderId The binder id field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsBindersBinderIdDelete = function(binderId, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/binders/{binder_id}'
      .replace('{' + 'binder_id' + '}', String(binderId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'binderId' is set
  if (!binderId) {
    throw new Error('Missing required parameter binderId when calling objectsBindersBinderIdDelete');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Update Binder Document Binding Rule
 * 
 * @param {!string} binderId The binder id field value.
 * @param {!string} nodeId The binder node id field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsBindersBinderIdDocumentsNodeIdBindingRulePut = function(binderId, nodeId, opt_authorization, opt_contentType, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/binders/{binder_id}/documents/{node_id}/binding_rule'
      .replace('{' + 'binder_id' + '}', String(binderId))
      .replace('{' + 'node_id' + '}', String(nodeId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'binderId' is set
  if (!binderId) {
    throw new Error('Missing required parameter binderId when calling objectsBindersBinderIdDocumentsNodeIdBindingRulePut');
  }
  // verify required parameter 'nodeId' is set
  if (!nodeId) {
    throw new Error('Missing required parameter nodeId when calling objectsBindersBinderIdDocumentsNodeIdBindingRulePut');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Add Document to Binder
 * 
 * @param {!string} binderId The binder id field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsBindersBinderIdDocumentsPost = function(binderId, opt_authorization, opt_contentType, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/binders/{binder_id}/documents'
      .replace('{' + 'binder_id' + '}', String(binderId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'binderId' is set
  if (!binderId) {
    throw new Error('Missing required parameter binderId when calling objectsBindersBinderIdDocumentsPost');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Remove Document from Binder
 * 
 * @param {!string} binderId The binder id field value.
 * @param {!string} sectionId The binder node id field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsBindersBinderIdDocumentsSectionIdDelete = function(binderId, sectionId, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/binders/{binder_id}/documents/{section_id}'
      .replace('{' + 'binder_id' + '}', String(binderId))
      .replace('{' + 'section_id' + '}', String(sectionId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'binderId' is set
  if (!binderId) {
    throw new Error('Missing required parameter binderId when calling objectsBindersBinderIdDocumentsSectionIdDelete');
  }
  // verify required parameter 'sectionId' is set
  if (!sectionId) {
    throw new Error('Missing required parameter sectionId when calling objectsBindersBinderIdDocumentsSectionIdDelete');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Move Document in Binder
 * 
 * @param {!string} binderId The binder id field value.
 * @param {!string} sectionId The binder node id field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsBindersBinderIdDocumentsSectionIdPut = function(binderId, sectionId, opt_authorization, opt_contentType, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/binders/{binder_id}/documents/{section_id}'
      .replace('{' + 'binder_id' + '}', String(binderId))
      .replace('{' + 'section_id' + '}', String(sectionId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'binderId' is set
  if (!binderId) {
    throw new Error('Missing required parameter binderId when calling objectsBindersBinderIdDocumentsSectionIdPut');
  }
  // verify required parameter 'sectionId' is set
  if (!sectionId) {
    throw new Error('Missing required parameter sectionId when calling objectsBindersBinderIdDocumentsSectionIdPut');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Binder
 * 
 * @param {!string} binderId The binder id field value.
 * @param {!string=} opt_depth To retrieve all information in all levels of the binder, set this to all. By default, only one level is returned.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsBindersBinderIdGet = function(binderId, opt_depth, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/binders/{binder_id}'
      .replace('{' + 'binder_id' + '}', String(binderId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'binderId' is set
  if (!binderId) {
    throw new Error('Missing required parameter binderId when calling objectsBindersBinderIdGet');
  }
  if (opt_depth !== undefined) {
    queryParameters['depth'] = opt_depth;
  }

  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Create Binder Version
 * 
 * @param {!string} binderId The binder id field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsBindersBinderIdPost = function(binderId, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/binders/{binder_id}'
      .replace('{' + 'binder_id' + '}', String(binderId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'binderId' is set
  if (!binderId) {
    throw new Error('Missing required parameter binderId when calling objectsBindersBinderIdPost');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Update Binder
 * 
 * @param {!string} binderId The binder id field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsBindersBinderIdPut = function(binderId, opt_authorization, opt_contentType, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/binders/{binder_id}'
      .replace('{' + 'binder_id' + '}', String(binderId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'binderId' is set
  if (!binderId) {
    throw new Error('Missing required parameter binderId when calling objectsBindersBinderIdPut');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Remove Users &amp; Groups from Roles on a Single Binder
 * 
 * @param {!string} binderId The id value of the binder from which to remove roles.
 * @param {!string} roleNameAndUserOrGroup The name of the role from which to remove the user or group followed by either &#x60;user&#x60; or &#x60;group&#x60;. The format is &#x60;{role_name}.{user_or_group}&#x60;. For example, &#x60;consumer__v.user&#x60;.
 * @param {!string} id The id value of the user or group to remove from the role.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete = function(binderId, roleNameAndUserOrGroup, id, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/binders/{binder_id}/roles/{role_name_and_user_or_group}/{id}'
      .replace('{' + 'binder_id' + '}', String(binderId))
      .replace('{' + 'role_name_and_user_or_group' + '}', String(roleNameAndUserOrGroup))
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'binderId' is set
  if (!binderId) {
    throw new Error('Missing required parameter binderId when calling objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete');
  }
  // verify required parameter 'roleNameAndUserOrGroup' is set
  if (!roleNameAndUserOrGroup) {
    throw new Error('Missing required parameter roleNameAndUserOrGroup when calling objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete');
  }
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Update Binder Section Binding Rule
 * 
 * @param {!string} binderId The binder id field value.
 * @param {!string} nodeId The binder node id field value.
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsBindersBinderIdSectionsNodeIdBindingRulePut = function(binderId, nodeId, opt_contentType, opt_accept, opt_authorization, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/binders/{binder_id}/sections/{node_id}/binding_rule'
      .replace('{' + 'binder_id' + '}', String(binderId))
      .replace('{' + 'node_id' + '}', String(nodeId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'binderId' is set
  if (!binderId) {
    throw new Error('Missing required parameter binderId when calling objectsBindersBinderIdSectionsNodeIdBindingRulePut');
  }
  // verify required parameter 'nodeId' is set
  if (!nodeId) {
    throw new Error('Missing required parameter nodeId when calling objectsBindersBinderIdSectionsNodeIdBindingRulePut');
  }
  headerParams['Content-Type'] = opt_contentType;

  headerParams['Accept'] = opt_accept;

  headerParams['Authorization'] = opt_authorization;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Update Binder Section
 * 
 * @param {!string} binderId The binder id field value.
 * @param {!string} nodeId The binder node id of the section.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsBindersBinderIdSectionsNodeIdPut = function(binderId, nodeId, opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/binders/{binder_id}/sections/{node_id}'
      .replace('{' + 'binder_id' + '}', String(binderId))
      .replace('{' + 'node_id' + '}', String(nodeId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'binderId' is set
  if (!binderId) {
    throw new Error('Missing required parameter binderId when calling objectsBindersBinderIdSectionsNodeIdPut');
  }
  // verify required parameter 'nodeId' is set
  if (!nodeId) {
    throw new Error('Missing required parameter nodeId when calling objectsBindersBinderIdSectionsNodeIdPut');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Create Binder Section
 * 
 * @param {!string} binderId The binder id field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsBindersBinderIdSectionsPost = function(binderId, opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/binders/{binder_id}/sections'
      .replace('{' + 'binder_id' + '}', String(binderId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'binderId' is set
  if (!binderId) {
    throw new Error('Missing required parameter binderId when calling objectsBindersBinderIdSectionsPost');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Delete Binder Section
 * 
 * @param {!string} binderId The binder id field value.
 * @param {!string} sectionId The binder node id field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsBindersBinderIdSectionsSectionIdDelete = function(binderId, sectionId, opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/binders/{binder_id}/sections/{section_id}'
      .replace('{' + 'binder_id' + '}', String(binderId))
      .replace('{' + 'section_id' + '}', String(sectionId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'binderId' is set
  if (!binderId) {
    throw new Error('Missing required parameter binderId when calling objectsBindersBinderIdSectionsSectionIdDelete');
  }
  // verify required parameter 'sectionId' is set
  if (!sectionId) {
    throw new Error('Missing required parameter sectionId when calling objectsBindersBinderIdSectionsSectionIdDelete');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Binder Sections
 * 
 * @param {!string} binderId The binder id field value.
 * @param {!string} sectionId The binder node id field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsBindersBinderIdSectionsSectionIdGet = function(binderId, sectionId, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/binders/{binder_id}/sections/{section_id}'
      .replace('{' + 'binder_id' + '}', String(binderId))
      .replace('{' + 'section_id' + '}', String(sectionId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'binderId' is set
  if (!binderId) {
    throw new Error('Missing required parameter binderId when calling objectsBindersBinderIdSectionsSectionIdGet');
  }
  // verify required parameter 'sectionId' is set
  if (!sectionId) {
    throw new Error('Missing required parameter sectionId when calling objectsBindersBinderIdSectionsSectionIdGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve All Binder Versions
 * 
 * @param {!string} binderId The binder id field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsBindersBinderIdVersionsGet = function(binderId, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/binders/{binder_id}/versions'
      .replace('{' + 'binder_id' + '}', String(binderId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'binderId' is set
  if (!binderId) {
    throw new Error('Missing required parameter binderId when calling objectsBindersBinderIdVersionsGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Export Binder (Specific Version)
 * 
 * @param {!string} binderId The binder id field value.
 * @param {!string} majorVersion The binder major_version_number__v field value.
 * @param {!string} minorVersion The binder minor_version_number__v field value.
 * @param {!boolean=} opt_source to include source content or not
 * @param {!string=} opt_renditiontype to include viewable renditions
 * @param {!string=} opt_docversion to include all major versions
 * @param {!string=} opt_attachments to include all versions of attachments
 * @param {!string=} opt_export configurable filename metadata
 * @param {!boolean=} opt_docfield to exclude document metadata csv
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost = function(binderId, majorVersion, minorVersion, opt_source, opt_renditiontype, opt_docversion, opt_attachments, opt_export, opt_docfield, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/actions/export'
      .replace('{' + 'binder_id' + '}', String(binderId))
      .replace('{' + 'major_version' + '}', String(majorVersion))
      .replace('{' + 'minor_version' + '}', String(minorVersion));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'binderId' is set
  if (!binderId) {
    throw new Error('Missing required parameter binderId when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost');
  }
  // verify required parameter 'majorVersion' is set
  if (!majorVersion) {
    throw new Error('Missing required parameter majorVersion when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost');
  }
  // verify required parameter 'minorVersion' is set
  if (!minorVersion) {
    throw new Error('Missing required parameter minorVersion when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost');
  }
  if (opt_source !== undefined) {
    queryParameters['source'] = opt_source;
  }

  if (opt_renditiontype !== undefined) {
    queryParameters['renditiontype'] = opt_renditiontype;
  }

  if (opt_docversion !== undefined) {
    queryParameters['docversion'] = opt_docversion;
  }

  if (opt_attachments !== undefined) {
    queryParameters['attachments'] = opt_attachments;
  }

  if (opt_export !== undefined) {
    queryParameters['export'] = opt_export;
  }

  if (opt_docfield !== undefined) {
    queryParameters['docfield'] = opt_docfield;
  }

  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Delete Binder Version
 * 
 * @param {!string} binderId The binder id field value.
 * @param {!string} majorVersion The binder major_version_number__v field value.
 * @param {!string} minorVersion The binder minor_version_number__v field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete = function(binderId, majorVersion, minorVersion, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}'
      .replace('{' + 'binder_id' + '}', String(binderId))
      .replace('{' + 'major_version' + '}', String(majorVersion))
      .replace('{' + 'minor_version' + '}', String(minorVersion));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'binderId' is set
  if (!binderId) {
    throw new Error('Missing required parameter binderId when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete');
  }
  // verify required parameter 'majorVersion' is set
  if (!majorVersion) {
    throw new Error('Missing required parameter majorVersion when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete');
  }
  // verify required parameter 'minorVersion' is set
  if (!minorVersion) {
    throw new Error('Missing required parameter minorVersion when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Binder Version
 * 
 * @param {!string} binderId The binder id field value.
 * @param {!string} majorVersion The binder major_version_number__v field value.
 * @param {!string} minorVersion The binder minor_version_number__v field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsBindersBinderIdVersionsMajorVersionMinorVersionGet = function(binderId, majorVersion, minorVersion, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}'
      .replace('{' + 'binder_id' + '}', String(binderId))
      .replace('{' + 'major_version' + '}', String(majorVersion))
      .replace('{' + 'minor_version' + '}', String(minorVersion));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'binderId' is set
  if (!binderId) {
    throw new Error('Missing required parameter binderId when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionGet');
  }
  // verify required parameter 'majorVersion' is set
  if (!majorVersion) {
    throw new Error('Missing required parameter majorVersion when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionGet');
  }
  // verify required parameter 'minorVersion' is set
  if (!minorVersion) {
    throw new Error('Missing required parameter minorVersion when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Update Binder Version
 * 
 * @param {!string} binderId The binder id field value.
 * @param {!string} majorVersion The binder major_version_number__v field value.
 * @param {!string} minorVersion The binder minor_version_number__v field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsBindersBinderIdVersionsMajorVersionMinorVersionPut = function(binderId, majorVersion, minorVersion, opt_authorization, opt_contentType, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}'
      .replace('{' + 'binder_id' + '}', String(binderId))
      .replace('{' + 'major_version' + '}', String(majorVersion))
      .replace('{' + 'minor_version' + '}', String(minorVersion));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'binderId' is set
  if (!binderId) {
    throw new Error('Missing required parameter binderId when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionPut');
  }
  // verify required parameter 'majorVersion' is set
  if (!majorVersion) {
    throw new Error('Missing required parameter majorVersion when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionPut');
  }
  // verify required parameter 'minorVersion' is set
  if (!minorVersion) {
    throw new Error('Missing required parameter minorVersion when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionPut');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Create Binder Relationship
 * 
 * @param {!string} binderId The binder id field value.
 * @param {!string} majorVersion The binder major_version_number__v field value.
 * @param {!string} minorVersion The binder minor_version_number__v field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost = function(binderId, majorVersion, minorVersion, opt_authorization, opt_contentType, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships'
      .replace('{' + 'binder_id' + '}', String(binderId))
      .replace('{' + 'major_version' + '}', String(majorVersion))
      .replace('{' + 'minor_version' + '}', String(minorVersion));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'binderId' is set
  if (!binderId) {
    throw new Error('Missing required parameter binderId when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost');
  }
  // verify required parameter 'majorVersion' is set
  if (!majorVersion) {
    throw new Error('Missing required parameter majorVersion when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost');
  }
  // verify required parameter 'minorVersion' is set
  if (!minorVersion) {
    throw new Error('Missing required parameter minorVersion when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Delete Binder Relationship
 * 
 * @param {!string} binderId The binder id field value.
 * @param {!string} majorVersion The binder major_version_number__v field value.
 * @param {!string} minorVersion The binder minor_version_number__v field value.
 * @param {!string} relationshipId The binder relationship id field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete = function(binderId, majorVersion, minorVersion, relationshipId, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}'
      .replace('{' + 'binder_id' + '}', String(binderId))
      .replace('{' + 'major_version' + '}', String(majorVersion))
      .replace('{' + 'minor_version' + '}', String(minorVersion))
      .replace('{' + 'relationship_id' + '}', String(relationshipId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'binderId' is set
  if (!binderId) {
    throw new Error('Missing required parameter binderId when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete');
  }
  // verify required parameter 'majorVersion' is set
  if (!majorVersion) {
    throw new Error('Missing required parameter majorVersion when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete');
  }
  // verify required parameter 'minorVersion' is set
  if (!minorVersion) {
    throw new Error('Missing required parameter minorVersion when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete');
  }
  // verify required parameter 'relationshipId' is set
  if (!relationshipId) {
    throw new Error('Missing required parameter relationshipId when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Binder Relationship
 * 
 * @param {!string} binderId The binder id field value.
 * @param {!string} majorVersion The binder major_version_number__v field value.
 * @param {!string} minorVersion The binder minor_version_number__v field value.
 * @param {!string} relationshipId The binder relationship id field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet = function(binderId, majorVersion, minorVersion, relationshipId, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}'
      .replace('{' + 'binder_id' + '}', String(binderId))
      .replace('{' + 'major_version' + '}', String(majorVersion))
      .replace('{' + 'minor_version' + '}', String(minorVersion))
      .replace('{' + 'relationship_id' + '}', String(relationshipId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'binderId' is set
  if (!binderId) {
    throw new Error('Missing required parameter binderId when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet');
  }
  // verify required parameter 'majorVersion' is set
  if (!majorVersion) {
    throw new Error('Missing required parameter majorVersion when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet');
  }
  // verify required parameter 'minorVersion' is set
  if (!minorVersion) {
    throw new Error('Missing required parameter minorVersion when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet');
  }
  // verify required parameter 'relationshipId' is set
  if (!relationshipId) {
    throw new Error('Missing required parameter relationshipId when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Binder Version Section
 * 
 * @param {!string} binderId The binder id field value.
 * @param {!string} majorVersion The binder major_version_number__v field value.
 * @param {!string} minorVersion The binder minor_version_number__v field value.
 * @param {!string} sectionId Retrieve all sections (documents and subsections) in a binder’s sub-level node. If not included, all sections from the binder’s top-level root node will be returned.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet = function(binderId, majorVersion, minorVersion, sectionId, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/sections/{section_id}'
      .replace('{' + 'binder_id' + '}', String(binderId))
      .replace('{' + 'major_version' + '}', String(majorVersion))
      .replace('{' + 'minor_version' + '}', String(minorVersion))
      .replace('{' + 'section_id' + '}', String(sectionId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'binderId' is set
  if (!binderId) {
    throw new Error('Missing required parameter binderId when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet');
  }
  // verify required parameter 'majorVersion' is set
  if (!majorVersion) {
    throw new Error('Missing required parameter majorVersion when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet');
  }
  // verify required parameter 'minorVersion' is set
  if (!minorVersion) {
    throw new Error('Missing required parameter minorVersion when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet');
  }
  // verify required parameter 'sectionId' is set
  if (!sectionId) {
    throw new Error('Missing required parameter sectionId when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve All Binder Roles
 * 
 * @param {!string} id 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsBindersIdRolesGet = function(id, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/binders/{id}/roles'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling objectsBindersIdRolesGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Assign Users &amp; Groups to Roles on a Single Binder
 * 
 * @param {!string} id 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsBindersIdRolesPost = function(id, opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/binders/{id}/roles'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling objectsBindersIdRolesPost');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Document Role
 * 
 * @param {!string} id The binder &#x60;id&#x60;.
 * @param {!string} roleName The name of the role to retrieve. For example, &#x60;owner__v&#x60;.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsBindersIdRolesRoleNameGet = function(id, roleName, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/binders/{id}/roles/{role_name}'
      .replace('{' + 'id' + '}', String(id))
      .replace('{' + 'role_name' + '}', String(roleName));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling objectsBindersIdRolesRoleNameGet');
  }
  // verify required parameter 'roleName' is set
  if (!roleName) {
    throw new Error('Missing required parameter roleName when calling objectsBindersIdRolesRoleNameGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Binder User Actions
 * 
 * @param {!string} id The binder id field value from which to retrieve available user actions.
 * @param {!string} majorVersion The major version number of the binder.
 * @param {!string} minorVersion The minor version number of the binder.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet = function(id, majorVersion, minorVersion, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions'
      .replace('{' + 'id' + '}', String(id))
      .replace('{' + 'major_version' + '}', String(majorVersion))
      .replace('{' + 'minor_version' + '}', String(minorVersion));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet');
  }
  // verify required parameter 'majorVersion' is set
  if (!majorVersion) {
    throw new Error('Missing required parameter majorVersion when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet');
  }
  // verify required parameter 'minorVersion' is set
  if (!minorVersion) {
    throw new Error('Missing required parameter minorVersion when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Binder Entry Criteria
 * 
 * @param {!string} id The binder id field value from which to retrieve available user actions.
 * @param {!string} majorVersion The major version number of the binder.
 * @param {!string} minorVersion The minor version number of the binder.
 * @param {!string} nameV The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet = function(id, majorVersion, minorVersion, nameV, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}/entry_requirements'
      .replace('{' + 'id' + '}', String(id))
      .replace('{' + 'major_version' + '}', String(majorVersion))
      .replace('{' + 'minor_version' + '}', String(minorVersion))
      .replace('{' + 'name__v' + '}', String(nameV));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet');
  }
  // verify required parameter 'majorVersion' is set
  if (!majorVersion) {
    throw new Error('Missing required parameter majorVersion when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet');
  }
  // verify required parameter 'minorVersion' is set
  if (!minorVersion) {
    throw new Error('Missing required parameter minorVersion when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet');
  }
  // verify required parameter 'nameV' is set
  if (!nameV) {
    throw new Error('Missing required parameter nameV when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Initiate Binder User Action
 * 
 * @param {!string} id The binder id field value from which to retrieve available user actions.
 * @param {!string} majorVersion The major version number of the binder.
 * @param {!string} minorVersion The minor version number of the binder.
 * @param {!string} nameV The action name__v field value to initiate. This is retrieved from the Retrieve User Action request.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut = function(id, majorVersion, minorVersion, nameV, opt_authorization, opt_contentType, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}'
      .replace('{' + 'id' + '}', String(id))
      .replace('{' + 'major_version' + '}', String(majorVersion))
      .replace('{' + 'minor_version' + '}', String(minorVersion))
      .replace('{' + 'name__v' + '}', String(nameV));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut');
  }
  // verify required parameter 'majorVersion' is set
  if (!majorVersion) {
    throw new Error('Missing required parameter majorVersion when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut');
  }
  // verify required parameter 'minorVersion' is set
  if (!minorVersion) {
    throw new Error('Missing required parameter minorVersion when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut');
  }
  // verify required parameter 'nameV' is set
  if (!nameV) {
    throw new Error('Missing required parameter nameV when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve User Actions on Multiple Binders
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsBindersLifecycleActionsPost = function(opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/binders/lifecycle_actions';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Initiate Bulk Binder User Actions
 * 
 * @param {!string} userActionName The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Binders endpoint.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsBindersLifecycleActionsUserActionNamePut = function(userActionName, opt_authorization, opt_contentType, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/binders/lifecycle_actions/{user_action_name}'
      .replace('{' + 'user_action_name' + '}', String(userActionName));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'userActionName' is set
  if (!userActionName) {
    throw new Error('Missing required parameter userActionName when calling objectsBindersLifecycleActionsUserActionNamePut');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Create Binder
 * 
 * @param {!boolean=} opt_async When creating a binder, the binder metadata is indexed synchronously by default. To process the indexing asynchronously, include a query parameter async set to true (objects/binders?async&#x3D;true). This helps speed up the response time from Vault when processing large amounts of data. 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsBindersPost = function(opt_async, opt_authorization, opt_contentType, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/binders';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_async !== undefined) {
    queryParameters['async'] = opt_async;
  }

  headerParams['Authorization'] = opt_authorization;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Binder Template Collection
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsBindersTemplatesGet = function(opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/binders/templates';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Create Binder Template
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsBindersTemplatesPost = function(opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/binders/templates';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Update Binder Template
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsBindersTemplatesPut = function(opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/binders/templates';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Binder Template Node Attributes
 * 
 * @param {!string} templateName The binder template name__v field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsBindersTemplatesTemplateNameBindernodesGet = function(templateName, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/binders/templates/{template_name}/bindernodes'
      .replace('{' + 'template_name' + '}', String(templateName));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'templateName' is set
  if (!templateName) {
    throw new Error('Missing required parameter templateName when calling objectsBindersTemplatesTemplateNameBindernodesGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Create Binder Template Node
 * 
 * @param {!string} templateName The binder template name__v field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsBindersTemplatesTemplateNameBindernodesPost = function(templateName, opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/binders/templates/{template_name}/bindernodes'
      .replace('{' + 'template_name' + '}', String(templateName));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'templateName' is set
  if (!templateName) {
    throw new Error('Missing required parameter templateName when calling objectsBindersTemplatesTemplateNameBindernodesPost');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Replace Binder Template Nodes
 * 
 * @param {!string} templateName The binder template name__v field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsBindersTemplatesTemplateNameBindernodesPut = function(templateName, opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/binders/templates/{template_name}/bindernodes'
      .replace('{' + 'template_name' + '}', String(templateName));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'templateName' is set
  if (!templateName) {
    throw new Error('Missing required parameter templateName when calling objectsBindersTemplatesTemplateNameBindernodesPut');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Delete Binder Template
 * 
 * @param {!string} templateName The binder template name__v field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsBindersTemplatesTemplateNameDelete = function(templateName, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/binders/templates/{template_name}'
      .replace('{' + 'template_name' + '}', String(templateName));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'templateName' is set
  if (!templateName) {
    throw new Error('Missing required parameter templateName when calling objectsBindersTemplatesTemplateNameDelete');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Binder Template Attributes
 * 
 * @param {!string} templateName The binder template name__v field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsBindersTemplatesTemplateNameGet = function(templateName, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/binders/templates/{template_name}'
      .replace('{' + 'template_name' + '}', String(templateName));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'templateName' is set
  if (!templateName) {
    throw new Error('Missing required parameter templateName when calling objectsBindersTemplatesTemplateNameGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Deleted Document IDs
 * 
 * @param {!string=} opt_startDate Specify a date (no more than 30 days past) after which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z
 * @param {!string=} opt_endDate Specify a date (no more than 30 days past) before which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDeletionsDocumentsGet = function(opt_startDate, opt_endDate, opt_authorization, opt_contentType, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/deletions/documents';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_startDate !== undefined) {
    queryParameters['start_date'] = opt_startDate;
  }

  if (opt_endDate !== undefined) {
    queryParameters['end_date'] = opt_endDate;
  }

  headerParams['Authorization'] = opt_authorization;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Deleted Object Record ID
 * 
 * @param {!string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDeletionsVobjectsObjectNameGet = function(objectName, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/deletions/vobjects/{object_name}'
      .replace('{' + 'object_name' + '}', String(objectName));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'objectName' is set
  if (!objectName) {
    throw new Error('Missing required parameter objectName when calling objectsDeletionsVobjectsObjectNameGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve All Document Workflows
 * 
 * @param {!boolean=} opt_loc When localized (translated) strings are available, retrieve them by setting loc to true.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsActionsGet = function(opt_loc, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/actions';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_loc !== undefined) {
    queryParameters['loc'] = opt_loc;
  }

  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Download Controlled Copy Job Results
 * 
 * @param {!string} lifecycleAndStateAndAction The &#x60;name__v&#x60; values for the lifecycle, state, and action in the format &#x60;{lifecycle_name}.{state_name}.{action_name}&#x60;. To get this value, [Retrieve the Job Status](https://developer.veevavault.com/api/24.3#RetrieveJobStatus) and find the &#x60;href&#x60; under the &#x60;artifacts&#x60; link.
 * @param {!string} jobId 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet = function(lifecycleAndStateAndAction, jobId, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/actions/{lifecycle_and_state_and_action}/{job_id}/results'
      .replace('{' + 'lifecycle_and_state_and_action' + '}', String(lifecycleAndStateAndAction))
      .replace('{' + 'job_id' + '}', String(jobId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'lifecycleAndStateAndAction' is set
  if (!lifecycleAndStateAndAction) {
    throw new Error('Missing required parameter lifecycleAndStateAndAction when calling objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet');
  }
  // verify required parameter 'jobId' is set
  if (!jobId) {
    throw new Error('Missing required parameter jobId when calling objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Document Workflow Details
 * 
 * @param {!string} workflowName The document workflow name value.
 * @param {!boolean=} opt_loc When localized (translated) strings are available, retrieve them by setting loc to true.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsActionsWorkflowNameGet = function(workflowName, opt_loc, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/actions/{workflow_name}'
      .replace('{' + 'workflow_name' + '}', String(workflowName));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'workflowName' is set
  if (!workflowName) {
    throw new Error('Missing required parameter workflowName when calling objectsDocumentsActionsWorkflowNameGet');
  }
  if (opt_loc !== undefined) {
    queryParameters['loc'] = opt_loc;
  }

  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Initiate Document Workflow
 * 
 * @param {!string} workflowName The document workflow name value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsActionsWorkflowNamePost = function(workflowName, opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/actions/{workflow_name}'
      .replace('{' + 'workflow_name' + '}', String(workflowName));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'workflowName' is set
  if (!workflowName) {
    throw new Error('Missing required parameter workflowName when calling objectsDocumentsActionsWorkflowNamePost');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Delete Annotations
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsAnnotationsBatchDelete = function(opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/annotations/batch';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Create Multiple Annotations
 * 
 * @param {!string} authorization 
 * @param {!string} contentType 
 * @param {!string} accept 
 * @param {!string} xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsAnnotationsBatchPost = function(authorization, contentType, accept, xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/annotations/batch';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'authorization' is set
  if (!authorization) {
    throw new Error('Missing required parameter authorization when calling objectsDocumentsAnnotationsBatchPost');
  }
  // verify required parameter 'contentType' is set
  if (!contentType) {
    throw new Error('Missing required parameter contentType when calling objectsDocumentsAnnotationsBatchPost');
  }
  // verify required parameter 'accept' is set
  if (!accept) {
    throw new Error('Missing required parameter accept when calling objectsDocumentsAnnotationsBatchPost');
  }
  // verify required parameter 'xVaultAPIClientID' is set
  if (!xVaultAPIClientID) {
    throw new Error('Missing required parameter xVaultAPIClientID when calling objectsDocumentsAnnotationsBatchPost');
  }
  headerParams['Authorization'] = authorization;

  headerParams['Content-Type'] = contentType;

  headerParams['Accept'] = accept;

  headerParams['X-VaultAPI-ClientID'] = xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Update Annotations
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsAnnotationsBatchPut = function(opt_authorization, opt_contentType, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/annotations/batch';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Add Annotation Replies
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsAnnotationsRepliesBatchPost = function(opt_authorization, opt_contentType, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/annotations/replies/batch';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Delete Multiple Document Attachments
 * 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsAttachmentsBatchDelete = function(opt_accept, opt_authorization, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/attachments/batch';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Accept'] = opt_accept;

  headerParams['Authorization'] = opt_authorization;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Create Multiple Document Attachments
 * 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsAttachmentsBatchPost = function(opt_accept, opt_authorization, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/attachments/batch';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Accept'] = opt_accept;

  headerParams['Authorization'] = opt_authorization;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Update Multiple Document Attachment Descriptions
 * 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsAttachmentsBatchPut = function(opt_accept, opt_authorization, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/attachments/batch';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Accept'] = opt_accept;

  headerParams['Authorization'] = opt_authorization;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Document Export Results
 * 
 * @param {!string} jobId The id value of the requested export job. This is returned with the export document requests.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsBatchActionsFileextractJobIdResultsGet = function(jobId, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/batch/actions/fileextract/{job_id}/results'
      .replace('{' + 'job_id' + '}', String(jobId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'jobId' is set
  if (!jobId) {
    throw new Error('Missing required parameter jobId when calling objectsDocumentsBatchActionsFileextractJobIdResultsGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Export Documents
 * 
 * @param {!boolean=} opt_source Optional: To exclude source files, include a query parameter source&#x3D;false. If omitted, defaults to true.
 * @param {!boolean=} opt_renditions Optional: To include renditions, include a query parameter renditions&#x3D;true. If omitted, defaults to false.
 * @param {!boolean=} opt_allversions Optional: To include all versions or latest version, include a query parameter allversions&#x3D;true. If omitted, defaults to false.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsBatchActionsFileextractPost = function(opt_source, opt_renditions, opt_allversions, opt_authorization, opt_contentType, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/batch/actions/fileextract';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_source !== undefined) {
    queryParameters['source'] = opt_source;
  }

  if (opt_renditions !== undefined) {
    queryParameters['renditions'] = opt_renditions;
  }

  if (opt_allversions !== undefined) {
    queryParameters['allversions'] = opt_allversions;
  }

  headerParams['Authorization'] = opt_authorization;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Reclassify Multiple Documents
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_accept 
 * @param {!boolean=} opt_xVaultAPIMigrationMode When set to true, Vault allows you to manually set the document number and to update documents to any lifecycle state using the status__v field. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message.  You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsBatchActionsReclassifyPut = function(opt_authorization, opt_contentType, opt_accept, opt_xVaultAPIMigrationMode, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/batch/actions/reclassify';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-MigrationMode'] = opt_xVaultAPIMigrationMode;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Update Multiple Document Renditions
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsBatchActionsRerenderPost = function(opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/batch/actions/rerender';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Delete Multiple Documents
 * 
 * @param {!string=} opt_idParam If you’re identifying documents in your input by their external ID
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsBatchDelete = function(opt_idParam, opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/batch';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_idParam !== undefined) {
    queryParameters['idParam'] = opt_idParam;
  }

  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Undo Collaborative Authoring Checkout
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsBatchLockDelete = function(opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/batch/lock';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Create Multiple Documents
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!boolean=} opt_xVaultAPIMigrationMode When set to true, Vault allows you to create documents in any lifecycle state using the status__v field, and to manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsBatchPost = function(opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIMigrationMode, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/batch';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-MigrationMode'] = opt_xVaultAPIMigrationMode;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Update Multiple Documents
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!boolean=} opt_xVaultAPIMigrationMode When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header.Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsBatchPut = function(opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIMigrationMode, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/batch';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-MigrationMode'] = opt_xVaultAPIMigrationMode;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Anchor IDs
 * 
 * @param {!string} docId The document id field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsDocIdAnchorsGet = function(docId, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/{doc_id}/anchors'
      .replace('{' + 'doc_id' + '}', String(docId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'docId' is set
  if (!docId) {
    throw new Error('Missing required parameter docId when calling objectsDocumentsDocIdAnchorsGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Export Document Annotations to PDF
 * 
 * @param {!string} docId The document id field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsDocIdAnnotationsFileGet = function(docId, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/{doc_id}/annotations/file'
      .replace('{' + 'doc_id' + '}', String(docId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'docId' is set
  if (!docId) {
    throw new Error('Missing required parameter docId when calling objectsDocumentsDocIdAnnotationsFileGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Import Document Annotations from PDF
 * 
 * @param {!string} docId The document id field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsDocIdAnnotationsFilePost = function(docId, opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/{doc_id}/annotations/file'
      .replace('{' + 'doc_id' + '}', String(docId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'docId' is set
  if (!docId) {
    throw new Error('Missing required parameter docId when calling objectsDocumentsDocIdAnnotationsFilePost');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Delete Single Document Attachment
 * 
 * @param {!string} docId The document id field value.
 * @param {!string} attachmentId The attachment id field value.
 * @param {!string=} opt_accept 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsDocIdAttachmentsAttachmentIdDelete = function(docId, attachmentId, opt_accept, opt_authorization, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/{doc_id}/attachments/{attachment_id}'
      .replace('{' + 'doc_id' + '}', String(docId))
      .replace('{' + 'attachment_id' + '}', String(attachmentId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'docId' is set
  if (!docId) {
    throw new Error('Missing required parameter docId when calling objectsDocumentsDocIdAttachmentsAttachmentIdDelete');
  }
  // verify required parameter 'attachmentId' is set
  if (!attachmentId) {
    throw new Error('Missing required parameter attachmentId when calling objectsDocumentsDocIdAttachmentsAttachmentIdDelete');
  }
  headerParams['Accept'] = opt_accept;

  headerParams['Authorization'] = opt_authorization;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Download Document Attachment
 * 
 * @param {!string} docId The document id field value.
 * @param {!string} attachmentId The attachment id field value.
 * @param {!string=} opt_accept 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsDocIdAttachmentsAttachmentIdFileGet = function(docId, attachmentId, opt_accept, opt_authorization, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/{doc_id}/attachments/{attachment_id}/file'
      .replace('{' + 'doc_id' + '}', String(docId))
      .replace('{' + 'attachment_id' + '}', String(attachmentId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'docId' is set
  if (!docId) {
    throw new Error('Missing required parameter docId when calling objectsDocumentsDocIdAttachmentsAttachmentIdFileGet');
  }
  // verify required parameter 'attachmentId' is set
  if (!attachmentId) {
    throw new Error('Missing required parameter attachmentId when calling objectsDocumentsDocIdAttachmentsAttachmentIdFileGet');
  }
  headerParams['Accept'] = opt_accept;

  headerParams['Authorization'] = opt_authorization;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Document Attachment Metadata
 * 
 * @param {!string} docId The document id field value.
 * @param {!string} attachmentId The attachment id field value.
 * @param {!string=} opt_accept 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsDocIdAttachmentsAttachmentIdGet = function(docId, attachmentId, opt_accept, opt_authorization, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/{doc_id}/attachments/{attachment_id}'
      .replace('{' + 'doc_id' + '}', String(docId))
      .replace('{' + 'attachment_id' + '}', String(attachmentId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'docId' is set
  if (!docId) {
    throw new Error('Missing required parameter docId when calling objectsDocumentsDocIdAttachmentsAttachmentIdGet');
  }
  // verify required parameter 'attachmentId' is set
  if (!attachmentId) {
    throw new Error('Missing required parameter attachmentId when calling objectsDocumentsDocIdAttachmentsAttachmentIdGet');
  }
  headerParams['Accept'] = opt_accept;

  headerParams['Authorization'] = opt_authorization;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Update Document Attachment Description
 * 
 * @param {!string} docId The document id field value.
 * @param {!string} attachmentId The attachment id field value.
 * @param {!string=} opt_accept 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsDocIdAttachmentsAttachmentIdPut = function(docId, attachmentId, opt_accept, opt_authorization, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/{doc_id}/attachments/{attachment_id}'
      .replace('{' + 'doc_id' + '}', String(docId))
      .replace('{' + 'attachment_id' + '}', String(attachmentId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'docId' is set
  if (!docId) {
    throw new Error('Missing required parameter docId when calling objectsDocumentsDocIdAttachmentsAttachmentIdPut');
  }
  // verify required parameter 'attachmentId' is set
  if (!attachmentId) {
    throw new Error('Missing required parameter attachmentId when calling objectsDocumentsDocIdAttachmentsAttachmentIdPut');
  }
  headerParams['Accept'] = opt_accept;

  headerParams['Authorization'] = opt_authorization;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Delete Single Document Attachment Version
 * 
 * @param {!string} docId The document id field value.
 * @param {!string} attachmentId The attachment id field value.
 * @param {!string} attachmentVersion The attachment version__v field value.
 * @param {!string=} opt_accept 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete = function(docId, attachmentId, attachmentVersion, opt_accept, opt_authorization, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}'
      .replace('{' + 'doc_id' + '}', String(docId))
      .replace('{' + 'attachment_id' + '}', String(attachmentId))
      .replace('{' + 'attachment_version' + '}', String(attachmentVersion));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'docId' is set
  if (!docId) {
    throw new Error('Missing required parameter docId when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete');
  }
  // verify required parameter 'attachmentId' is set
  if (!attachmentId) {
    throw new Error('Missing required parameter attachmentId when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete');
  }
  // verify required parameter 'attachmentVersion' is set
  if (!attachmentVersion) {
    throw new Error('Missing required parameter attachmentVersion when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete');
  }
  headerParams['Accept'] = opt_accept;

  headerParams['Authorization'] = opt_authorization;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Download Document Attachment Version
 * 
 * @param {!string} docId The document id field value.
 * @param {!string} attachmentId The attachment id field value.
 * @param {!string} attachmentVersion The attachment version__v field value.
 * @param {!string=} opt_accept 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet = function(docId, attachmentId, attachmentVersion, opt_accept, opt_authorization, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}/file'
      .replace('{' + 'doc_id' + '}', String(docId))
      .replace('{' + 'attachment_id' + '}', String(attachmentId))
      .replace('{' + 'attachment_version' + '}', String(attachmentVersion));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'docId' is set
  if (!docId) {
    throw new Error('Missing required parameter docId when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet');
  }
  // verify required parameter 'attachmentId' is set
  if (!attachmentId) {
    throw new Error('Missing required parameter attachmentId when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet');
  }
  // verify required parameter 'attachmentVersion' is set
  if (!attachmentVersion) {
    throw new Error('Missing required parameter attachmentVersion when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet');
  }
  headerParams['Accept'] = opt_accept;

  headerParams['Authorization'] = opt_authorization;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Document Attachment Version Metadata
 * 
 * @param {!string} docId The document id field value.
 * @param {!string} attachmentId The attachment id field value.
 * @param {!string} attachmentVersion The attachment version__v field value.
 * @param {!string=} opt_accept 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet = function(docId, attachmentId, attachmentVersion, opt_accept, opt_authorization, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}'
      .replace('{' + 'doc_id' + '}', String(docId))
      .replace('{' + 'attachment_id' + '}', String(attachmentId))
      .replace('{' + 'attachment_version' + '}', String(attachmentVersion));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'docId' is set
  if (!docId) {
    throw new Error('Missing required parameter docId when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet');
  }
  // verify required parameter 'attachmentId' is set
  if (!attachmentId) {
    throw new Error('Missing required parameter attachmentId when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet');
  }
  // verify required parameter 'attachmentVersion' is set
  if (!attachmentVersion) {
    throw new Error('Missing required parameter attachmentVersion when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet');
  }
  headerParams['Accept'] = opt_accept;

  headerParams['Authorization'] = opt_authorization;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Restore Document Attachment Version
 * 
 * @param {!string} docId The document id field value.
 * @param {!string} attachmentId The attachment id field value.
 * @param {!string} attachmentVersion The attachment version__v field value.
 * @param {!boolean=} opt_restore The parameter restore must be set to true. 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost = function(docId, attachmentId, attachmentVersion, opt_restore, opt_accept, opt_authorization, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}'
      .replace('{' + 'doc_id' + '}', String(docId))
      .replace('{' + 'attachment_id' + '}', String(attachmentId))
      .replace('{' + 'attachment_version' + '}', String(attachmentVersion));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'docId' is set
  if (!docId) {
    throw new Error('Missing required parameter docId when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost');
  }
  // verify required parameter 'attachmentId' is set
  if (!attachmentId) {
    throw new Error('Missing required parameter attachmentId when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost');
  }
  // verify required parameter 'attachmentVersion' is set
  if (!attachmentVersion) {
    throw new Error('Missing required parameter attachmentVersion when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost');
  }
  if (opt_restore !== undefined) {
    queryParameters['restore'] = opt_restore;
  }

  headerParams['Accept'] = opt_accept;

  headerParams['Authorization'] = opt_authorization;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Document Attachment Versions
 * 
 * @param {!string} docId The document id field value.
 * @param {!string} attachmentId The attachment id field value.
 * @param {!string=} opt_accept 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet = function(docId, attachmentId, opt_accept, opt_authorization, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/{doc_id}/attachments/{attachment_id}/versions'
      .replace('{' + 'doc_id' + '}', String(docId))
      .replace('{' + 'attachment_id' + '}', String(attachmentId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'docId' is set
  if (!docId) {
    throw new Error('Missing required parameter docId when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet');
  }
  // verify required parameter 'attachmentId' is set
  if (!attachmentId) {
    throw new Error('Missing required parameter attachmentId when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet');
  }
  headerParams['Accept'] = opt_accept;

  headerParams['Authorization'] = opt_authorization;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Download All Document Attachments
 * 
 * @param {!string} docId The document id field value.
 * @param {!string=} opt_accept 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsDocIdAttachmentsFileGet = function(docId, opt_accept, opt_authorization, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/{doc_id}/attachments/file'
      .replace('{' + 'doc_id' + '}', String(docId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'docId' is set
  if (!docId) {
    throw new Error('Missing required parameter docId when calling objectsDocumentsDocIdAttachmentsFileGet');
  }
  headerParams['Accept'] = opt_accept;

  headerParams['Authorization'] = opt_authorization;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Document Attachments
 * 
 * @param {!string} docId The document id field value.
 * @param {!string=} opt_accept 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsDocIdAttachmentsGet = function(docId, opt_accept, opt_authorization, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/{doc_id}/attachments'
      .replace('{' + 'doc_id' + '}', String(docId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'docId' is set
  if (!docId) {
    throw new Error('Missing required parameter docId when calling objectsDocumentsDocIdAttachmentsGet');
  }
  headerParams['Accept'] = opt_accept;

  headerParams['Authorization'] = opt_authorization;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Create Document Attachment
 * 
 * @param {!string} docId The document id field value.
 * @param {!string=} opt_accept 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsDocIdAttachmentsPost = function(docId, opt_accept, opt_authorization, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/{doc_id}/attachments'
      .replace('{' + 'doc_id' + '}', String(docId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'docId' is set
  if (!docId) {
    throw new Error('Missing required parameter docId when calling objectsDocumentsDocIdAttachmentsPost');
  }
  headerParams['Accept'] = opt_accept;

  headerParams['Authorization'] = opt_authorization;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Complete Audit History for a Single Document
 * 
 * @param {!string} docId The document ID for which to retrieve audit history.
 * @param {!string=} opt_startDate Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vault’s creation date. 
 * @param {!string=} opt_endDate Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date. 
 * @param {!string=} opt_formatResult To request a CSV file of your audit history, use csv. 
 * @param {!string=} opt_limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
 * @param {!string=} opt_offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0.
 * @param {!string=} opt_events Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of document audit events. The values passed to this parameter are case sensitive. For example, events&#x3D;WorkflowCompletion,TaskAssignment. If omitted, defaults to all audit events.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsDocIdAudittrailGet = function(docId, opt_startDate, opt_endDate, opt_formatResult, opt_limit, opt_offset, opt_events, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/{doc_id}/audittrail'
      .replace('{' + 'doc_id' + '}', String(docId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'docId' is set
  if (!docId) {
    throw new Error('Missing required parameter docId when calling objectsDocumentsDocIdAudittrailGet');
  }
  if (opt_startDate !== undefined) {
    queryParameters['start_date'] = opt_startDate;
  }

  if (opt_endDate !== undefined) {
    queryParameters['end_date'] = opt_endDate;
  }

  if (opt_formatResult !== undefined) {
    queryParameters['format_result'] = opt_formatResult;
  }

  if (opt_limit !== undefined) {
    queryParameters['limit'] = opt_limit;
  }

  if (opt_offset !== undefined) {
    queryParameters['offset'] = opt_offset;
  }

  if (opt_events !== undefined) {
    queryParameters['events'] = opt_events;
  }

  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Delete Single Document
 * 
 * @param {!string} docId The document id field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsDocIdDelete = function(docId, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/{doc_id}'
      .replace('{' + 'doc_id' + '}', String(docId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'docId' is set
  if (!docId) {
    throw new Error('Missing required parameter docId when calling objectsDocumentsDocIdDelete');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Document Events
 * 
 * @param {!string} docId The document id field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsDocIdEventsGet = function(docId, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/{doc_id}/events'
      .replace('{' + 'doc_id' + '}', String(docId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'docId' is set
  if (!docId) {
    throw new Error('Missing required parameter docId when calling objectsDocumentsDocIdEventsGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Download Document File
 * 
 * @param {!string} docId The document id field value.
 * @param {!boolean=} opt_lockDocument Set to true to Check Out this document before retrieval. If omitted, defaults to false.
 * @param {!string=} opt_accept 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsDocIdFileGet = function(docId, opt_lockDocument, opt_accept, opt_authorization, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/{doc_id}/file'
      .replace('{' + 'doc_id' + '}', String(docId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'docId' is set
  if (!docId) {
    throw new Error('Missing required parameter docId when calling objectsDocumentsDocIdFileGet');
  }
  if (opt_lockDocument !== undefined) {
    queryParameters['lockDocument'] = opt_lockDocument;
  }

  headerParams['Accept'] = opt_accept;

  headerParams['Authorization'] = opt_authorization;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Document
 * 
 * @param {!string} docId The document id field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsDocIdGet = function(docId, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/{doc_id}'
      .replace('{' + 'doc_id' + '}', String(docId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'docId' is set
  if (!docId) {
    throw new Error('Missing required parameter docId when calling objectsDocumentsDocIdGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Delete Document Lock
 * 
 * @param {!string} docId The document id field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsDocIdLockDelete = function(docId, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/{doc_id}/lock'
      .replace('{' + 'doc_id' + '}', String(docId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'docId' is set
  if (!docId) {
    throw new Error('Missing required parameter docId when calling objectsDocumentsDocIdLockDelete');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Document Lock
 * 
 * @param {!string} docId The document id field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsDocIdLockGet = function(docId, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/{doc_id}/lock'
      .replace('{' + 'doc_id' + '}', String(docId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'docId' is set
  if (!docId) {
    throw new Error('Missing required parameter docId when calling objectsDocumentsDocIdLockGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Create Document Lock
 * 
 * @param {!string} docId The document id field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsDocIdLockPost = function(docId, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/{doc_id}/lock'
      .replace('{' + 'doc_id' + '}', String(docId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'docId' is set
  if (!docId) {
    throw new Error('Missing required parameter docId when calling objectsDocumentsDocIdLockPost');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Download All Document Version Attachments
 * 
 * @param {!string} docId The document id field value.
 * @param {!string} majorVersion The document major_version_number__v field value.
 * @param {!string} minorVersion The document minor_version_number__v field value.
 * @param {!string=} opt_accept 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet = function(docId, majorVersion, minorVersion, opt_accept, opt_authorization, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/{doc_id}/{major_version}/{minor_version}/attachments/file'
      .replace('{' + 'doc_id' + '}', String(docId))
      .replace('{' + 'major_version' + '}', String(majorVersion))
      .replace('{' + 'minor_version' + '}', String(minorVersion));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'docId' is set
  if (!docId) {
    throw new Error('Missing required parameter docId when calling objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet');
  }
  // verify required parameter 'majorVersion' is set
  if (!majorVersion) {
    throw new Error('Missing required parameter majorVersion when calling objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet');
  }
  // verify required parameter 'minorVersion' is set
  if (!minorVersion) {
    throw new Error('Missing required parameter minorVersion when calling objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet');
  }
  headerParams['Accept'] = opt_accept;

  headerParams['Authorization'] = opt_authorization;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Create Single Document Version
 * 
 * @param {!string} docId The document id field value.
 * @param {!string=} opt_suppressRendition Set to true to suppress automatic generation of the viewable rendition. If omitted, defaults to false
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsDocIdPost = function(docId, opt_suppressRendition, opt_authorization, opt_contentType, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/{doc_id}'
      .replace('{' + 'doc_id' + '}', String(docId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'docId' is set
  if (!docId) {
    throw new Error('Missing required parameter docId when calling objectsDocumentsDocIdPost');
  }
  if (opt_suppressRendition !== undefined) {
    queryParameters['suppressRendition'] = opt_suppressRendition;
  }

  headerParams['Authorization'] = opt_authorization;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Update Single Document
 * 
 * @param {!string} docId The document id field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_accept 
 * @param {!boolean=} opt_xVaultAPIMigrationMode When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsDocIdPut = function(docId, opt_authorization, opt_contentType, opt_accept, opt_xVaultAPIMigrationMode, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/{doc_id}'
      .replace('{' + 'doc_id' + '}', String(docId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'docId' is set
  if (!docId) {
    throw new Error('Missing required parameter docId when calling objectsDocumentsDocIdPut');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-MigrationMode'] = opt_xVaultAPIMigrationMode;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Document Renditions
 * 
 * @param {!string} docId The document id field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsDocIdRenditionsGet = function(docId, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/{doc_id}/renditions'
      .replace('{' + 'doc_id' + '}', String(docId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'docId' is set
  if (!docId) {
    throw new Error('Missing required parameter docId when calling objectsDocumentsDocIdRenditionsGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Delete Single Document Rendition
 * 
 * @param {!string} docId The document id field value.
 * @param {!string} renditionType The document rendition type.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsDocIdRenditionsRenditionTypeDelete = function(docId, renditionType, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/{doc_id}/renditions/{rendition_type}'
      .replace('{' + 'doc_id' + '}', String(docId))
      .replace('{' + 'rendition_type' + '}', String(renditionType));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'docId' is set
  if (!docId) {
    throw new Error('Missing required parameter docId when calling objectsDocumentsDocIdRenditionsRenditionTypeDelete');
  }
  // verify required parameter 'renditionType' is set
  if (!renditionType) {
    throw new Error('Missing required parameter renditionType when calling objectsDocumentsDocIdRenditionsRenditionTypeDelete');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Download Document Rendition File
 * 
 * @param {!string} docId The document id field value.
 * @param {!string} renditionType The document rendition type.
 * @param {!string=} opt_steadyState Set to true to download a rendition (file) from the latest steady state version (1.0, 2.0, etc.) of a document. 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsDocIdRenditionsRenditionTypeGet = function(docId, renditionType, opt_steadyState, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/{doc_id}/renditions/{rendition_type}'
      .replace('{' + 'doc_id' + '}', String(docId))
      .replace('{' + 'rendition_type' + '}', String(renditionType));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'docId' is set
  if (!docId) {
    throw new Error('Missing required parameter docId when calling objectsDocumentsDocIdRenditionsRenditionTypeGet');
  }
  // verify required parameter 'renditionType' is set
  if (!renditionType) {
    throw new Error('Missing required parameter renditionType when calling objectsDocumentsDocIdRenditionsRenditionTypeGet');
  }
  if (opt_steadyState !== undefined) {
    queryParameters['steadyState'] = opt_steadyState;
  }

  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Add Single Document Rendition
 * 
 * @param {!string} docId The document id field value.
 * @param {!string} renditionType The document rendition type.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsDocIdRenditionsRenditionTypePost = function(docId, renditionType, opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/{doc_id}/renditions/{rendition_type}'
      .replace('{' + 'doc_id' + '}', String(docId))
      .replace('{' + 'rendition_type' + '}', String(renditionType));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'docId' is set
  if (!docId) {
    throw new Error('Missing required parameter docId when calling objectsDocumentsDocIdRenditionsRenditionTypePost');
  }
  // verify required parameter 'renditionType' is set
  if (!renditionType) {
    throw new Error('Missing required parameter renditionType when calling objectsDocumentsDocIdRenditionsRenditionTypePost');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Replace Document Rendition
 * 
 * @param {!string} docId The document id field value.
 * @param {!string} renditionType The document rendition type.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsDocIdRenditionsRenditionTypePut = function(docId, renditionType, opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/{doc_id}/renditions/{rendition_type}'
      .replace('{' + 'doc_id' + '}', String(docId))
      .replace('{' + 'rendition_type' + '}', String(renditionType));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'docId' is set
  if (!docId) {
    throw new Error('Missing required parameter docId when calling objectsDocumentsDocIdRenditionsRenditionTypePut');
  }
  // verify required parameter 'renditionType' is set
  if (!renditionType) {
    throw new Error('Missing required parameter renditionType when calling objectsDocumentsDocIdRenditionsRenditionTypePut');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Remove Users &amp; Groups from Roles on a Single Document
 * 
 * @param {!string} docId The id value of the document from which to remove roles.
 * @param {!string} roleNameAndUserOrGroup The name of the role from which to remove the user or group followed by either &#x60;user&#x60; or &#x60;group&#x60;. The format is &#x60;{role_name}.{user_or_group}&#x60;. For example, &#x60;consumer__v.user&#x60;.
 * @param {!string} id The id value of the user or group to remove from the role.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete = function(docId, roleNameAndUserOrGroup, id, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/{doc_id}/roles/{role_name_and_user_or_group}/{id}'
      .replace('{' + 'doc_id' + '}', String(docId))
      .replace('{' + 'role_name_and_user_or_group' + '}', String(roleNameAndUserOrGroup))
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'docId' is set
  if (!docId) {
    throw new Error('Missing required parameter docId when calling objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete');
  }
  // verify required parameter 'roleNameAndUserOrGroup' is set
  if (!roleNameAndUserOrGroup) {
    throw new Error('Missing required parameter roleNameAndUserOrGroup when calling objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete');
  }
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Document Version Attachments
 * 
 * @param {!string} docId The document id field value.
 * @param {!string} majorVersion The document major_version_number__v field value.
 * @param {!string} minorVersion The document minor_version_number__v field value.
 * @param {!string=} opt_accept 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet = function(docId, majorVersion, minorVersion, opt_accept, opt_authorization, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/{doc_id}/version/{major_version}/{minor_version}/attachments'
      .replace('{' + 'doc_id' + '}', String(docId))
      .replace('{' + 'major_version' + '}', String(majorVersion))
      .replace('{' + 'minor_version' + '}', String(minorVersion));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'docId' is set
  if (!docId) {
    throw new Error('Missing required parameter docId when calling objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet');
  }
  // verify required parameter 'majorVersion' is set
  if (!majorVersion) {
    throw new Error('Missing required parameter majorVersion when calling objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet');
  }
  // verify required parameter 'minorVersion' is set
  if (!minorVersion) {
    throw new Error('Missing required parameter minorVersion when calling objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet');
  }
  headerParams['Accept'] = opt_accept;

  headerParams['Authorization'] = opt_authorization;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Document Versions
 * 
 * @param {!string} docId The document id field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsDocIdVersionsGet = function(docId, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/{doc_id}/versions'
      .replace('{' + 'doc_id' + '}', String(docId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'docId' is set
  if (!docId) {
    throw new Error('Missing required parameter docId when calling objectsDocumentsDocIdVersionsGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Read Annotations by ID
 * 
 * @param {!string} docId The document id field value.
 * @param {!string} majorVersion The document major_version_number__v field value.
 * @param {!string} minorVersion The document minor_version_number__v field value.
 * @param {!string} annotationId The annotation ID, which can be retrieved with Read Annotations by Document Version and Type.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet = function(docId, majorVersion, minorVersion, annotationId, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/{annotation_id}'
      .replace('{' + 'doc_id' + '}', String(docId))
      .replace('{' + 'major_version' + '}', String(majorVersion))
      .replace('{' + 'minor_version' + '}', String(minorVersion))
      .replace('{' + 'annotation_id' + '}', String(annotationId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'docId' is set
  if (!docId) {
    throw new Error('Missing required parameter docId when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet');
  }
  // verify required parameter 'majorVersion' is set
  if (!majorVersion) {
    throw new Error('Missing required parameter majorVersion when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet');
  }
  // verify required parameter 'minorVersion' is set
  if (!minorVersion) {
    throw new Error('Missing required parameter minorVersion when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet');
  }
  // verify required parameter 'annotationId' is set
  if (!annotationId) {
    throw new Error('Missing required parameter annotationId when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Read Replies of Parent Annotation
 * 
 * @param {!string} docId The document id field value.
 * @param {!string} majorVersion The document major_version_number__v field value.
 * @param {!string} minorVersion The document minor_version_number__v field value.
 * @param {!string} annotationId The parent annotation ID, which can be retrieved with Read Annotations by Document Version and Type.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet = function(docId, majorVersion, minorVersion, annotationId, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/{annotation_id}/replies'
      .replace('{' + 'doc_id' + '}', String(docId))
      .replace('{' + 'major_version' + '}', String(majorVersion))
      .replace('{' + 'minor_version' + '}', String(minorVersion))
      .replace('{' + 'annotation_id' + '}', String(annotationId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'docId' is set
  if (!docId) {
    throw new Error('Missing required parameter docId when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet');
  }
  // verify required parameter 'majorVersion' is set
  if (!majorVersion) {
    throw new Error('Missing required parameter majorVersion when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet');
  }
  // verify required parameter 'minorVersion' is set
  if (!minorVersion) {
    throw new Error('Missing required parameter minorVersion when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet');
  }
  // verify required parameter 'annotationId' is set
  if (!annotationId) {
    throw new Error('Missing required parameter annotationId when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Export Document Version Annotations to PDF
 * 
 * @param {!string} docId The document id field value.
 * @param {!string} majorVersion The document major_version_number__v field value.
 * @param {!string} minorVersion The document minor_version_number__v field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet = function(docId, majorVersion, minorVersion, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/file'
      .replace('{' + 'doc_id' + '}', String(docId))
      .replace('{' + 'major_version' + '}', String(majorVersion))
      .replace('{' + 'minor_version' + '}', String(minorVersion));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'docId' is set
  if (!docId) {
    throw new Error('Missing required parameter docId when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet');
  }
  // verify required parameter 'majorVersion' is set
  if (!majorVersion) {
    throw new Error('Missing required parameter majorVersion when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet');
  }
  // verify required parameter 'minorVersion' is set
  if (!minorVersion) {
    throw new Error('Missing required parameter minorVersion when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Import Document Version Annotations from PDF
 * 
 * @param {!string} docId The document id field value.
 * @param {!string} majorVersion The document major_version_number__v field value.
 * @param {!string} minorVersion The document minor_version_number__v field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost = function(docId, majorVersion, minorVersion, opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/file'
      .replace('{' + 'doc_id' + '}', String(docId))
      .replace('{' + 'major_version' + '}', String(majorVersion))
      .replace('{' + 'minor_version' + '}', String(minorVersion));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'docId' is set
  if (!docId) {
    throw new Error('Missing required parameter docId when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost');
  }
  // verify required parameter 'majorVersion' is set
  if (!majorVersion) {
    throw new Error('Missing required parameter majorVersion when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost');
  }
  // verify required parameter 'minorVersion' is set
  if (!minorVersion) {
    throw new Error('Missing required parameter minorVersion when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Read Annotations by Document Version and Type
 * 
 * @param {!string} docId The document id field value.
 * @param {!string} majorVersion The document major_version_number__v field value.
 * @param {!string} minorVersion The document minor_version_number__v field value.
 * @param {!string=} opt_limit Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 500. If omitted, defaults to 500. Values greater than 500 are ignored.
 * @param {!string=} opt_offset This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to offset&#x3D;201.
 * @param {!string=} opt_annotationTypes The type(s) of annotations to retrieve. For example, note__sys,anchor__sys. If omitted, Vault returns all annotations. Valid annotation types include: &#x60;note__sys&#x60; &#x60;line__sys&#x60; &#x60;document_link__sys&#x60; &#x60;permalink_link__sys&#x60; &#x60;anchor__sys&#x60; &#x60;reply__sys&#x60; &#x60;external_link__sys&#x60;  The following annotation types are only valid in PromoMats Vaults:  &#x60;suggested_link__sys&#x60; &#x60;approved_link__sys&#x60; &#x60;auto_link__sys&#x60; &#x60;keyword_link__sys&#x60; 
 * @param {!string=} opt_paginationId A unique identifier used to load requests with paginated results.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet = function(docId, majorVersion, minorVersion, opt_limit, opt_offset, opt_annotationTypes, opt_paginationId, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations'
      .replace('{' + 'doc_id' + '}', String(docId))
      .replace('{' + 'major_version' + '}', String(majorVersion))
      .replace('{' + 'minor_version' + '}', String(minorVersion));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'docId' is set
  if (!docId) {
    throw new Error('Missing required parameter docId when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet');
  }
  // verify required parameter 'majorVersion' is set
  if (!majorVersion) {
    throw new Error('Missing required parameter majorVersion when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet');
  }
  // verify required parameter 'minorVersion' is set
  if (!minorVersion) {
    throw new Error('Missing required parameter minorVersion when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet');
  }
  if (opt_limit !== undefined) {
    queryParameters['limit'] = opt_limit;
  }

  if (opt_offset !== undefined) {
    queryParameters['offset'] = opt_offset;
  }

  if (opt_annotationTypes !== undefined) {
    queryParameters['annotation_types'] = opt_annotationTypes;
  }

  if (opt_paginationId !== undefined) {
    queryParameters['pagination_id'] = opt_paginationId;
  }

  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Download Document Version Attachment Version
 * 
 * @param {!string} docId The document id field value.
 * @param {!string} majorVersion The document major_version_number__v field value.
 * @param {!string} minorVersion The document minor_version_number__v field value.
 * @param {!string} attachmentId The id field value of the attachment.
 * @param {!string} attachmentVersion The version of the attachment.
 * @param {!string=} opt_accept 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet = function(docId, majorVersion, minorVersion, attachmentId, attachmentVersion, opt_accept, opt_authorization, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/attachments/{attachment_id}/versions/{attachment_version}/file'
      .replace('{' + 'doc_id' + '}', String(docId))
      .replace('{' + 'major_version' + '}', String(majorVersion))
      .replace('{' + 'minor_version' + '}', String(minorVersion))
      .replace('{' + 'attachment_id' + '}', String(attachmentId))
      .replace('{' + 'attachment_version' + '}', String(attachmentVersion));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'docId' is set
  if (!docId) {
    throw new Error('Missing required parameter docId when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet');
  }
  // verify required parameter 'majorVersion' is set
  if (!majorVersion) {
    throw new Error('Missing required parameter majorVersion when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet');
  }
  // verify required parameter 'minorVersion' is set
  if (!minorVersion) {
    throw new Error('Missing required parameter minorVersion when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet');
  }
  // verify required parameter 'attachmentId' is set
  if (!attachmentId) {
    throw new Error('Missing required parameter attachmentId when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet');
  }
  // verify required parameter 'attachmentVersion' is set
  if (!attachmentVersion) {
    throw new Error('Missing required parameter attachmentVersion when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet');
  }
  headerParams['Accept'] = opt_accept;

  headerParams['Authorization'] = opt_authorization;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Document Version Attachment Versions
 * 
 * @param {!string} docId The document id field value.
 * @param {!string} majorVersion The document major_version_number__v field value.
 * @param {!string} minorVersion The document minor_version_number__v field value.
 * @param {!string} attachmentId The id of the document attachment to retrieve.
 * @param {!string} attachmentVersion Optional: The version of the attachment to retrieve. If omitted, the endpoint retrieves all versions of the specified attachment.
 * @param {!string=} opt_accept 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet = function(docId, majorVersion, minorVersion, attachmentId, attachmentVersion, opt_accept, opt_authorization, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/attachments/{attachment_id}/versions/{attachment_version}'
      .replace('{' + 'doc_id' + '}', String(docId))
      .replace('{' + 'major_version' + '}', String(majorVersion))
      .replace('{' + 'minor_version' + '}', String(minorVersion))
      .replace('{' + 'attachment_id' + '}', String(attachmentId))
      .replace('{' + 'attachment_version' + '}', String(attachmentVersion));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'docId' is set
  if (!docId) {
    throw new Error('Missing required parameter docId when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet');
  }
  // verify required parameter 'majorVersion' is set
  if (!majorVersion) {
    throw new Error('Missing required parameter majorVersion when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet');
  }
  // verify required parameter 'minorVersion' is set
  if (!minorVersion) {
    throw new Error('Missing required parameter minorVersion when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet');
  }
  // verify required parameter 'attachmentId' is set
  if (!attachmentId) {
    throw new Error('Missing required parameter attachmentId when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet');
  }
  // verify required parameter 'attachmentVersion' is set
  if (!attachmentVersion) {
    throw new Error('Missing required parameter attachmentVersion when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet');
  }
  headerParams['Accept'] = opt_accept;

  headerParams['Authorization'] = opt_authorization;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Delete Single Document Version
 * 
 * @param {!string} docId The document id field value.
 * @param {!string} majorVersion The document major_version_number__v field value.
 * @param {!string} minorVersion The document minor_version_number__v field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete = function(docId, majorVersion, minorVersion, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}'
      .replace('{' + 'doc_id' + '}', String(docId))
      .replace('{' + 'major_version' + '}', String(majorVersion))
      .replace('{' + 'minor_version' + '}', String(minorVersion));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'docId' is set
  if (!docId) {
    throw new Error('Missing required parameter docId when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete');
  }
  // verify required parameter 'majorVersion' is set
  if (!majorVersion) {
    throw new Error('Missing required parameter majorVersion when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete');
  }
  // verify required parameter 'minorVersion' is set
  if (!minorVersion) {
    throw new Error('Missing required parameter minorVersion when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Document Version Notes as CSV
 * 
 * @param {!string} docId The document id field value.
 * @param {!string} majorVersion The document major_version_number__v field value.
 * @param {!string} minorVersion The document minor_version_number__v field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet = function(docId, majorVersion, minorVersion, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/doc-export-annotations-to-csv'
      .replace('{' + 'doc_id' + '}', String(docId))
      .replace('{' + 'major_version' + '}', String(majorVersion))
      .replace('{' + 'minor_version' + '}', String(minorVersion));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'docId' is set
  if (!docId) {
    throw new Error('Missing required parameter docId when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet');
  }
  // verify required parameter 'majorVersion' is set
  if (!majorVersion) {
    throw new Error('Missing required parameter majorVersion when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet');
  }
  // verify required parameter 'minorVersion' is set
  if (!minorVersion) {
    throw new Error('Missing required parameter minorVersion when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Create Document Event
 * 
 * @param {!string} docId The document id field value.
 * @param {!string} majorVersion The document major_version_number__v field value.
 * @param {!string} minorVersion The document minor_version_number__v field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost = function(docId, majorVersion, minorVersion, opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/events'
      .replace('{' + 'doc_id' + '}', String(docId))
      .replace('{' + 'major_version' + '}', String(majorVersion))
      .replace('{' + 'minor_version' + '}', String(minorVersion));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'docId' is set
  if (!docId) {
    throw new Error('Missing required parameter docId when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost');
  }
  // verify required parameter 'majorVersion' is set
  if (!majorVersion) {
    throw new Error('Missing required parameter majorVersion when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost');
  }
  // verify required parameter 'minorVersion' is set
  if (!minorVersion) {
    throw new Error('Missing required parameter minorVersion when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Video Annotations
 * 
 * @param {!string} docId The video document id field value.
 * @param {!string} majorVersion The video document major_version_number__v field value.
 * @param {!string} minorVersion The video document minor_version_number__v field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept This &#x60;Accept&#x60; header only changes the format of the response in the case of an error. On &#x60;SUCCESS&#x60;, the HTTP Response Header &#x60;Content-Type&#x60; is set to &#x60;text/plain;charset&#x3D;UnicodeLittle&#x60;.
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet = function(docId, majorVersion, minorVersion, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/export-video-annotations'
      .replace('{' + 'doc_id' + '}', String(docId))
      .replace('{' + 'major_version' + '}', String(majorVersion))
      .replace('{' + 'minor_version' + '}', String(minorVersion));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'docId' is set
  if (!docId) {
    throw new Error('Missing required parameter docId when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet');
  }
  // verify required parameter 'majorVersion' is set
  if (!majorVersion) {
    throw new Error('Missing required parameter majorVersion when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet');
  }
  // verify required parameter 'minorVersion' is set
  if (!minorVersion) {
    throw new Error('Missing required parameter minorVersion when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Download Document Version File
 * 
 * @param {!string} docId The document id field value.
 * @param {!string} majorVersion The document major_version_number__v field value.
 * @param {!string} minorVersion The document minor_version_number__v field value.
 * @param {!string=} opt_accept 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet = function(docId, majorVersion, minorVersion, opt_accept, opt_authorization, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/file'
      .replace('{' + 'doc_id' + '}', String(docId))
      .replace('{' + 'major_version' + '}', String(majorVersion))
      .replace('{' + 'minor_version' + '}', String(minorVersion));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'docId' is set
  if (!docId) {
    throw new Error('Missing required parameter docId when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet');
  }
  // verify required parameter 'majorVersion' is set
  if (!majorVersion) {
    throw new Error('Missing required parameter majorVersion when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet');
  }
  // verify required parameter 'minorVersion' is set
  if (!minorVersion) {
    throw new Error('Missing required parameter minorVersion when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet');
  }
  headerParams['Accept'] = opt_accept;

  headerParams['Authorization'] = opt_authorization;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Document Version
 * 
 * @param {!string} docId The document id field value.
 * @param {!string} majorVersion The document major_version_number__v field value.
 * @param {!string} minorVersion The document minor_version_number__v field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet = function(docId, majorVersion, minorVersion, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}'
      .replace('{' + 'doc_id' + '}', String(docId))
      .replace('{' + 'major_version' + '}', String(majorVersion))
      .replace('{' + 'minor_version' + '}', String(minorVersion));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'docId' is set
  if (!docId) {
    throw new Error('Missing required parameter docId when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet');
  }
  // verify required parameter 'majorVersion' is set
  if (!majorVersion) {
    throw new Error('Missing required parameter majorVersion when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet');
  }
  // verify required parameter 'minorVersion' is set
  if (!minorVersion) {
    throw new Error('Missing required parameter minorVersion when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Update Document Version
 * 
 * @param {!string} docId The document id field value.
 * @param {!string} majorVersion The document major_version_number__v field value.
 * @param {!string} minorVersion The document minor_version_number__v field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_accept 
 * @param {!boolean=} opt_xVaultAPIMigrationMode When set to true, Vault allows you to manually set the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut = function(docId, majorVersion, minorVersion, opt_authorization, opt_contentType, opt_accept, opt_xVaultAPIMigrationMode, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}'
      .replace('{' + 'doc_id' + '}', String(docId))
      .replace('{' + 'major_version' + '}', String(majorVersion))
      .replace('{' + 'minor_version' + '}', String(minorVersion));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'docId' is set
  if (!docId) {
    throw new Error('Missing required parameter docId when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut');
  }
  // verify required parameter 'majorVersion' is set
  if (!majorVersion) {
    throw new Error('Missing required parameter majorVersion when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut');
  }
  // verify required parameter 'minorVersion' is set
  if (!minorVersion) {
    throw new Error('Missing required parameter minorVersion when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-MigrationMode'] = opt_xVaultAPIMigrationMode;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Document Relationships
 * 
 * @param {!string} docId The document id field value.
 * @param {!string} majorVersion The document major_version_number__v field value.
 * @param {!string} minorVersion The document minor_version_number__v field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet = function(docId, majorVersion, minorVersion, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships'
      .replace('{' + 'doc_id' + '}', String(docId))
      .replace('{' + 'major_version' + '}', String(majorVersion))
      .replace('{' + 'minor_version' + '}', String(minorVersion));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'docId' is set
  if (!docId) {
    throw new Error('Missing required parameter docId when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet');
  }
  // verify required parameter 'majorVersion' is set
  if (!majorVersion) {
    throw new Error('Missing required parameter majorVersion when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet');
  }
  // verify required parameter 'minorVersion' is set
  if (!minorVersion) {
    throw new Error('Missing required parameter minorVersion when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Create Single Document Relationship
 * 
 * @param {!string} docId The document id field value.
 * @param {!string} majorVersion The document major_version_number__v field value.
 * @param {!string} minorVersion The document minor_version_number__v field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost = function(docId, majorVersion, minorVersion, opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships'
      .replace('{' + 'doc_id' + '}', String(docId))
      .replace('{' + 'major_version' + '}', String(majorVersion))
      .replace('{' + 'minor_version' + '}', String(minorVersion));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'docId' is set
  if (!docId) {
    throw new Error('Missing required parameter docId when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost');
  }
  // verify required parameter 'majorVersion' is set
  if (!majorVersion) {
    throw new Error('Missing required parameter majorVersion when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost');
  }
  // verify required parameter 'minorVersion' is set
  if (!minorVersion) {
    throw new Error('Missing required parameter minorVersion when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Delete Single Document Relationship
 * 
 * @param {!string} docId The document id field value.
 * @param {!string} majorVersion The document major_version_number__v field value.
 * @param {!string} minorVersion The document minor_version_number__v field value.
 * @param {!string} relationshipId The relationship id field value. See Retrieve Document Relationships.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete = function(docId, majorVersion, minorVersion, relationshipId, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}'
      .replace('{' + 'doc_id' + '}', String(docId))
      .replace('{' + 'major_version' + '}', String(majorVersion))
      .replace('{' + 'minor_version' + '}', String(minorVersion))
      .replace('{' + 'relationship_id' + '}', String(relationshipId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'docId' is set
  if (!docId) {
    throw new Error('Missing required parameter docId when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete');
  }
  // verify required parameter 'majorVersion' is set
  if (!majorVersion) {
    throw new Error('Missing required parameter majorVersion when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete');
  }
  // verify required parameter 'minorVersion' is set
  if (!minorVersion) {
    throw new Error('Missing required parameter minorVersion when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete');
  }
  // verify required parameter 'relationshipId' is set
  if (!relationshipId) {
    throw new Error('Missing required parameter relationshipId when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Document Relationship
 * 
 * @param {!string} docId The document id field value.
 * @param {!string} majorVersion The document major_version_number__v field value.
 * @param {!string} minorVersion The document minor_version_number__v field value.
 * @param {!string} relationshipId The relationship id field value. See Retrieve Document Relationships.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet = function(docId, majorVersion, minorVersion, relationshipId, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}'
      .replace('{' + 'doc_id' + '}', String(docId))
      .replace('{' + 'major_version' + '}', String(majorVersion))
      .replace('{' + 'minor_version' + '}', String(minorVersion))
      .replace('{' + 'relationship_id' + '}', String(relationshipId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'docId' is set
  if (!docId) {
    throw new Error('Missing required parameter docId when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet');
  }
  // verify required parameter 'majorVersion' is set
  if (!majorVersion) {
    throw new Error('Missing required parameter majorVersion when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet');
  }
  // verify required parameter 'minorVersion' is set
  if (!minorVersion) {
    throw new Error('Missing required parameter minorVersion when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet');
  }
  // verify required parameter 'relationshipId' is set
  if (!relationshipId) {
    throw new Error('Missing required parameter relationshipId when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Document Version Renditions
 * 
 * @param {!string} docId The document id field value.
 * @param {!string} majorVersion The document major_version_number__v field value.
 * @param {!string} minorVersion The document minor_version_number__v field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet = function(docId, majorVersion, minorVersion, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions'
      .replace('{' + 'doc_id' + '}', String(docId))
      .replace('{' + 'major_version' + '}', String(majorVersion))
      .replace('{' + 'minor_version' + '}', String(minorVersion));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'docId' is set
  if (!docId) {
    throw new Error('Missing required parameter docId when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet');
  }
  // verify required parameter 'majorVersion' is set
  if (!majorVersion) {
    throw new Error('Missing required parameter majorVersion when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet');
  }
  // verify required parameter 'minorVersion' is set
  if (!minorVersion) {
    throw new Error('Missing required parameter minorVersion when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Delete Document Version Rendition
 * 
 * @param {!string} docId The document id field value.
 * @param {!string} majorVersion The document major_version_number__v field value.
 * @param {!string} minorVersion The document minor_version_number__v field value.
 * @param {!string} renditionType The document rendition type.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete = function(docId, majorVersion, minorVersion, renditionType, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}'
      .replace('{' + 'doc_id' + '}', String(docId))
      .replace('{' + 'major_version' + '}', String(majorVersion))
      .replace('{' + 'minor_version' + '}', String(minorVersion))
      .replace('{' + 'rendition_type' + '}', String(renditionType));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'docId' is set
  if (!docId) {
    throw new Error('Missing required parameter docId when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete');
  }
  // verify required parameter 'majorVersion' is set
  if (!majorVersion) {
    throw new Error('Missing required parameter majorVersion when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete');
  }
  // verify required parameter 'minorVersion' is set
  if (!minorVersion) {
    throw new Error('Missing required parameter minorVersion when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete');
  }
  // verify required parameter 'renditionType' is set
  if (!renditionType) {
    throw new Error('Missing required parameter renditionType when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Download Document Version Rendition File
 * 
 * @param {!string} docId The document id field value.
 * @param {!string} majorVersion The document major_version_number__v field value.
 * @param {!string} minorVersion The document minor_version_number__v field value.
 * @param {!string} renditionType The document rendition type.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet = function(docId, majorVersion, minorVersion, renditionType, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}'
      .replace('{' + 'doc_id' + '}', String(docId))
      .replace('{' + 'major_version' + '}', String(majorVersion))
      .replace('{' + 'minor_version' + '}', String(minorVersion))
      .replace('{' + 'rendition_type' + '}', String(renditionType));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'docId' is set
  if (!docId) {
    throw new Error('Missing required parameter docId when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet');
  }
  // verify required parameter 'majorVersion' is set
  if (!majorVersion) {
    throw new Error('Missing required parameter majorVersion when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet');
  }
  // verify required parameter 'minorVersion' is set
  if (!minorVersion) {
    throw new Error('Missing required parameter minorVersion when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet');
  }
  // verify required parameter 'renditionType' is set
  if (!renditionType) {
    throw new Error('Missing required parameter renditionType when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Upload Document Version Rendition
 * 
 * @param {!string} docId The document id field value.
 * @param {!string} majorVersion The document major_version_number__v field value.
 * @param {!string} minorVersion The document minor_version_number__v field value.
 * @param {!string} renditionType The document rendition type.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost = function(docId, majorVersion, minorVersion, renditionType, opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}'
      .replace('{' + 'doc_id' + '}', String(docId))
      .replace('{' + 'major_version' + '}', String(majorVersion))
      .replace('{' + 'minor_version' + '}', String(minorVersion))
      .replace('{' + 'rendition_type' + '}', String(renditionType));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'docId' is set
  if (!docId) {
    throw new Error('Missing required parameter docId when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost');
  }
  // verify required parameter 'majorVersion' is set
  if (!majorVersion) {
    throw new Error('Missing required parameter majorVersion when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost');
  }
  // verify required parameter 'minorVersion' is set
  if (!minorVersion) {
    throw new Error('Missing required parameter minorVersion when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost');
  }
  // verify required parameter 'renditionType' is set
  if (!renditionType) {
    throw new Error('Missing required parameter renditionType when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Replace Document Version Rendition
 * 
 * @param {!string} docId The document id field value.
 * @param {!string} majorVersion The document major_version_number__v field value.
 * @param {!string} minorVersion The document minor_version_number__v field value.
 * @param {!string} renditionType The document rendition type.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut = function(docId, majorVersion, minorVersion, renditionType, opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}'
      .replace('{' + 'doc_id' + '}', String(docId))
      .replace('{' + 'major_version' + '}', String(majorVersion))
      .replace('{' + 'minor_version' + '}', String(minorVersion))
      .replace('{' + 'rendition_type' + '}', String(renditionType));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'docId' is set
  if (!docId) {
    throw new Error('Missing required parameter docId when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut');
  }
  // verify required parameter 'majorVersion' is set
  if (!majorVersion) {
    throw new Error('Missing required parameter majorVersion when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut');
  }
  // verify required parameter 'minorVersion' is set
  if (!minorVersion) {
    throw new Error('Missing required parameter minorVersion when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut');
  }
  // verify required parameter 'renditionType' is set
  if (!renditionType) {
    throw new Error('Missing required parameter renditionType when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Download Document Version Thumbnail File
 * 
 * @param {!string} docId The document id field value.
 * @param {!string} majorVersion The document major_version_number__v field value.
 * @param {!string} minorVersion The document minor_version_number__v field value.
 * @param {!string=} opt_accept 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet = function(docId, majorVersion, minorVersion, opt_accept, opt_authorization, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/thumbnail'
      .replace('{' + 'doc_id' + '}', String(docId))
      .replace('{' + 'major_version' + '}', String(majorVersion))
      .replace('{' + 'minor_version' + '}', String(minorVersion));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'docId' is set
  if (!docId) {
    throw new Error('Missing required parameter docId when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet');
  }
  // verify required parameter 'majorVersion' is set
  if (!majorVersion) {
    throw new Error('Missing required parameter majorVersion when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet');
  }
  // verify required parameter 'minorVersion' is set
  if (!minorVersion) {
    throw new Error('Missing required parameter minorVersion when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet');
  }
  headerParams['Accept'] = opt_accept;

  headerParams['Authorization'] = opt_authorization;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve All Documents
 * 
 * @param {!string=} opt_namedFilter Retrieves only documents which you have created.
 * @param {!string=} opt_scope Searches only within the document content.
 * @param {!string=} opt_versionscope Retrieves all document versions, rather than only the latest version.
 * @param {!string=} opt_search Search for documents based on a {keyword} in searchable document fields.
 * @param {!string=} opt_limit See VQL documentation for more information.
 * @param {!string=} opt_sort See VQL documentation for more information.
 * @param {!string=} opt_start See VQL documentation for more information.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsGet = function(opt_namedFilter, opt_scope, opt_versionscope, opt_search, opt_limit, opt_sort, opt_start, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_namedFilter !== undefined) {
    queryParameters['named_filter'] = opt_namedFilter;
  }

  if (opt_scope !== undefined) {
    queryParameters['scope'] = opt_scope;
  }

  if (opt_versionscope !== undefined) {
    queryParameters['versionscope'] = opt_versionscope;
  }

  if (opt_search !== undefined) {
    queryParameters['search'] = opt_search;
  }

  if (opt_limit !== undefined) {
    queryParameters['limit'] = opt_limit;
  }

  if (opt_sort !== undefined) {
    queryParameters['sort'] = opt_sort;
  }

  if (opt_start !== undefined) {
    queryParameters['start'] = opt_start;
  }

  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve All Document Roles
 * 
 * @param {!string} id 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsIdRolesGet = function(id, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/{id}/roles'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling objectsDocumentsIdRolesGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Assign Users &amp; Groups to Roles on a Single Document
 * 
 * @param {!string} id 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsIdRolesPost = function(id, opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/{id}/roles'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling objectsDocumentsIdRolesPost');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Document Role
 * 
 * @param {!string} id The document &#x60;id&#x60;.
 * @param {!string} roleName The name of the role to retrieve. For example, &#x60;owner__v&#x60;.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsIdRolesRoleNameGet = function(id, roleName, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/{id}/roles/{role_name}'
      .replace('{' + 'id' + '}', String(id))
      .replace('{' + 'role_name' + '}', String(roleName));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling objectsDocumentsIdRolesRoleNameGet');
  }
  // verify required parameter 'roleName' is set
  if (!roleName) {
    throw new Error('Missing required parameter roleName when calling objectsDocumentsIdRolesRoleNameGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Document User Actions
 * 
 * @param {!string} id The document id field value from which to retrieve available user actions.
 * @param {!string} majorVersion The major version number of the document.
 * @param {!string} minorVersion The minor version number of the document.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet = function(id, majorVersion, minorVersion, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions'
      .replace('{' + 'id' + '}', String(id))
      .replace('{' + 'major_version' + '}', String(majorVersion))
      .replace('{' + 'minor_version' + '}', String(minorVersion));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet');
  }
  // verify required parameter 'majorVersion' is set
  if (!majorVersion) {
    throw new Error('Missing required parameter majorVersion when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet');
  }
  // verify required parameter 'minorVersion' is set
  if (!minorVersion) {
    throw new Error('Missing required parameter minorVersion when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Document Entry Criteria
 * 
 * @param {!string} id The document id field value from which to retrieve available user actions.
 * @param {!string} majorVersion The major version number of the document.
 * @param {!string} minorVersion The minor version number of the document.
 * @param {!string} nameV The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet = function(id, majorVersion, minorVersion, nameV, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}/entry_requirements'
      .replace('{' + 'id' + '}', String(id))
      .replace('{' + 'major_version' + '}', String(majorVersion))
      .replace('{' + 'minor_version' + '}', String(minorVersion))
      .replace('{' + 'name__v' + '}', String(nameV));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet');
  }
  // verify required parameter 'majorVersion' is set
  if (!majorVersion) {
    throw new Error('Missing required parameter majorVersion when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet');
  }
  // verify required parameter 'minorVersion' is set
  if (!minorVersion) {
    throw new Error('Missing required parameter minorVersion when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet');
  }
  // verify required parameter 'nameV' is set
  if (!nameV) {
    throw new Error('Missing required parameter nameV when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Initiate Document User Action
 * 
 * @param {!string} id The document id field value from which to retrieve available user actions.
 * @param {!string} majorVersion The major version number of the document.
 * @param {!string} minorVersion The minor version number of the document.
 * @param {!string} nameV The action name__v field value to initiate. This is retrieved from the Retrieve User Action request.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut = function(id, majorVersion, minorVersion, nameV, opt_authorization, opt_contentType, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}'
      .replace('{' + 'id' + '}', String(id))
      .replace('{' + 'major_version' + '}', String(majorVersion))
      .replace('{' + 'minor_version' + '}', String(minorVersion))
      .replace('{' + 'name__v' + '}', String(nameV));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut');
  }
  // verify required parameter 'majorVersion' is set
  if (!majorVersion) {
    throw new Error('Missing required parameter majorVersion when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut');
  }
  // verify required parameter 'minorVersion' is set
  if (!minorVersion) {
    throw new Error('Missing required parameter minorVersion when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut');
  }
  // verify required parameter 'nameV' is set
  if (!nameV) {
    throw new Error('Missing required parameter nameV when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve User Actions on Multiple Documents
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsLifecycleActionsPost = function(opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/lifecycle_actions';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Initiate Bulk Document User Actions
 * 
 * @param {!string} userActionName The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Documents endpoint.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsLifecycleActionsUserActionNamePut = function(userActionName, opt_authorization, opt_contentType, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/lifecycle_actions/{user_action_name}'
      .replace('{' + 'user_action_name' + '}', String(userActionName));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'userActionName' is set
  if (!userActionName) {
    throw new Error('Missing required parameter userActionName when calling objectsDocumentsLifecycleActionsUserActionNamePut');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Create Single Document
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!boolean=} opt_xVaultAPIMigrationMode When set to true,  you can use the status__v field to create documents in any lifecycle state. Additionally, you can manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsPost = function(opt_authorization, opt_accept, opt_xVaultAPIMigrationMode, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-MigrationMode'] = opt_xVaultAPIMigrationMode;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Delete Multiple Document Relationships
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsRelationshipsBatchDelete = function(opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/relationships/batch';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Create Multiple Document Relationships
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsRelationshipsBatchPost = function(opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/relationships/batch';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Delete Multiple Document Renditions
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsRenditionsBatchDelete = function(opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/renditions/batch';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Add Multiple Document Renditions
 * 
 * @param {!string=} opt_idParam If you’re identifying documents in your input by their external ID
 * @param {!string=} opt_largeSizeAsset If set to true, indicates that the renditions to add are of the Large Size Asset (large_size_asset__v) rendition type. Vault applies Document Migration Mode limitations to renditions created with the request, but Document Migration permission is not required and your vault need not be in Migration Mode to use the parameter. Note that the request results in an error if the CSV contains any rendition type other than large_size_asset__v.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!boolean=} opt_xVaultAPIMigrationMode Must be set to true when importing any rendition type other than large_size_asset__v. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsRenditionsBatchPost = function(opt_idParam, opt_largeSizeAsset, opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIMigrationMode, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/renditions/batch';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_idParam !== undefined) {
    queryParameters['idParam'] = opt_idParam;
  }

  if (opt_largeSizeAsset !== undefined) {
    queryParameters['largeSizeAsset'] = opt_largeSizeAsset;
  }

  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-MigrationMode'] = opt_xVaultAPIMigrationMode;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Remove Users and Groups from Roles on Multiple Documents &amp; Binders
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsRolesBatchDelete = function(opt_authorization, opt_contentType, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/roles/batch';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Assign Users &amp; Groups to Roles on Multiple Documents &amp; Binders
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsRolesBatchPost = function(opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/roles/batch';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Document Template Collection
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsTemplatesGet = function(opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/templates';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Create Single Document Template
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsTemplatesPost = function(opt_authorization, opt_contentType, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/templates';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Update Multiple Document Templates
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsTemplatesPut = function(opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/templates';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Delete Basic Document Template
 * 
 * @param {!string} templateName The document template name__v field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsTemplatesTemplateNameDelete = function(templateName, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/templates/{template_name}'
      .replace('{' + 'template_name' + '}', String(templateName));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'templateName' is set
  if (!templateName) {
    throw new Error('Missing required parameter templateName when calling objectsDocumentsTemplatesTemplateNameDelete');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Download Document Template File
 * 
 * @param {!string} templateName The document template name__v field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsTemplatesTemplateNameFileGet = function(templateName, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/templates/{template_name}/file'
      .replace('{' + 'template_name' + '}', String(templateName));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'templateName' is set
  if (!templateName) {
    throw new Error('Missing required parameter templateName when calling objectsDocumentsTemplatesTemplateNameFileGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Document Template Attributes
 * 
 * @param {!string} templateName The document template name__v field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsTemplatesTemplateNameGet = function(templateName, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/templates/{template_name}'
      .replace('{' + 'template_name' + '}', String(templateName));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'templateName' is set
  if (!templateName) {
    throw new Error('Missing required parameter templateName when calling objectsDocumentsTemplatesTemplateNameGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Update Single Document Template
 * 
 * @param {!string} templateName The document template name__v field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsTemplatesTemplateNamePut = function(templateName, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/templates/{template_name}'
      .replace('{' + 'template_name' + '}', String(templateName));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'templateName' is set
  if (!templateName) {
    throw new Error('Missing required parameter templateName when calling objectsDocumentsTemplatesTemplateNamePut');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Document Tokens
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsTokensPost = function(opt_authorization, opt_contentType, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/tokens';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Export Document Versions
 * 
 * @param {!boolean=} opt_source Optional: To exclude source files, include a query parameter source&#x3D;false. If omitted, defaults to true.
 * @param {!boolean=} opt_renditions Optional: To include renditions, include a query parameter renditions&#x3D;true. If omitted, defaults to false.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsVersionsBatchActionsFileextractPost = function(opt_source, opt_renditions, opt_authorization, opt_contentType, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/versions/batch/actions/fileextract';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_source !== undefined) {
    queryParameters['source'] = opt_source;
  }

  if (opt_renditions !== undefined) {
    queryParameters['renditions'] = opt_renditions;
  }

  headerParams['Authorization'] = opt_authorization;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Delete Multiple Document Versions
 * 
 * @param {!string=} opt_idParam If you’re identifying documents in your input by their external ID
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsVersionsBatchDelete = function(opt_idParam, opt_authorization, opt_contentType, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/versions/batch';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_idParam !== undefined) {
    queryParameters['idParam'] = opt_idParam;
  }

  headerParams['Authorization'] = opt_authorization;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Create Multiple Document Versions
 * 
 * @param {!string=} opt_idParam If you’re identifying documents in your input by their external ID
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIMigrationMode Must be set to true. Vault allows you to manually set the name and version number and to create documents in any lifecycle state using the &#x60;status__v&#x60; field, but does not allow you to change the document number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDocumentsVersionsBatchPost = function(opt_idParam, opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIMigrationMode, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/documents/versions/batch';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_idParam !== undefined) {
    queryParameters['idParam'] = opt_idParam;
  }

  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-MigrationMode'] = opt_xVaultAPIMigrationMode;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Domain Information
 * 
 * @param {!boolean=} opt_includeApplication To include Vault application type information in the response, set include_application to true. If omitted, defaults to false and application information is not included.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDomainGet = function(opt_includeApplication, opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/domain';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_includeApplication !== undefined) {
    queryParameters['include_application'] = opt_includeApplication;
  }

  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Domains
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsDomainsGet = function(opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/domains';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Add EDL Matched Documents
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsEdlMatchedDocumentsBatchActionsAddPost = function(opt_authorization, opt_contentType, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/edl_matched_documents/batch/actions/add';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Remove EDL Matched Documents
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsEdlMatchedDocumentsBatchActionsRemovePost = function(opt_authorization, opt_contentType, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/edl_matched_documents/batch/actions/remove';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Auto Managed Groups
 * 
 * @param {!string=} opt_limit Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 1000. 
 * @param {!string=} opt_offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsGroupsAutoGet = function(opt_limit, opt_offset, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/groups/auto';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_limit !== undefined) {
    queryParameters['limit'] = opt_limit;
  }

  if (opt_offset !== undefined) {
    queryParameters['offset'] = opt_offset;
  }

  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve All Groups
 * 
 * @param {!string=} opt_includeImplied When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. If omitted, the response includes only the members__v field. These users are individually added to a group by an Admin.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsGroupsGet = function(opt_includeImplied, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/groups';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_includeImplied !== undefined) {
    queryParameters['includeImplied'] = opt_includeImplied;
  }

  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Delete Group
 * 
 * @param {!string} groupId The group id field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsGroupsGroupIdDelete = function(groupId, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/groups/{group_id}'
      .replace('{' + 'group_id' + '}', String(groupId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'groupId' is set
  if (!groupId) {
    throw new Error('Missing required parameter groupId when calling objectsGroupsGroupIdDelete');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Group
 * 
 * @param {!string} groupId The group id field value.
 * @param {!boolean=} opt_includeImplied When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. When not used, the response includes only the members__v field. These users are individually added to a group by Admin.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsGroupsGroupIdGet = function(groupId, opt_includeImplied, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/groups/{group_id}'
      .replace('{' + 'group_id' + '}', String(groupId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'groupId' is set
  if (!groupId) {
    throw new Error('Missing required parameter groupId when calling objectsGroupsGroupIdGet');
  }
  if (opt_includeImplied !== undefined) {
    queryParameters['includeImplied'] = opt_includeImplied;
  }

  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Update Group
 * 
 * @param {!string} groupId The group id field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsGroupsGroupIdPut = function(groupId, opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/groups/{group_id}'
      .replace('{' + 'group_id' + '}', String(groupId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'groupId' is set
  if (!groupId) {
    throw new Error('Missing required parameter groupId when calling objectsGroupsGroupIdPut');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Create Group 
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsGroupsPost = function(opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/groups';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Application License Usage
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsLicensesGet = function(opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/licenses';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve All Multi-Record Workflows
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsObjectworkflowsActionsGet = function(opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/objectworkflows/actions';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Multi-Record Workflow Details
 * 
 * @param {!string} workflowName 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsObjectworkflowsActionsWorkflowNameGet = function(workflowName, opt_authorization, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/objectworkflows/actions/{workflow_name}'
      .replace('{' + 'workflow_name' + '}', String(workflowName));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'workflowName' is set
  if (!workflowName) {
    throw new Error('Missing required parameter workflowName when calling objectsObjectworkflowsActionsWorkflowNameGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Initiate Multi-Record Workflow
 * 
 * @param {!string} workflowName 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsObjectworkflowsActionsWorkflowNamePost = function(workflowName, opt_authorization, opt_contentType, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/objectworkflows/actions/{workflow_name}'
      .replace('{' + 'workflow_name' + '}', String(workflowName));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'workflowName' is set
  if (!workflowName) {
    throw new Error('Missing required parameter workflowName when calling objectsObjectworkflowsActionsWorkflowNamePost');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Workflows
 * 
 * @param {!string=} opt_objectV To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the participant parameter is not used. 
 * @param {!string=} opt_recordIdV To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the participant parameter is not used. 
 * @param {!string=} opt_participant To retrieve all workflows available to a particular user, include the user id field value as ?participant&#x3D;{id}. To retrieve your own workflows, set this value to ?participant&#x3D;me. This parameter is required when the object__v and record_id__v parameters are not used. 
 * @param {!string=} opt_statusV To retrieve all workflows with specific statuses, include one or more status name__v field values. For example: status__v&#x3D;active__v, status__v&#x3D;active__v,completed__v. Workflows with &#x60;status__v&#x3D;active__v&#x60; are in progress for the indicated object record. Valid statuses include: active__v completed__v cancelled__v
 * @param {!string=} opt_offset This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset&#x3D;201. 
 * @param {!string=} opt_pageSize This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size&#x3D;1000. 
 * @param {!string=} opt_loc When localized (translated) strings are available, retrieve them by including ?loc&#x3D;true. 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsObjectworkflowsGet = function(opt_objectV, opt_recordIdV, opt_participant, opt_statusV, opt_offset, opt_pageSize, opt_loc, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/objectworkflows';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_objectV !== undefined) {
    queryParameters['object__v'] = opt_objectV;
  }

  if (opt_recordIdV !== undefined) {
    queryParameters['record_id__v'] = opt_recordIdV;
  }

  if (opt_participant !== undefined) {
    queryParameters['participant'] = opt_participant;
  }

  if (opt_statusV !== undefined) {
    queryParameters['status__v'] = opt_statusV;
  }

  if (opt_offset !== undefined) {
    queryParameters['offset'] = opt_offset;
  }

  if (opt_pageSize !== undefined) {
    queryParameters['page_size'] = opt_pageSize;
  }

  if (opt_loc !== undefined) {
    queryParameters['loc'] = opt_loc;
  }

  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Workflow Tasks
 * 
 * @param {!string=} opt_objectV To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the assignee__v parameter is not used.
 * @param {!string=} opt_recordIdV To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the assignee__v parameter is not used.
 * @param {!string=} opt_assigneeV To retrieve all workflow tasks available to a particular user, include the user id field value as ?assignee__v&#x3D;{id}. To retrieve your own workflow tasks, set this value to ?assignee__v&#x3D;me. This parameter is required when the object__v and record_id__v parameters are not used. 
 * @param {!string=} opt_statusV To retrieve all workflow tasks with specific statuses, include one or more status name__v field values. For example: ?status__v&#x3D;available__v or ?status__v&#x3D;available__v,completed__v. 
 * @param {!string=} opt_offset This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset&#x3D;201. 
 * @param {!string=} opt_pageSize This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size&#x3D;1000. 
 * @param {!string=} opt_loc When localized (translated) strings are available, retrieve them by including ?loc&#x3D;true. 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsObjectworkflowsTasksGet = function(opt_objectV, opt_recordIdV, opt_assigneeV, opt_statusV, opt_offset, opt_pageSize, opt_loc, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/objectworkflows/tasks';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_objectV !== undefined) {
    queryParameters['object__v'] = opt_objectV;
  }

  if (opt_recordIdV !== undefined) {
    queryParameters['record_id__v'] = opt_recordIdV;
  }

  if (opt_assigneeV !== undefined) {
    queryParameters['assignee__v'] = opt_assigneeV;
  }

  if (opt_statusV !== undefined) {
    queryParameters['status__v'] = opt_statusV;
  }

  if (opt_offset !== undefined) {
    queryParameters['offset'] = opt_offset;
  }

  if (opt_pageSize !== undefined) {
    queryParameters['page_size'] = opt_pageSize;
  }

  if (opt_loc !== undefined) {
    queryParameters['loc'] = opt_loc;
  }

  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Accept Single Record Workflow Task
 * 
 * @param {!string} taskId The task id field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsObjectworkflowsTasksTaskIdActionsAcceptPost = function(taskId, opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/objectworkflows/tasks/{task_id}/actions/accept'
      .replace('{' + 'task_id' + '}', String(taskId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'taskId' is set
  if (!taskId) {
    throw new Error('Missing required parameter taskId when calling objectsObjectworkflowsTasksTaskIdActionsAcceptPost');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Cancel Workflow Task
 * 
 * @param {!string} taskId The task id field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsObjectworkflowsTasksTaskIdActionsCancelPost = function(taskId, opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/objectworkflows/tasks/{task_id}/actions/cancel'
      .replace('{' + 'task_id' + '}', String(taskId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'taskId' is set
  if (!taskId) {
    throw new Error('Missing required parameter taskId when calling objectsObjectworkflowsTasksTaskIdActionsCancelPost');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Complete Single Record Workflow Task
 * 
 * @param {!string} taskId The task id field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsObjectworkflowsTasksTaskIdActionsCompletePost = function(taskId, opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/objectworkflows/tasks/{task_id}/actions/complete'
      .replace('{' + 'task_id' + '}', String(taskId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'taskId' is set
  if (!taskId) {
    throw new Error('Missing required parameter taskId when calling objectsObjectworkflowsTasksTaskIdActionsCompletePost');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Workflow Task Actions
 * 
 * @param {!string} taskId The task id field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsObjectworkflowsTasksTaskIdActionsGet = function(taskId, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/objectworkflows/tasks/{task_id}/actions'
      .replace('{' + 'task_id' + '}', String(taskId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'taskId' is set
  if (!taskId) {
    throw new Error('Missing required parameter taskId when calling objectsObjectworkflowsTasksTaskIdActionsGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Accept Multi-item Workflow Task
 * 
 * @param {!string} taskId The task id field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsObjectworkflowsTasksTaskIdActionsMdwacceptPost = function(taskId, opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/objectworkflows/tasks/{task_id}/actions/mdwaccept'
      .replace('{' + 'task_id' + '}', String(taskId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'taskId' is set
  if (!taskId) {
    throw new Error('Missing required parameter taskId when calling objectsObjectworkflowsTasksTaskIdActionsMdwacceptPost');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Complete Multi-item Workflow Task
 * 
 * @param {!string} taskId The task id field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsObjectworkflowsTasksTaskIdActionsMdwcompletePost = function(taskId, opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/objectworkflows/tasks/{task_id}/actions/mdwcomplete'
      .replace('{' + 'task_id' + '}', String(taskId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'taskId' is set
  if (!taskId) {
    throw new Error('Missing required parameter taskId when calling objectsObjectworkflowsTasksTaskIdActionsMdwcompletePost');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Manage Multi-Item Workflow Content
 * 
 * @param {!string} taskId The task id field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPost = function(taskId, opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/objectworkflows/tasks/{task_id}/actions/mdwmanagecontent'
      .replace('{' + 'task_id' + '}', String(taskId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'taskId' is set
  if (!taskId) {
    throw new Error('Missing required parameter taskId when calling objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPost');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Reassign Multi-item Workflow Task
 * 
 * @param {!string} taskId The id of the task to reassign.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsObjectworkflowsTasksTaskIdActionsMdwreassignPost = function(taskId, opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/objectworkflows/tasks/{task_id}/actions/mdwreassign'
      .replace('{' + 'task_id' + '}', String(taskId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'taskId' is set
  if (!taskId) {
    throw new Error('Missing required parameter taskId when calling objectsObjectworkflowsTasksTaskIdActionsMdwreassignPost');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Reassign Single Record Workflow Task
 * 
 * @param {!string} taskId The id of the task to reassign.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsObjectworkflowsTasksTaskIdActionsReassignPost = function(taskId, opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/objectworkflows/tasks/{task_id}/actions/reassign'
      .replace('{' + 'task_id' + '}', String(taskId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'taskId' is set
  if (!taskId) {
    throw new Error('Missing required parameter taskId when calling objectsObjectworkflowsTasksTaskIdActionsReassignPost');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Workflow Task Action Details
 * 
 * @param {!string} taskId The task id field value.
 * @param {!string} taskAction The name of the task action retrieved from Retrieve Workflow Task Actions.
 * @param {!string=} opt_loc When localized (translated) strings are available, retrieve them by including loc&#x3D;true. 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsObjectworkflowsTasksTaskIdActionsTaskActionGet = function(taskId, taskAction, opt_loc, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/objectworkflows/tasks/{task_id}/actions/{task_action}'
      .replace('{' + 'task_id' + '}', String(taskId))
      .replace('{' + 'task_action' + '}', String(taskAction));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'taskId' is set
  if (!taskId) {
    throw new Error('Missing required parameter taskId when calling objectsObjectworkflowsTasksTaskIdActionsTaskActionGet');
  }
  // verify required parameter 'taskAction' is set
  if (!taskAction) {
    throw new Error('Missing required parameter taskAction when calling objectsObjectworkflowsTasksTaskIdActionsTaskActionGet');
  }
  if (opt_loc !== undefined) {
    queryParameters['loc'] = opt_loc;
  }

  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Undo Workflow Task Acceptance
 * 
 * @param {!string} taskId The task id field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsObjectworkflowsTasksTaskIdActionsUndoacceptPost = function(taskId, opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/objectworkflows/tasks/{task_id}/actions/undoaccept'
      .replace('{' + 'task_id' + '}', String(taskId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'taskId' is set
  if (!taskId) {
    throw new Error('Missing required parameter taskId when calling objectsObjectworkflowsTasksTaskIdActionsUndoacceptPost');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Update Workflow Task Due Date
 * 
 * @param {!string} taskId The id of the task.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePost = function(taskId, opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/objectworkflows/tasks/{task_id}/actions/updateduedate'
      .replace('{' + 'task_id' + '}', String(taskId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'taskId' is set
  if (!taskId) {
    throw new Error('Missing required parameter taskId when calling objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePost');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Workflow Task Details
 * 
 * @param {!string} taskId The task id field value.
 * @param {!boolean=} opt_loc When localized (translated) strings are available, retrieve them by including loc&#x3D;true.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsObjectworkflowsTasksTaskIdGet = function(taskId, opt_loc, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/objectworkflows/tasks/{task_id}'
      .replace('{' + 'task_id' + '}', String(taskId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'taskId' is set
  if (!taskId) {
    throw new Error('Missing required parameter taskId when calling objectsObjectworkflowsTasksTaskIdGet');
  }
  if (opt_loc !== undefined) {
    queryParameters['loc'] = opt_loc;
  }

  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Workflow Actions
 * 
 * @param {!string} workflowId The workflow id field value.
 * @param {!string=} opt_loc When localized (translated) strings are available, retrieve them by including loc&#x3D;true. 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsObjectworkflowsWorkflowIdActionsGet = function(workflowId, opt_loc, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/objectworkflows/{workflow_id}/actions'
      .replace('{' + 'workflow_id' + '}', String(workflowId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'workflowId' is set
  if (!workflowId) {
    throw new Error('Missing required parameter workflowId when calling objectsObjectworkflowsWorkflowIdActionsGet');
  }
  if (opt_loc !== undefined) {
    queryParameters['loc'] = opt_loc;
  }

  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Workflow Action Details
 * 
 * @param {!string} workflowId The workflow id field value.
 * @param {!string} workflowAction The workflow action name retrieved from Retrieve Workflow Actions.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet = function(workflowId, workflowAction, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/objectworkflows/{workflow_id}/actions/{workflow_action}'
      .replace('{' + 'workflow_id' + '}', String(workflowId))
      .replace('{' + 'workflow_action' + '}', String(workflowAction));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'workflowId' is set
  if (!workflowId) {
    throw new Error('Missing required parameter workflowId when calling objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet');
  }
  // verify required parameter 'workflowAction' is set
  if (!workflowAction) {
    throw new Error('Missing required parameter workflowAction when calling objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Initiate Workflow Action
 * 
 * @param {!string} workflowId The workflow id field value.
 * @param {!string} workflowAction The workflow action name retrieved from Retrieve Workflow Actions.
 * @param {!string=} opt_documentsSys Include the id or ids as a comma-separated list of the document(s) to be removed from a document workflow when using the removecontent action. If your workflow_action is remove_content, include the id of the document to remove the workflow. To remove multiple documents, use a comma-separated list of ids.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost = function(workflowId, workflowAction, opt_documentsSys, opt_authorization, opt_contentType, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/objectworkflows/{workflow_id}/actions/{workflow_action}'
      .replace('{' + 'workflow_id' + '}', String(workflowId))
      .replace('{' + 'workflow_action' + '}', String(workflowAction));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'workflowId' is set
  if (!workflowId) {
    throw new Error('Missing required parameter workflowId when calling objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost');
  }
  // verify required parameter 'workflowAction' is set
  if (!workflowAction) {
    throw new Error('Missing required parameter workflowAction when calling objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost');
  }
  if (opt_documentsSys !== undefined) {
    queryParameters['documents__sys'] = opt_documentsSys;
  }

  headerParams['Authorization'] = opt_authorization;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Workflow Details
 * 
 * @param {!string} workflowId The workflow id field value.
 * @param {!boolean=} opt_loc When localized (translated) strings are available, retrieve them by including loc&#x3D;true.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsObjectworkflowsWorkflowIdGet = function(workflowId, opt_loc, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/objectworkflows/{workflow_id}'
      .replace('{' + 'workflow_id' + '}', String(workflowId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'workflowId' is set
  if (!workflowId) {
    throw new Error('Missing required parameter workflowId when calling objectsObjectworkflowsWorkflowIdGet');
  }
  if (opt_loc !== undefined) {
    queryParameters['loc'] = opt_loc;
  }

  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve All Picklists
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsPicklistsGet = function(opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/picklists';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Picklist Values
 * 
 * @param {!string} picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsPicklistsPicklistNameGet = function(picklistName, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/picklists/{picklist_name}'
      .replace('{' + 'picklist_name' + '}', String(picklistName));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'picklistName' is set
  if (!picklistName) {
    throw new Error('Missing required parameter picklistName when calling objectsPicklistsPicklistNameGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Inactivate Picklist Value
 * 
 * @param {!string} picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
 * @param {!string} picklistValueName The picklist value name field value (north_america__c, south_america__c, etc.)
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsPicklistsPicklistNamePicklistValueNameDelete = function(picklistName, picklistValueName, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/picklists/{picklist_name}/{picklist_value_name}'
      .replace('{' + 'picklist_name' + '}', String(picklistName))
      .replace('{' + 'picklist_value_name' + '}', String(picklistValueName));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'picklistName' is set
  if (!picklistName) {
    throw new Error('Missing required parameter picklistName when calling objectsPicklistsPicklistNamePicklistValueNameDelete');
  }
  // verify required parameter 'picklistValueName' is set
  if (!picklistValueName) {
    throw new Error('Missing required parameter picklistValueName when calling objectsPicklistsPicklistNamePicklistValueNameDelete');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Update Picklist Value
 * 
 * @param {!string} picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
 * @param {!string} picklistValueName The picklist value name field value (north_america__c, south_america__c, etc.)
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsPicklistsPicklistNamePicklistValueNamePut = function(picklistName, picklistValueName, opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/picklists/{picklist_name}/{picklist_value_name}'
      .replace('{' + 'picklist_name' + '}', String(picklistName))
      .replace('{' + 'picklist_value_name' + '}', String(picklistValueName));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'picklistName' is set
  if (!picklistName) {
    throw new Error('Missing required parameter picklistName when calling objectsPicklistsPicklistNamePicklistValueNamePut');
  }
  // verify required parameter 'picklistValueName' is set
  if (!picklistValueName) {
    throw new Error('Missing required parameter picklistValueName when calling objectsPicklistsPicklistNamePicklistValueNamePut');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Create Picklist Values
 * 
 * @param {!string} picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsPicklistsPicklistNamePost = function(picklistName, opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/picklists/{picklist_name}'
      .replace('{' + 'picklist_name' + '}', String(picklistName));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'picklistName' is set
  if (!picklistName) {
    throw new Error('Missing required parameter picklistName when calling objectsPicklistsPicklistNamePost');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Update Picklist Value Label
 * 
 * @param {!string} picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsPicklistsPicklistNamePut = function(picklistName, opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/picklists/{picklist_name}'
      .replace('{' + 'picklist_name' + '}', String(picklistName));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'picklistName' is set
  if (!picklistName) {
    throw new Error('Missing required parameter picklistName when calling objectsPicklistsPicklistNamePut');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Build Production Vault
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsSandboxActionsBuildproductionPost = function(opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/sandbox/actions/buildproduction';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Promote to Production
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsSandboxActionsPromoteproductionPost = function(opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/sandbox/actions/promoteproduction';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Recheck Sandbox Usage Limit
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsSandboxActionsRecheckusagePost = function(opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/sandbox/actions/recheckusage';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Change Sandbox Size
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsSandboxBatchChangesizePost = function(opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/sandbox/batch/changesize';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Set Sandbox Entitlements
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsSandboxEntitlementsSetPost = function(opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/sandbox/entitlements/set';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Sandboxes
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsSandboxGet = function(opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/sandbox';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Delete Sandbox
 * 
 * @param {!string} name The name of the sandbox vault to delete. This is the name which appears on the My Vaults page.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsSandboxNameDelete = function(name, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/sandbox/{name}'
      .replace('{' + 'name' + '}', String(name));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'name' is set
  if (!name) {
    throw new Error('Missing required parameter name when calling objectsSandboxNameDelete');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Create or Refresh Sandbox
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsSandboxPost = function(opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/sandbox';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Update Sandbox Snapshot
 * 
 * @param {!string} apiName The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsSandboxSnapshotApiNameActionsUpdatePost = function(apiName, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/sandbox/snapshot/{api_name}/actions/update'
      .replace('{' + 'api_name' + '}', String(apiName));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'apiName' is set
  if (!apiName) {
    throw new Error('Missing required parameter apiName when calling objectsSandboxSnapshotApiNameActionsUpdatePost');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Upgrade Sandbox Snapshot
 * 
 * @param {!string} apiName The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsSandboxSnapshotApiNameActionsUpgradePost = function(apiName, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/sandbox/snapshot/{api_name}/actions/upgrade'
      .replace('{' + 'api_name' + '}', String(apiName));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'apiName' is set
  if (!apiName) {
    throw new Error('Missing required parameter apiName when calling objectsSandboxSnapshotApiNameActionsUpgradePost');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Delete Sandbox Snapshot
 * 
 * @param {!string} apiName The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsSandboxSnapshotApiNameDelete = function(apiName, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/sandbox/snapshot/{api_name}'
      .replace('{' + 'api_name' + '}', String(apiName));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'apiName' is set
  if (!apiName) {
    throw new Error('Missing required parameter apiName when calling objectsSandboxSnapshotApiNameDelete');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Sandbox Snapshots
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsSandboxSnapshotGet = function(opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/sandbox/snapshot';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Create Sandbox Snapshot
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsSandboxSnapshotPost = function(opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/sandbox/snapshot';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Refresh Sandbox from Snapshot
 * 
 * @param {!string} vaultId The Vault ID of the sandbox to be refreshed.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsSandboxVaultIdActionsRefreshPost = function(vaultId, opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/sandbox/{vault_id}/actions/refresh'
      .replace('{' + 'vault_id' + '}', String(vaultId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'vaultId' is set
  if (!vaultId) {
    throw new Error('Missing required parameter vaultId when calling objectsSandboxVaultIdActionsRefreshPost');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Sandbox Details by ID
 * 
 * @param {!string} vaultId 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsSandboxVaultIdGet = function(vaultId, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/sandbox/{vault_id}'
      .replace('{' + 'vault_id' + '}', String(vaultId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'vaultId' is set
  if (!vaultId) {
    throw new Error('Missing required parameter vaultId when calling objectsSandboxVaultIdGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve All Security Policies
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsSecuritypoliciesGet = function(opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/securitypolicies';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Security Policy
 * 
 * @param {!string} securityPolicyName Security policy name__v field value (retrieved from previous request). This is typically a numeric value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsSecuritypoliciesSecurityPolicyNameGet = function(securityPolicyName, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/securitypolicies/{security_policy_name}'
      .replace('{' + 'security_policy_name' + '}', String(securityPolicyName));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'securityPolicyName' is set
  if (!securityPolicyName) {
    throw new Error('Missing required parameter securityPolicyName when calling objectsSecuritypoliciesSecurityPolicyNameGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve All Users
 * 
 * @param {!string=} opt_vaults Retrieve all users assigned to all Vaults in your domain.
 * @param {!string=} opt_excludeVaultMembership Optional: Set to false to include vault_membership fields. If true or omitted, vault_membership fields are not included in the response.
 * @param {!string=} opt_excludeAppLicensing Optional: Set to false to include app_licensing fields. If true or omitted, app_licensing fields are not included in the response.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsUsersGet = function(opt_vaults, opt_excludeVaultMembership, opt_excludeAppLicensing, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/users/';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_vaults !== undefined) {
    queryParameters['vaults'] = opt_vaults;
  }

  if (opt_excludeVaultMembership !== undefined) {
    queryParameters['exclude_vault_membership'] = opt_excludeVaultMembership;
  }

  if (opt_excludeAppLicensing !== undefined) {
    queryParameters['exclude_app_licensing'] = opt_excludeAppLicensing;
  }

  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve User
 * 
 * @param {!string} id The user id field value. Use the value me to get information for the currently authenticated user.
 * @param {!string=} opt_excludeVaultMembership Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response.
 * @param {!string=} opt_excludeAppLicensing Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsUsersIdGet = function(id, opt_excludeVaultMembership, opt_excludeAppLicensing, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/users/{id}'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling objectsUsersIdGet');
  }
  if (opt_excludeVaultMembership !== undefined) {
    queryParameters['exclude_vault_membership'] = opt_excludeVaultMembership;
  }

  if (opt_excludeAppLicensing !== undefined) {
    queryParameters['exclude_app_licensing'] = opt_excludeAppLicensing;
  }

  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve User Permissions
 * 
 * @param {!string} id The ID of the user. Use the value me to retrieve information for the currently authenticated user.
 * @param {!string=} opt_filter Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsUsersIdPermissionsGet = function(id, opt_filter, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/users/{id}/permissions'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling objectsUsersIdPermissionsGet');
  }
  if (opt_filter !== undefined) {
    queryParameters['filter'] = opt_filter;
  }

  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Update Single User
 * 
 * @param {!string} id The user id field value. Use the value me to get information for the currently authenticated user.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsUsersIdPut = function(id, opt_authorization, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/users/{id}'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling objectsUsersIdPut');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Validate Session User
 * 
 * @param {!string=} opt_excludeVaultMembership Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response.
 * @param {!string=} opt_excludeAppLicensing Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsUsersMeGet = function(opt_excludeVaultMembership, opt_excludeAppLicensing, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/users/me';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_excludeVaultMembership !== undefined) {
    queryParameters['exclude_vault_membership'] = opt_excludeVaultMembership;
  }

  if (opt_excludeAppLicensing !== undefined) {
    queryParameters['exclude_app_licensing'] = opt_excludeAppLicensing;
  }

  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Change My Password
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsUsersMePasswordPost = function(opt_authorization, opt_contentType, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/users/me/password';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve My User Permissions
 * 
 * @param {!string=} opt_filter Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsUsersMePermissionsGet = function(opt_filter, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/users/me/permissions';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_filter !== undefined) {
    queryParameters['filter'] = opt_filter;
  }

  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Update My User
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsUsersMePut = function(opt_authorization, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/users/me';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Create Single User
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsUsersPost = function(opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/users';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Update Multiple Users
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsUsersPut = function(opt_authorization, opt_contentType, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/users';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Disable User
 * 
 * @param {!string} userId The user id field value. 
 * @param {!boolean=} opt_domain When true, this disables the user account in all vaults in the domain.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsUsersUserIdDelete = function(userId, opt_domain, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/users/{user_id}'
      .replace('{' + 'user_id' + '}', String(userId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'userId' is set
  if (!userId) {
    throw new Error('Missing required parameter userId when calling objectsUsersUserIdDelete');
  }
  if (opt_domain !== undefined) {
    queryParameters['domain'] = opt_domain;
  }

  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Update Vault Membership
 * 
 * @param {!string} userId The user id field value.
 * @param {!string} vaultId The system-managed id field value assigned to each vault in the domain.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsUsersUserIdVaultMembershipVaultIdPut = function(userId, vaultId, opt_authorization, opt_contentType, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/users/{user_id}/vault_membership/{vault_id}'
      .replace('{' + 'user_id' + '}', String(userId))
      .replace('{' + 'vault_id' + '}', String(vaultId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'userId' is set
  if (!userId) {
    throw new Error('Missing required parameter userId when calling objectsUsersUserIdVaultMembershipVaultIdPut');
  }
  // verify required parameter 'vaultId' is set
  if (!vaultId) {
    throw new Error('Missing required parameter vaultId when calling objectsUsersUserIdVaultMembershipVaultIdPut');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Vault Compare
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsVaultActionsComparePost = function(opt_authorization, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/vault/actions/compare';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Vault Configuration Report
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.objectsVaultActionsConfigreportPost = function(opt_authorization, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/objects/vault/actions/configreport';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Component Definition Query
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.queryComponentsPost = function(opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/query/components';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Next Page URL
 * 
 * @param {!string} nextPage 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!boolean=} opt_xVaultAPIDescribeQuery 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.queryNextPagePost = function(nextPage, opt_authorization, opt_accept, opt_xVaultAPIDescribeQuery, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/query/{next_page}'
      .replace('{' + 'next_page' + '}', String(nextPage));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'nextPage' is set
  if (!nextPage) {
    throw new Error('Missing required parameter nextPage when calling queryNextPagePost');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-DescribeQuery'] = opt_xVaultAPIDescribeQuery;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Submitting a Query
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!boolean=} opt_xVaultAPIDescribeQuery 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.queryPost = function(opt_authorization, opt_accept, opt_xVaultAPIDescribeQuery, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/query';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-DescribeQuery'] = opt_xVaultAPIDescribeQuery;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Previous Page URL
 * 
 * @param {!string} previousPage 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!boolean=} opt_xVaultAPIDescribeQuery 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.queryPreviousPagePost = function(previousPage, opt_authorization, opt_accept, opt_xVaultAPIDescribeQuery, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/query/{previous_page}'
      .replace('{' + 'previous_page' + '}', String(previousPage));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'previousPage' is set
  if (!previousPage) {
    throw new Error('Missing required parameter previousPage when calling queryPreviousPagePost');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-DescribeQuery'] = opt_xVaultAPIDescribeQuery;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Current User with SCIM
 * 
 * @param {!string=} opt_attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
 * @param {!string=} opt_excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.scimV2MeGet = function(opt_attributes, opt_excludedAttributes, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/scim/v2/Me';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_attributes !== undefined) {
    queryParameters['attributes'] = opt_attributes;
  }

  if (opt_excludedAttributes !== undefined) {
    queryParameters['excludedAttributes'] = opt_excludedAttributes;
  }

  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Update Current User with SCIM
 * 
 * @param {!string=} opt_attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
 * @param {!string=} opt_excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.scimV2MePut = function(opt_attributes, opt_excludedAttributes, opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/scim/v2/Me';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_attributes !== undefined) {
    queryParameters['attributes'] = opt_attributes;
  }

  if (opt_excludedAttributes !== undefined) {
    queryParameters['excludedAttributes'] = opt_excludedAttributes;
  }

  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve All SCIM Resource Types
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.scimV2ResourceTypesGet = function(opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/scim/v2/ResourceTypes';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Single SCIM Resource Type
 * 
 * @param {!string} type A specific resource type. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the id value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.scimV2ResourceTypesTypeGet = function(type, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/scim/v2/ResourceTypes/{type}'
      .replace('{' + 'type' + '}', String(type));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'type' is set
  if (!type) {
    throw new Error('Missing required parameter type when calling scimV2ResourceTypesTypeGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve All SCIM Schema Information
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.scimV2SchemasGet = function(opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/scim/v2/Schemas';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Single SCIM Schema Information
 * 
 * @param {!string} id The ID of a specific schema. For example, urn:ietf:params:scim:schemas:extension:veevavault:2.0:User.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.scimV2SchemasIdGet = function(id, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/scim/v2/Schemas/{id}'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling scimV2SchemasIdGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve SCIM Provider
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.scimV2ServiceProviderConfigGet = function(opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/scim/v2/ServiceProviderConfig';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve SCIM Resources
 * 
 * @param {!string} type The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value.
 * @param {!string=} opt_filter Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \&quot;{value}\&quot;. For example, to filter for a particular user name, userName eq \&quot;john\&quot;. Complex expressions are not supported, and eq is the only supported operator.
 * @param {!string=} opt_attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
 * @param {!string=} opt_excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
 * @param {!string=} opt_sortBy Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage
 * @param {!string=} opt_sortOrder Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000.
 * @param {!string=} opt_startIndex Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.scimV2TypeGet = function(type, opt_filter, opt_attributes, opt_excludedAttributes, opt_sortBy, opt_sortOrder, opt_startIndex, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/scim/v2/{type}'
      .replace('{' + 'type' + '}', String(type));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'type' is set
  if (!type) {
    throw new Error('Missing required parameter type when calling scimV2TypeGet');
  }
  if (opt_filter !== undefined) {
    queryParameters['filter'] = opt_filter;
  }

  if (opt_attributes !== undefined) {
    queryParameters['attributes'] = opt_attributes;
  }

  if (opt_excludedAttributes !== undefined) {
    queryParameters['excludedAttributes'] = opt_excludedAttributes;
  }

  if (opt_sortBy !== undefined) {
    queryParameters['sortBy'] = opt_sortBy;
  }

  if (opt_sortOrder !== undefined) {
    queryParameters['sortOrder'] = opt_sortOrder;
  }

  if (opt_startIndex !== undefined) {
    queryParameters['startIndex'] = opt_startIndex;
  }

  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Single SCIM Resource
 * 
 * @param {!string} type The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value.
 * @param {!string} id The ID of the resource to retrieve. You can retrieve all resource IDs from a particular resource type with the Retrieve SCIM Resources endpoint. For example, business_admin__v.
 * @param {!string=} opt_attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
 * @param {!string=} opt_excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.scimV2TypeIdGet = function(type, id, opt_attributes, opt_excludedAttributes, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/scim/v2/{type}/{id}'
      .replace('{' + 'type' + '}', String(type))
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'type' is set
  if (!type) {
    throw new Error('Missing required parameter type when calling scimV2TypeIdGet');
  }
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling scimV2TypeIdGet');
  }
  if (opt_attributes !== undefined) {
    queryParameters['attributes'] = opt_attributes;
  }

  if (opt_excludedAttributes !== undefined) {
    queryParameters['excludedAttributes'] = opt_excludedAttributes;
  }

  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve All Users with SCIM
 * 
 * @param {!string=} opt_filter Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \&quot;{value}\&quot;. For example, to filter for a particular user name, userName eq \&quot;john\&quot;. Complex expressions are not supported, and eq is the only supported operator.
 * @param {!string=} opt_attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
 * @param {!string=} opt_excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
 * @param {!string=} opt_sortBy Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage
 * @param {!string=} opt_sortOrder Optional: Specify the order in which the sortBy parameter is applied. Allowed values are ascending or descending. If omitted, defaults to ascending.
 * @param {!string=} opt_count Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000.
 * @param {!string=} opt_startIndex Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.scimV2UsersGet = function(opt_filter, opt_attributes, opt_excludedAttributes, opt_sortBy, opt_sortOrder, opt_count, opt_startIndex, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/scim/v2/Users';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_filter !== undefined) {
    queryParameters['filter'] = opt_filter;
  }

  if (opt_attributes !== undefined) {
    queryParameters['attributes'] = opt_attributes;
  }

  if (opt_excludedAttributes !== undefined) {
    queryParameters['excludedAttributes'] = opt_excludedAttributes;
  }

  if (opt_sortBy !== undefined) {
    queryParameters['sortBy'] = opt_sortBy;
  }

  if (opt_sortOrder !== undefined) {
    queryParameters['sortOrder'] = opt_sortOrder;
  }

  if (opt_count !== undefined) {
    queryParameters['count'] = opt_count;
  }

  if (opt_startIndex !== undefined) {
    queryParameters['startIndex'] = opt_startIndex;
  }

  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Single User with SCIM
 * 
 * @param {!string} id The id of the user you wish to update.
 * @param {!string=} opt_filter Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \&quot;{value}\&quot;. For example, to filter for a particular user name, userName eq \&quot;john\&quot;. Complex expressions are not supported, and eq is the only supported operator.
 * @param {!string=} opt_attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
 * @param {!string=} opt_excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.scimV2UsersIdGet = function(id, opt_filter, opt_attributes, opt_excludedAttributes, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/scim/v2/Users/{id}'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling scimV2UsersIdGet');
  }
  if (opt_filter !== undefined) {
    queryParameters['filter'] = opt_filter;
  }

  if (opt_attributes !== undefined) {
    queryParameters['attributes'] = opt_attributes;
  }

  if (opt_excludedAttributes !== undefined) {
    queryParameters['excludedAttributes'] = opt_excludedAttributes;
  }

  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Update User with SCIM
 * 
 * @param {!string} id The id of the user you wish to update.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.scimV2UsersIdPut = function(id, opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/scim/v2/Users/{id}'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling scimV2UsersIdPut');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Create User with SCIM
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.scimV2UsersPost = function(opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/scim/v2/Users';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Signing Certificate
 * 
 * @param {!string} certId The cert_id is provided in each Spark message in the X-VaultAPISignature-CertificateId header.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.servicesCertificateCertIdGet = function(certId, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/services/certificate/{cert_id}'
      .replace('{' + 'cert_id' + '}', String(certId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'certId' is set
  if (!certId) {
    throw new Error('Missing required parameter certId when calling servicesCertificateCertIdGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Disable Configuration Mode
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.servicesConfigurationModeActionsDisablePost = function(opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/services/configuration_mode/actions/disable';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Enable Configuration Mode
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.servicesConfigurationModeActionsEnablePost = function(opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/services/configuration_mode/actions/enable';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Available Direct Data Files
 * 
 * @param {!string=} opt_extractType The Direct Data file type: incremental_directdata, full_directdata, or log_directdata. If omitted, returns all files.
 * @param {!number=} opt_startTime Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 7AM on January 15, 2024 would use 2024-01-15T07:00:00Z. If omitted, defaults to the Vault’s creation date and time.
 * @param {!number=} opt_stopTime Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 9AM on January 15, 2024 would use 2024-01-15T09:00:00Z. If omitted, defaults to today’s date and current time.
 * @param {!string=} opt_accept 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.servicesDirectdataFilesGet = function(opt_extractType, opt_startTime, opt_stopTime, opt_accept, opt_authorization, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/services/directdata/files';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_extractType !== undefined) {
    queryParameters['extract_type'] = opt_extractType;
  }

  if (opt_startTime !== undefined) {
    queryParameters['start_time'] = opt_startTime;
  }

  if (opt_stopTime !== undefined) {
    queryParameters['stop_time'] = opt_stopTime;
  }

  headerParams['Accept'] = opt_accept;

  headerParams['Authorization'] = opt_authorization;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Download Direct Data File
 * 
 * @param {!string} name The name of the Direct Data file part. Obtain this from the Retrieve Available Direct Data Files request. For example, 146478-20240213-0000-F.001.
 * @param {!string=} opt_accept 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.servicesDirectdataFilesNameGet = function(name, opt_accept, opt_authorization, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/services/directdata/files/{name}'
      .replace('{' + 'name' + '}', String(name));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'name' is set
  if (!name) {
    throw new Error('Missing required parameter name when calling servicesDirectdataFilesNameGet');
  }
  headerParams['Accept'] = opt_accept;

  headerParams['Authorization'] = opt_authorization;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Download Item Content
 * 
 * @param {!string} item The absolute path to a file or folder. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_range Optional: Specifies a partial range of bytes to include in the upload. Maximum 50 MB. Must be in the format &#x60;bytes&#x3D;{min}-{max}&#x60;. For example, &#x60;bytes&#x3D;0-1000&#x60;.
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.servicesFileStagingItemsContentItemGet = function(item, opt_authorization, opt_accept, opt_range, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/services/file_staging/items/content/{item}'
      .replace('{' + 'item' + '}', String(item));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'item' is set
  if (!item) {
    throw new Error('Missing required parameter item when calling servicesFileStagingItemsContentItemGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Range'] = opt_range;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Delete File or Folder
 * 
 * @param {!string} item The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
 * @param {!string=} opt_recursive Applicable to deleting folders only. If true, the request will delete the contents of a folder and all subfolders. The default is false.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.servicesFileStagingItemsItemDelete = function(item, opt_recursive, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/services/file_staging/items/{item}'
      .replace('{' + 'item' + '}', String(item));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'item' is set
  if (!item) {
    throw new Error('Missing required parameter item when calling servicesFileStagingItemsItemDelete');
  }
  if (opt_recursive !== undefined) {
    queryParameters['recursive'] = opt_recursive;
  }

  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * List Items at a Path
 * 
 * @param {!string} item The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
 * @param {!string=} opt_recursive If true, the response will contain the contents of all subfolders. If not specified, the default value is false.
 * @param {!string=} opt_limit Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000.
 * @param {!string=} opt_formatResult If set to csv, the response includes a job_id. Use the Job ID value to retrieve the status and results of the request.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.servicesFileStagingItemsItemGet = function(item, opt_recursive, opt_limit, opt_formatResult, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/services/file_staging/items/{item}'
      .replace('{' + 'item' + '}', String(item));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'item' is set
  if (!item) {
    throw new Error('Missing required parameter item when calling servicesFileStagingItemsItemGet');
  }
  if (opt_recursive !== undefined) {
    queryParameters['recursive'] = opt_recursive;
  }

  if (opt_limit !== undefined) {
    queryParameters['limit'] = opt_limit;
  }

  if (opt_formatResult !== undefined) {
    queryParameters['format_result'] = opt_formatResult;
  }

  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Update Folder or File
 * 
 * @param {!string} item The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.servicesFileStagingItemsItemPut = function(item, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/services/file_staging/items/{item}'
      .replace('{' + 'item' + '}', String(item));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'item' is set
  if (!item) {
    throw new Error('Missing required parameter item when calling servicesFileStagingItemsItemPut');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Create Folder or File
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentMD5 Optional: The MD5 checksum of the file being uploaded.
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.servicesFileStagingItemsPost = function(opt_authorization, opt_accept, opt_contentMD5, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/services/file_staging/items';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-MD5'] = opt_contentMD5;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * List Upload Sessions
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.servicesFileStagingUploadGet = function(opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/services/file_staging/upload/';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Create Resumable Upload Session
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.servicesFileStagingUploadPost = function(opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/services/file_staging/upload';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Abort Upload Session
 * 
 * @param {!string} uploadSessionId 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.servicesFileStagingUploadUploadSessionIdDelete = function(uploadSessionId, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/services/file_staging/upload/{upload_session_id}'
      .replace('{' + 'upload_session_id' + '}', String(uploadSessionId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'uploadSessionId' is set
  if (!uploadSessionId) {
    throw new Error('Missing required parameter uploadSessionId when calling servicesFileStagingUploadUploadSessionIdDelete');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Get Upload Session Details
 * 
 * @param {!string} uploadSessionId 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.servicesFileStagingUploadUploadSessionIdGet = function(uploadSessionId, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/services/file_staging/upload/{upload_session_id}'
      .replace('{' + 'upload_session_id' + '}', String(uploadSessionId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'uploadSessionId' is set
  if (!uploadSessionId) {
    throw new Error('Missing required parameter uploadSessionId when calling servicesFileStagingUploadUploadSessionIdGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * List File Parts Uploaded to Session
 * 
 * @param {!string} uploadSessionId 
 * @param {!string=} opt_limit Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.servicesFileStagingUploadUploadSessionIdPartsGet = function(uploadSessionId, opt_limit, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/services/file_staging/upload/{upload_session_id}/parts'
      .replace('{' + 'upload_session_id' + '}', String(uploadSessionId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'uploadSessionId' is set
  if (!uploadSessionId) {
    throw new Error('Missing required parameter uploadSessionId when calling servicesFileStagingUploadUploadSessionIdPartsGet');
  }
  if (opt_limit !== undefined) {
    queryParameters['limit'] = opt_limit;
  }

  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Commit Upload Session
 * 
 * @param {!string} uploadSessionId 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.servicesFileStagingUploadUploadSessionIdPost = function(uploadSessionId, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/services/file_staging/upload/{upload_session_id}'
      .replace('{' + 'upload_session_id' + '}', String(uploadSessionId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'uploadSessionId' is set
  if (!uploadSessionId) {
    throw new Error('Missing required parameter uploadSessionId when calling servicesFileStagingUploadUploadSessionIdPost');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Upload to a Session
 * 
 * @param {!string} uploadSessionId 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIFilePartNumber The part number, which uniquely identifies a file part and defines its position within the file as a whole. If a part is uploaded using a part number that has already been used, Vault overwrites the previously uploaded file part. You must upload parts in numerical order. For example, you cannot upload part 3 without first uploading parts 1 and 2.
 * @param {!string=} opt_contentMD5 Optional: The MD5 checksum of the file part being uploaded.
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.servicesFileStagingUploadUploadSessionIdPut = function(uploadSessionId, opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIFilePartNumber, opt_contentMD5, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/services/file_staging/upload/{upload_session_id}'
      .replace('{' + 'upload_session_id' + '}', String(uploadSessionId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'uploadSessionId' is set
  if (!uploadSessionId) {
    throw new Error('Missing required parameter uploadSessionId when calling servicesFileStagingUploadUploadSessionIdPut');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-FilePartNumber'] = opt_xVaultAPIFilePartNumber;

  headerParams['Content-MD5'] = opt_contentMD5;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Job Histories
 * 
 * @param {!string=} opt_startDate Sets the date to start retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job.
 * @param {!string=} opt_endDate Sets the date to end retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time.
 * @param {!string=} opt_status Filter to only retrieve jobs in a certain status. Allowed values are success, errors_encountered, failed_to_run, missed_schedule, cancelled. If omitted, retrieves all statuses.
 * @param {!string=} opt_limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50.
 * @param {!string=} opt_offset Paginate the results displayed per page by specifying the amount of offset from the first job history returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.servicesJobsHistoriesGet = function(opt_startDate, opt_endDate, opt_status, opt_limit, opt_offset, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/services/jobs/histories';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_startDate !== undefined) {
    queryParameters['start_date'] = opt_startDate;
  }

  if (opt_endDate !== undefined) {
    queryParameters['end_date'] = opt_endDate;
  }

  if (opt_status !== undefined) {
    queryParameters['status'] = opt_status;
  }

  if (opt_limit !== undefined) {
    queryParameters['limit'] = opt_limit;
  }

  if (opt_offset !== undefined) {
    queryParameters['offset'] = opt_offset;
  }

  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Import Bulk Translation File Job Errors
 * 
 * @param {!string} jobId The id value of the requested import job. This was returned from the Import Bulk Translation File request.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.servicesJobsJobIdErrorsGet = function(jobId, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/services/jobs/{job_id}/errors'
      .replace('{' + 'job_id' + '}', String(jobId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'jobId' is set
  if (!jobId) {
    throw new Error('Missing required parameter jobId when calling servicesJobsJobIdErrorsGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Job Status
 * 
 * @param {!string} jobId The ID of the job, returned from the original job request.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.servicesJobsJobIdGet = function(jobId, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/services/jobs/{job_id}'
      .replace('{' + 'job_id' + '}', String(jobId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'jobId' is set
  if (!jobId) {
    throw new Error('Missing required parameter jobId when calling servicesJobsJobIdGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Import Bulk Translation File Job Summary
 * 
 * @param {!string} jobId The id value of the requested import job. This was returned from the Import Bulk Translation File request.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.servicesJobsJobIdSummaryGet = function(jobId, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/services/jobs/{job_id}/summary'
      .replace('{' + 'job_id' + '}', String(jobId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'jobId' is set
  if (!jobId) {
    throw new Error('Missing required parameter jobId when calling servicesJobsJobIdSummaryGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve SDK Job Tasks
 * 
 * @param {!string} jobId The ID of the SDK job, returned from the original job request.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.servicesJobsJobIdTasksGet = function(jobId, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/services/jobs/{job_id}/tasks'
      .replace('{' + 'job_id' + '}', String(jobId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'jobId' is set
  if (!jobId) {
    throw new Error('Missing required parameter jobId when calling servicesJobsJobIdTasksGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Job Monitors
 * 
 * @param {!string=} opt_startDate Sets the date to start retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job.
 * @param {!string=} opt_endDate Sets the date to end retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time.
 * @param {!string=} opt_status Filter to only retrieve jobs in a certain status. Allowed values are scheduled, queued, running. If omitted, retrieves all statuses.
 * @param {!string=} opt_limit Paginate the results by specifying the maximum number of jobs per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50.
 * @param {!string=} opt_offset Paginate the results displayed per page by specifying the amount of offset from the first job instance returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.servicesJobsMonitorsGet = function(opt_startDate, opt_endDate, opt_status, opt_limit, opt_offset, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/services/jobs/monitors';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_startDate !== undefined) {
    queryParameters['start_date'] = opt_startDate;
  }

  if (opt_endDate !== undefined) {
    queryParameters['end_date'] = opt_endDate;
  }

  if (opt_status !== undefined) {
    queryParameters['status'] = opt_status;
  }

  if (opt_limit !== undefined) {
    queryParameters['limit'] = opt_limit;
  }

  if (opt_offset !== undefined) {
    queryParameters['offset'] = opt_offset;
  }

  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Start Job
 * 
 * @param {!string} jobId The ID of the scheduled job instance to start.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.servicesJobsStartNowJobIdPost = function(jobId, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/services/jobs/start_now/{job_id}'
      .replace('{' + 'job_id' + '}', String(jobId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'jobId' is set
  if (!jobId) {
    throw new Error('Missing required parameter jobId when calling servicesJobsStartNowJobIdPost');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Extract Data Files
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.servicesLoaderExtractPost = function(opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/services/loader/extract';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Load Failure Log Results
 * 
 * @param {!string} jobId The id value of the requested extract job.
 * @param {!string} taskId The id value of the requested extract task.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.servicesLoaderJobIdTasksTaskIdFailurelogGet = function(jobId, taskId, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/services/loader/{job_id}/tasks/{task_id}/failurelog'
      .replace('{' + 'job_id' + '}', String(jobId))
      .replace('{' + 'task_id' + '}', String(taskId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'jobId' is set
  if (!jobId) {
    throw new Error('Missing required parameter jobId when calling servicesLoaderJobIdTasksTaskIdFailurelogGet');
  }
  // verify required parameter 'taskId' is set
  if (!taskId) {
    throw new Error('Missing required parameter taskId when calling servicesLoaderJobIdTasksTaskIdFailurelogGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Loader Extract Results
 * 
 * @param {!string} jobId The id value of the requested extract job.
 * @param {!string} taskId The id value of the requested extract task.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.servicesLoaderJobIdTasksTaskIdResultsGet = function(jobId, taskId, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/services/loader/{job_id}/tasks/{task_id}/results'
      .replace('{' + 'job_id' + '}', String(jobId))
      .replace('{' + 'task_id' + '}', String(taskId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'jobId' is set
  if (!jobId) {
    throw new Error('Missing required parameter jobId when calling servicesLoaderJobIdTasksTaskIdResultsGet');
  }
  // verify required parameter 'taskId' is set
  if (!taskId) {
    throw new Error('Missing required parameter taskId when calling servicesLoaderJobIdTasksTaskIdResultsGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Loader Extract Renditions Results
 * 
 * @param {!string} jobId The id value of the requested extract job.
 * @param {!string} taskId The id value of the requested extract task.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.servicesLoaderJobIdTasksTaskIdResultsRenditionsGet = function(jobId, taskId, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/services/loader/{job_id}/tasks/{task_id}/results/renditions'
      .replace('{' + 'job_id' + '}', String(jobId))
      .replace('{' + 'task_id' + '}', String(taskId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'jobId' is set
  if (!jobId) {
    throw new Error('Missing required parameter jobId when calling servicesLoaderJobIdTasksTaskIdResultsRenditionsGet');
  }
  // verify required parameter 'taskId' is set
  if (!taskId) {
    throw new Error('Missing required parameter taskId when calling servicesLoaderJobIdTasksTaskIdResultsRenditionsGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Load Success Log Results
 * 
 * @param {!string} jobId The id value of the requested extract job.
 * @param {!string} taskId The id value of the requested extract task.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.servicesLoaderJobIdTasksTaskIdSuccesslogGet = function(jobId, taskId, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/services/loader/{job_id}/tasks/{task_id}/successlog'
      .replace('{' + 'job_id' + '}', String(jobId))
      .replace('{' + 'task_id' + '}', String(taskId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'jobId' is set
  if (!jobId) {
    throw new Error('Missing required parameter jobId when calling servicesLoaderJobIdTasksTaskIdSuccesslogGet');
  }
  // verify required parameter 'taskId' is set
  if (!taskId) {
    throw new Error('Missing required parameter taskId when calling servicesLoaderJobIdTasksTaskIdSuccesslogGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Load Data Objects
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.servicesLoaderLoadPost = function(opt_authorization, opt_contentType, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/services/loader/load';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Validate Package
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.servicesPackageActionsValidatePost = function(opt_authorization, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/services/package/actions/validate';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Export Package
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.servicesPackagePost = function(opt_authorization, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/services/package';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Import Package
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.servicesPackagePut = function(opt_authorization, opt_contentType, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/services/package';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve All Queues
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.servicesQueuesGet = function(opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/services/queues';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Disable Delivery
 * 
 * @param {!string} queueName The name of a specific Queue.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.servicesQueuesQueueNameActionsDisableDeliveryPut = function(queueName, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/services/queues/{queue_name}/actions/disable_delivery'
      .replace('{' + 'queue_name' + '}', String(queueName));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'queueName' is set
  if (!queueName) {
    throw new Error('Missing required parameter queueName when calling servicesQueuesQueueNameActionsDisableDeliveryPut');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Enable Delivery
 * 
 * @param {!string} queueName The name of a specific Queue.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.servicesQueuesQueueNameActionsEnableDeliveryPut = function(queueName, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/services/queues/{queue_name}/actions/enable_delivery'
      .replace('{' + 'queue_name' + '}', String(queueName));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'queueName' is set
  if (!queueName) {
    throw new Error('Missing required parameter queueName when calling servicesQueuesQueueNameActionsEnableDeliveryPut');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Reset Queue
 * 
 * @param {!string} queueName The name of a specific Queue.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.servicesQueuesQueueNameActionsResetPut = function(queueName, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/services/queues/{queue_name}/actions/reset'
      .replace('{' + 'queue_name' + '}', String(queueName));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'queueName' is set
  if (!queueName) {
    throw new Error('Missing required parameter queueName when calling servicesQueuesQueueNameActionsResetPut');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Queue Status
 * 
 * @param {!string} queueName The name of a specific queue. For example, queue__c.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.servicesQueuesQueueNameGet = function(queueName, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/services/queues/{queue_name}'
      .replace('{' + 'queue_name' + '}', String(queueName));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'queueName' is set
  if (!queueName) {
    throw new Error('Missing required parameter queueName when calling servicesQueuesQueueNameGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Validate Imported Package
 * 
 * @param {!string} packageId The ID of the package to validate. You can find this in the API response of a package import, or in the URL of package in the Vault UI.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.servicesVobjectVaultPackageVPackageIdActionsValidatePost = function(packageId, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/services/vobject/vault_package__v/{package_id}/actions/validate'
      .replace('{' + 'package_id' + '}', String(packageId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'packageId' is set
  if (!packageId) {
    throw new Error('Missing required parameter packageId when calling servicesVobjectVaultPackageVPackageIdActionsValidatePost');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * End Session
 * 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_authorization The Vault sessionId to end.
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.sessionDelete = function(opt_accept, opt_authorization, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/session';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Accept'] = opt_accept;

  headerParams['Authorization'] = opt_authorization;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Download Single Client Code Distribution
 * 
 * @param {!string} distributionName The name attribute of the client code distribution to download.
 * @param {!string=} opt_accept 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.uicodeDistributionsDistributionNameCodeGet = function(distributionName, opt_accept, opt_authorization, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/uicode/distributions/{distribution_name}/code'
      .replace('{' + 'distribution_name' + '}', String(distributionName));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'distributionName' is set
  if (!distributionName) {
    throw new Error('Missing required parameter distributionName when calling uicodeDistributionsDistributionNameCodeGet');
  }
  headerParams['Accept'] = opt_accept;

  headerParams['Authorization'] = opt_authorization;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Delete Single Client Code Distribution
 * 
 * @param {!string} distributionName The name attribute of the client code distribution to delete.
 * @param {!string=} opt_accept 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.uicodeDistributionsDistributionNameDelete = function(distributionName, opt_accept, opt_authorization, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/uicode/distributions/{distribution_name}'
      .replace('{' + 'distribution_name' + '}', String(distributionName));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'distributionName' is set
  if (!distributionName) {
    throw new Error('Missing required parameter distributionName when calling uicodeDistributionsDistributionNameDelete');
  }
  headerParams['Accept'] = opt_accept;

  headerParams['Authorization'] = opt_authorization;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Single Client Code Distribution Metadata
 * 
 * @param {!string} distributionName The name attribute of the client code distribution to delete.
 * @param {!string=} opt_accept 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.uicodeDistributionsDistributionNameGet = function(distributionName, opt_accept, opt_authorization, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/uicode/distributions/{distribution_name}'
      .replace('{' + 'distribution_name' + '}', String(distributionName));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'distributionName' is set
  if (!distributionName) {
    throw new Error('Missing required parameter distributionName when calling uicodeDistributionsDistributionNameGet');
  }
  headerParams['Accept'] = opt_accept;

  headerParams['Authorization'] = opt_authorization;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve All Client Code Distribution Metadata
 * 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.uicodeDistributionsGet = function(opt_accept, opt_authorization, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/uicode/distributions';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Accept'] = opt_accept;

  headerParams['Authorization'] = opt_authorization;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Add or Replace Single Client Code Distribution
 * 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.uicodeDistributionsPost = function(opt_accept, opt_authorization, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/uicode/distributions';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Accept'] = opt_accept;

  headerParams['Authorization'] = opt_authorization;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Deploy Package
 * 
 * @param {!string} packageId The id field value of the vault_package__v object record used for deployment. See Import Package.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.vobjectVaultPackageVPackageIdActionsDeployPost = function(packageId, opt_authorization, opt_contentType, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/vobject/vault_package__v/{package_id}/actions/deploy'
      .replace('{' + 'package_id' + '}', String(packageId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'packageId' is set
  if (!packageId) {
    throw new Error('Missing required parameter packageId when calling vobjectVaultPackageVPackageIdActionsDeployPost');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Package Deploy Results
 * 
 * @param {!string} packageId The id field value of the vault_package__v object record used for deployment. See Deploy Package.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.vobjectVaultPackageVPackageIdActionsDeployResultsGet = function(packageId, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/vobject/vault_package__v/{package_id}/actions/deploy/results'
      .replace('{' + 'package_id' + '}', String(packageId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'packageId' is set
  if (!packageId) {
    throw new Error('Missing required parameter packageId when calling vobjectVaultPackageVPackageIdActionsDeployResultsGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Results of Cascade Delete Job
 * 
 * @param {!string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
 * @param {!string} jobStatus 
 * @param {!string} jobId 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet = function(objectName, jobStatus, jobId, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/vobjects/cascadedelete/results/{object_name}/{job_status}/{job_id}'
      .replace('{' + 'object_name' + '}', String(objectName))
      .replace('{' + 'job_status' + '}', String(jobStatus))
      .replace('{' + 'job_id' + '}', String(jobId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'objectName' is set
  if (!objectName) {
    throw new Error('Missing required parameter objectName when calling vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet');
  }
  // verify required parameter 'jobStatus' is set
  if (!jobStatus) {
    throw new Error('Missing required parameter jobStatus when calling vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet');
  }
  // verify required parameter 'jobId' is set
  if (!jobId) {
    throw new Error('Missing required parameter jobId when calling vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Results of Deep Copy Job
 * 
 * @param {!string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
 * @param {!string} jobStatus The ID of the job, retrieved from the response of the job request.
 * @param {!string} jobId Possible values are success or failure. Find if your job succeeded or failed by retrieving the job status.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet = function(objectName, jobStatus, jobId, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/vobjects/deepcopy/results/{object_name}/{job_status}/{job_id}'
      .replace('{' + 'object_name' + '}', String(objectName))
      .replace('{' + 'job_status' + '}', String(jobStatus))
      .replace('{' + 'job_id' + '}', String(jobId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'objectName' is set
  if (!objectName) {
    throw new Error('Missing required parameter objectName when calling vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet');
  }
  // verify required parameter 'jobStatus' is set
  if (!jobStatus) {
    throw new Error('Missing required parameter jobStatus when calling vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet');
  }
  // verify required parameter 'jobId' is set
  if (!jobId) {
    throw new Error('Missing required parameter jobId when calling vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Create a Placeholder from an EDL Item
 * 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.vobjectsEdlItemVActionsCreateplaceholderPost = function(opt_authorization, opt_contentType, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/vobjects/edl_item__v/actions/createplaceholder';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Authorization'] = opt_authorization;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Download Merge Records Job Log
 * 
 * @param {!string} jobId The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.vobjectsMergesJobIdLogGet = function(jobId, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/vobjects/merges/{job_id}/log'
      .replace('{' + 'job_id' + '}', String(jobId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'jobId' is set
  if (!jobId) {
    throw new Error('Missing required parameter jobId when calling vobjectsMergesJobIdLogGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Record Merge Results
 * 
 * @param {!string} jobId The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.vobjectsMergesJobIdResultsGet = function(jobId, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/vobjects/merges/{job_id}/results'
      .replace('{' + 'job_id' + '}', String(jobId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'jobId' is set
  if (!jobId) {
    throw new Error('Missing required parameter jobId when calling vobjectsMergesJobIdResultsGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Record Merge Status
 * 
 * @param {!string} jobId The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.vobjectsMergesJobIdStatusGet = function(jobId, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/vobjects/merges/{job_id}/status'
      .replace('{' + 'job_id' + '}', String(jobId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'jobId' is set
  if (!jobId) {
    throw new Error('Missing required parameter jobId when calling vobjectsMergesJobIdStatusGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Initiate Object Action on Multiple Records
 * 
 * @param {!string} objectName The object name__v field value.
 * @param {!string} actionName Either the name of the Objectaction or Objectlifecyclestateuseraction to initiate. This is obtained from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.vobjectsObjectNameActionsActionNamePost = function(objectName, actionName, opt_authorization, opt_contentType, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/vobjects/{object_name}/actions/{action_name}'
      .replace('{' + 'object_name' + '}', String(objectName))
      .replace('{' + 'action_name' + '}', String(actionName));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'objectName' is set
  if (!objectName) {
    throw new Error('Missing required parameter objectName when calling vobjectsObjectNameActionsActionNamePost');
  }
  // verify required parameter 'actionName' is set
  if (!actionName) {
    throw new Error('Missing required parameter actionName when calling vobjectsObjectNameActionsActionNamePost');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Change Object Type
 * 
 * @param {!string} objectName The name of the object.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.vobjectsObjectNameActionsChangetypePost = function(objectName, opt_authorization, opt_contentType, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/vobjects/{object_name}/actions/changetype'
      .replace('{' + 'object_name' + '}', String(objectName));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'objectName' is set
  if (!objectName) {
    throw new Error('Missing required parameter objectName when calling vobjectsObjectNameActionsChangetypePost');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Initiate Record Merge
 * 
 * @param {!string} objectName The object name__v field value. For example, account__v. This object must have Enable Merges configured.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!Array<!API.Client._vobjects__object_name__actions_merge_post_request_inner>=} opt_vobjectsObjectNameActionsMergePostRequestInner 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.vobjectsObjectNameActionsMergePost = function(objectName, opt_authorization, opt_contentType, opt_accept, opt_xVaultAPIClientID, opt_vobjectsObjectNameActionsMergePostRequestInner, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/vobjects/{object_name}/actions/merge'
      .replace('{' + 'object_name' + '}', String(objectName));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'objectName' is set
  if (!objectName) {
    throw new Error('Missing required parameter objectName when calling vobjectsObjectNameActionsMergePost');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: opt_vobjectsObjectNameActionsMergePostRequestInner,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Roll-up Field Recalculation Status
 * 
 * @param {!string} objectName The name of the object for which to check the status of a Roll-up field recalculation.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.vobjectsObjectNameActionsRecalculaterollupsGet = function(objectName, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/vobjects/{object_name}/actions/recalculaterollups'
      .replace('{' + 'object_name' + '}', String(objectName));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'objectName' is set
  if (!objectName) {
    throw new Error('Missing required parameter objectName when calling vobjectsObjectNameActionsRecalculaterollupsGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Recalculate Roll-up Fields
 * 
 * @param {!string} objectName The name of the object for which to check the status of a Roll-up field recalculation.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.vobjectsObjectNameActionsRecalculaterollupsPost = function(objectName, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/vobjects/{object_name}/actions/recalculaterollups'
      .replace('{' + 'object_name' + '}', String(objectName));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'objectName' is set
  if (!objectName) {
    throw new Error('Missing required parameter objectName when calling vobjectsObjectNameActionsRecalculaterollupsPost');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Update Corporate Currency Fields
 * 
 * @param {!string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.vobjectsObjectNameActionsUpdatecorporatecurrencyPut = function(objectName, opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/vobjects/{object_name}/actions/updatecorporatecurrency'
      .replace('{' + 'object_name' + '}', String(objectName));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'objectName' is set
  if (!objectName) {
    throw new Error('Missing required parameter objectName when calling vobjectsObjectNameActionsUpdatecorporatecurrencyPut');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Delete Multiple Object Record Attachments
 * 
 * @param {!string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
 * @param {!string=} opt_idParam 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.vobjectsObjectNameAttachmentsBatchDelete = function(objectName, opt_idParam, opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/vobjects/{object_name}/attachments/batch'
      .replace('{' + 'object_name' + '}', String(objectName));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'objectName' is set
  if (!objectName) {
    throw new Error('Missing required parameter objectName when calling vobjectsObjectNameAttachmentsBatchDelete');
  }
  if (opt_idParam !== undefined) {
    queryParameters['idParam'] = opt_idParam;
  }

  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Create Multiple Object Record Attachments
 * 
 * @param {!string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.vobjectsObjectNameAttachmentsBatchPost = function(objectName, opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/vobjects/{object_name}/attachments/batch'
      .replace('{' + 'object_name' + '}', String(objectName));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'objectName' is set
  if (!objectName) {
    throw new Error('Missing required parameter objectName when calling vobjectsObjectNameAttachmentsBatchPost');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Update Multiple Object Record Attachment Descriptions
 * 
 * @param {!string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.vobjectsObjectNameAttachmentsBatchPut = function(objectName, opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/vobjects/{object_name}/attachments/batch'
      .replace('{' + 'object_name' + '}', String(objectName));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'objectName' is set
  if (!objectName) {
    throw new Error('Missing required parameter objectName when calling vobjectsObjectNameAttachmentsBatchPut');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Delete Object Records
 * 
 * @param {!string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_contentType Can be text/csv or application/json
 * @param {!string=} opt_accept Can be text/csv or application/json
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.vobjectsObjectNameDelete = function(objectName, opt_authorization, opt_contentType, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/vobjects/{object_name}'
      .replace('{' + 'object_name' + '}', String(objectName));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'objectName' is set
  if (!objectName) {
    throw new Error('Missing required parameter objectName when calling vobjectsObjectNameDelete');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Object Record Roles
 * 
 * @param {!string} objectName The object name.
 * @param {!string} id The id of the document, binder, or object record.
 * @param {!string} roleName Optional: Include a role name to filter for a specific role. For example, owner__v.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.vobjectsObjectNameIdRolesRoleNameGet = function(objectName, id, roleName, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/vobjects/{object_name}/{id}/roles/{role_name}'
      .replace('{' + 'object_name' + '}', String(objectName))
      .replace('{' + 'id' + '}', String(id))
      .replace('{' + 'role_name' + '}', String(roleName));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'objectName' is set
  if (!objectName) {
    throw new Error('Missing required parameter objectName when calling vobjectsObjectNameIdRolesRoleNameGet');
  }
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling vobjectsObjectNameIdRolesRoleNameGet');
  }
  // verify required parameter 'roleName' is set
  if (!roleName) {
    throw new Error('Missing required parameter roleName when calling vobjectsObjectNameIdRolesRoleNameGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Object User Actions Details
 * 
 * @param {!string} objectName The object name__v field value.
 * @param {!string} objectRecordId The object record id field value from which to retrieve user actions.
 * @param {!string} actionName The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.vobjectsObjectNameObjectRecordIdActionsActionNameGet = function(objectName, objectRecordId, actionName, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/vobjects/{object_name}/{object_record_id}/actions/{action_name}'
      .replace('{' + 'object_name' + '}', String(objectName))
      .replace('{' + 'object_record_id' + '}', String(objectRecordId))
      .replace('{' + 'action_name' + '}', String(actionName));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'objectName' is set
  if (!objectName) {
    throw new Error('Missing required parameter objectName when calling vobjectsObjectNameObjectRecordIdActionsActionNameGet');
  }
  // verify required parameter 'objectRecordId' is set
  if (!objectRecordId) {
    throw new Error('Missing required parameter objectRecordId when calling vobjectsObjectNameObjectRecordIdActionsActionNameGet');
  }
  // verify required parameter 'actionName' is set
  if (!actionName) {
    throw new Error('Missing required parameter actionName when calling vobjectsObjectNameObjectRecordIdActionsActionNameGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Initiate Object Action on a Single Record
 * 
 * @param {!string} objectName The object name__v field value.
 * @param {!string} objectRecordId The object record id field value from which to retrieve user actions.
 * @param {!string} actionName The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.vobjectsObjectNameObjectRecordIdActionsActionNamePost = function(objectName, objectRecordId, actionName, opt_authorization, opt_contentType, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/vobjects/{object_name}/{object_record_id}/actions/{action_name}'
      .replace('{' + 'object_name' + '}', String(objectName))
      .replace('{' + 'object_record_id' + '}', String(objectRecordId))
      .replace('{' + 'action_name' + '}', String(actionName));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'objectName' is set
  if (!objectName) {
    throw new Error('Missing required parameter objectName when calling vobjectsObjectNameObjectRecordIdActionsActionNamePost');
  }
  // verify required parameter 'objectRecordId' is set
  if (!objectRecordId) {
    throw new Error('Missing required parameter objectRecordId when calling vobjectsObjectNameObjectRecordIdActionsActionNamePost');
  }
  // verify required parameter 'actionName' is set
  if (!actionName) {
    throw new Error('Missing required parameter actionName when calling vobjectsObjectNameObjectRecordIdActionsActionNamePost');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Cascade Delete Object Record
 * 
 * @param {!string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
 * @param {!string} objectRecordId The object record id field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.vobjectsObjectNameObjectRecordIdActionsCascadedeletePost = function(objectName, objectRecordId, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/vobjects/{object_name}/{object_record_id}/actions/cascadedelete'
      .replace('{' + 'object_name' + '}', String(objectName))
      .replace('{' + 'object_record_id' + '}', String(objectRecordId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'objectName' is set
  if (!objectName) {
    throw new Error('Missing required parameter objectName when calling vobjectsObjectNameObjectRecordIdActionsCascadedeletePost');
  }
  // verify required parameter 'objectRecordId' is set
  if (!objectRecordId) {
    throw new Error('Missing required parameter objectRecordId when calling vobjectsObjectNameObjectRecordIdActionsCascadedeletePost');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Deep Copy Object Record
 * 
 * @param {!string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
 * @param {!string} objectRecordId The object record id field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.vobjectsObjectNameObjectRecordIdActionsDeepcopyPost = function(objectName, objectRecordId, opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/vobjects/{object_name}/{object_record_id}/actions/deepcopy'
      .replace('{' + 'object_name' + '}', String(objectName))
      .replace('{' + 'object_record_id' + '}', String(objectRecordId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'objectName' is set
  if (!objectName) {
    throw new Error('Missing required parameter objectName when calling vobjectsObjectNameObjectRecordIdActionsDeepcopyPost');
  }
  // verify required parameter 'objectRecordId' is set
  if (!objectRecordId) {
    throw new Error('Missing required parameter objectRecordId when calling vobjectsObjectNameObjectRecordIdActionsDeepcopyPost');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Object Record User Actions
 * 
 * @param {!string} objectName The object name__v field value.
 * @param {!string} objectRecordId The object record id field value.
 * @param {!boolean=} opt_loc Optional: When true, retrieves localized (translated) strings for the label. 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.vobjectsObjectNameObjectRecordIdActionsGet = function(objectName, objectRecordId, opt_loc, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/vobjects/{object_name}/{object_record_id}/actions'
      .replace('{' + 'object_name' + '}', String(objectName))
      .replace('{' + 'object_record_id' + '}', String(objectRecordId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'objectName' is set
  if (!objectName) {
    throw new Error('Missing required parameter objectName when calling vobjectsObjectNameObjectRecordIdActionsGet');
  }
  // verify required parameter 'objectRecordId' is set
  if (!objectRecordId) {
    throw new Error('Missing required parameter objectRecordId when calling vobjectsObjectNameObjectRecordIdActionsGet');
  }
  if (opt_loc !== undefined) {
    queryParameters['loc'] = opt_loc;
  }

  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Download Attachment Field File
 * 
 * @param {!string} objectName The object name__v field value. For example, product__v.
 * @param {!string} objectRecordId The object record id field value.
 * @param {!string} attachmentFieldName The name of the Attachment field to update.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet = function(objectName, objectRecordId, attachmentFieldName, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/vobjects/{object_name}/{object_record_id}/attachment_fields/{attachment_field_name}/file'
      .replace('{' + 'object_name' + '}', String(objectName))
      .replace('{' + 'object_record_id' + '}', String(objectRecordId))
      .replace('{' + 'attachment_field_name' + '}', String(attachmentFieldName));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'objectName' is set
  if (!objectName) {
    throw new Error('Missing required parameter objectName when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet');
  }
  // verify required parameter 'objectRecordId' is set
  if (!objectRecordId) {
    throw new Error('Missing required parameter objectRecordId when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet');
  }
  // verify required parameter 'attachmentFieldName' is set
  if (!attachmentFieldName) {
    throw new Error('Missing required parameter attachmentFieldName when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Update Attachment Field File
 * 
 * @param {!string} objectName The object name__v field value. For example, product__v.
 * @param {!string} objectRecordId The object record id field value.
 * @param {!string} attachmentFieldName The name of the Attachment field to update.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost = function(objectName, objectRecordId, attachmentFieldName, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/vobjects/{object_name}/{object_record_id}/attachment_fields/{attachment_field_name}/file'
      .replace('{' + 'object_name' + '}', String(objectName))
      .replace('{' + 'object_record_id' + '}', String(objectRecordId))
      .replace('{' + 'attachment_field_name' + '}', String(attachmentFieldName));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'objectName' is set
  if (!objectName) {
    throw new Error('Missing required parameter objectName when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost');
  }
  // verify required parameter 'objectRecordId' is set
  if (!objectRecordId) {
    throw new Error('Missing required parameter objectRecordId when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost');
  }
  // verify required parameter 'attachmentFieldName' is set
  if (!attachmentFieldName) {
    throw new Error('Missing required parameter attachmentFieldName when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Download All Attachment Field Files
 * 
 * @param {!string} objectName The object name__v field value. For example, product__v.
 * @param {!string} objectRecordId The object record id field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet = function(objectName, objectRecordId, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/vobjects/{object_name}/{object_record_id}/attachment_fields/file'
      .replace('{' + 'object_name' + '}', String(objectName))
      .replace('{' + 'object_record_id' + '}', String(objectRecordId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'objectName' is set
  if (!objectName) {
    throw new Error('Missing required parameter objectName when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet');
  }
  // verify required parameter 'objectRecordId' is set
  if (!objectRecordId) {
    throw new Error('Missing required parameter objectRecordId when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Delete Object Record Attachment
 * 
 * @param {!string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
 * @param {!string} objectRecordId The object record id field value.
 * @param {!string} attachmentId The attachment id field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete = function(objectName, objectRecordId, attachmentId, opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}'
      .replace('{' + 'object_name' + '}', String(objectName))
      .replace('{' + 'object_record_id' + '}', String(objectRecordId))
      .replace('{' + 'attachment_id' + '}', String(attachmentId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'objectName' is set
  if (!objectName) {
    throw new Error('Missing required parameter objectName when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete');
  }
  // verify required parameter 'objectRecordId' is set
  if (!objectRecordId) {
    throw new Error('Missing required parameter objectRecordId when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete');
  }
  // verify required parameter 'attachmentId' is set
  if (!attachmentId) {
    throw new Error('Missing required parameter attachmentId when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Object Record Attachment Metadata
 * 
 * @param {!string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
 * @param {!string} objectRecordId The object record id field value.
 * @param {!string} attachmentId The attachment id field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet = function(objectName, objectRecordId, attachmentId, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}'
      .replace('{' + 'object_name' + '}', String(objectName))
      .replace('{' + 'object_record_id' + '}', String(objectRecordId))
      .replace('{' + 'attachment_id' + '}', String(attachmentId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'objectName' is set
  if (!objectName) {
    throw new Error('Missing required parameter objectName when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet');
  }
  // verify required parameter 'objectRecordId' is set
  if (!objectRecordId) {
    throw new Error('Missing required parameter objectRecordId when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet');
  }
  // verify required parameter 'attachmentId' is set
  if (!attachmentId) {
    throw new Error('Missing required parameter attachmentId when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Update Object Record Attachment Description
 * 
 * @param {!string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
 * @param {!string} objectRecordId The object record id field value.
 * @param {!string} attachmentId The attachment id field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut = function(objectName, objectRecordId, attachmentId, opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}'
      .replace('{' + 'object_name' + '}', String(objectName))
      .replace('{' + 'object_record_id' + '}', String(objectRecordId))
      .replace('{' + 'attachment_id' + '}', String(attachmentId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'objectName' is set
  if (!objectName) {
    throw new Error('Missing required parameter objectName when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut');
  }
  // verify required parameter 'objectRecordId' is set
  if (!objectRecordId) {
    throw new Error('Missing required parameter objectRecordId when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut');
  }
  // verify required parameter 'attachmentId' is set
  if (!attachmentId) {
    throw new Error('Missing required parameter attachmentId when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Delete Object Record Attachment Version
 * 
 * @param {!string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
 * @param {!string} objectRecordId The object record id field value.
 * @param {!string} attachmentId The attachment id field value.
 * @param {!string} attachmentVersion The attachment version__v field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete = function(objectName, objectRecordId, attachmentId, attachmentVersion, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}'
      .replace('{' + 'object_name' + '}', String(objectName))
      .replace('{' + 'object_record_id' + '}', String(objectRecordId))
      .replace('{' + 'attachment_id' + '}', String(attachmentId))
      .replace('{' + 'attachment_version' + '}', String(attachmentVersion));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'objectName' is set
  if (!objectName) {
    throw new Error('Missing required parameter objectName when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete');
  }
  // verify required parameter 'objectRecordId' is set
  if (!objectRecordId) {
    throw new Error('Missing required parameter objectRecordId when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete');
  }
  // verify required parameter 'attachmentId' is set
  if (!attachmentId) {
    throw new Error('Missing required parameter attachmentId when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete');
  }
  // verify required parameter 'attachmentVersion' is set
  if (!attachmentVersion) {
    throw new Error('Missing required parameter attachmentVersion when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Download Object Record Attachment File
 * 
 * @param {!string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
 * @param {!string} objectRecordId The object record id field value.
 * @param {!string} attachmentId The attachment id field value.
 * @param {!string} attachmentVersion 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet = function(objectName, objectRecordId, attachmentId, attachmentVersion, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}/file'
      .replace('{' + 'object_name' + '}', String(objectName))
      .replace('{' + 'object_record_id' + '}', String(objectRecordId))
      .replace('{' + 'attachment_id' + '}', String(attachmentId))
      .replace('{' + 'attachment_version' + '}', String(attachmentVersion));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'objectName' is set
  if (!objectName) {
    throw new Error('Missing required parameter objectName when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet');
  }
  // verify required parameter 'objectRecordId' is set
  if (!objectRecordId) {
    throw new Error('Missing required parameter objectRecordId when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet');
  }
  // verify required parameter 'attachmentId' is set
  if (!attachmentId) {
    throw new Error('Missing required parameter attachmentId when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet');
  }
  // verify required parameter 'attachmentVersion' is set
  if (!attachmentVersion) {
    throw new Error('Missing required parameter attachmentVersion when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Object Record Attachment Version Metadata
 * 
 * @param {!string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
 * @param {!string} objectRecordId The object record id field value.
 * @param {!string} attachmentId The attachment id field value.
 * @param {!string} attachmentVersion The attachment version__v field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet = function(objectName, objectRecordId, attachmentId, attachmentVersion, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}'
      .replace('{' + 'object_name' + '}', String(objectName))
      .replace('{' + 'object_record_id' + '}', String(objectRecordId))
      .replace('{' + 'attachment_id' + '}', String(attachmentId))
      .replace('{' + 'attachment_version' + '}', String(attachmentVersion));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'objectName' is set
  if (!objectName) {
    throw new Error('Missing required parameter objectName when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet');
  }
  // verify required parameter 'objectRecordId' is set
  if (!objectRecordId) {
    throw new Error('Missing required parameter objectRecordId when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet');
  }
  // verify required parameter 'attachmentId' is set
  if (!attachmentId) {
    throw new Error('Missing required parameter attachmentId when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet');
  }
  // verify required parameter 'attachmentVersion' is set
  if (!attachmentVersion) {
    throw new Error('Missing required parameter attachmentVersion when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Restore Object Record Attachment Version
 * 
 * @param {!string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
 * @param {!string} objectRecordId The object record id field value.
 * @param {!string} attachmentId The attachment id field value.
 * @param {!string} attachmentVersion The attachment version__v field value.
 * @param {!boolean=} opt_restore 
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost = function(objectName, objectRecordId, attachmentId, attachmentVersion, opt_restore, opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}'
      .replace('{' + 'object_name' + '}', String(objectName))
      .replace('{' + 'object_record_id' + '}', String(objectRecordId))
      .replace('{' + 'attachment_id' + '}', String(attachmentId))
      .replace('{' + 'attachment_version' + '}', String(attachmentVersion));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'objectName' is set
  if (!objectName) {
    throw new Error('Missing required parameter objectName when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost');
  }
  // verify required parameter 'objectRecordId' is set
  if (!objectRecordId) {
    throw new Error('Missing required parameter objectRecordId when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost');
  }
  // verify required parameter 'attachmentId' is set
  if (!attachmentId) {
    throw new Error('Missing required parameter attachmentId when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost');
  }
  // verify required parameter 'attachmentVersion' is set
  if (!attachmentVersion) {
    throw new Error('Missing required parameter attachmentVersion when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost');
  }
  if (opt_restore !== undefined) {
    queryParameters['restore'] = opt_restore;
  }

  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Object Record Attachment Versions
 * 
 * @param {!string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
 * @param {!string} objectRecordId The object record id field value.
 * @param {!string} attachmentId The attachment id field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet = function(objectName, objectRecordId, attachmentId, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions'
      .replace('{' + 'object_name' + '}', String(objectName))
      .replace('{' + 'object_record_id' + '}', String(objectRecordId))
      .replace('{' + 'attachment_id' + '}', String(attachmentId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'objectName' is set
  if (!objectName) {
    throw new Error('Missing required parameter objectName when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet');
  }
  // verify required parameter 'objectRecordId' is set
  if (!objectRecordId) {
    throw new Error('Missing required parameter objectRecordId when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet');
  }
  // verify required parameter 'attachmentId' is set
  if (!attachmentId) {
    throw new Error('Missing required parameter attachmentId when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Download All Object Record Attachment Files
 * 
 * @param {!string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
 * @param {!string} objectRecordId The object record id field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.vobjectsObjectNameObjectRecordIdAttachmentsFileGet = function(objectName, objectRecordId, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/vobjects/{object_name}/{object_record_id}/attachments/file'
      .replace('{' + 'object_name' + '}', String(objectName))
      .replace('{' + 'object_record_id' + '}', String(objectRecordId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'objectName' is set
  if (!objectName) {
    throw new Error('Missing required parameter objectName when calling vobjectsObjectNameObjectRecordIdAttachmentsFileGet');
  }
  // verify required parameter 'objectRecordId' is set
  if (!objectRecordId) {
    throw new Error('Missing required parameter objectRecordId when calling vobjectsObjectNameObjectRecordIdAttachmentsFileGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Object Record Attachments
 * 
 * @param {!string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
 * @param {!string} objectRecordId The object record id field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.vobjectsObjectNameObjectRecordIdAttachmentsGet = function(objectName, objectRecordId, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/vobjects/{object_name}/{object_record_id}/attachments'
      .replace('{' + 'object_name' + '}', String(objectName))
      .replace('{' + 'object_record_id' + '}', String(objectRecordId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'objectName' is set
  if (!objectName) {
    throw new Error('Missing required parameter objectName when calling vobjectsObjectNameObjectRecordIdAttachmentsGet');
  }
  // verify required parameter 'objectRecordId' is set
  if (!objectRecordId) {
    throw new Error('Missing required parameter objectRecordId when calling vobjectsObjectNameObjectRecordIdAttachmentsGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Create Object Record Attachment
 * 
 * @param {!string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
 * @param {!string} objectRecordId The object record id field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.vobjectsObjectNameObjectRecordIdAttachmentsPost = function(objectName, objectRecordId, opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/vobjects/{object_name}/{object_record_id}/attachments'
      .replace('{' + 'object_name' + '}', String(objectName))
      .replace('{' + 'object_record_id' + '}', String(objectRecordId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'objectName' is set
  if (!objectName) {
    throw new Error('Missing required parameter objectName when calling vobjectsObjectNameObjectRecordIdAttachmentsPost');
  }
  // verify required parameter 'objectRecordId' is set
  if (!objectRecordId) {
    throw new Error('Missing required parameter objectRecordId when calling vobjectsObjectNameObjectRecordIdAttachmentsPost');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Complete Audit History for a Single Object Record
 * 
 * @param {!string} objectName The object name__v field value.
 * @param {!string} objectRecordId The object record id field value from which to retrieve user actions.
 * @param {!string=} opt_startDate Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vVault’s creation date. 
 * @param {!string=} opt_endDate Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date. 
 * @param {!string=} opt_formatResult To request a CSV file of your audit history, use csv. 
 * @param {!string=} opt_limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
 * @param {!string=} opt_offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0.
 * @param {!string=} opt_events Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of object audit events. The values passed to this parameter are case sensitive. For example, events&#x3D;Copy,Edit,Delete. If omitted, defaults to all audit events.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.vobjectsObjectNameObjectRecordIdAudittrailGet = function(objectName, objectRecordId, opt_startDate, opt_endDate, opt_formatResult, opt_limit, opt_offset, opt_events, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/vobjects/{object_name}/{object_record_id}/audittrail'
      .replace('{' + 'object_name' + '}', String(objectName))
      .replace('{' + 'object_record_id' + '}', String(objectRecordId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'objectName' is set
  if (!objectName) {
    throw new Error('Missing required parameter objectName when calling vobjectsObjectNameObjectRecordIdAudittrailGet');
  }
  // verify required parameter 'objectRecordId' is set
  if (!objectRecordId) {
    throw new Error('Missing required parameter objectRecordId when calling vobjectsObjectNameObjectRecordIdAudittrailGet');
  }
  if (opt_startDate !== undefined) {
    queryParameters['start_date'] = opt_startDate;
  }

  if (opt_endDate !== undefined) {
    queryParameters['end_date'] = opt_endDate;
  }

  if (opt_formatResult !== undefined) {
    queryParameters['format_result'] = opt_formatResult;
  }

  if (opt_limit !== undefined) {
    queryParameters['limit'] = opt_limit;
  }

  if (opt_offset !== undefined) {
    queryParameters['offset'] = opt_offset;
  }

  if (opt_events !== undefined) {
    queryParameters['events'] = opt_events;
  }

  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Object Record
 * 
 * @param {!string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
 * @param {!string} objectRecordId The object record id field value.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.vobjectsObjectNameObjectRecordIdGet = function(objectName, objectRecordId, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/vobjects/{object_name}/{object_record_id}'
      .replace('{' + 'object_name' + '}', String(objectName))
      .replace('{' + 'object_record_id' + '}', String(objectRecordId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'objectName' is set
  if (!objectName) {
    throw new Error('Missing required parameter objectName when calling vobjectsObjectNameObjectRecordIdGet');
  }
  // verify required parameter 'objectRecordId' is set
  if (!objectRecordId) {
    throw new Error('Missing required parameter objectRecordId when calling vobjectsObjectNameObjectRecordIdGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Create &amp; Upsert Object Records
 * 
 * @param {!string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
 * @param {!string=} opt_idParam To upsert object records, add &#x60;idParam&#x3D;{field_name}&#x60; to the request endpoint. You can use any object field which has &#x60;unique&#x60; set to &#x60;true&#x60; in the object metadata. For example, &#x60;idParam&#x3D;external_id__v&#x60;.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_contentType Can be text/csv or application/json
 * @param {!string=} opt_accept Can be text/csv or application/json
 * @param {!boolean=} opt_xVaultAPIMigrationMode If set to &#x60;true&#x60;, Vault allows you to create or update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as &#x60;created_by__v&#x60;. Does not bypass record triggers. Use the &#x60;X-VaultAPI-NoTriggers&#x60; header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header.
 * @param {!boolean=} opt_xVaultAPINoTriggers If set to &#x60;true&#x60; and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers.
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.vobjectsObjectNamePost = function(objectName, opt_idParam, opt_authorization, opt_contentType, opt_accept, opt_xVaultAPIMigrationMode, opt_xVaultAPINoTriggers, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/vobjects/{object_name}'
      .replace('{' + 'object_name' + '}', String(objectName));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'objectName' is set
  if (!objectName) {
    throw new Error('Missing required parameter objectName when calling vobjectsObjectNamePost');
  }
  if (opt_idParam !== undefined) {
    queryParameters['idParam'] = opt_idParam;
  }

  headerParams['Authorization'] = opt_authorization;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-MigrationMode'] = opt_xVaultAPIMigrationMode;

  headerParams['X-VaultAPI-NoTriggers'] = opt_xVaultAPINoTriggers;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Update Object Records
 * 
 * @param {!string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_contentType Can be text/csv or application/json
 * @param {!string=} opt_accept Can be text/csv or application/json
 * @param {!boolean=} opt_xVaultAPIMigrationMode If set to &#x60;true&#x60;, Vault allows you to update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as &#x60;created_by__v&#x60;. Does not bypass record triggers. Use the &#x60;X-VaultAPI-NoTriggers&#x60; header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header.
 * @param {!boolean=} opt_xVaultAPINoTriggers If set to &#x60;true&#x60; and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers.
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.vobjectsObjectNamePut = function(objectName, opt_authorization, opt_contentType, opt_accept, opt_xVaultAPIMigrationMode, opt_xVaultAPINoTriggers, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/vobjects/{object_name}'
      .replace('{' + 'object_name' + '}', String(objectName));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'objectName' is set
  if (!objectName) {
    throw new Error('Missing required parameter objectName when calling vobjectsObjectNamePut');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-MigrationMode'] = opt_xVaultAPIMigrationMode;

  headerParams['X-VaultAPI-NoTriggers'] = opt_xVaultAPINoTriggers;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Remove Users &amp; Groups from Roles on Object Records
 * 
 * @param {!string} objectName The name of the object where you want to remove roles.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.vobjectsObjectNameRolesDelete = function(objectName, opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/vobjects/{object_name}/roles'
      .replace('{' + 'object_name' + '}', String(objectName));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'objectName' is set
  if (!objectName) {
    throw new Error('Missing required parameter objectName when calling vobjectsObjectNameRolesDelete');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Assign Users &amp; Groups to Roles on Object Records
 * 
 * @param {!string} objectName The name of the object where you want to remove roles.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_contentType 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.vobjectsObjectNameRolesPost = function(objectName, opt_authorization, opt_accept, opt_contentType, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/vobjects/{object_name}/roles'
      .replace('{' + 'object_name' + '}', String(objectName));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'objectName' is set
  if (!objectName) {
    throw new Error('Missing required parameter objectName when calling vobjectsObjectNameRolesPost');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['Content-Type'] = opt_contentType;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve Outbound Package Dependencies
 * 
 * @param {!string} packageId The ID of the outbound_package__v record from which to retrieve dependencies.
 * @param {!string=} opt_authorization 
 * @param {!string=} opt_accept 
 * @param {!string=} opt_xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.vobjectsOutboundPackageVPackageIdDependenciesGet = function(packageId, opt_authorization, opt_accept, opt_xVaultAPIClientID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/vobjects/outbound_package__v/{package_id}/dependencies'
      .replace('{' + 'package_id' + '}', String(packageId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'packageId' is set
  if (!packageId) {
    throw new Error('Missing required parameter packageId when calling vobjectsOutboundPackageVPackageIdDependenciesGet');
  }
  headerParams['Authorization'] = opt_authorization;

  headerParams['Accept'] = opt_accept;

  headerParams['X-VaultAPI-ClientID'] = opt_xVaultAPIClientID;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
