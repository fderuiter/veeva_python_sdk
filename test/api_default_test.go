/*
Veeva Vault API v25.1

Testing DefaultAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_DefaultAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DefaultAPIService ApiGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ApiGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiMdlComponentsComponentTypeAndRecordNameFilesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var componentTypeAndRecordName string

		httpRes, err := apiClient.DefaultAPI.ApiMdlComponentsComponentTypeAndRecordNameFilesGet(context.Background(), componentTypeAndRecordName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiMdlComponentsComponentTypeAndRecordNameGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var componentTypeAndRecordName string

		httpRes, err := apiClient.DefaultAPI.ApiMdlComponentsComponentTypeAndRecordNameGet(context.Background(), componentTypeAndRecordName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiMdlExecuteAsyncJobIdResultsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var jobId string

		httpRes, err := apiClient.DefaultAPI.ApiMdlExecuteAsyncJobIdResultsGet(context.Background(), jobId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiMdlExecuteAsyncPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ApiMdlExecuteAsyncPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiMdlExecutePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ApiMdlExecutePost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiMdlFilesPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ApiMdlFilesPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService AudittrailAuditTrailTypeGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var auditTrailType string

		httpRes, err := apiClient.DefaultAPI.AudittrailAuditTrailTypeGet(context.Background(), auditTrailType).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService AuthDiscoveryPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.AuthDiscoveryPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService AuthOauthSessionOathOidcProfileIdPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var oathOidcProfileId string

		httpRes, err := apiClient.DefaultAPI.AuthOauthSessionOathOidcProfileIdPost(context.Background(), oathOidcProfileId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService AuthPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.AuthPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CodeClassNameDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var className string

		httpRes, err := apiClient.DefaultAPI.CodeClassNameDelete(context.Background(), className).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CodeClassNameDisablePut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var className string

		httpRes, err := apiClient.DefaultAPI.CodeClassNameDisablePut(context.Background(), className).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CodeClassNameEnablePut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var className string

		httpRes, err := apiClient.DefaultAPI.CodeClassNameEnablePut(context.Background(), className).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CodeClassNameGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var className string

		httpRes, err := apiClient.DefaultAPI.CodeClassNameGet(context.Background(), className).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CodeProfilerGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.CodeProfilerGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CodeProfilerPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.CodeProfilerPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CodeProfilerSessionNameActionsEndPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sessionName string

		httpRes, err := apiClient.DefaultAPI.CodeProfilerSessionNameActionsEndPost(context.Background(), sessionName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CodeProfilerSessionNameDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sessionName string

		httpRes, err := apiClient.DefaultAPI.CodeProfilerSessionNameDelete(context.Background(), sessionName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CodeProfilerSessionNameGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sessionName string

		httpRes, err := apiClient.DefaultAPI.CodeProfilerSessionNameGet(context.Background(), sessionName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CodeProfilerSessionNameResultsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sessionName string

		httpRes, err := apiClient.DefaultAPI.CodeProfilerSessionNameResultsGet(context.Background(), sessionName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CodePut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.CodePut(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CompositesTreesEdlHierarchyOrTemplateActionsListnodesPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var edlHierarchyOrTemplate string

		httpRes, err := apiClient.DefaultAPI.CompositesTreesEdlHierarchyOrTemplateActionsListnodesPost(context.Background(), edlHierarchyOrTemplate).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CompositesTreesEdlHierarchyOrTemplateGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var edlHierarchyOrTemplate string

		httpRes, err := apiClient.DefaultAPI.CompositesTreesEdlHierarchyOrTemplateGet(context.Background(), edlHierarchyOrTemplate).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CompositesTreesEdlHierarchyVParentNodeIdChildrenGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var parentNodeId string

		httpRes, err := apiClient.DefaultAPI.CompositesTreesEdlHierarchyVParentNodeIdChildrenGet(context.Background(), parentNodeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CompositesTreesEdlHierarchyVParentNodeIdChildrenPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var parentNodeId string

		httpRes, err := apiClient.DefaultAPI.CompositesTreesEdlHierarchyVParentNodeIdChildrenPut(context.Background(), parentNodeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ConfigurationComponentTypeAndRecordNameGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var componentTypeAndRecordName string

		httpRes, err := apiClient.DefaultAPI.ConfigurationComponentTypeAndRecordNameGet(context.Background(), componentTypeAndRecordName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ConfigurationComponentTypeGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var componentType string

		httpRes, err := apiClient.DefaultAPI.ConfigurationComponentTypeGet(context.Background(), componentType).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ConfigurationObjectNameAndObjectTypeGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectNameAndObjectType string

		httpRes, err := apiClient.DefaultAPI.ConfigurationObjectNameAndObjectTypeGet(context.Background(), objectNameAndObjectType).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ConfigurationObjecttypeGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ConfigurationObjecttypeGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ConfigurationRoleAssignmentRuleDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ConfigurationRoleAssignmentRuleDelete(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ConfigurationRoleAssignmentRuleGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ConfigurationRoleAssignmentRuleGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ConfigurationRoleAssignmentRulePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ConfigurationRoleAssignmentRulePost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ConfigurationRoleAssignmentRulePut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ConfigurationRoleAssignmentRulePut(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService DelegationLoginPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.DelegationLoginPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService DelegationVaultsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.DelegationVaultsGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService KeepAlivePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.KeepAlivePost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService LimitsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.LimitsGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService LogsApiUsageGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.LogsApiUsageGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService LogsCodeDebugGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.LogsCodeDebugGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService LogsCodeDebugIdActionsResetDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.DefaultAPI.LogsCodeDebugIdActionsResetDelete(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService LogsCodeDebugIdActionsResetPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.DefaultAPI.LogsCodeDebugIdActionsResetPost(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService LogsCodeDebugIdFilesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.DefaultAPI.LogsCodeDebugIdFilesGet(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService LogsCodeDebugIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.DefaultAPI.LogsCodeDebugIdGet(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService LogsCodeDebugPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.LogsCodeDebugPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService LogsCodeRuntimeGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.LogsCodeRuntimeGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService MessagesMessageTypeActionsImportPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var messageType string

		httpRes, err := apiClient.DefaultAPI.MessagesMessageTypeActionsImportPost(context.Background(), messageType).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService MessagesMessageTypeLanguageLangActionsExportPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var messageType string
		var lang string

		httpRes, err := apiClient.DefaultAPI.MessagesMessageTypeLanguageLangActionsExportPost(context.Background(), messageType, lang).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService MetadataAudittrailAuditTrailTypeGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var auditTrailType string

		httpRes, err := apiClient.DefaultAPI.MetadataAudittrailAuditTrailTypeGet(context.Background(), auditTrailType).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService MetadataAudittrailGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.MetadataAudittrailGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService MetadataComponentsComponentTypeGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var componentType string

		httpRes, err := apiClient.DefaultAPI.MetadataComponentsComponentTypeGet(context.Background(), componentType).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService MetadataComponentsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.MetadataComponentsGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService MetadataObjectsBindersTemplatesBindernodesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.MetadataObjectsBindersTemplatesBindernodesGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService MetadataObjectsBindersTemplatesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.MetadataObjectsBindersTemplatesGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService MetadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var placemarkType string

		httpRes, err := apiClient.DefaultAPI.MetadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGet(context.Background(), placemarkType).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService MetadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var referenceType string

		httpRes, err := apiClient.DefaultAPI.MetadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGet(context.Background(), referenceType).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService MetadataObjectsDocumentsAnnotationsTypesAnnotationTypeGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var annotationType string

		httpRes, err := apiClient.DefaultAPI.MetadataObjectsDocumentsAnnotationsTypesAnnotationTypeGet(context.Background(), annotationType).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService MetadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var eventType string
		var eventSubtype string

		httpRes, err := apiClient.DefaultAPI.MetadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet(context.Background(), eventType, eventSubtype).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService MetadataObjectsDocumentsEventsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.MetadataObjectsDocumentsEventsGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService MetadataObjectsDocumentsLockGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.MetadataObjectsDocumentsLockGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService MetadataObjectsDocumentsPropertiesFindCommonPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.MetadataObjectsDocumentsPropertiesFindCommonPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService MetadataObjectsDocumentsPropertiesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.MetadataObjectsDocumentsPropertiesGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService MetadataObjectsDocumentsTemplatesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.MetadataObjectsDocumentsTemplatesGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService MetadataObjectsDocumentsTypesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.MetadataObjectsDocumentsTypesGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService MetadataObjectsDocumentsTypesTypeGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var type_ string

		httpRes, err := apiClient.DefaultAPI.MetadataObjectsDocumentsTypesTypeGet(context.Background(), type_).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService MetadataObjectsDocumentsTypesTypeRelationshipsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var type_ string

		httpRes, err := apiClient.DefaultAPI.MetadataObjectsDocumentsTypesTypeRelationshipsGet(context.Background(), type_).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService MetadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var type_ string
		var subtype string
		var classification string

		httpRes, err := apiClient.DefaultAPI.MetadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet(context.Background(), type_, subtype, classification).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService MetadataObjectsDocumentsTypesTypeSubtypesSubtypeGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var type_ string
		var subtype string

		httpRes, err := apiClient.DefaultAPI.MetadataObjectsDocumentsTypesTypeSubtypesSubtypeGet(context.Background(), type_, subtype).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService MetadataObjectsGroupsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.MetadataObjectsGroupsGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService MetadataObjectsSecuritypoliciesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.MetadataObjectsSecuritypoliciesGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService MetadataObjectsUsersGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.MetadataObjectsUsersGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService MetadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.MetadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService MetadataQueryDocumentsRelationshipsDocumentSignatureSysrGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.MetadataQueryDocumentsRelationshipsDocumentSignatureSysrGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService MetadataVobjectsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.MetadataVobjectsGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService MetadataVobjectsObjectNameActionsCanceldeploymentPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectName string

		httpRes, err := apiClient.DefaultAPI.MetadataVobjectsObjectNameActionsCanceldeploymentPost(context.Background(), objectName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService MetadataVobjectsObjectNameFieldsObjectFieldNameGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectName string
		var objectFieldName string

		httpRes, err := apiClient.DefaultAPI.MetadataVobjectsObjectNameFieldsObjectFieldNameGet(context.Background(), objectName, objectFieldName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService MetadataVobjectsObjectNameGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectName string

		httpRes, err := apiClient.DefaultAPI.MetadataVobjectsObjectNameGet(context.Background(), objectName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService MetadataVobjectsObjectNamePageLayoutsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectName string

		httpRes, err := apiClient.DefaultAPI.MetadataVobjectsObjectNamePageLayoutsGet(context.Background(), objectName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService MetadataVobjectsObjectNamePageLayoutsLayoutNameGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectName string
		var layoutName string

		httpRes, err := apiClient.DefaultAPI.MetadataVobjectsObjectNamePageLayoutsLayoutNameGet(context.Background(), objectName, layoutName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService NotificationsHistoriesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.NotificationsHistoriesGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectWorkflowActionsActionGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var action string

		httpRes, err := apiClient.DefaultAPI.ObjectWorkflowActionsActionGet(context.Background(), action).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectWorkflowActionsActionPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var action string

		httpRes, err := apiClient.DefaultAPI.ObjectWorkflowActionsActionPost(context.Background(), action).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectWorkflowActionsCanceltasksPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectWorkflowActionsCanceltasksPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectWorkflowActionsCancelworkflowsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectWorkflowActionsCancelworkflowsPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectWorkflowActionsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectWorkflowActionsGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectWorkflowActionsReassigntasksPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectWorkflowActionsReassigntasksPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectWorkflowActionsReplaceworkflowownerPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectWorkflowActionsReplaceworkflowownerPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsBindersActionsExportJobIdResultsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var jobId string

		httpRes, err := apiClient.DefaultAPI.ObjectsBindersActionsExportJobIdResultsGet(context.Background(), jobId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsBindersBinderIdActionsExportPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var binderId string

		httpRes, err := apiClient.DefaultAPI.ObjectsBindersBinderIdActionsExportPost(context.Background(), binderId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsBindersBinderIdActionsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var binderId string

		httpRes, err := apiClient.DefaultAPI.ObjectsBindersBinderIdActionsPost(context.Background(), binderId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsBindersBinderIdBindingRulePut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var binderId string

		httpRes, err := apiClient.DefaultAPI.ObjectsBindersBinderIdBindingRulePut(context.Background(), binderId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsBindersBinderIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var binderId string

		httpRes, err := apiClient.DefaultAPI.ObjectsBindersBinderIdDelete(context.Background(), binderId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsBindersBinderIdDocumentsNodeIdBindingRulePut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var binderId string
		var nodeId string

		httpRes, err := apiClient.DefaultAPI.ObjectsBindersBinderIdDocumentsNodeIdBindingRulePut(context.Background(), binderId, nodeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsBindersBinderIdDocumentsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var binderId string

		httpRes, err := apiClient.DefaultAPI.ObjectsBindersBinderIdDocumentsPost(context.Background(), binderId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsBindersBinderIdDocumentsSectionIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var binderId string
		var sectionId string

		httpRes, err := apiClient.DefaultAPI.ObjectsBindersBinderIdDocumentsSectionIdDelete(context.Background(), binderId, sectionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsBindersBinderIdDocumentsSectionIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var binderId string
		var sectionId string

		httpRes, err := apiClient.DefaultAPI.ObjectsBindersBinderIdDocumentsSectionIdPut(context.Background(), binderId, sectionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsBindersBinderIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var binderId string

		httpRes, err := apiClient.DefaultAPI.ObjectsBindersBinderIdGet(context.Background(), binderId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsBindersBinderIdPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var binderId string

		httpRes, err := apiClient.DefaultAPI.ObjectsBindersBinderIdPost(context.Background(), binderId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsBindersBinderIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var binderId string

		httpRes, err := apiClient.DefaultAPI.ObjectsBindersBinderIdPut(context.Background(), binderId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var binderId string
		var roleNameAndUserOrGroup string
		var id string

		httpRes, err := apiClient.DefaultAPI.ObjectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete(context.Background(), binderId, roleNameAndUserOrGroup, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsBindersBinderIdSectionsNodeIdBindingRulePut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var binderId string
		var nodeId string

		httpRes, err := apiClient.DefaultAPI.ObjectsBindersBinderIdSectionsNodeIdBindingRulePut(context.Background(), binderId, nodeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsBindersBinderIdSectionsNodeIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var binderId string
		var nodeId string

		httpRes, err := apiClient.DefaultAPI.ObjectsBindersBinderIdSectionsNodeIdPut(context.Background(), binderId, nodeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsBindersBinderIdSectionsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var binderId string

		httpRes, err := apiClient.DefaultAPI.ObjectsBindersBinderIdSectionsPost(context.Background(), binderId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsBindersBinderIdSectionsSectionIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var binderId string
		var sectionId string

		httpRes, err := apiClient.DefaultAPI.ObjectsBindersBinderIdSectionsSectionIdDelete(context.Background(), binderId, sectionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsBindersBinderIdSectionsSectionIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var binderId string
		var sectionId string

		httpRes, err := apiClient.DefaultAPI.ObjectsBindersBinderIdSectionsSectionIdGet(context.Background(), binderId, sectionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsBindersBinderIdVersionsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var binderId string

		httpRes, err := apiClient.DefaultAPI.ObjectsBindersBinderIdVersionsGet(context.Background(), binderId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var binderId string
		var majorVersion string
		var minorVersion string

		httpRes, err := apiClient.DefaultAPI.ObjectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost(context.Background(), binderId, majorVersion, minorVersion).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsBindersBinderIdVersionsMajorVersionMinorVersionDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var binderId string
		var majorVersion string
		var minorVersion string

		httpRes, err := apiClient.DefaultAPI.ObjectsBindersBinderIdVersionsMajorVersionMinorVersionDelete(context.Background(), binderId, majorVersion, minorVersion).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsBindersBinderIdVersionsMajorVersionMinorVersionGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var binderId string
		var majorVersion string
		var minorVersion string

		httpRes, err := apiClient.DefaultAPI.ObjectsBindersBinderIdVersionsMajorVersionMinorVersionGet(context.Background(), binderId, majorVersion, minorVersion).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsBindersBinderIdVersionsMajorVersionMinorVersionPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var binderId string
		var majorVersion string
		var minorVersion string

		httpRes, err := apiClient.DefaultAPI.ObjectsBindersBinderIdVersionsMajorVersionMinorVersionPut(context.Background(), binderId, majorVersion, minorVersion).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var binderId string
		var majorVersion string
		var minorVersion string

		httpRes, err := apiClient.DefaultAPI.ObjectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost(context.Background(), binderId, majorVersion, minorVersion).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var binderId string
		var majorVersion string
		var minorVersion string
		var relationshipId string

		httpRes, err := apiClient.DefaultAPI.ObjectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete(context.Background(), binderId, majorVersion, minorVersion, relationshipId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var binderId string
		var majorVersion string
		var minorVersion string
		var relationshipId string

		httpRes, err := apiClient.DefaultAPI.ObjectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet(context.Background(), binderId, majorVersion, minorVersion, relationshipId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var binderId string
		var majorVersion string
		var minorVersion string
		var sectionId string

		httpRes, err := apiClient.DefaultAPI.ObjectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet(context.Background(), binderId, majorVersion, minorVersion, sectionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsBindersIdRolesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.DefaultAPI.ObjectsBindersIdRolesGet(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsBindersIdRolesPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.DefaultAPI.ObjectsBindersIdRolesPost(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsBindersIdRolesRoleNameGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var roleName string

		httpRes, err := apiClient.DefaultAPI.ObjectsBindersIdRolesRoleNameGet(context.Background(), id, roleName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var majorVersion string
		var minorVersion string

		httpRes, err := apiClient.DefaultAPI.ObjectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet(context.Background(), id, majorVersion, minorVersion).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var majorVersion string
		var minorVersion string
		var nameV string

		httpRes, err := apiClient.DefaultAPI.ObjectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet(context.Background(), id, majorVersion, minorVersion, nameV).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var majorVersion string
		var minorVersion string
		var nameV string

		httpRes, err := apiClient.DefaultAPI.ObjectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut(context.Background(), id, majorVersion, minorVersion, nameV).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsBindersLifecycleActionsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectsBindersLifecycleActionsPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsBindersLifecycleActionsUserActionNamePut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userActionName string

		httpRes, err := apiClient.DefaultAPI.ObjectsBindersLifecycleActionsUserActionNamePut(context.Background(), userActionName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsBindersPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectsBindersPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsBindersTemplatesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectsBindersTemplatesGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsBindersTemplatesPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectsBindersTemplatesPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsBindersTemplatesPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectsBindersTemplatesPut(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsBindersTemplatesTemplateNameBindernodesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var templateName string

		httpRes, err := apiClient.DefaultAPI.ObjectsBindersTemplatesTemplateNameBindernodesGet(context.Background(), templateName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsBindersTemplatesTemplateNameBindernodesPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var templateName string

		httpRes, err := apiClient.DefaultAPI.ObjectsBindersTemplatesTemplateNameBindernodesPost(context.Background(), templateName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsBindersTemplatesTemplateNameBindernodesPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var templateName string

		httpRes, err := apiClient.DefaultAPI.ObjectsBindersTemplatesTemplateNameBindernodesPut(context.Background(), templateName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsBindersTemplatesTemplateNameDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var templateName string

		httpRes, err := apiClient.DefaultAPI.ObjectsBindersTemplatesTemplateNameDelete(context.Background(), templateName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsBindersTemplatesTemplateNameGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var templateName string

		httpRes, err := apiClient.DefaultAPI.ObjectsBindersTemplatesTemplateNameGet(context.Background(), templateName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDeletionsDocumentsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectsDeletionsDocumentsGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDeletionsVobjectsObjectNameGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectName string

		httpRes, err := apiClient.DefaultAPI.ObjectsDeletionsVobjectsObjectNameGet(context.Background(), objectName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsActionsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsActionsGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var lifecycleAndStateAndAction string
		var jobId string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet(context.Background(), lifecycleAndStateAndAction, jobId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsActionsWorkflowNameGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var workflowName string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsActionsWorkflowNameGet(context.Background(), workflowName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsActionsWorkflowNamePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var workflowName string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsActionsWorkflowNamePost(context.Background(), workflowName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsAnnotationsBatchDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsAnnotationsBatchDelete(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsAnnotationsBatchPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsAnnotationsBatchPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsAnnotationsBatchPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsAnnotationsBatchPut(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsAnnotationsRepliesBatchPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsAnnotationsRepliesBatchPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsAttachmentsBatchDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsAttachmentsBatchDelete(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsAttachmentsBatchPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsAttachmentsBatchPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsAttachmentsBatchPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsAttachmentsBatchPut(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsBatchActionsFileextractJobIdResultsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var jobId string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsBatchActionsFileextractJobIdResultsGet(context.Background(), jobId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsBatchActionsFileextractPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsBatchActionsFileextractPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsBatchActionsReclassifyPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsBatchActionsReclassifyPut(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsBatchActionsRerenderPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsBatchActionsRerenderPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsBatchDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsBatchDelete(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsBatchLockDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsBatchLockDelete(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsBatchPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsBatchPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsBatchPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsBatchPut(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsDocIdAnchorsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var docId string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsDocIdAnchorsGet(context.Background(), docId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsDocIdAnnotationsFileGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var docId string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsDocIdAnnotationsFileGet(context.Background(), docId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsDocIdAnnotationsFilePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var docId string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsDocIdAnnotationsFilePost(context.Background(), docId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsDocIdAttachmentsAttachmentIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var docId string
		var attachmentId string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsDocIdAttachmentsAttachmentIdDelete(context.Background(), docId, attachmentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsDocIdAttachmentsAttachmentIdFileGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var docId string
		var attachmentId string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsDocIdAttachmentsAttachmentIdFileGet(context.Background(), docId, attachmentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsDocIdAttachmentsAttachmentIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var docId string
		var attachmentId string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsDocIdAttachmentsAttachmentIdGet(context.Background(), docId, attachmentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsDocIdAttachmentsAttachmentIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var docId string
		var attachmentId string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsDocIdAttachmentsAttachmentIdPut(context.Background(), docId, attachmentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var docId string
		var attachmentId string
		var attachmentVersion string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete(context.Background(), docId, attachmentId, attachmentVersion).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var docId string
		var attachmentId string
		var attachmentVersion string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(context.Background(), docId, attachmentId, attachmentVersion).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var docId string
		var attachmentId string
		var attachmentVersion string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet(context.Background(), docId, attachmentId, attachmentVersion).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var docId string
		var attachmentId string
		var attachmentVersion string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost(context.Background(), docId, attachmentId, attachmentVersion).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var docId string
		var attachmentId string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet(context.Background(), docId, attachmentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsDocIdAttachmentsFileGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var docId string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsDocIdAttachmentsFileGet(context.Background(), docId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsDocIdAttachmentsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var docId string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsDocIdAttachmentsGet(context.Background(), docId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsDocIdAttachmentsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var docId string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsDocIdAttachmentsPost(context.Background(), docId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsDocIdAudittrailGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var docId string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsDocIdAudittrailGet(context.Background(), docId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsDocIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var docId string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsDocIdDelete(context.Background(), docId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsDocIdEventsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var docId string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsDocIdEventsGet(context.Background(), docId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsDocIdFileGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var docId string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsDocIdFileGet(context.Background(), docId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsDocIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var docId string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsDocIdGet(context.Background(), docId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsDocIdLockDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var docId string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsDocIdLockDelete(context.Background(), docId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsDocIdLockGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var docId string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsDocIdLockGet(context.Background(), docId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsDocIdLockPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var docId string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsDocIdLockPost(context.Background(), docId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var docId string
		var majorVersion string
		var minorVersion string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet(context.Background(), docId, majorVersion, minorVersion).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsDocIdPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var docId string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsDocIdPost(context.Background(), docId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsDocIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var docId string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsDocIdPut(context.Background(), docId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsDocIdRenditionsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var docId string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsDocIdRenditionsGet(context.Background(), docId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsDocIdRenditionsRenditionTypeDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var docId string
		var renditionType string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsDocIdRenditionsRenditionTypeDelete(context.Background(), docId, renditionType).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsDocIdRenditionsRenditionTypeGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var docId string
		var renditionType string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsDocIdRenditionsRenditionTypeGet(context.Background(), docId, renditionType).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsDocIdRenditionsRenditionTypePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var docId string
		var renditionType string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsDocIdRenditionsRenditionTypePost(context.Background(), docId, renditionType).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsDocIdRenditionsRenditionTypePut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var docId string
		var renditionType string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsDocIdRenditionsRenditionTypePut(context.Background(), docId, renditionType).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var docId string
		var roleNameAndUserOrGroup string
		var id string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete(context.Background(), docId, roleNameAndUserOrGroup, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var docId string
		var majorVersion string
		var minorVersion string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet(context.Background(), docId, majorVersion, minorVersion).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsDocIdVersionsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var docId string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsDocIdVersionsGet(context.Background(), docId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var docId string
		var majorVersion string
		var minorVersion string
		var annotationId string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet(context.Background(), docId, majorVersion, minorVersion, annotationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var docId string
		var majorVersion string
		var minorVersion string
		var annotationId string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet(context.Background(), docId, majorVersion, minorVersion, annotationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var docId string
		var majorVersion string
		var minorVersion string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet(context.Background(), docId, majorVersion, minorVersion).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var docId string
		var majorVersion string
		var minorVersion string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost(context.Background(), docId, majorVersion, minorVersion).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var docId string
		var majorVersion string
		var minorVersion string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet(context.Background(), docId, majorVersion, minorVersion).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var docId string
		var majorVersion string
		var minorVersion string
		var attachmentId string
		var attachmentVersion string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(context.Background(), docId, majorVersion, minorVersion, attachmentId, attachmentVersion).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var docId string
		var majorVersion string
		var minorVersion string
		var attachmentId string
		var attachmentVersion string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet(context.Background(), docId, majorVersion, minorVersion, attachmentId, attachmentVersion).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var docId string
		var majorVersion string
		var minorVersion string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete(context.Background(), docId, majorVersion, minorVersion).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var docId string
		var majorVersion string
		var minorVersion string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet(context.Background(), docId, majorVersion, minorVersion).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var docId string
		var majorVersion string
		var minorVersion string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost(context.Background(), docId, majorVersion, minorVersion).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var docId string
		var majorVersion string
		var minorVersion string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet(context.Background(), docId, majorVersion, minorVersion).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var docId string
		var majorVersion string
		var minorVersion string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet(context.Background(), docId, majorVersion, minorVersion).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var docId string
		var majorVersion string
		var minorVersion string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionGet(context.Background(), docId, majorVersion, minorVersion).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var docId string
		var majorVersion string
		var minorVersion string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionPut(context.Background(), docId, majorVersion, minorVersion).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var docId string
		var majorVersion string
		var minorVersion string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet(context.Background(), docId, majorVersion, minorVersion).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var docId string
		var majorVersion string
		var minorVersion string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost(context.Background(), docId, majorVersion, minorVersion).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var docId string
		var majorVersion string
		var minorVersion string
		var relationshipId string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete(context.Background(), docId, majorVersion, minorVersion, relationshipId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var docId string
		var majorVersion string
		var minorVersion string
		var relationshipId string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet(context.Background(), docId, majorVersion, minorVersion, relationshipId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var docId string
		var majorVersion string
		var minorVersion string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet(context.Background(), docId, majorVersion, minorVersion).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var docId string
		var majorVersion string
		var minorVersion string
		var renditionType string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete(context.Background(), docId, majorVersion, minorVersion, renditionType).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var docId string
		var majorVersion string
		var minorVersion string
		var renditionType string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet(context.Background(), docId, majorVersion, minorVersion, renditionType).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var docId string
		var majorVersion string
		var minorVersion string
		var renditionType string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost(context.Background(), docId, majorVersion, minorVersion, renditionType).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var docId string
		var majorVersion string
		var minorVersion string
		var renditionType string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut(context.Background(), docId, majorVersion, minorVersion, renditionType).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var docId string
		var majorVersion string
		var minorVersion string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet(context.Background(), docId, majorVersion, minorVersion).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsIdRolesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsIdRolesGet(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsIdRolesPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsIdRolesPost(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsIdRolesRoleNameGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var roleName string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsIdRolesRoleNameGet(context.Background(), id, roleName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var majorVersion string
		var minorVersion string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet(context.Background(), id, majorVersion, minorVersion).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var majorVersion string
		var minorVersion string
		var nameV string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet(context.Background(), id, majorVersion, minorVersion, nameV).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var majorVersion string
		var minorVersion string
		var nameV string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut(context.Background(), id, majorVersion, minorVersion, nameV).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsLifecycleActionsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsLifecycleActionsPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsLifecycleActionsUserActionNamePut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userActionName string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsLifecycleActionsUserActionNamePut(context.Background(), userActionName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsRelationshipsBatchDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsRelationshipsBatchDelete(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsRelationshipsBatchPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsRelationshipsBatchPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsRenditionsBatchDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsRenditionsBatchDelete(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsRenditionsBatchPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsRenditionsBatchPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsRolesBatchDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsRolesBatchDelete(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsRolesBatchPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsRolesBatchPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsTemplatesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsTemplatesGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsTemplatesPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsTemplatesPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsTemplatesPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsTemplatesPut(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsTemplatesTemplateNameDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var templateName string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsTemplatesTemplateNameDelete(context.Background(), templateName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsTemplatesTemplateNameFileGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var templateName string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsTemplatesTemplateNameFileGet(context.Background(), templateName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsTemplatesTemplateNameGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var templateName string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsTemplatesTemplateNameGet(context.Background(), templateName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsTemplatesTemplateNamePut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var templateName string

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsTemplatesTemplateNamePut(context.Background(), templateName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsTokensPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsTokensPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsVersionsBatchActionsFileextractPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsVersionsBatchActionsFileextractPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsVersionsBatchDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsVersionsBatchDelete(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDocumentsVersionsBatchPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectsDocumentsVersionsBatchPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDomainGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectsDomainGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsDomainsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectsDomainsGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsEdlMatchedDocumentsBatchActionsAddPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectsEdlMatchedDocumentsBatchActionsAddPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsEdlMatchedDocumentsBatchActionsRemovePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectsEdlMatchedDocumentsBatchActionsRemovePost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsGroupsAutoGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectsGroupsAutoGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsGroupsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectsGroupsGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsGroupsGroupIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string

		httpRes, err := apiClient.DefaultAPI.ObjectsGroupsGroupIdDelete(context.Background(), groupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsGroupsGroupIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string

		httpRes, err := apiClient.DefaultAPI.ObjectsGroupsGroupIdGet(context.Background(), groupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsGroupsGroupIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string

		httpRes, err := apiClient.DefaultAPI.ObjectsGroupsGroupIdPut(context.Background(), groupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsGroupsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectsGroupsPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsLicensesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectsLicensesGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsObjectworkflowsActionsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectsObjectworkflowsActionsGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsObjectworkflowsActionsWorkflowNameGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var workflowName string

		httpRes, err := apiClient.DefaultAPI.ObjectsObjectworkflowsActionsWorkflowNameGet(context.Background(), workflowName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsObjectworkflowsActionsWorkflowNamePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var workflowName string

		httpRes, err := apiClient.DefaultAPI.ObjectsObjectworkflowsActionsWorkflowNamePost(context.Background(), workflowName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsObjectworkflowsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectsObjectworkflowsGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsObjectworkflowsTasksGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectsObjectworkflowsTasksGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsObjectworkflowsTasksTaskIdActionsAcceptPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskId string

		httpRes, err := apiClient.DefaultAPI.ObjectsObjectworkflowsTasksTaskIdActionsAcceptPost(context.Background(), taskId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsObjectworkflowsTasksTaskIdActionsCancelPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskId string

		httpRes, err := apiClient.DefaultAPI.ObjectsObjectworkflowsTasksTaskIdActionsCancelPost(context.Background(), taskId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsObjectworkflowsTasksTaskIdActionsCompletePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskId string

		httpRes, err := apiClient.DefaultAPI.ObjectsObjectworkflowsTasksTaskIdActionsCompletePost(context.Background(), taskId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsObjectworkflowsTasksTaskIdActionsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskId string

		httpRes, err := apiClient.DefaultAPI.ObjectsObjectworkflowsTasksTaskIdActionsGet(context.Background(), taskId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsObjectworkflowsTasksTaskIdActionsMdwacceptPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskId string

		httpRes, err := apiClient.DefaultAPI.ObjectsObjectworkflowsTasksTaskIdActionsMdwacceptPost(context.Background(), taskId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsObjectworkflowsTasksTaskIdActionsMdwcompletePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskId string

		httpRes, err := apiClient.DefaultAPI.ObjectsObjectworkflowsTasksTaskIdActionsMdwcompletePost(context.Background(), taskId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskId string

		httpRes, err := apiClient.DefaultAPI.ObjectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPost(context.Background(), taskId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsObjectworkflowsTasksTaskIdActionsMdwreassignPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskId string

		httpRes, err := apiClient.DefaultAPI.ObjectsObjectworkflowsTasksTaskIdActionsMdwreassignPost(context.Background(), taskId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsObjectworkflowsTasksTaskIdActionsReassignPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskId string

		httpRes, err := apiClient.DefaultAPI.ObjectsObjectworkflowsTasksTaskIdActionsReassignPost(context.Background(), taskId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsObjectworkflowsTasksTaskIdActionsTaskActionGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskId string
		var taskAction string

		httpRes, err := apiClient.DefaultAPI.ObjectsObjectworkflowsTasksTaskIdActionsTaskActionGet(context.Background(), taskId, taskAction).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsObjectworkflowsTasksTaskIdActionsUndoacceptPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskId string

		httpRes, err := apiClient.DefaultAPI.ObjectsObjectworkflowsTasksTaskIdActionsUndoacceptPost(context.Background(), taskId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsObjectworkflowsTasksTaskIdActionsUpdateduedatePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskId string

		httpRes, err := apiClient.DefaultAPI.ObjectsObjectworkflowsTasksTaskIdActionsUpdateduedatePost(context.Background(), taskId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsObjectworkflowsTasksTaskIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskId string

		httpRes, err := apiClient.DefaultAPI.ObjectsObjectworkflowsTasksTaskIdGet(context.Background(), taskId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsObjectworkflowsWorkflowIdActionsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var workflowId string

		httpRes, err := apiClient.DefaultAPI.ObjectsObjectworkflowsWorkflowIdActionsGet(context.Background(), workflowId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsObjectworkflowsWorkflowIdActionsWorkflowActionGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var workflowId string
		var workflowAction string

		httpRes, err := apiClient.DefaultAPI.ObjectsObjectworkflowsWorkflowIdActionsWorkflowActionGet(context.Background(), workflowId, workflowAction).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsObjectworkflowsWorkflowIdActionsWorkflowActionPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var workflowId string
		var workflowAction string

		httpRes, err := apiClient.DefaultAPI.ObjectsObjectworkflowsWorkflowIdActionsWorkflowActionPost(context.Background(), workflowId, workflowAction).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsObjectworkflowsWorkflowIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var workflowId string

		httpRes, err := apiClient.DefaultAPI.ObjectsObjectworkflowsWorkflowIdGet(context.Background(), workflowId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsPicklistsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectsPicklistsGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsPicklistsPicklistNameGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var picklistName string

		httpRes, err := apiClient.DefaultAPI.ObjectsPicklistsPicklistNameGet(context.Background(), picklistName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsPicklistsPicklistNamePicklistValueNameDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var picklistName string
		var picklistValueName string

		httpRes, err := apiClient.DefaultAPI.ObjectsPicklistsPicklistNamePicklistValueNameDelete(context.Background(), picklistName, picklistValueName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsPicklistsPicklistNamePicklistValueNamePut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var picklistName string
		var picklistValueName string

		httpRes, err := apiClient.DefaultAPI.ObjectsPicklistsPicklistNamePicklistValueNamePut(context.Background(), picklistName, picklistValueName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsPicklistsPicklistNamePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var picklistName string

		httpRes, err := apiClient.DefaultAPI.ObjectsPicklistsPicklistNamePost(context.Background(), picklistName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsPicklistsPicklistNamePut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var picklistName string

		httpRes, err := apiClient.DefaultAPI.ObjectsPicklistsPicklistNamePut(context.Background(), picklistName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsSandboxActionsBuildproductionPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectsSandboxActionsBuildproductionPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsSandboxActionsPromoteproductionPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectsSandboxActionsPromoteproductionPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsSandboxActionsRecheckusagePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectsSandboxActionsRecheckusagePost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsSandboxBatchChangesizePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectsSandboxBatchChangesizePost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsSandboxEntitlementsSetPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectsSandboxEntitlementsSetPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsSandboxGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectsSandboxGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsSandboxNameDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.DefaultAPI.ObjectsSandboxNameDelete(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsSandboxPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectsSandboxPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsSandboxSnapshotApiNameActionsUpdatePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiName string

		httpRes, err := apiClient.DefaultAPI.ObjectsSandboxSnapshotApiNameActionsUpdatePost(context.Background(), apiName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsSandboxSnapshotApiNameActionsUpgradePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiName string

		httpRes, err := apiClient.DefaultAPI.ObjectsSandboxSnapshotApiNameActionsUpgradePost(context.Background(), apiName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsSandboxSnapshotApiNameDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiName string

		httpRes, err := apiClient.DefaultAPI.ObjectsSandboxSnapshotApiNameDelete(context.Background(), apiName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsSandboxSnapshotGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectsSandboxSnapshotGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsSandboxSnapshotPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectsSandboxSnapshotPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsSandboxVaultIdActionsRefreshPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var vaultId string

		httpRes, err := apiClient.DefaultAPI.ObjectsSandboxVaultIdActionsRefreshPost(context.Background(), vaultId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsSandboxVaultIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var vaultId string

		httpRes, err := apiClient.DefaultAPI.ObjectsSandboxVaultIdGet(context.Background(), vaultId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsSecuritypoliciesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectsSecuritypoliciesGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsSecuritypoliciesSecurityPolicyNameGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var securityPolicyName string

		httpRes, err := apiClient.DefaultAPI.ObjectsSecuritypoliciesSecurityPolicyNameGet(context.Background(), securityPolicyName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsUsersGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectsUsersGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsUsersIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.DefaultAPI.ObjectsUsersIdGet(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsUsersIdPermissionsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.DefaultAPI.ObjectsUsersIdPermissionsGet(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsUsersIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.DefaultAPI.ObjectsUsersIdPut(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsUsersMeGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectsUsersMeGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsUsersMePasswordPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectsUsersMePasswordPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsUsersMePermissionsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectsUsersMePermissionsGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsUsersMePut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectsUsersMePut(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsUsersPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectsUsersPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsUsersPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectsUsersPut(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsUsersUserIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string

		httpRes, err := apiClient.DefaultAPI.ObjectsUsersUserIdDelete(context.Background(), userId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsUsersUserIdVaultMembershipVaultIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string
		var vaultId string

		httpRes, err := apiClient.DefaultAPI.ObjectsUsersUserIdVaultMembershipVaultIdPut(context.Background(), userId, vaultId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsVaultActionsComparePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectsVaultActionsComparePost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObjectsVaultActionsConfigreportPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ObjectsVaultActionsConfigreportPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService QueryComponentsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.QueryComponentsPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService QueryNextPagePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nextPage string

		httpRes, err := apiClient.DefaultAPI.QueryNextPagePost(context.Background(), nextPage).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService QueryPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.QueryPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService QueryPreviousPagePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var previousPage string

		httpRes, err := apiClient.DefaultAPI.QueryPreviousPagePost(context.Background(), previousPage).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ScimV2MeGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ScimV2MeGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ScimV2MePut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ScimV2MePut(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ScimV2ResourceTypesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ScimV2ResourceTypesGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ScimV2ResourceTypesTypeGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var type_ string

		httpRes, err := apiClient.DefaultAPI.ScimV2ResourceTypesTypeGet(context.Background(), type_).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ScimV2SchemasGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ScimV2SchemasGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ScimV2SchemasIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.DefaultAPI.ScimV2SchemasIdGet(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ScimV2ServiceProviderConfigGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ScimV2ServiceProviderConfigGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ScimV2TypeGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var type_ string

		httpRes, err := apiClient.DefaultAPI.ScimV2TypeGet(context.Background(), type_).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ScimV2TypeIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var type_ string
		var id string

		httpRes, err := apiClient.DefaultAPI.ScimV2TypeIdGet(context.Background(), type_, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ScimV2UsersGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ScimV2UsersGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ScimV2UsersIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.DefaultAPI.ScimV2UsersIdGet(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ScimV2UsersIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.DefaultAPI.ScimV2UsersIdPut(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ScimV2UsersPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ScimV2UsersPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ServicesCertificateCertIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var certId string

		httpRes, err := apiClient.DefaultAPI.ServicesCertificateCertIdGet(context.Background(), certId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ServicesConfigurationModeActionsDisablePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ServicesConfigurationModeActionsDisablePost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ServicesConfigurationModeActionsEnablePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ServicesConfigurationModeActionsEnablePost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ServicesDirectdataFilesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ServicesDirectdataFilesGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ServicesDirectdataFilesNameGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.DefaultAPI.ServicesDirectdataFilesNameGet(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ServicesFileStagingItemsContentItemGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var item string

		httpRes, err := apiClient.DefaultAPI.ServicesFileStagingItemsContentItemGet(context.Background(), item).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ServicesFileStagingItemsItemDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var item string

		httpRes, err := apiClient.DefaultAPI.ServicesFileStagingItemsItemDelete(context.Background(), item).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ServicesFileStagingItemsItemGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var item string

		httpRes, err := apiClient.DefaultAPI.ServicesFileStagingItemsItemGet(context.Background(), item).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ServicesFileStagingItemsItemPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var item string

		httpRes, err := apiClient.DefaultAPI.ServicesFileStagingItemsItemPut(context.Background(), item).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ServicesFileStagingItemsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ServicesFileStagingItemsPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ServicesFileStagingUploadGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ServicesFileStagingUploadGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ServicesFileStagingUploadPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ServicesFileStagingUploadPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ServicesFileStagingUploadUploadSessionIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uploadSessionId string

		httpRes, err := apiClient.DefaultAPI.ServicesFileStagingUploadUploadSessionIdDelete(context.Background(), uploadSessionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ServicesFileStagingUploadUploadSessionIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uploadSessionId string

		httpRes, err := apiClient.DefaultAPI.ServicesFileStagingUploadUploadSessionIdGet(context.Background(), uploadSessionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ServicesFileStagingUploadUploadSessionIdPartsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uploadSessionId string

		httpRes, err := apiClient.DefaultAPI.ServicesFileStagingUploadUploadSessionIdPartsGet(context.Background(), uploadSessionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ServicesFileStagingUploadUploadSessionIdPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uploadSessionId string

		httpRes, err := apiClient.DefaultAPI.ServicesFileStagingUploadUploadSessionIdPost(context.Background(), uploadSessionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ServicesFileStagingUploadUploadSessionIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uploadSessionId string

		httpRes, err := apiClient.DefaultAPI.ServicesFileStagingUploadUploadSessionIdPut(context.Background(), uploadSessionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ServicesJobsHistoriesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ServicesJobsHistoriesGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ServicesJobsJobIdErrorsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var jobId string

		httpRes, err := apiClient.DefaultAPI.ServicesJobsJobIdErrorsGet(context.Background(), jobId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ServicesJobsJobIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var jobId string

		httpRes, err := apiClient.DefaultAPI.ServicesJobsJobIdGet(context.Background(), jobId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ServicesJobsJobIdSummaryGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var jobId string

		httpRes, err := apiClient.DefaultAPI.ServicesJobsJobIdSummaryGet(context.Background(), jobId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ServicesJobsJobIdTasksGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var jobId string

		httpRes, err := apiClient.DefaultAPI.ServicesJobsJobIdTasksGet(context.Background(), jobId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ServicesJobsMonitorsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ServicesJobsMonitorsGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ServicesJobsStartNowJobIdPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var jobId string

		httpRes, err := apiClient.DefaultAPI.ServicesJobsStartNowJobIdPost(context.Background(), jobId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ServicesLoaderExtractPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ServicesLoaderExtractPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ServicesLoaderJobIdTasksTaskIdFailurelogGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var jobId string
		var taskId string

		httpRes, err := apiClient.DefaultAPI.ServicesLoaderJobIdTasksTaskIdFailurelogGet(context.Background(), jobId, taskId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ServicesLoaderJobIdTasksTaskIdResultsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var jobId string
		var taskId string

		httpRes, err := apiClient.DefaultAPI.ServicesLoaderJobIdTasksTaskIdResultsGet(context.Background(), jobId, taskId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ServicesLoaderJobIdTasksTaskIdResultsRenditionsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var jobId string
		var taskId string

		httpRes, err := apiClient.DefaultAPI.ServicesLoaderJobIdTasksTaskIdResultsRenditionsGet(context.Background(), jobId, taskId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ServicesLoaderJobIdTasksTaskIdSuccesslogGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var jobId string
		var taskId string

		httpRes, err := apiClient.DefaultAPI.ServicesLoaderJobIdTasksTaskIdSuccesslogGet(context.Background(), jobId, taskId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ServicesLoaderLoadPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ServicesLoaderLoadPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ServicesPackageActionsValidatePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ServicesPackageActionsValidatePost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ServicesPackagePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ServicesPackagePost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ServicesPackagePut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ServicesPackagePut(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ServicesQueuesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ServicesQueuesGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ServicesQueuesQueueNameActionsDisableDeliveryPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var queueName string

		httpRes, err := apiClient.DefaultAPI.ServicesQueuesQueueNameActionsDisableDeliveryPut(context.Background(), queueName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ServicesQueuesQueueNameActionsEnableDeliveryPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var queueName string

		httpRes, err := apiClient.DefaultAPI.ServicesQueuesQueueNameActionsEnableDeliveryPut(context.Background(), queueName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ServicesQueuesQueueNameActionsResetPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var queueName string

		httpRes, err := apiClient.DefaultAPI.ServicesQueuesQueueNameActionsResetPut(context.Background(), queueName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ServicesQueuesQueueNameGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var queueName string

		httpRes, err := apiClient.DefaultAPI.ServicesQueuesQueueNameGet(context.Background(), queueName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ServicesVobjectVaultPackageVPackageIdActionsValidatePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var packageId string

		httpRes, err := apiClient.DefaultAPI.ServicesVobjectVaultPackageVPackageIdActionsValidatePost(context.Background(), packageId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService SessionDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.SessionDelete(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService UicodeDistributionsDistributionNameCodeGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var distributionName string

		httpRes, err := apiClient.DefaultAPI.UicodeDistributionsDistributionNameCodeGet(context.Background(), distributionName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService UicodeDistributionsDistributionNameDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var distributionName string

		httpRes, err := apiClient.DefaultAPI.UicodeDistributionsDistributionNameDelete(context.Background(), distributionName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService UicodeDistributionsDistributionNameGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var distributionName string

		httpRes, err := apiClient.DefaultAPI.UicodeDistributionsDistributionNameGet(context.Background(), distributionName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService UicodeDistributionsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.UicodeDistributionsGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService UicodeDistributionsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.UicodeDistributionsPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService VobjectVaultPackageVPackageIdActionsDeployPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var packageId string

		httpRes, err := apiClient.DefaultAPI.VobjectVaultPackageVPackageIdActionsDeployPost(context.Background(), packageId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService VobjectVaultPackageVPackageIdActionsDeployResultsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var packageId string

		httpRes, err := apiClient.DefaultAPI.VobjectVaultPackageVPackageIdActionsDeployResultsGet(context.Background(), packageId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService VobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectName string
		var jobStatus string
		var jobId string

		httpRes, err := apiClient.DefaultAPI.VobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet(context.Background(), objectName, jobStatus, jobId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService VobjectsDeepcopyResultsObjectNameJobStatusJobIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectName string
		var jobStatus string
		var jobId string

		httpRes, err := apiClient.DefaultAPI.VobjectsDeepcopyResultsObjectNameJobStatusJobIdGet(context.Background(), objectName, jobStatus, jobId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService VobjectsEdlItemVActionsCreateplaceholderPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.VobjectsEdlItemVActionsCreateplaceholderPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService VobjectsMergesJobIdLogGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var jobId string

		httpRes, err := apiClient.DefaultAPI.VobjectsMergesJobIdLogGet(context.Background(), jobId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService VobjectsMergesJobIdResultsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var jobId string

		httpRes, err := apiClient.DefaultAPI.VobjectsMergesJobIdResultsGet(context.Background(), jobId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService VobjectsMergesJobIdStatusGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var jobId string

		httpRes, err := apiClient.DefaultAPI.VobjectsMergesJobIdStatusGet(context.Background(), jobId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService VobjectsObjectNameActionsActionNamePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectName string
		var actionName string

		httpRes, err := apiClient.DefaultAPI.VobjectsObjectNameActionsActionNamePost(context.Background(), objectName, actionName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService VobjectsObjectNameActionsChangetypePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectName string

		httpRes, err := apiClient.DefaultAPI.VobjectsObjectNameActionsChangetypePost(context.Background(), objectName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService VobjectsObjectNameActionsMergePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectName string

		httpRes, err := apiClient.DefaultAPI.VobjectsObjectNameActionsMergePost(context.Background(), objectName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService VobjectsObjectNameActionsRecalculaterollupsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectName string

		httpRes, err := apiClient.DefaultAPI.VobjectsObjectNameActionsRecalculaterollupsGet(context.Background(), objectName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService VobjectsObjectNameActionsRecalculaterollupsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectName string

		httpRes, err := apiClient.DefaultAPI.VobjectsObjectNameActionsRecalculaterollupsPost(context.Background(), objectName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService VobjectsObjectNameActionsUpdatecorporatecurrencyPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectName string

		httpRes, err := apiClient.DefaultAPI.VobjectsObjectNameActionsUpdatecorporatecurrencyPut(context.Background(), objectName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService VobjectsObjectNameAttachmentsBatchDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectName string

		httpRes, err := apiClient.DefaultAPI.VobjectsObjectNameAttachmentsBatchDelete(context.Background(), objectName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService VobjectsObjectNameAttachmentsBatchPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectName string

		httpRes, err := apiClient.DefaultAPI.VobjectsObjectNameAttachmentsBatchPost(context.Background(), objectName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService VobjectsObjectNameAttachmentsBatchPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectName string

		httpRes, err := apiClient.DefaultAPI.VobjectsObjectNameAttachmentsBatchPut(context.Background(), objectName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService VobjectsObjectNameDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectName string

		httpRes, err := apiClient.DefaultAPI.VobjectsObjectNameDelete(context.Background(), objectName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService VobjectsObjectNameIdRolesRoleNameGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectName string
		var id string
		var roleName string

		httpRes, err := apiClient.DefaultAPI.VobjectsObjectNameIdRolesRoleNameGet(context.Background(), objectName, id, roleName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService VobjectsObjectNameObjectRecordIdActionsActionNameGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectName string
		var objectRecordId string
		var actionName string

		httpRes, err := apiClient.DefaultAPI.VobjectsObjectNameObjectRecordIdActionsActionNameGet(context.Background(), objectName, objectRecordId, actionName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService VobjectsObjectNameObjectRecordIdActionsActionNamePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectName string
		var objectRecordId string
		var actionName string

		httpRes, err := apiClient.DefaultAPI.VobjectsObjectNameObjectRecordIdActionsActionNamePost(context.Background(), objectName, objectRecordId, actionName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService VobjectsObjectNameObjectRecordIdActionsCascadedeletePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectName string
		var objectRecordId string

		httpRes, err := apiClient.DefaultAPI.VobjectsObjectNameObjectRecordIdActionsCascadedeletePost(context.Background(), objectName, objectRecordId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService VobjectsObjectNameObjectRecordIdActionsDeepcopyPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectName string
		var objectRecordId string

		httpRes, err := apiClient.DefaultAPI.VobjectsObjectNameObjectRecordIdActionsDeepcopyPost(context.Background(), objectName, objectRecordId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService VobjectsObjectNameObjectRecordIdActionsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectName string
		var objectRecordId string

		httpRes, err := apiClient.DefaultAPI.VobjectsObjectNameObjectRecordIdActionsGet(context.Background(), objectName, objectRecordId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService VobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectName string
		var objectRecordId string
		var attachmentFieldName string

		httpRes, err := apiClient.DefaultAPI.VobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet(context.Background(), objectName, objectRecordId, attachmentFieldName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService VobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectName string
		var objectRecordId string
		var attachmentFieldName string

		httpRes, err := apiClient.DefaultAPI.VobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost(context.Background(), objectName, objectRecordId, attachmentFieldName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService VobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectName string
		var objectRecordId string

		httpRes, err := apiClient.DefaultAPI.VobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet(context.Background(), objectName, objectRecordId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectName string
		var objectRecordId string
		var attachmentId string

		httpRes, err := apiClient.DefaultAPI.VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete(context.Background(), objectName, objectRecordId, attachmentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectName string
		var objectRecordId string
		var attachmentId string

		httpRes, err := apiClient.DefaultAPI.VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet(context.Background(), objectName, objectRecordId, attachmentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectName string
		var objectRecordId string
		var attachmentId string

		httpRes, err := apiClient.DefaultAPI.VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut(context.Background(), objectName, objectRecordId, attachmentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectName string
		var objectRecordId string
		var attachmentId string
		var attachmentVersion string

		httpRes, err := apiClient.DefaultAPI.VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete(context.Background(), objectName, objectRecordId, attachmentId, attachmentVersion).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectName string
		var objectRecordId string
		var attachmentId string
		var attachmentVersion string

		httpRes, err := apiClient.DefaultAPI.VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(context.Background(), objectName, objectRecordId, attachmentId, attachmentVersion).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectName string
		var objectRecordId string
		var attachmentId string
		var attachmentVersion string

		httpRes, err := apiClient.DefaultAPI.VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet(context.Background(), objectName, objectRecordId, attachmentId, attachmentVersion).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectName string
		var objectRecordId string
		var attachmentId string
		var attachmentVersion string

		httpRes, err := apiClient.DefaultAPI.VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost(context.Background(), objectName, objectRecordId, attachmentId, attachmentVersion).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectName string
		var objectRecordId string
		var attachmentId string

		httpRes, err := apiClient.DefaultAPI.VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet(context.Background(), objectName, objectRecordId, attachmentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService VobjectsObjectNameObjectRecordIdAttachmentsFileGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectName string
		var objectRecordId string

		httpRes, err := apiClient.DefaultAPI.VobjectsObjectNameObjectRecordIdAttachmentsFileGet(context.Background(), objectName, objectRecordId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService VobjectsObjectNameObjectRecordIdAttachmentsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectName string
		var objectRecordId string

		httpRes, err := apiClient.DefaultAPI.VobjectsObjectNameObjectRecordIdAttachmentsGet(context.Background(), objectName, objectRecordId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService VobjectsObjectNameObjectRecordIdAttachmentsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectName string
		var objectRecordId string

		httpRes, err := apiClient.DefaultAPI.VobjectsObjectNameObjectRecordIdAttachmentsPost(context.Background(), objectName, objectRecordId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService VobjectsObjectNameObjectRecordIdAudittrailGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectName string
		var objectRecordId string

		httpRes, err := apiClient.DefaultAPI.VobjectsObjectNameObjectRecordIdAudittrailGet(context.Background(), objectName, objectRecordId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService VobjectsObjectNameObjectRecordIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectName string
		var objectRecordId string

		httpRes, err := apiClient.DefaultAPI.VobjectsObjectNameObjectRecordIdGet(context.Background(), objectName, objectRecordId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService VobjectsObjectNamePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectName string

		httpRes, err := apiClient.DefaultAPI.VobjectsObjectNamePost(context.Background(), objectName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService VobjectsObjectNamePut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectName string

		httpRes, err := apiClient.DefaultAPI.VobjectsObjectNamePut(context.Background(), objectName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService VobjectsObjectNameRolesDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectName string

		httpRes, err := apiClient.DefaultAPI.VobjectsObjectNameRolesDelete(context.Background(), objectName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService VobjectsObjectNameRolesPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectName string

		httpRes, err := apiClient.DefaultAPI.VobjectsObjectNameRolesPost(context.Background(), objectName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService VobjectsOutboundPackageVPackageIdDependenciesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var packageId string

		httpRes, err := apiClient.DefaultAPI.VobjectsOutboundPackageVPackageIdDependenciesGet(context.Background(), packageId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
